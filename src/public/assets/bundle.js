var bundle =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(298);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(2);
	
	__webpack_require__(293);
	
	__webpack_require__(295);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(57);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(70);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(85);
	__webpack_require__(87);
	__webpack_require__(89);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(187);
	__webpack_require__(189);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(211);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(218);
	__webpack_require__(221);
	__webpack_require__(222);
	__webpack_require__(224);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(269);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(278);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(281);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(286);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(291);
	__webpack_require__(292);
	module.exports = __webpack_require__(9);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(4)
	  , has            = __webpack_require__(5)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , META           = __webpack_require__(22).KEY
	  , $fails         = __webpack_require__(7)
	  , shared         = __webpack_require__(23)
	  , setToStringTag = __webpack_require__(24)
	  , uid            = __webpack_require__(19)
	  , wks            = __webpack_require__(25)
	  , wksExt         = __webpack_require__(26)
	  , wksDefine      = __webpack_require__(27)
	  , keyOf          = __webpack_require__(29)
	  , enumKeys       = __webpack_require__(42)
	  , isArray        = __webpack_require__(45)
	  , anObject       = __webpack_require__(12)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , createDesc     = __webpack_require__(17)
	  , _create        = __webpack_require__(46)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(51)
	  , $DP            = __webpack_require__(11)
	  , $keys          = __webpack_require__(30)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f  = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(28)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 4 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , core      = __webpack_require__(9)
	  , hide      = __webpack_require__(10)
	  , redefine  = __webpack_require__(18)
	  , ctx       = __webpack_require__(20)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 9 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11)
	  , createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(12)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , toPrimitive    = __webpack_require__(16)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function(){
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , document = __webpack_require__(4).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , hide      = __webpack_require__(10)
	  , has       = __webpack_require__(5)
	  , SRC       = __webpack_require__(19)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(19)('meta')
	  , isObject = __webpack_require__(13)
	  , has      = __webpack_require__(5)
	  , setDesc  = __webpack_require__(11).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f
	  , has = __webpack_require__(5)
	  , TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(23)('wks')
	  , uid        = __webpack_require__(19)
	  , Symbol     = __webpack_require__(4).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(4)
	  , core           = __webpack_require__(9)
	  , LIBRARY        = __webpack_require__(28)
	  , wksExt         = __webpack_require__(26)
	  , defineProperty = __webpack_require__(11).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(31)
	  , enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(5)
	  , toIObject    = __webpack_require__(32)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33)
	  , defined = __webpack_require__(35);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys')
	  , uid    = __webpack_require__(19);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30)
	  , gOPS    = __webpack_require__(43)
	  , pIE     = __webpack_require__(44);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(12)
	  , dPs         = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(41)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(11)
	  , anObject = __webpack_require__(12)
	  , getKeys  = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4).document && document.documentElement;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(31)
	  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(44)
	  , createDesc     = __webpack_require__(17)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , has            = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(46)});

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(11).f});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(47)});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(32)
	  , $getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	__webpack_require__(56)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(9)
	  , fails   = __webpack_require__(7);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(58)
	  , $getPrototypeOf = __webpack_require__(59);
	
	__webpack_require__(56)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(5)
	  , toObject    = __webpack_require__(58)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(58)
	  , $keys    = __webpack_require__(30);
	
	__webpack_require__(56)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(56)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(69)});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(30)
	  , gOPS     = __webpack_require__(43)
	  , pIE      = __webpack_require__(44)
	  , toObject = __webpack_require__(58)
	  , IObject  = __webpack_require__(33)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {is: __webpack_require__(71)});

/***/ },
/* 71 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(73).set});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13)
	  , anObject = __webpack_require__(12);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(75)
	  , test    = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(18)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34)
	  , TAG = __webpack_require__(25)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', {bind: __webpack_require__(77)});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(21)
	  , isObject   = __webpack_require__(13)
	  , invoke     = __webpack_require__(78)
	  , arraySlice = [].slice
	  , factories  = {};
	
	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 78 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11).f
	  , createDesc = __webpack_require__(17)
	  , has        = __webpack_require__(5)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';
	
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(13)
	  , getPrototypeOf = __webpack_require__(59)
	  , HAS_INSTANCE   = __webpack_require__(25)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(11).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt
	  , $trim     = __webpack_require__(83).trim
	  , ws        = __webpack_require__(84)
	  , hex       = /^[\-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , defined = __webpack_require__(35)
	  , fails   = __webpack_require__(7)
	  , spaces  = __webpack_require__(84)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');
	
	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat
	  , $trim       = __webpack_require__(83).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , has               = __webpack_require__(5)
	  , cof               = __webpack_require__(34)
	  , inheritIfRequired = __webpack_require__(88)
	  , toPrimitive       = __webpack_require__(16)
	  , fails             = __webpack_require__(7)
	  , gOPN              = __webpack_require__(50).f
	  , gOPD              = __webpack_require__(51).f
	  , dP                = __webpack_require__(11).f
	  , $trim             = __webpack_require__(83).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(46)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(13)
	  , setPrototypeOf = __webpack_require__(73).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , toInteger    = __webpack_require__(38)
	  , aNumberValue = __webpack_require__(90)
	  , repeat       = __webpack_require__(91)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';
	
	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	
	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $fails       = __webpack_require__(7)
	  , aNumberValue = __webpack_require__(90)
	  , $toPrecision = 1..toPrecision;
	
	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(8)
	  , _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {isInteger: __webpack_require__(96)});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(8)
	  , isInteger = __webpack_require__(96)
	  , abs       = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8)
	  , log1p   = __webpack_require__(104)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 104 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8)
	  , $asinh  = Math.asinh;
	
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8)
	  , $atanh  = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8)
	  , sign    = __webpack_require__(108);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 108 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8)
	  , $expm1  = __webpack_require__(112);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 112 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(8)
	  , sign      = __webpack_require__(108)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	
	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	
	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8)
	  , abs     = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8)
	  , $imul   = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {log1p: __webpack_require__(104)});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {sign: __webpack_require__(108)});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(8)
	  , toIndex        = __webpack_require__(39)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(83)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(127)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(28)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , hide           = __webpack_require__(10)
	  , has            = __webpack_require__(5)
	  , Iterators      = __webpack_require__(129)
	  , $iterCreate    = __webpack_require__(130)
	  , setToStringTag = __webpack_require__(24)
	  , getPrototypeOf = __webpack_require__(59)
	  , ITERATOR       = __webpack_require__(25)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(46)
	  , descriptor     = __webpack_require__(17)
	  , setToStringTag = __webpack_require__(24)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(8)
	  , toLength  = __webpack_require__(37)
	  , context   = __webpack_require__(133)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134)
	  , defined  = __webpack_require__(35);
	
	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13)
	  , cof      = __webpack_require__(34)
	  , MATCH    = __webpack_require__(25)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(8)
	  , context  = __webpack_require__(133)
	  , INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(91)
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(8)
	  , toLength    = __webpack_require__(37)
	  , context     = __webpack_require__(133)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(140)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , defined = __webpack_require__(35)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(140)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(140)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(140)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(140)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(140)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(140)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(140)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(140)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(140)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(140)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(140)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(140)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(8)
	  , toObject    = __webpack_require__(58)
	  , toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , getTime = Date.prototype.getTime;
	
	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(18)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive')
	  , proto        = Date.prototype;
	
	if(!(TO_PRIMITIVE in proto))__webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(158));

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16)
	  , NUMBER      = 'number';
	
	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', {isArray: __webpack_require__(45)});

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(20)
	  , $export        = __webpack_require__(8)
	  , toObject       = __webpack_require__(58)
	  , call           = __webpack_require__(161)
	  , isArrayIter    = __webpack_require__(162)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(163)
	  , getIterFn      = __webpack_require__(164);
	
	$export($export.S + $export.F * !__webpack_require__(165)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(129)
	  , ITERATOR   = __webpack_require__(25)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11)
	  , createDesc      = __webpack_require__(17);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(75)
	  , ITERATOR  = __webpack_require__(25)('iterator')
	  , Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(25)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(8)
	  , createProperty = __webpack_require__(163);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(168)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(7);
	
	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(8)
	  , html       = __webpack_require__(48)
	  , cof        = __webpack_require__(34)
	  , toIndex    = __webpack_require__(39)
	  , toLength   = __webpack_require__(37)
	  , arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , fails     = __webpack_require__(7)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(168)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(8)
	  , $forEach = __webpack_require__(172)(0)
	  , STRICT   = __webpack_require__(168)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(20)
	  , IObject  = __webpack_require__(33)
	  , toObject = __webpack_require__(58)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(173);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(174);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , isArray  = __webpack_require__(45)
	  , SPECIES  = __webpack_require__(25)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $map    = __webpack_require__(172)(1);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $filter = __webpack_require__(172)(2);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $some   = __webpack_require__(172)(3);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $every  = __webpack_require__(172)(4);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , IObject   = __webpack_require__(33)
	  , toLength  = __webpack_require__(37);
	
	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , $indexOf      = __webpack_require__(36)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , toIObject     = __webpack_require__(32)
	  , toInteger     = __webpack_require__(38)
	  , toLength      = __webpack_require__(37)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {copyWithin: __webpack_require__(185)});
	
	__webpack_require__(186)('copyWithin');

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {fill: __webpack_require__(188)});
	
	__webpack_require__(186)('fill');

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(192)('Array');

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(4)
	  , dP          = __webpack_require__(11)
	  , DESCRIPTORS = __webpack_require__(6)
	  , SPECIES     = __webpack_require__(25)('species');
	
	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(186)
	  , step             = __webpack_require__(194)
	  , Iterators        = __webpack_require__(129)
	  , toIObject        = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(4)
	  , inheritIfRequired = __webpack_require__(88)
	  , dP                = __webpack_require__(11).f
	  , gOPN              = __webpack_require__(50).f
	  , isRegExp          = __webpack_require__(134)
	  , $flags            = __webpack_require__(196)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;
	
	if(__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function(){
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(192)('RegExp');

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(198);
	var anObject    = __webpack_require__(12)
	  , $flags      = __webpack_require__(196)
	  , DESCRIPTORS = __webpack_require__(6)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];
	
	var define = function(fn){
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(7)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(6) && /./g.flags != 'g')__webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(196)
	});

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(200)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(10)
	  , redefine = __webpack_require__(18)
	  , fails    = __webpack_require__(7)
	  , defined  = __webpack_require__(35)
	  , wks      = __webpack_require__(25);
	
	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(200)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(200)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(200)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(134)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(28)
	  , global             = __webpack_require__(4)
	  , ctx                = __webpack_require__(20)
	  , classof            = __webpack_require__(75)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(13)
	  , aFunction          = __webpack_require__(21)
	  , anInstance         = __webpack_require__(205)
	  , forOf              = __webpack_require__(206)
	  , speciesConstructor = __webpack_require__(207)
	  , task               = __webpack_require__(208).set
	  , microtask          = __webpack_require__(209)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(210)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(192)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(165)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 205 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(20)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , anObject    = __webpack_require__(12)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(164)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(12)
	  , aFunction = __webpack_require__(21)
	  , SPECIES   = __webpack_require__(25)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(20)
	  , invoke             = __webpack_require__(78)
	  , html               = __webpack_require__(48)
	  , cel                = __webpack_require__(15)
	  , global             = __webpack_require__(4)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(34)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , macrotask = __webpack_require__(208).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(34)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(213)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(11).f
	  , create      = __webpack_require__(46)
	  , redefineAll = __webpack_require__(210)
	  , ctx         = __webpack_require__(20)
	  , anInstance  = __webpack_require__(205)
	  , defined     = __webpack_require__(35)
	  , forOf       = __webpack_require__(206)
	  , $iterDefine = __webpack_require__(128)
	  , step        = __webpack_require__(194)
	  , setSpecies  = __webpack_require__(192)
	  , DESCRIPTORS = __webpack_require__(6)
	  , fastKey     = __webpack_require__(22).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , $export           = __webpack_require__(8)
	  , redefine          = __webpack_require__(18)
	  , redefineAll       = __webpack_require__(210)
	  , meta              = __webpack_require__(22)
	  , forOf             = __webpack_require__(206)
	  , anInstance        = __webpack_require__(205)
	  , isObject          = __webpack_require__(13)
	  , fails             = __webpack_require__(7)
	  , $iterDetect       = __webpack_require__(165)
	  , setToStringTag    = __webpack_require__(24)
	  , inheritIfRequired = __webpack_require__(88);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(213)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(172)(0)
	  , redefine     = __webpack_require__(18)
	  , meta         = __webpack_require__(22)
	  , assign       = __webpack_require__(69)
	  , weak         = __webpack_require__(216)
	  , isObject     = __webpack_require__(13)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;
	
	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(213)('WeakMap', wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(210)
	  , getWeak           = __webpack_require__(22).getWeak
	  , anObject          = __webpack_require__(12)
	  , isObject          = __webpack_require__(13)
	  , anInstance        = __webpack_require__(205)
	  , forOf             = __webpack_require__(206)
	  , createArrayMethod = __webpack_require__(172)
	  , $has              = __webpack_require__(5)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(216);
	
	// 23.4 WeakSet Objects
	__webpack_require__(213)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $typed       = __webpack_require__(219)
	  , buffer       = __webpack_require__(220)
	  , anObject     = __webpack_require__(12)
	  , toIndex      = __webpack_require__(39)
	  , toLength     = __webpack_require__(37)
	  , isObject     = __webpack_require__(13)
	  , ArrayBuffer  = __webpack_require__(4).ArrayBuffer
	  , speciesConstructor = __webpack_require__(207)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(192)(ARRAY_BUFFER);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , hide   = __webpack_require__(10)
	  , uid    = __webpack_require__(19)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(4)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , LIBRARY        = __webpack_require__(28)
	  , $typed         = __webpack_require__(219)
	  , hide           = __webpack_require__(10)
	  , redefineAll    = __webpack_require__(210)
	  , fails          = __webpack_require__(7)
	  , anInstance     = __webpack_require__(205)
	  , toInteger      = __webpack_require__(38)
	  , toLength       = __webpack_require__(37)
	  , gOPN           = __webpack_require__(50).f
	  , dP             = __webpack_require__(11).f
	  , arrayFill      = __webpack_require__(188)
	  , setToStringTag = __webpack_require__(24)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};
	
	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};
	
	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};
	
	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};
	
	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};
	
	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(219).ABV, {
	  DataView: __webpack_require__(220).DataView
	});

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(6)){
	  var LIBRARY             = __webpack_require__(28)
	    , global              = __webpack_require__(4)
	    , fails               = __webpack_require__(7)
	    , $export             = __webpack_require__(8)
	    , $typed              = __webpack_require__(219)
	    , $buffer             = __webpack_require__(220)
	    , ctx                 = __webpack_require__(20)
	    , anInstance          = __webpack_require__(205)
	    , propertyDesc        = __webpack_require__(17)
	    , hide                = __webpack_require__(10)
	    , redefineAll         = __webpack_require__(210)
	    , toInteger           = __webpack_require__(38)
	    , toLength            = __webpack_require__(37)
	    , toIndex             = __webpack_require__(39)
	    , toPrimitive         = __webpack_require__(16)
	    , has                 = __webpack_require__(5)
	    , same                = __webpack_require__(71)
	    , classof             = __webpack_require__(75)
	    , isObject            = __webpack_require__(13)
	    , toObject            = __webpack_require__(58)
	    , isArrayIter         = __webpack_require__(162)
	    , create              = __webpack_require__(46)
	    , getPrototypeOf      = __webpack_require__(59)
	    , gOPN                = __webpack_require__(50).f
	    , getIterFn           = __webpack_require__(164)
	    , uid                 = __webpack_require__(19)
	    , wks                 = __webpack_require__(25)
	    , createArrayMethod   = __webpack_require__(172)
	    , createArrayIncludes = __webpack_require__(36)
	    , speciesConstructor  = __webpack_require__(207)
	    , ArrayIterators      = __webpack_require__(193)
	    , Iterators           = __webpack_require__(129)
	    , $iterDetect         = __webpack_require__(165)
	    , setSpecies          = __webpack_require__(192)
	    , arrayFill           = __webpack_require__(188)
	    , arrayCopyWithin     = __webpack_require__(185)
	    , $DP                 = __webpack_require__(11)
	    , $GOPD               = __webpack_require__(51)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });
	
	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };
	
	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };
	
	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };
	
	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });
	
	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });
	
	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });
	
	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});
	
	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});
	
	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , anObject  = __webpack_require__(12)
	  , rApply    = (__webpack_require__(4).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(8)
	  , create     = __webpack_require__(46)
	  , aFunction  = __webpack_require__(21)
	  , anObject   = __webpack_require__(12)
	  , isObject   = __webpack_require__(13)
	  , fails      = __webpack_require__(7)
	  , bind       = __webpack_require__(77)
	  , rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(11)
	  , $export     = __webpack_require__(8)
	  , anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(8)
	  , gOPD     = __webpack_require__(51).f
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(130)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , isObject       = __webpack_require__(13)
	  , anObject       = __webpack_require__(12);
	
	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(51)
	  , $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(8)
	  , getProto = __webpack_require__(59)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(8)
	  , anObject      = __webpack_require__(12)
	  , $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(243)});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(50)
	  , gOPS     = __webpack_require__(43)
	  , anObject = __webpack_require__(12)
	  , Reflect  = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(8)
	  , anObject           = __webpack_require__(12)
	  , $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(11)
	  , gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , createDesc     = __webpack_require__(17)
	  , anObject       = __webpack_require__(12)
	  , isObject       = __webpack_require__(13);
	
	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(8)
	  , setProto = __webpack_require__(73);
	
	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export   = __webpack_require__(8)
	  , $includes = __webpack_require__(36)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(186)('includes');

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);
	
	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37)
	  , repeat   = __webpack_require__(91)
	  , defined  = __webpack_require__(35);
	
	module.exports = function(that, maxLength, fillString, left){
	  var S            = String(defined(that))
	    , stringLength = S.length
	    , fillStr      = fillString === undefined ? ' ' : String(fillString)
	    , intMaxLength = toLength(maxLength);
	  if(intMaxLength <= stringLength || fillStr == '')return S;
	  var fillLen = intMaxLength - stringLength
	    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);
	
	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimLeft', function($trim){
	  return function trimLeft(){
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimRight', function($trim){
	  return function trimRight(){
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export     = __webpack_require__(8)
	  , defined     = __webpack_require__(35)
	  , toLength    = __webpack_require__(37)
	  , isRegExp    = __webpack_require__(134)
	  , getFlags    = __webpack_require__(196)
	  , RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function(regexp, string){
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(130)($RegExpStringIterator, 'RegExp String', function next(){
	  var match = this._r.exec(this._s);
	  return {value: match, done: match === null};
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp){
	    defined(this);
	    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
	    var S     = String(this)
	      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
	      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('asyncIterator');

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('observable');

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export        = __webpack_require__(8)
	  , ownKeys        = __webpack_require__(243)
	  , toIObject      = __webpack_require__(32)
	  , gOPD           = __webpack_require__(51)
	  , createProperty = __webpack_require__(163);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O       = toIObject(object)
	      , getDesc = gOPD.f
	      , keys    = ownKeys(O)
	      , result  = {}
	      , i       = 0
	      , key;
	    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
	    return result;
	  }
	});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8)
	  , $values = __webpack_require__(259)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32)
	  , isEnum    = __webpack_require__(44).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export  = __webpack_require__(8)
	  , $entries = __webpack_require__(259)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it){
	    return $entries(it);
	  }
	});

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter){
	    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(28)|| !__webpack_require__(7)(function(){
	  var K = Math.random();
	  // In FF throws only define methods
	  __defineSetter__.call(null, K, function(){ /* empty */});
	  delete __webpack_require__(4)[K];
	});

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter){
	    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.get;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.set;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(267)('Map')});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(75)
	  , from    = __webpack_require__(268);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(206);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(267)('Set')});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.S, 'System', {global: __webpack_require__(4)});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8)
	  , cof     = __webpack_require__(34);
	
	$export($export.S, 'Error', {
	  isError: function isError(it){
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >> 16
	      , v1 = $v >> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >>> 16
	      , v1 = $v >>> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(211)
	  , $export = __webpack_require__(8)
	  , shared  = __webpack_require__(23)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(215)));
	
	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;
	
	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(214)
	  , from                    = __webpack_require__(268)
	  , metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , getPrototypeOf          = __webpack_require__(59)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , aFunction                 = __webpack_require__(21)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export   = __webpack_require__(8)
	  , microtask = __webpack_require__(209)()
	  , process   = __webpack_require__(4).process
	  , isNode    = __webpack_require__(34)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn){
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export     = __webpack_require__(8)
	  , global      = __webpack_require__(4)
	  , core        = __webpack_require__(9)
	  , microtask   = __webpack_require__(209)()
	  , OBSERVABLE  = __webpack_require__(25)('observable')
	  , aFunction   = __webpack_require__(21)
	  , anObject    = __webpack_require__(12)
	  , anInstance  = __webpack_require__(205)
	  , redefineAll = __webpack_require__(210)
	  , hide        = __webpack_require__(10)
	  , forOf       = __webpack_require__(206)
	  , RETURN      = forOf.RETURN;
	
	var getMethod = function(fn){
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function(subscription){
	  var cleanup = subscription._c;
	  if(cleanup){
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function(subscription){
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function(subscription){
	  if(!subscriptionClosed(subscription)){
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function(observer, subscriber){
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup      = subscriber(observer)
	      , subscription = cleanup;
	    if(cleanup != null){
	      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch(e){
	    observer.error(e);
	    return;
	  } if(subscriptionClosed(this))cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe(){ closeSubscription(this); }
	});
	
	var SubscriptionObserver = function(subscription){
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if(m)return m.call(observer, value);
	      } catch(e){
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value){
	    var subscription = this._s;
	    if(subscriptionClosed(subscription))throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if(!m)throw value;
	      value = m.call(observer, value);
	    } catch(e){
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch(e){
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber){
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer){
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn){
	    var that = this;
	    return new (core.Promise || global.Promise)(function(resolve, reject){
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next : function(value){
	          try {
	            return fn(value);
	          } catch(e){
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x){
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if(method){
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function(observer){
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          try {
	            if(forOf(x, false, function(it){
	              observer.next(it);
	              if(done)return RETURN;
	            }) === RETURN)return;
	          } catch(e){
	            if(done)throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  },
	  of: function of(){
	    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          for(var i = 0; i < items.length; ++i){
	            observer.next(items[i]);
	            if(done)return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function(){ return this; });
	
	$export($export.G, {Observable: $Observable});
	
	__webpack_require__(192)('Observable');

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global     = __webpack_require__(4)
	  , $export    = __webpack_require__(8)
	  , invoke     = __webpack_require__(78)
	  , partial    = __webpack_require__(289)
	  , navigator  = global.navigator
	  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout:  wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path      = __webpack_require__(290)
	  , invoke    = __webpack_require__(78)
	  , aFunction = __webpack_require__(21);
	module.exports = function(/* ...pargs */){
	  var fn     = aFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that = this
	      , aLen = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !aLen)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(aLen > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4);

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , $task   = __webpack_require__(208);
	$export($export.G + $export.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(193)
	  , redefine      = __webpack_require__(18)
	  , global        = __webpack_require__(4)
	  , hide          = __webpack_require__(10)
	  , Iterators     = __webpack_require__(129)
	  , wks           = __webpack_require__(25)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };
	
	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(294)))

/***/ },
/* 294 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(296);
	module.exports = __webpack_require__(9).RegExp.escape;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8)
	  , $re     = __webpack_require__(297)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 297 */
/***/ function(module, exports) {

	module.exports = function(regExp, replace){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.bootstrap = bootstrap;
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(301);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _app = __webpack_require__(302);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _components = __webpack_require__(303);
	
	var _components2 = _interopRequireDefault(_components);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function bootstrap(config) {
	  var containerEl = document.querySelector(config.container);
	  _angular2.default.element(containerEl).html('<app></app>');
	
	  var app = _angular2.default.module('app', [_components2.default, _angularUiRouter2.default]).constant('config', config).component('app', _app2.default).config(function ($urlRouterProvider, $locationProvider) {
	    $locationProvider.html5Mode({ enabled: true, rewriteLinks: false });
	    $urlRouterProvider.otherwise('/');
	  }).name;
	
	  _angular2.default.bootstrap(document, [app]);
	}
	
	exports.default = bootstrap;

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(300);
	module.exports = angular;


/***/ },
/* 300 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.8
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';
	
	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */
	
	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;
	
	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;
	
	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;
	
	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }
	
	      return match;
	    });
	
	    message += '\nhttp://errors.angularjs.org/1.5.8/' +
	      (module ? module + '/' : '') + code;
	
	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }
	
	    return new ErrorConstructor(message);
	  };
	}
	
	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,
	
	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,
	
	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/
	
	////////////////////////////////////
	
	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */
	
	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
	
	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};
	
	
	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};
	
	
	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}
	
	
	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),
	
	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;
	
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;
	
	
	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {
	
	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;
	
	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;
	
	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;
	
	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item == 'function');
	
	}
	
	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */
	
	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}
	
	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}
	
	
	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}
	
	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}
	
	
	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}
	
	
	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;
	
	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];
	
	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }
	
	  setHashKey(dst, h);
	  return dst;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}
	
	
	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}
	
	
	
	function toInt(str) {
	  return parseInt(str, 10);
	}
	
	
	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}
	
	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];
	
	
	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };
	
	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };
	
	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];
	
	
	function valueFn(value) {return function valueRef() {return value;};}
	
	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}
	
	
	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;
	
	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}
	
	
	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}
	
	
	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}
	
	
	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}
	
	
	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}
	
	
	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}
	
	
	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}
	
	
	function isBoolean(value) {
	  return typeof value === 'boolean';
	}
	
	
	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}
	
	
	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}
	
	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}
	
	
	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};
	
	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};
	
	
	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // We are a direct element.
	    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.
	}
	
	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}
	
	
	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}
	
	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}
	
	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to `destination` an exception will be thrown.
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
	 *   and on `destination`) will be ignored.
	 * </div>
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	  <example module="copyExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate class="simple-form">
	          <label>Name: <input type="text" ng-model="user.name" /></label><br />
	          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
	          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
	                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
	          <button ng-click="reset()">RESET</button>
	          <button ng-click="update(user)">SAVE</button>
	        </form>
	        <pre>form = {{user | json}}</pre>
	        <pre>master = {{master | json}}</pre>
	      </div>
	    </file>
	    <file name="script.js">
	      // Module: copyExample
	      angular.
	        module('copyExample', []).
	        controller('ExampleController', ['$scope', function($scope) {
	          $scope.master = {};
	
	          $scope.reset = function() {
	            // Example with 1 argument
	            $scope.user = angular.copy($scope.master);
	          };
	
	          $scope.update = function(user) {
	            // Example with 2 arguments
	            angular.copy(user, $scope.master);
	          };
	
	          $scope.reset();
	        }]);
	    </file>
	  </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];
	
	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
	    }
	
	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }
	
	  return copyElement(source);
	
	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }
	
	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }
	
	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }
	
	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        "Can't copy! Making copies of Window or Scope instances is not supported.");
	    }
	
	    var needsRecurse = false;
	    var destination = copyType(source);
	
	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	
	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }
	
	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);
	
	      case '[object ArrayBuffer]':
	        //Support: IE10
	        if (!source.slice) {
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          return copied;
	        }
	        return source.slice(0);
	
	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());
	
	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;
	
	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }
	
	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">
	
	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">
	
	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.result;
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2 && t1 == 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) == o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() == o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}
	
	var csp = function() {
	  if (!isDefined(csp.rules)) {
	
	
	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));
	
	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }
	
	  return csp.rules;
	
	  function noUnsafeEval() {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};
	
	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }
	
	  return (jq.name_ = name);
	};
	
	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}
	
	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}
	
	
	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	    return fn;
	  }
	}
	
	
	function toJsonReplacer(key, value) {
	  var val = value;
	
	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }
	
	  return val;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}
	
	
	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}
	
	
	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}
	
	
	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}
	
	
	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }
	
	}
	
	
	/////////////////////////////////////////////////
	
	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component.
	  }
	}
	
	
	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}
	
	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}
	
	
	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}
	
	
	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}
	
	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];
	
	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}
	
	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};
	
	  // The element `element` has priority over any other element.
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	
	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;
	
	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);
	
	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      // Encode angle brackets to prevent input from being sanitized to empty string #8683.
	      throw ngMinErr(
	          'btstrpd',
	          "App already bootstrapped with this element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }
	
	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);
	
	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }
	
	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };
	
	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
	
	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }
	
	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }
	
	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };
	
	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}
	
	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}
	
	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}
	
	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;
	
	  if (bindJQueryFired) {
	    return;
	  }
	
	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`
	
	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });
	
	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, "events");
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }
	
	  angular.element = jqLite;
	
	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}
	
	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}
	
	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }
	
	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}
	
	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}
	
	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;
	
	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}
	
	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;
	
	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }
	
	  return blockNodes || nodes;
	}
	
	
	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}
	
	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
	
	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */
	
	function setupModuleLoader(window) {
	
	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');
	
	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }
	
	  var angular = ensure(window, 'angular', Object);
	
	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;
	
	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};
	
	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };
	
	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }
	
	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];
	
	        /** @type {!Array.<Function>} */
	        var configBlocks = [];
	
	        /** @type {!Array.<Function>} */
	        var runBlocks = [];
	
	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
	
	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,
	
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),
	
	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };
	
	        if (configFn) {
	          config(configFn);
	        }
	
	        return moduleInstance;
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method) {
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            invokeQueue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });
	
	}
	
	/* global shallowCopy: true */
	
	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];
	
	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};
	
	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }
	
	  return dst || src;
	}
	
	/* global toDebugString: true */
	
	function serializeObject(obj) {
	  var seen = [];
	
	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {
	
	      if (seen.indexOf(val) >= 0) return '...';
	
	      seen.push(val);
	    }
	    return val;
	  });
	}
	
	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}
	
	/* global angularModule: true,
	  version: true,
	
	  $CompileProvider,
	
	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,
	
	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $jsonpCallbacksProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/
	
	
	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.5.8',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 5,
	  dot: 8,
	  codeName: 'arbitrary-fallbacks'
	};
	
	
	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {$$counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });
	
	  angularModule = setupModuleLoader(window);
	
	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $jsonpCallbacks: $jsonpCallbacksProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/
	
	//////////////////////////////////
	//JQLite
	//////////////////////////////////
	
	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */
	
	JQLite.expando = 'ng339';
	
	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };
	
	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};
	
	function jqNextId() { return ++jqId; }
	
	
	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');
	
	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}
	
	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
	
	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],
	
	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};
	
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}
	
	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}
	
	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}
	
	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}
	
	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;
	
	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
	
	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }
	
	    nodes = concat(nodes, tmp.childNodes);
	
	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }
	
	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });
	
	  return fragment;
	}
	
	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;
	
	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }
	
	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }
	
	  return [];
	}
	
	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;
	
	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }
	
	  wrapper.appendChild(node);
	}
	
	
	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || function(arg) {
	  // jshint bitwise: false
	  return !!(this.compareDocumentPosition(arg) & 16);
	  // jshint bitwise: true
	};
	
	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }
	
	  var argIsString;
	
	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }
	
	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}
	
	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}
	
	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);
	
	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}
	
	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
	
	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;
	
	  if (!handle) return; //no listeners registered
	
	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {
	
	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        removeEventListenerFn(element, type, handle);
	        delete events[type];
	      }
	    };
	
	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}
	
	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];
	
	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }
	
	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}
	
	
	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];
	
	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }
	
	  return expandoStore;
	}
	
	
	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {
	
	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;
	
	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}
	
	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}
	
	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}
	
	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");
	
	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });
	
	    element.setAttribute('class', trim(existingClasses));
	  }
	}
	
	
	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
	
	  if (elements) {
	
	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;
	
	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}
	
	
	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}
	
	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];
	
	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }
	
	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}
	
	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}
	
	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}
	
	
	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}
	
	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;
	
	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }
	
	    // check if document is already loaded
	    if (window.document.readyState === 'complete') {
	      window.setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },
	
	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },
	
	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};
	
	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};
	
	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
	
	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}
	
	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}
	
	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});
	
	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,
	
	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },
	
	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },
	
	  controller: jqLiteController,
	
	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },
	
	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },
	
	  hasClass: jqLiteHasClass,
	
	  css: function(element, name, value) {
	    name = camelCase(name);
	
	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },
	
	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },
	
	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },
	
	  text: (function() {
	    getText.$dv = '';
	    return getText;
	
	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),
	
	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },
	
	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },
	
	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;
	
	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {
	
	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});
	
	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };
	
	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;
	
	    if (!eventFnsLength) return;
	
	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;
	
	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }
	
	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }
	
	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };
	
	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
	
	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }
	
	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };
	
	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}
	
	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}
	
	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}
	
	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,
	
	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
	
	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }
	
	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;
	
	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }
	
	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;
	
	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];
	
	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          addEventListenerFn(element, type, handle);
	        }
	      }
	
	      eventFns.push(fn);
	    };
	
	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },
	
	  off: jqLiteOff,
	
	  one: function(element, type, fn) {
	    element = jqLite(element);
	
	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },
	
	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },
	
	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },
	
	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },
	
	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;
	
	    node = new JQLite(node);
	
	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },
	
	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },
	
	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },
	
	  remove: jqLiteRemove,
	
	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },
	
	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);
	
	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },
	
	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,
	
	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },
	
	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },
	
	  next: function(element) {
	    return element.nextElementSibling;
	  },
	
	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },
	
	  clone: jqLiteClone,
	
	  triggerHandler: function(element, event, extraParameters) {
	
	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];
	
	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };
	
	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }
	
	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
	
	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;
	
	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };
	
	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});
	
	
	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}
	
	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;
	
	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }
	
	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }
	
	  return key;
	}
	
	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },
	
	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },
	
	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};
	
	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];
	
	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */
	
	
	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */
	
	var ARROW_ARG = /^([^\(]+?)=>/;
	var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');
	
	function stringifyFn(fn) {
	  // Support: Chrome 50-51 only
	  // Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
	  // (See https://github.com/angular/angular.js/issues/14487.)
	  // TODO (gkalpak): Remove workaround when Chrome v52 is released
	  return Function.prototype.toString.call(fn) + ' ';
	}
	
	function extractArgs(fn) {
	  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}
	
	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}
	
	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;
	
	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}
	
	///////////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */
	
	
	
	
	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance
	
	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */
	
	
	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;
	
	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });
	
	  return instanceInjector;
	
	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////
	
	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }
	
	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }
	
	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }
	
	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }
	
	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }
	
	  function value(name, val) { return factory(name, valueFn(val), false); }
	
	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }
	
	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;
	
	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }
	
	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);
	
	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);
	
	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }
	
	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }
	
	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////
	
	  function createInternalInjector(cache, factory) {
	
	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }
	
	
	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);
	
	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }
	
	    function isClass(func) {
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie <= 11) {
	        return false;
	      }
	      // Support: Edge 12-13 only
	      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
	      return typeof func === 'function'
	        && /^(?:class\b|constructor\()/.test(stringifyFn(func));
	    }
	
	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }
	
	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }
	
	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }
	
	
	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }
	
	
	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}
	
	createInjector.$$annotate = annotate;
	
	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {
	
	  var autoScrollingEnabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }
	
	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }
	
	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }
	
	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }
	
	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;
	
	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }
	
	    function getYOffset() {
	
	      var offset = scroll.yOffset;
	
	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }
	
	      return offset;
	    }
	
	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();
	
	        var offset = getYOffset();
	
	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }
	
	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;
	
	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);
	
	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);
	
	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);
	
	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }
	
	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;
	
	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }
	
	    return scroll;
	  }];
	}
	
	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';
	
	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}
	
	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}
	
	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }
	
	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}
	
	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}
	
	var $$CoreAnimateJsProvider = function() {
	  this.$get = noop;
	};
	
	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];
	
	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,
	
	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();
	
	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);
	
	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }
	
	        var runner = new $$AnimateRunner(); // jshint ignore:line
	
	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };
	
	
	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }
	
	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });
	
	          forEach(element, function(elm) {
	            toAdd    && jqLiteAddClass(elm, toAdd);
	            toRemove && jqLiteRemoveClass(elm, toRemove);
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }
	
	
	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};
	
	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);
	
	      if (classesAdded || classesRemoved) {
	
	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);
	
	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};
	
	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;
	
	  this.$$registeredAnimations = Object.create(null);
	
	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }
	
	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
	
	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };
	
	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }
	
	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,
	
	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,
	
	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;
	
	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];
	
	var $$AnimateAsyncRunFactoryProvider = function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];
	
	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }
	
	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        passed ? callback() : waitForTick(callback);
	      };
	    };
	  }];
	};
	
	var $$AnimateRunnerFactoryProvider = function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $document,   $timeout) {
	
	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;
	
	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;
	
	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }
	
	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };
	
	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });
	
	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };
	
	    function AnimateRunner(host) {
	      this.setHost(host);
	
	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };
	
	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        var doc = $document[0];
	
	        // the document may not be ready or attached
	        // to the module for some internal tests
	        if (doc && doc.hidden) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }
	
	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },
	
	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },
	
	      progress: noop,
	
	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              status === false ? reject() : resolve();
	            });
	          });
	        }
	        return this.promise;
	      },
	
	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },
	
	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },
	
	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },
	
	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },
	
	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },
	
	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },
	
	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },
	
	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },
	
	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };
	
	    return AnimateRunner;
	  }];
	};
	
	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {
	
	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }
	
	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }
	
	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }
	
	      /* jshint newcap: false */
	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };
	
	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }
	
	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};
	
	/* global stripHash: true */
	
	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};
	
	  self.isMock = false;
	
	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];
	
	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };
	
	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }
	
	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }
	
	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };
	
	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////
	
	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };
	
	  cacheState();
	  lastHistoryState = cachedState;
	
	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }
	
	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;
	
	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;
	
	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      if (pendingLocation) {
	        pendingLocation = url;
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,"'");
	    }
	  };
	
	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };
	
	  var urlChangeListeners = [],
	      urlChangeInit = false;
	
	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }
	
	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;
	
	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }
	
	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }
	
	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }
	
	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState
	
	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
	
	      urlChangeInit = true;
	    }
	
	    urlChangeListeners.push(callback);
	    return callback;
	  };
	
	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };
	
	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;
	
	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////
	
	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };
	
	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };
	
	
	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };
	
	}
	
	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}
	
	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
	
	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>
	
	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {
	
	  this.$get = function() {
	    var caches = {};
	
	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }
	
	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;
	
	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});
	
	            refresh(lruEntry);
	          }
	
	          if (!(key in data)) size++;
	          data[key] = value;
	
	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }
	
	          return value;
	        },
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            refresh(lruEntry);
	          }
	
	          return data[key];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);
	
	            delete lruHash[key];
	          }
	
	          if (!(key in data)) return;
	
	          delete data[key];
	          size--;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };
	
	
	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }
	
	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }
	
	
	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };
	
	
	    return cacheFactory;
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
	 * that defines the directive properties, or just the `postLink` function (all other properties will have
	 * the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 * ### Life-cycle hooks
	 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
	 * directive:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
	 *   changes. Any actions that you wish to take in response to the changes that you detect must be
	 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
	 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
	 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
	 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 * #### Comparison with Angular 2 life-cycle hooks
	 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
	 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
	 *
	 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
	 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
	 *   In Angular 2 you can only define hooks on the prototype of the Component class.
	 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
	 *   `ngDoCheck` in Angular 2
	 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
	 *   propagated throughout the application.
	 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
	 *   error or do nothing depending upon the state of `enableProdMode()`.
	 *
	 * #### Life-cycle hook examples
	 *
	 * This example shows how you can check for mutations to a Date object even though the identity of the object
	 * has not changed.
	 *
	 * <example name="doCheckDateExample" module="do-check-module">
	 *   <file name="app.js">
	 *     angular.module('do-check-module', [])
	 *       .component('app', {
	 *         template:
	 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
	 *           'Date: {{ $ctrl.date }}' +
	 *           '<test date="$ctrl.date"></test>',
	 *         controller: function() {
	 *           this.date = new Date();
	 *           this.month = this.date.getMonth();
	 *           this.updateDate = function() {
	 *             this.date.setMonth(this.month);
	 *           };
	 *         }
	 *       })
	 *       .component('test', {
	 *         bindings: { date: '<' },
	 *         template:
	 *           '<pre>{{ $ctrl.log | json }}</pre>',
	 *         controller: function() {
	 *           var previousValue;
	 *           this.log = [];
	 *           this.$doCheck = function() {
	 *             var currentValue = this.date && this.date.valueOf();
	 *             if (previousValue !== currentValue) {
	 *               this.log.push('doCheck: date mutated: ' + this.date);
	 *               previousValue = currentValue;
	 *             }
	 *           };
	 *         }
	 *       });
	 *   </file>
	 *   <file name="index.html">
	 *     <app></app>
	 *   </file>
	 * </example>
	 *
	 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
	 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
	 * arrays or objects can have a negative impact on your application performance)
	 *
	 * <example name="doCheckArrayExample" module="do-check-module">
	 *   <file name="index.html">
	 *     <div ng-init="items = []">
	 *       <button ng-click="items.push(items.length)">Add Item</button>
	 *       <button ng-click="items = []">Reset Items</button>
	 *       <pre>{{ items }}</pre>
	 *       <test items="items"></test>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *      angular.module('do-check-module', [])
	 *        .component('test', {
	 *          bindings: { items: '<' },
	 *          template:
	 *            '<pre>{{ $ctrl.log | json }}</pre>',
	 *          controller: function() {
	 *            this.log = [];
	 *
	 *            this.$doCheck = function() {
	 *              if (this.items_ref !== this.items) {
	 *                this.log.push('doCheck: items changed');
	 *                this.items_ref = this.items;
	 *              }
	 *              if (!angular.equals(this.items_clone, this.items)) {
	 *                this.log.push('doCheck: items mutated');
	 *                this.items_clone = angular.copy(this.items);
	 *              }
	 *            };
	 *          }
	 *        });
	 *   </file>
	 * </example>
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
	 * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
	 * definition: `controller: 'myCtrl as myAlias'`.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default translusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>
	
	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>
	
	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude` parameter of directive controllers,
	 *     see {@link ng.$compile#-controller- the controller section for details}.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);
	
	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>
	
	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */
	
	var $compileMinErr = minErr('$compile');
	
	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();
	
	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
	
	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();
	
	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;
	
	    var bindings = createMap();
	
	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);
	
	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }
	
	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });
	
	    return bindings;
	  }
	
	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }
	
	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }
	
	  function getDirectiveRequire(directive) {
	    var require = directive.require || (directive.controller && directive.name);
	
	    if (!isArray(require) && isObject(require)) {
	      forEach(require, function(value, key) {
	        var match = value.match(REQUIRE_PREFIX_REGEXP);
	        var name = value.substring(match[0].length);
	        if (!name) require[key] = match[0] + key;
	      });
	    }
	
	    return require;
	  }
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = getDirectiveRequire(directive);
	                directive.restrict = directive.restrict || 'EA';
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};
	
	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }
	
	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };
	
	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });
	
	      return ddo;
	    }
	
	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.
	
	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });
	
	    factory.$inject = ['$injector'];
	
	    return this.directive(name, factory);
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };
	
	
	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };
	
	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {
	
	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');
	
	
	
	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;
	
	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          var errors = [];
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            try {
	              onChangesQueue[i]();
	            } catch (e) {
	              errors.push(e);
	            }
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	          if (errors.length) {
	            throw errors;
	          }
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }
	
	
	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;
	
	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }
	
	      this.$$element = element;
	    }
	
	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }
	
	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },
	
	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.
	
	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;
	
	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }
	
	        this[key] = value;
	
	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }
	
	        nodeName = nodeName_(this.$$element);
	
	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
	          // sanitize img[srcset] values
	          var result = "";
	
	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
	
	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);
	
	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }
	
	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);
	
	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);
	
	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }
	
	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }
	
	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));
	
	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });
	
	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };
	
	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = "<span " + attrName + ">";
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }
	
	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }
	
	
	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' && endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
	
	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];
	
	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }
	
	      $element.data('$binding', bindings);
	    } : noop;
	
	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;
	
	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;
	
	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;
	
	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ';
	        if (comment) content += comment + ' ';
	      }
	      return window.document.createComment(content);
	    };
	
	    return compile;
	
	    //================================
	
	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	
	      var NOT_EMPTY = /\S+/;
	
	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      for (var i = 0, len = $compileNodes.length; i < len; i++) {
	        var domNode = $compileNodes[i];
	
	        if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
	          jqLiteWrapNode(domNode, $compileNodes[i] = window.document.createElement('span'));
	        }
	      }
	
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');
	
	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }
	
	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;
	
	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }
	
	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }
	
	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }
	
	        compile.$$addScopeInfo($linkNode, scope);
	
	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }
	
	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }
	
	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
	
	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();
	
	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);
	
	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;
	
	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }
	
	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);
	
	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }
	
	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }
	
	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;
	
	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;
	
	
	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);
	
	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }
	
	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];
	
	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }
	
	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
	
	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;
	
	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
	
	            } else {
	              childBoundTranscludeFn = null;
	            }
	
	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
	
	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }
	
	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
	
	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }
	
	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }
	
	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }
	
	      return boundTranscludeFn;
	    }
	
	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;
	
	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);
	
	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;
	
	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);
	
	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }
	
	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }
	
	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }
	
	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          if (msie === 11) {
	            // Workaround for #11781
	            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
	              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
	              node.parentNode.removeChild(node.nextSibling);
	            }
	          }
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
	          break;
	      }
	
	      directives.sort(byPriority);
	      return directives;
	    }
	
	    function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      // function created because of performance, try/catch disables
	      // the optimization of the whole function #14848
	      try {
	        var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	        if (match) {
	          var nName = directiveNormalize(match[1]);
	          if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	            attrs[nName] = trim(match[2]);
	          }
	        }
	      } catch (e) {
	        // turns out that under some circumstances IE9 throws errors when one attempts to read
	        // comment's node value.
	        // Just ignore it and continue. (Can't seem to reproduce in test case.)
	      }
	    }
	
	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }
	
	      return jqLite(nodes);
	    }
	
	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }
	
	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;
	
	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	
	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }
	
	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};
	
	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;
	
	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;
	
	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;
	
	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }
	
	        if (directiveValue = directive.scope) {
	
	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }
	
	          newScopeDirective = newScopeDirective || directive;
	        }
	
	        directiveName = directive.name;
	
	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;
	
	                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }
	
	                didScanForMultipleTransclusion = true;
	        }
	
	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }
	
	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;
	
	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }
	
	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);
	
	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041
	
	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;
	
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {
	
	            var slots = createMap();
	
	            $template = jqLite(jqLiteClone(compileNode)).contents();
	
	            if (isObject(directiveValue)) {
	
	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];
	
	              var slotMap = createMap();
	              var filledSlots = createMap();
	
	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;
	
	                slotMap[elementSelector] = slotName;
	
	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;
	
	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });
	
	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });
	
	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });
	
	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }
	
	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }
	
	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;
	
	          directiveValue = denormalizeTemplate(directiveValue);
	
	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }
	
	            replaceWith(jqCollection, $compileNode, compileNode);
	
	            var newTemplateAttrs = {$attr: {}};
	
	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
	
	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
	
	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }
	
	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          if (directive.replace) {
	            replaceDirective = directive;
	          }
	
	          /* jshint -W021 */
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	          /* jshint +W021 */
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            var context = directive.$$originalDirective || directive;
	            if (isFunction(linkFn)) {
	              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }
	
	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }
	
	      }
	
	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;
	
	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
	
	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;
	
	      ////////////////////
	
	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }
	
	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;
	
	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }
	
	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }
	
	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }
	
	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }
	
	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }
	
	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;
	
	          if (controller.identifier && bindings) {
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          } else {
	            controller.bindingInfo = {};
	          }
	
	          var controllerResult = controller();
	          if (controllerResult !== controller.instance) {
	            // If the controller constructor has a return value, overwrite the instance
	            // from setupControllers
	            controller.instance = controllerResult;
	            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	            controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }
	
	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });
	
	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            try {
	              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            try {
	              controllerInstance.$onInit();
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$doCheck)) {
	            controllerScope.$watch(function() { controllerInstance.$doCheck(); });
	            controllerInstance.$doCheck();
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });
	
	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
	
	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });
	
	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }
	
	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }
	
	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;
	
	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';
	
	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }
	
	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }
	
	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              "Controller '{0}', required by directive '{1}', can't be found!",
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }
	
	      return value || null;
	    }
	
	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };
	
	        var controller = directive.controller;
	        if (controller == '@') {
	          controller = attrs[directive.name];
	        }
	
	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
	
	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }
	
	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }
	
	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              if (!directive.$$bindings) {
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }
	
	
	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;
	
	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });
	
	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        // Check if we already set this attribute in the loop above.
	        // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	        // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	        // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
	          dst[key] = value;
	
	          if (key !== 'class' && key !== 'style') {
	            dstAttr[key] = srcAttr[key];
	          }
	        }
	      });
	    }
	
	
	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;
	
	      $compileNode.empty();
	
	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
	
	          content = denormalizeTemplate(content);
	
	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }
	
	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
	
	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }
	
	          directives.unshift(derivedSyncDirective);
	
	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
	
	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];
	
	            if (scope.$$destroyed) continue;
	
	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;
	
	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
	
	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        });
	
	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }
	
	
	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }
	
	    function assertNoDuplicate(what, previousDirective, directive, element) {
	
	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }
	
	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }
	
	
	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;
	
	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);
	
	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }
	
	
	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }
	
	
	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }
	
	
	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;
	
	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);
	
	      // no interpolation found -> ignore
	      if (!interpolateFn) return;
	
	
	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }
	
	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));
	
	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }
	
	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }
	
	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;
	
	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);
	
	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }
	
	
	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;
	
	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;
	
	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }
	
	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }
	
	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }
	
	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));
	
	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }
	
	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));
	
	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }
	
	
	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }
	
	
	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }
	
	
	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, <, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;
	
	        switch (mode) {
	
	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = void 0;
	            }
	            attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            break;
	
	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	
	            var initialValue = destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	
	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (oldValue === newValue) {
	                if (oldValue === initialValue) return;
	                oldValue = initialValue;
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, parentGet.literal);
	
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
	
	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;
	
	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });
	
	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }
	
	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }
	
	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}
	
	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };
	
	
	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}
	
	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */
	
	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */
	
	
	
	/**
	 * Closure compiler type information
	 */
	
	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);
	
	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}
	
	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;
	
	  if (i <= 1) {
	    return jqNodes;
	  }
	
	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}
	
	var $controllerMinErr = minErr('$controller');
	
	
	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };
	
	
	  this.$get = ['$injector', '$window', function($injector, $window) {
	
	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }
	
	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);
	
	        assertArgFn(expression, constructor, true);
	      }
	
	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);
	
	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }
	
	        var instantiate;
	        return instantiate = extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }
	
	      instance = $injector.instantiate(expression, locals, constructor);
	
	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }
	
	      return instance;
	    };
	
	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }
	
	      locals.$scope[identifier] = instance;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     }]);
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}
	
	var $$ForceReflowProvider = function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};
	
	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var $httpMinErr = minErr('$http');
	var $httpMinErrLegacyFn = function(method) {
	  return function() {
	    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
	  };
	};
	
	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}
	
	
	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */
	
	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });
	
	      return parts.join('&');
	    };
	  };
	}
	
	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');
	
	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}
	
	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();
	
	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }
	
	  return data;
	}
	
	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}
	
	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;
	
	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }
	
	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }
	
	  return parsed;
	}
	
	
	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;
	
	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);
	
	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }
	
	    return headersObj;
	  };
	}
	
	
	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }
	
	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });
	
	  return data;
	}
	
	
	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],
	
	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],
	
	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },
	
	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',
	
	    paramSerializer: '$httpParamSerializer'
	  };
	
	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };
	
	  var useLegacyPromise = true;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to true. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useLegacyPromiseExtensions = function(value) {
	    if (isDefined(value)) {
	      useLegacyPromise = !!value;
	      return this;
	    }
	    return useLegacyPromise;
	  };
	
	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];
	
	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {
	
	    var defaultCache = $cacheFactory('$http');
	
	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
	
	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];
	
	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });
	
	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish to override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory("$http")` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
	
	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });
	
	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });
	
	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {
	
	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }
	
	      if (!isString(requestConfig.url)) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
	      }
	
	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);
	
	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	          $injector.get(config.paramSerializer) : config.paramSerializer;
	
	      var requestInterceptors = [];
	      var responseInterceptors = [];
	      var promise = $q.when(config);
	
	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          requestInterceptors.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          responseInterceptors.push(interceptor.response, interceptor.responseError);
	        }
	      });
	
	      promise = chainInterceptors(promise, requestInterceptors);
	      promise = promise.then(serverRequest);
	      promise = chainInterceptors(promise, responseInterceptors);
	
	      if (useLegacyPromise) {
	        promise.success = function(fn) {
	          assertArgFn(fn, 'fn');
	
	          promise.then(function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	
	        promise.error = function(fn) {
	          assertArgFn(fn, 'fn');
	
	          promise.then(null, function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	      } else {
	        promise.success = $httpMinErrLegacyFn('success');
	        promise.error = $httpMinErrLegacyFn('error');
	      }
	
	      return promise;
	
	
	      function chainInterceptors(promise, interceptors) {
	        for (var i = 0, ii = interceptors.length; i < ii;) {
	          var thenFn = interceptors[i++];
	          var rejectFn = interceptors[i++];
	
	          promise = promise.then(thenFn, rejectFn);
	        }
	
	        interceptors.length = 0;
	
	        return promise;
	      }
	
	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};
	
	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });
	
	        return processedHeaders;
	      }
	
	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;
	
	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
	
	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);
	
	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }
	
	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }
	
	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	
	      function serverRequest(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
	
	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	              delete headers[header];
	            }
	          });
	        }
	
	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }
	
	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      }
	
	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }
	    }
	
	    $http.pendingRequests = [];
	
	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     * If you would like to customise where and how the callbacks are stored then try overriding
	     * or decorating the {@link $jsonpCallbacks} service.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');
	
	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');
	
	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;
	
	
	    return $http;
	
	
	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }
	
	
	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }
	
	
	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));
	
	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);
	
	
	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }
	
	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }
	
	
	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }
	
	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }
	
	      return promise;
	
	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }
	
	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }
	
	
	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }
	
	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }
	
	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }
	
	
	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;
	
	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }
	
	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }
	
	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }
	
	
	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $jsonpCallbacks
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function($browser, $jsonpCallbacks, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
	  }];
	}
	
	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();
	
	    if (lowercase(method) === 'jsonp') {
	      var callbackPath = callbacks.createCallback(url);
	      var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
	        // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
	        var response = (status === 200) && callbacks.getResponse(callbackPath);
	        completeRequest(callback, status, response, "", text);
	        callbacks.removeCallback(callbackPath);
	      });
	    } else {
	
	      var xhr = createXhr(method, url);
	
	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });
	
	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';
	
	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;
	
	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;
	
	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }
	
	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };
	
	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };
	
	      xhr.onerror = requestError;
	      xhr.onabort = requestError;
	
	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });
	
	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });
	
	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }
	
	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }
	
	      xhr.send(isUndefined(post) ? null : post);
	    }
	
	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }
	
	
	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }
	
	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;
	
	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };
	
	  function jsonpReq(url, callbackPath, done) {
	    url = url.replace('JSON_CALLBACK', callbackPath);
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;
	
	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";
	
	      if (event) {
	        if (event.type === "load" && !callbacks.wasCalled(callbackPath)) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }
	
	      if (done) {
	        done(status, text);
	      }
	    };
	
	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}
	
	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};
	
	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};
	
	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);
	
	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });
	
	
	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };
	
	
	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
	
	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }
	
	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }
	
	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }
	
	      return value;
	    }
	
	    //TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	    }
	
	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * #### Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }
	
	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];
	
	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }
	
	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }
	
	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };
	
	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };
	
	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);
	
	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }
	
	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }
	
	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }
	
	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };
	
	    return $interpolate;
	  }];
	}
	
	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;
	
	      count = isDefined(count) ? count : 0;
	
	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);
	
	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	
	      }, delay);
	
	      intervals[promise.$$intervalId] = deferred;
	
	      return promise;
	
	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };
	
	    return interval;
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $jsonpCallbacks
	 * @requires $window
	 * @description
	 * This service handles the lifecycle of callbacks to handle JSONP requests.
	 * Override this service if you wish to customise where the callbacks are stored and
	 * how they vary compared to the requested url.
	 */
	var $jsonpCallbacksProvider = function() {
	  this.$get = ['$window', function($window) {
	    var callbacks = $window.angular.callbacks;
	    var callbackMap = {};
	
	    function createCallback(callbackId) {
	      var callback = function(data) {
	        callback.data = data;
	        callback.called = true;
	      };
	      callback.id = callbackId;
	      return callback;
	    }
	
	    return {
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#createCallback
	       * @param {string} url the url of the JSONP request
	       * @returns {string} the callback path to send to the server as part of the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
	       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
	       */
	      createCallback: function(url) {
	        var callbackId = '_' + (callbacks.$$counter++).toString(36);
	        var callbackPath = 'angular.callbacks.' + callbackId;
	        var callback = createCallback(callbackId);
	        callbackMap[callbackPath] = callbacks[callbackId] = callback;
	        return callbackPath;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#wasCalled
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
	       * @description
	       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
	       * callback that was passed in the request.
	       */
	      wasCalled: function(callbackPath) {
	        return callbackMap[callbackPath].called;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#getResponse
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {*} the data received from the response via the registered callback
	       * @description
	       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
	       * in the JSONP response.
	       */
	      getResponse: function(callbackPath) {
	        return callbackMap[callbackPath].data;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#removeCallback
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
	       * completed or timed-out.
	       */
	      removeCallback: function(callbackPath) {
	        var callback = callbackMap[callbackPath];
	        delete callbacks[callback.id];
	        delete callbackMap[callbackPath];
	      }
	    };
	  }];
	};
	
	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
	
	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');
	
	
	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;
	
	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }
	
	  return segments.join('/');
	}
	
	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);
	
	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}
	
	
	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);
	
	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}
	
	function startsWith(haystack, needle) {
	  return haystack.lastIndexOf(needle, 0) === 0;
	}
	
	/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */
	function stripBaseUrl(base, url) {
	  if (startsWith(url, base)) {
	    return url.substr(base.length);
	  }
	}
	
	
	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}
	
	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}
	
	
	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}
	
	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}
	
	
	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = stripBaseUrl(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }
	
	    parseAppUrl(pathUrl, this);
	
	    if (!this.$$path) {
	      this.$$path = '/';
	    }
	
	    this.$$compose();
	  };
	
	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;
	
	    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
	
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
	    var withoutHashUrl;
	
	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {
	
	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }
	
	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }
	
	    parseAppUrl(withoutHashUrl, this);
	
	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
	
	    this.$$compose();
	
	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
	
	      var firstPathSegmentMatch;
	
	      //Get the relative path from the input URL.
	      if (startsWith(url, base)) {
	        url = url.replace(base, '');
	      }
	
	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }
	
	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };
	
	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	
	    var rewrittenUrl;
	    var appUrl;
	
	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };
	
	}
	
	
	var locationPrototype = {
	
	  /**
	   * Ensure absolute url is initialized.
	   * @private
	   */
	  $$absUrl:'',
	
	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,
	
	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,
	
	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),
	
	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }
	
	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');
	
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),
	
	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),
	
	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),
	
	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });
	
	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }
	
	    this.$$compose();
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};
	
	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);
	
	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }
	
	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;
	
	    return this;
	  };
	});
	
	
	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}
	
	
	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }
	
	    this[property] = preprocess(value);
	    this.$$compose();
	
	    return this;
	  };
	}
	
	
	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {
	
	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }
	
	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }
	
	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }
	
	      return this;
	    } else {
	      return html5Mode;
	    }
	  };
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;
	
	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);
	
	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);
	
	    $location.$$state = $browser.state();
	
	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
	
	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);
	
	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;
	
	        throw e;
	      }
	    }
	
	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then
	
	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
	
	      var elm = jqLite(event.target);
	
	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }
	
	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');
	
	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }
	
	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;
	
	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });
	
	
	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }
	
	    var initializing = true;
	
	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {
	
	      if (isUndefined(stripBaseUrl(appBaseNoFile, newUrl))) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }
	
	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;
	
	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;
	
	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;
	
	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });
	
	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);
	
	      if (initializing || urlOrStateChanged) {
	        initializing = false;
	
	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;
	
	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;
	
	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }
	
	      $location.$$replace = false;
	
	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });
	
	    return $location;
	
	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}
	
	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;
	
	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };
	
	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),
	
	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),
	
	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),
	
	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),
	
	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');
	
	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };
	
	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }
	
	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;
	
	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}
	
	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }
	
	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $parseMinErr = minErr('$parse');
	
	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security
	
	
	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}
	
	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}
	
	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}
	
	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;
	
	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}
	
	function ensureSafeAssignContext(obj, fullExpression) {
	  if (obj) {
	    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
	        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
	      throw $parseMinErr('isecaf',
	        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
	    }
	  }
	}
	
	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};
	
	
	/////////////////////////////////////////
	
	
	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};
	
	Lexer.prototype = {
	  constructor: Lexer,
	
	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];
	
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },
	
	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },
	
	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },
	
	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },
	
	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },
	
	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },
	
	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },
	
	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },
	
	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },
	
	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    /*jshint bitwise: false*/
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	    /*jshint bitwise: true*/
	  },
	
	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },
	
	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },
	
	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },
	
	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },
	
	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },
	
	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};
	
	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};
	
	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';
	
	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';
	
	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);
	
	    var value = this.program();
	
	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }
	
	    return value;
	  },
	
	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },
	
	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },
	
	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },
	
	  expression: function() {
	    return this.assignment();
	  },
	
	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },
	
	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },
	
	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },
	
	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },
	
	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },
	
	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },
	
	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },
	
	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },
	
	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },
	
	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }
	
	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },
	
	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};
	
	    while (this.expect(':')) {
	      args.push(this.expression());
	    }
	
	    return result;
	  },
	
	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.filterChain());
	      } while (this.expect(','));
	    }
	    return args;
	  },
	
	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },
	
	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },
	
	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');
	
	    return { type: AST.ArrayExpression, elements: elements };
	  },
	
	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	          property.computed = false;
	          this.consume(':');
	          property.value = this.expression();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	          property.computed = false;
	          if (this.peek(':')) {
	            this.consume(':');
	            property.value = this.expression();
	          } else {
	            property.value = property.key;
	          }
	        } else if (this.peek('[')) {
	          this.consume('[');
	          property.key = this.expression();
	          this.consume(']');
	          property.computed = true;
	          this.consume(':');
	          property.value = this.expression();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');
	
	    return {type: AST.ObjectExpression, properties: properties };
	  },
	
	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },
	
	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	
	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },
	
	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },
	
	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },
	
	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },
	
	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },
	
	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};
	
	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}
	
	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}
	
	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}
	
	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant && !property.computed;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}
	
	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}
	
	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}
	
	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}
	
	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}
	
	function isConstant(ast) {
	  return ast.constant;
	}
	
	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';
	
	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'getStringValue',
	        'ensureSafeAssignContext',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          getStringValue,
	          ensureSafeAssignContext,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  USE: 'use',
	
	  STRICT: 'strict',
	
	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },
	
	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },
	
	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },
	
	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },
	
	  body: function(section) {
	    return this.state[section].body.join('');
	  },
	
	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression, computed;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (create && create !== 1) {
	            self.addEnsureSafeAssignContext(left);
	          }
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          self.addEnsureSafeAssignContext(left.context);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      computed = false;
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          computed = true;
	        }
	      });
	      if (computed) {
	        intoId = intoId || this.nextId();
	        this.assign(intoId, '{}');
	        forEach(ast.properties, function(property) {
	          if (property.computed) {
	            left = self.nextId();
	            self.recurse(property.key, left);
	          } else {
	            left = property.key.type === AST.Identifier ?
	                       property.key.name :
	                       ('' + property.key.value);
	          }
	          right = self.nextId();
	          self.recurse(property.value, right);
	          self.assign(self.member(intoId, left, property.computed), right);
	        });
	      } else {
	        forEach(ast.properties, function(property) {
	          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
	            args.push(self.escape(
	                property.key.type === AST.Identifier ? property.key.name :
	                  ('' + property.key.value)) +
	                ':' + expr);
	          });
	        });
	        expression = '{' + args.join(',') + '}';
	        this.assign(intoId, expression);
	      }
	      recursionFn(intoId || expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn('l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },
	
	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },
	
	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },
	
	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },
	
	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },
	
	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },
	
	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },
	
	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },
	
	  not: function(expression) {
	    return '!(' + expression + ')';
	  },
	
	  notNull: function(expression) {
	    return expression + '!=null';
	  },
	
	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /[$_a-zA-Z][$_a-zA-Z0-9]*/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },
	
	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },
	
	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },
	
	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },
	
	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },
	
	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },
	
	  addEnsureSafeAssignContext: function(item) {
	    this.current().body.push(this.ensureSafeAssignContext(item), ';');
	  },
	
	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },
	
	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },
	
	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },
	
	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },
	
	  ensureSafeAssignContext: function(item) {
	    return 'ensureSafeAssignContext(' + item + ',text)';
	  },
	
	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },
	
	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },
	
	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,
	
	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },
	
	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';
	
	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },
	
	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },
	
	  current: function() {
	    return this.state[this.state.computing];
	  }
	};
	
	
	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        ensureSafeAssignContext(lhs.context);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          args.push({key: self.recurse(property.key),
	                     computed: true,
	                     value: self.recurse(property.value)
	          });
	        } else {
	          args.push({key: property.key.type === AST.Identifier ?
	                          property.key.name :
	                          ('' + property.key.value),
	                     computed: false,
	                     value: self.recurse(property.value)
	          });
	        }
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          if (args[i].computed) {
	            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
	          } else {
	            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	          }
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },
	
	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1) {
	          ensureSafeAssignContext(lhs);
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        ensureSafeAssignContext(lhs);
	        if (lhs && !(lhs[right])) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};
	
	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};
	
	Parser.prototype = {
	  constructor: Parser,
	
	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};
	
	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}
	
	var objectValueOf = Object.prototype.valueOf;
	
	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}
	
	///////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;
	
	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };
	
	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensivelly, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };
	
	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          expensiveChecks: false,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        },
	        $parseOptionsExpensive = {
	          csp: noUnsafeEval,
	          expensiveChecks: true,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    var runningChecksEnabled = false;
	
	    $parse.$$runningExpensiveChecks = function() {
	      return runningChecksEnabled;
	    };
	
	    return $parse;
	
	    function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;
	
	      expensiveChecks = expensiveChecks || runningChecksEnabled;
	
	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;
	
	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];
	
	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            if (expensiveChecks) {
	              parsedExpression = expensiveChecksInterceptor(parsedExpression);
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);
	
	        case 'function':
	          return addInterceptor(exp, interceptorFn);
	
	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }
	
	    function expensiveChecksInterceptor(fn) {
	      if (!fn) return fn;
	      expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
	      expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
	      expensiveCheckFn.constant = fn.constant;
	      expensiveCheckFn.literal = fn.literal;
	      for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
	        fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
	      }
	      expensiveCheckFn.inputs = fn.inputs;
	
	      return expensiveCheckFn;
	
	      function expensiveCheckFn(scope, locals, assign, inputs) {
	        var expensiveCheckOldValue = runningChecksEnabled;
	        runningChecksEnabled = true;
	        try {
	          return fn(scope, locals, assign, inputs);
	        } finally {
	          runningChecksEnabled = expensiveCheckOldValue;
	        }
	      }
	    }
	
	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {
	
	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }
	
	      if (typeof newValue === 'object') {
	
	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);
	
	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }
	
	        // fall-through to the primitive equality check
	      }
	
	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }
	
	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;
	
	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }
	
	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }
	
	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;
	
	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }
	
	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }
	
	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }
	
	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }
	
	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);
	
	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }
	
	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	    }
	
	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;
	
	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;
	
	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };
	
	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        useInputs = !parsedExpression.inputs;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }
	
	      return fn;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
	 *   arguments are optional.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {
	
	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}
	
	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}
	
	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);
	
	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    var d = new Deferred();
	    //Necessary to support unbound execution :/
	    d.resolve = simpleBind(d, d.resolve);
	    d.reject = simpleBind(d, d.reject);
	    d.notify = simpleBind(d, d.notify);
	    return d;
	  };
	
	  function Promise() {
	    this.$$state = { status: 0 };
	  }
	
	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Deferred();
	
	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);
	
	      return result.promise;
	    },
	
	    "catch": function(callback) {
	      return this.then(null, callback);
	    },
	
	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  });
	
	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }
	
	  function processQueue(state) {
	    var fn, deferred, pending;
	
	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }
	
	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }
	
	  function Deferred() {
	    this.promise = new Promise();
	  }
	
	  extend(Deferred.prototype, {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }
	
	    },
	
	    $$resolve: function(val) {
	      var then;
	      var that = this;
	      var done = false;
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        rejectPromise(e);
	        exceptionHandler(e);
	      }
	
	      function resolvePromise(val) {
	        if (done) return;
	        done = true;
	        that.$$resolve(val);
	      }
	      function rejectPromise(val) {
	        if (done) return;
	        done = true;
	        that.$$reject(val);
	      }
	    },
	
	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },
	
	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },
	
	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;
	
	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  });
	
	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };
	
	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };
	
	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	
	
	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;
	
	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */
	
	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};
	
	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });
	
	    if (counter === 0) {
	      deferred.resolve(results);
	    }
	
	    return deferred.promise;
	  }
	
	  /**
	   * @ngdoc method
	   * @name $q#race
	   * @kind function
	   *
	   * @description
	   * Returns a promise that resolves or rejects as soon as one of those promises
	   * resolves or rejects, with the value or reason from that promise.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
	   * resolves or rejects, with the value or reason from that promise.
	   */
	
	  function race(promises) {
	    var deferred = defer();
	
	    forEach(promises, function(promise) {
	      when(promise).then(deferred.resolve, deferred.reject);
	    });
	
	    return deferred.promise;
	  }
	
	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }
	
	    var deferred = new Deferred();
	
	    function resolveFn(value) {
	      deferred.resolve(value);
	    }
	
	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }
	
	    resolver(resolveFn, rejectFn);
	
	    return deferred.promise;
	  };
	
	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;
	
	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;
	  $Q.race = race;
	
	  return $Q;
	}
	
	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;
	
	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;
	
	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };
	
	    raf.supported = rafSupported;
	
	    return raf;
	  }];
	}
	
	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;
	
	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };
	
	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }
	
	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {
	
	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }
	
	    function cleanUpScope($scope) {
	
	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        $scope.$$childHead && cleanUpScope($scope.$$childHead);
	        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
	      }
	
	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
	
	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }
	
	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();
	
	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');
	
	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }
	
	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */
	
	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */
	
	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */
	
	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;
	
	        parent = parent || this;
	
	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }
	
	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);
	
	        return child;
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	
	
	
	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);
	
	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);
	
	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);
	
	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);
	
	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };
	
	        lastDirtyWatch = null;
	
	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }
	
	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);
	
	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;
	
	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }
	
	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }
	
	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });
	
	        function watchGroupAction() {
	          changeReactionScheduled = false;
	
	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }
	
	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;
	
	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });
	
	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();
	
	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);
	
	          $scope.names.pop();
	          $scope.$digest();
	
	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;
	
	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;
	
	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;
	
	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;
	
	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }
	
	            newLength = newValue.length;
	
	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];
	
	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];
	
	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }
	
	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }
	
	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }
	
	        return this.$watch(changeDetector, $watchCollectionAction);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;
	
	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();
	
	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }
	
	        lastDirtyWatch = null;
	
	        do { // "while dirty" loop
	          dirty = false;
	          current = target;
	
	          // It's safe for asyncQueuePosition to be a local variable here because this loop can't
	          // be reentered recursively. Calling $digest from a function passed to $applyAsync would
	          // lead to a '$digest already in progress' error.
	          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
	            try {
	              asyncTask = asyncQueue[asyncQueuePosition];
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }
	          asyncQueue.length = 0;
	
	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }
	
	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));
	
	          // `break traverseScopesLoop;` takes us to here
	
	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }
	
	        } while (dirty || asyncQueue.length);
	
	        clearPhase();
	
	        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	        while (postDigestQueuePosition < postDigestQueue.length) {
	          try {
	            postDigestQueue[postDigestQueuePosition++]();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	        postDigestQueue.length = postDigestQueuePosition = 0;
	      },
	
	
	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;
	
	        this.$broadcast('$destroy');
	        this.$$destroyed = true;
	
	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }
	
	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }
	
	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;
	
	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};
	
	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;
	
	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }
	
	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },
	
	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        expr = $parse(expr);
	        scheduleApplyAsync();
	
	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);
	
	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));
	
	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;
	
	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {
	
	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);
	
	        event.currentScope = null;
	
	        return event;
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };
	
	        if (!target.$$listenerCount[name]) return event;
	
	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;
	
	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	
	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	
	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }
	
	        event.currentScope = null;
	        return event;
	      }
	    };
	
	    var $rootScope = new Scope();
	
	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
	
	    var postDigestQueuePosition = 0;
	
	    return $rootScope;
	
	
	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }
	
	      $rootScope.$$phase = phase;
	    }
	
	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }
	
	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }
	
	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;
	
	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }
	
	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}
	
	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }
	
	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */
	
	
	// the implementation is in angular.bootstrap
	
	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };
	
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };
	
	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $sceMinErr = minErr('$sce');
	
	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};
	
	// Helper functions follow.
	
	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}
	
	
	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}
	
	
	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */
	
	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;
	
	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */
	
	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };
	
	  this.$get = ['$injector', function($injector) {
	
	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };
	
	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }
	
	
	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }
	
	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }
	
	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }
	
	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};
	
	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }
	
	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */
	
	/* jshint maxlen: false*/
	
	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */
	
	function $SceProvider() {
	  var enabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };
	
	
	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */
	
	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }
	
	    var sce = shallowCopy(SCE_CONTEXTS);
	
	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;
	
	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;
	
	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });
	
	    return sce;
	  }];
	}
	
	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
	        // the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
	        isChromePackagedApp = $window.chrome && $window.chrome.app && $window.chrome.app.runtime,
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;
	
	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix[0].toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }
	
	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }
	
	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));
	
	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }
	
	
	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904
	
	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;
	
	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }
	
	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}
	
	var $templateRequestMinErr = minErr('$compile');
	
	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {
	
	  var httpOptions;
	
	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {
	
	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;
	
	      // We consider the template cache holds only trusted templates, so
	      // there's no need to go through whitelisting again for keys that already
	      // are included in there. This also makes Angular accept any script
	      // directive, no matter its name. However, we still need to unwrap trusted
	      // types.
	      if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
	        tpl = $sce.getTrustedResourceUrl(tpl);
	      }
	
	      var transformResponse = $http.defaults && $http.defaults.transformResponse;
	
	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }
	
	      return $http.get(tpl, extend({
	          cache: $templateCache,
	          transformResponse: transformResponse
	        }, httpOptions))
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);
	
	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $templateRequestMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }
	
	    handleRequestFn.totalPendingRequests = 0;
	
	    return handleRequestFn;
	  }];
	}
	
	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {
	
	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};
	
	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };
	
	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };
	
	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };
	
	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };
	
	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };
	
	    return testability;
	  }];
	}
	
	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {
	
	    var deferreds = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }
	
	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;
	
	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	      }, delay);
	
	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;
	
	      return promise;
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };
	
	    return timeout;
	  }];
	}
	
	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement("a");
	var originUrl = urlResolve(window.location.href);
	
	
	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;
	
	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }
	
	  urlParsingNode.setAttribute('href', href);
	
	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}
	
	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}
	
	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}
	
	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';
	
	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }
	
	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';
	
	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};
	
	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}
	
	$$CookieReader.$inject = ['$document'];
	
	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}
	
	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */
	
	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */
	
	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>
	
	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';
	
	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;
	
	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];
	
	  ////////////////////////////////////////
	
	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */
	
	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}
	
	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
	 *     against any property of the object or its nested object properties. That's equivalent to the
	 *     simple substring match with a `string` as described above. The special property name can be
	 *     overwritten, using the `anyPropertyKey` parameter.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @param {string=} anyPropertyKey The special property name that matches against any property.
	 *     By default `$`.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>
	
	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };
	
	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });
	
	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	
	function filterFilter() {
	  return function(array, expression, comparator, anyPropertyKey) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }
	
	    anyPropertyKey = anyPropertyKey || '$';
	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;
	
	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }
	
	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}
	
	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && (anyPropertyKey in expression);
	  var predicateFn;
	
	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }
	
	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }
	
	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
	    }
	    return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	  };
	
	  return predicateFn;
	}
	
	function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);
	
	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
	    });
	  }
	
	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }
	
	          var matchAnyProperty = key === anyPropertyKey;
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}
	
	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}
	
	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';
	
	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }
	
	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }
	
	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}
	
	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });
	
	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {
	
	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}
	
	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;
	
	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }
	
	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }
	
	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) {/* jshint noempty: false */}
	
	  if (i == (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;
	
	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }
	
	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }
	
	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}
	
	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;
	
	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
	
	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];
	
	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));
	
	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }
	
	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }
	
	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
	
	
	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}
	
	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
	
	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';
	
	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;
	
	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);
	
	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
	
	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);
	
	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }
	
	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen, digits.length);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }
	
	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);
	
	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }
	
	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}
	
	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}
	
	
	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}
	
	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);
	
	    return formats[get][value];
	  };
	}
	
	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";
	
	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);
	
	  return paddedZone;
	}
	
	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}
	
	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}
	
	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);
	
	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
	
	      return padNumber(result, size);
	   };
	}
	
	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}
	
	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}
	
	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}
	
	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};
	
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;
	
	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {
	
	
	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;
	
	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }
	
	
	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;
	
	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }
	
	    if (isNumber(date)) {
	      date = new Date(date);
	    }
	
	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }
	
	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }
	
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });
	
	    return text;
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);
	
	
	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);
	
	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
	
	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });
	
	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });
	
	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;
	
	    if (isNumber(input)) input = input.toString();
	    if (!isArrayLike(input)) return input;
	
	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;
	
	    if (limit >= 0) {
	      return sliceFn(input, begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return sliceFn(input, limit, input.length);
	      } else {
	        return sliceFn(input, Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}
	
	function sliceFn(input, begin, end) {
	  if (isString(input)) return input.slice(begin, end);
	
	  return slice.call(input, begin, end);
	}
	
	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceeding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];
	
	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }
	
	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }
	
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder, compareFn) {
	
	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }
	
	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
	
	    var predicates = processPredicates(sortPredicate);
	
	    var descending = reverseOrder ? -1 : 1;
	
	    // Define the `compare()` function. Use a default comparator if none is specified.
	    var compare = isFunction(compareFn) ? compareFn : defaultCompare;
	
	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });
	
	    return array;
	
	    function getComparisonObject(value, index) {
	      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	      // This will be used to keep the sort stable when none of the input predicates can
	      // distinguish between two elements.
	      return {
	        value: value,
	        tieBreaker: {value: index, type: 'number', index: index},
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }
	
	    function doComparison(v1, v2) {
	      for (var i = 0, ii = predicates.length; i < ii; i++) {
	        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
	        if (result) {
	          return result * predicates[i].descending * descending;
	        }
	      }
	
	      return compare(v1.tieBreaker, v2.tieBreaker) * descending;
	    }
	  };
	
	  function processPredicates(sortPredicates) {
	    return sortPredicates.map(function(predicate) {
	      var descending = 1, get = identity;
	
	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return {get: get, descending: descending};
	    });
	  }
	
	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function objectValue(value) {
	    // If `valueOf` is a valid function use that
	    if (isFunction(value.valueOf)) {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }
	
	    return value;
	  }
	
	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'object') {
	      value = objectValue(value);
	    }
	    return {value: value, type: type, index: index};
	  }
	
	  function defaultCompare(v1, v2) {
	    var result = 0;
	    var type1 = v1.type;
	    var type2 = v2.type;
	
	    if (type1 === type2) {
	      var value1 = v1.value;
	      var value2 = v2.value;
	
	      if (type1 === 'string') {
	        // Compare strings case-insensitively
	        value1 = value1.toLowerCase();
	        value2 = value2.toLowerCase();
	      } else if (type1 === 'object') {
	        // For basic objects, use the position of the object
	        // in the collection instead of the value
	        if (isObject(value1)) value1 = v1.index;
	        if (isObject(value2)) value2 = v2.index;
	      }
	
	      if (value1 !== value2) {
	        result = value1 < value2 ? -1 : 1;
	      }
	    } else {
	      result = type1 < type2 ? -1 : 1;
	    }
	
	    return result;
	  }
	}
	
	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}
	
	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;
	
	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
	
	          element(by.id('link-3')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });
	
	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });
	
	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
	
	          element(by.id('link-6')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
	 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readonly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * <div class="alert alert-warning">
	 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
	 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
	 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
	 *   selected options.
	 * </div>
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * ## A note about browser compatibility
	 *
	 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
	 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
	 *
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */
	
	var ngAttributeAliasDirectives = {};
	
	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;
	
	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }
	
	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;
	
	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }
	
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});
	
	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }
	
	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});
	
	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;
	
	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }
	
	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }
	
	          attr.$set(name, value);
	
	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});
	
	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';
	
	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}
	
	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];
	
	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;
	  form.$$parentForm = nullFormCtrl;
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);
	
	    if (control.$name) {
	      form[control.$name] = control;
	    }
	
	    control.$$parentForm = form;
	  };
	
	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;
	
	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	
	    arrayRemove(controls, control);
	    control.$$parentForm = nullFormCtrl;
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    $animate: $animate
	  });
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    form.$$parentForm.$setDirty();
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    form.$$parentForm.$setSubmitted();
	  };
	}
	
	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */
	
	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
	
	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);
	
	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];
	
	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });
	
	                event.preventDefault();
	              };
	
	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	
	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }
	
	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);
	
	            var setter = nameAttr ? getSetter(controller.$name) : noop;
	
	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };
	
	    return formDirective;
	
	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};
	
	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);
	
	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/
	
	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	/* jshint maxlen:220 */
	var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
	/* jshint maxlen:200 */
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	
	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});
	
	var inputType = {
	
	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,
	
	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));
	
	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }
	
	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });
	
	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	
	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),
	
	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),
	
	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),
	
	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
	
	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),
	
	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));
	
	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            element.all(by.model('color.name')).get(0).click();
	
	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,
	
	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};
	
	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}
	
	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}
	
	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);
	
	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;
	
	    element.on('compositionstart', function() {
	      composing = true;
	    });
	
	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }
	
	  var timeout;
	
	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;
	
	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }
	
	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };
	
	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };
	
	    element.on('keydown', function(event) {
	      var key = event.keyCode;
	
	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;
	
	      deferListener(event, this, this.value);
	    });
	
	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }
	
	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);
	
	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }
	
	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}
	
	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }
	
	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;
	
	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }
	
	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }
	
	  return NaN;
	}
	
	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;
	
	    if (isDate(iso)) {
	      return iso;
	    }
	
	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);
	
	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }
	
	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }
	
	    return NaN;
	  };
	}
	
	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;
	
	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });
	
	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });
	
	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }
	
	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}
	
	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}
	
	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	
	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });
	
	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });
	
	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };
	
	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	
	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };
	
	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}
	
	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}
	
	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}
	
	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }
	
	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };
	
	  attr.$observe('value', ctrl.$render);
	}
	
	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}
	
	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
	
	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };
	
	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };
	
	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });
	
	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}
	
	
	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));
	
	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];
	
	
	
	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));
	
	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));
	
	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));
	
	         expect(salutationElem.getText()).toBe('Hello World!');
	
	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');
	
	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	
	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>
	
	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>
	
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
	        // Unwrap the value to compare the actual inner safe value, not the wrapper object.
	        return $sce.valueOf(val);
	      });
	      $compile.$$addBindingClass(tElement);
	
	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);
	
	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	          var value = ngBindHtmlGetter(scope);
	          element.html($sce.getTrustedHtml(value) || '');
	        });
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();
	
	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});
	
	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;
	
	        scope.$watch(attr[name], ngClassWatchAction, true);
	
	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });
	
	
	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }
	
	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }
	
	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }
	
	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }
	
	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }
	
	        function ngClassWatchAction(newVal) {
	          // jshint bitwise: false
	          if (selector === true || (scope.$index & 1) === selector) {
	          // jshint bitwise: true
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          if (isArray(newVal)) {
	            oldVal = newVal.map(function(v) { return shallowCopy(v); });
	          } else {
	            oldVal = shallowCopy(newVal);
	          }
	        }
	      }
	    };
	
	    function arrayDifference(tokens1, tokens2) {
	      var values = [];
	
	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }
	
	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}
	
	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
	 * attribute, when using the `ngClass` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));
	
	       it('should let you toggle the class', function() {
	
	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
	
	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);
	
	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });
	
	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });
	
	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });
	
	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>
	
	   ## Animations
	
	   The example below demonstrates how to perform animations using ngClass.
	
	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }
	
	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	
	         element(by.id('setbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);
	
	         element(by.id('clearbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>
	
	
	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);
	
	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);
	
	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);
	
	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>
	
	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>
	
	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;
	
	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));
	
	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }
	
	          function clearErrors() {
	            getAndClearSevereErrors();
	          }
	
	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }
	
	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }
	
	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });
	
	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }
	
	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });
	
	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });
	
	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */
	
	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc
	
	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};
	
	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);
	
	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
	
	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }
	
	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }
	
	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }
	
	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
	
	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .slide-animate {
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }
	
	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));
	
	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });
	
	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });
	
	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;
	
	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;
	
	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };
	
	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;
	
	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;
	
	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });
	
	              currentScope = newScope;
	              currentElement = clone;
	
	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];
	
	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }
	
	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];
	
	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;
	
	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;
	
	        var list = [];
	
	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }
	
	        return list;
	      };
	
	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }
	
	        return undefined;
	      });
	
	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};
	
	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/
	
	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';
	
	var ngModelMinErr = minErr('ngModel');
	
	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.
	
	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.
	
	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.
	
	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }
	
	      .ng-invalid {
	        border: 1px solid red;
	      }
	
	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model
	
	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };
	
	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize
	
	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';
	
	      expect(contentEditable.getText()).toEqual(content);
	
	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;
	
	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;
	
	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');
	
	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };
	
	  this.$$updateEmptyClasses = function(value) {
	    if (ctrl.$isEmpty(value)) {
	      $animate.removeClass($element, NOT_EMPTY_CLASS);
	      $animate.addClass($element, EMPTY_CLASS);
	    } else {
	      $animate.removeClass($element, EMPTY_CLASS);
	      $animate.addClass($element, NOT_EMPTY_CLASS);
	    }
	  };
	
	
	  var currentValidationRunId = 0;
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    $animate: $animate
	  });
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    ctrl.$$parentForm.$setDirty();
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as blur, you can have a situation where there is a period when
	   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode == 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *        empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                ng-keydown="setEmpty($event, 'value1')">
	   *         value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *        <p id="inputDescription2">With $rollbackViewValue():</p>
	   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                ng-keydown="setEmpty($event, 'value2', true)">
	   *         value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }
	
	        </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }
	
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;
	
	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;
	
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	
	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	
	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });
	
	  };
	
	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;
	
	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();
	
	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (isUndefined(parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }
	
	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }
	
	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }
	
	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }
	
	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {
	
	        doneCallback(allValid);
	      }
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;
	
	    $timeout.cancel(pendingDebounce);
	
	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$updateEmptyClasses(viewValue);
	    ctrl.$$lastCommittedViewValue = viewValue;
	
	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };
	
	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;
	
	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;
	
	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }
	
	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });
	
	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };
	
	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };
	
	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;
	
	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }
	
	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };
	
	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);
	
	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;
	
	      var formatters = ctrl.$formatters,
	          idx = formatters.length;
	
	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();
	
	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }
	
	    return modelValue;
	  });
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
	
	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm;
	
	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
	
	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);
	
	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });
	
	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }
	
	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;
	
	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];
	
	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
	
	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example
	
	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.
	
	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	        <pre>user.data = <span ng-bind="user.data"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'John', data: '' };
	
	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));
	
	      it('should allow custom events', function() {
	        input.sendKeys(' Doe');
	        input.click();
	        expect(model.getText()).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John Doe');
	      });
	
	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' Doe');
	        expect(input.getAttribute('value')).toEqual('John Doe');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John');
	      });
	    </file>
	  </example>
	
	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	
	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'Igor' };
	        }]);
	    </file>
	  </example>
	
	  This one shows how to bind to getter/setters:
	
	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (isDefined(this.$options.updateOn)) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};
	
	
	
	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      $animate = context.$animate;
	
	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
	
	  ctrl.$setValidity = setValidity;
	
	  function setValidity(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }
	
	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }
	
	    toggleValidationCss(validationErrorKey, combinedState);
	    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }
	
	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }
	
	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }
	
	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }
	
	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
	
	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}
	
	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });
	
	/* global jqLiteRemove */
	
	var ngOptionsMinErr = minErr('ngOptions');
	
	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>
	
	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>
	
	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>
	
	
	
	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */
	
	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100
	
	
	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {
	
	  function parseOptionsExpression(optionsExp, selectElement, scope) {
	
	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }
	
	    // Extract the parts from the ngOptions expression
	
	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];
	
	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);
	
	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };
	
	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);
	
	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };
	
	
	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }
	
	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;
	
	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }
	
	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];
	
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	
	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);
	
	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }
	
	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),
	
	      getOptions: function() {
	
	        var optionItems = [];
	        var selectValueMap = {};
	
	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);
	
	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }
	
	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }
	
	
	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');
	
	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
	
	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;
	
	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }
	
	      var providedEmptyOption = !!emptyOption;
	
	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');
	
	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();
	
	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };
	
	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };
	
	
	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };
	
	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };
	
	      // Update the controller methods for multiple selectable options
	      if (!multiple) {
	
	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);
	
	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always
	
	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();
	
	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }
	
	            option.element.setAttribute('selected', 'selected');
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };
	
	        selectCtrl.readValue = function readNgOptionsValue() {
	
	          var selectedOption = options.selectValueMap[selectElement.val()];
	
	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };
	
	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }
	
	      } else {
	
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };
	
	
	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });
	
	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option) option.element.selected = true;
	            });
	          }
	        };
	
	
	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];
	
	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });
	
	          return selections;
	        };
	
	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	
	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });
	
	        }
	      }
	
	
	      if (providedEmptyOption) {
	
	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();
	
	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);
	
	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }
	
	      selectElement.empty();
	
	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();
	
	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);
	
	      // ------------------------------------------------------------------ //
	
	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }
	
	
	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        if (option.value !== element.value) element.value = option.selectValue;
	      }
	
	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();
	
	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {
	
	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (isDefined(option.group)) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }
	
	        options = ngOptions.getOptions();
	
	        var groupElementMap = {};
	
	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	
	        options.items.forEach(function addOption(option) {
	          var groupElement;
	
	          if (isDefined(option.group)) {
	
	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];
	
	            if (!groupElement) {
	
	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);
	
	              // Update the label on the group element
	              // "null" is special cased because of Safari
	              groupElement.label = option.group === null ? 'null' : option.group;
	
	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }
	
	            addOptionElement(option, groupElement);
	
	          } else {
	
	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });
	
	        selectElement[0].appendChild(listFragment);
	
	        ngModelCtrl.$render();
	
	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }
	
	      }
	  }
	
	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>
	
	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>
	
	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));
	
	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('0');
	
	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('2');
	
	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('3');
	
	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('4');
	
	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;
	
	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;
	
	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
	
	      });
	
	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);
	
	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }
	
	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });
	
	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, ngRepeat will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have an identifier property, you should track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }
	
	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }
	
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }
	
	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }
	
	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));
	
	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });
	
	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);
	
	         element(by.model('q')).sendKeys('ma');
	
	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');
	
	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };
	
	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };
	
	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };
	
	
	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);
	
	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }
	
	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];
	
	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];
	
	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }
	
	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};
	
	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }
	
	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
	
	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }
	
	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();
	
	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;
	
	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }
	
	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }
	
	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);
	
	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }
	
	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }
	
	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];
	
	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element
	
	              nextNode = previousNode;
	
	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);
	
	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;
	
	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];
	
	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }
	
	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
	 * attribute, when using the `ngStyle` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));
	
	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});
	
	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>
	
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .animate-switch {
	        padding:10px;
	      }
	
	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }
	
	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));
	
	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',
	
	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];
	
	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };
	
	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;
	
	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }
	
	        selectedElements.length = 0;
	        selectedScopes.length = 0;
	
	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };
	
	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];
	
	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});
	
	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
	 * that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}">{{text}}</pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function(){
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = "https://google.com";
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'EAC',
	    terminal: true,
	    compile: function ngTranscludeCompile(tElement) {
	
	      // Remove and cache any original content to act as a fallback
	      var fallbackLinkFn = $compile(tElement.contents());
	      tElement.empty();
	
	      return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {
	
	        if (!$transclude) {
	          throw ngTranscludeMinErr('orphan',
	          'Illegal use of ngTransclude directive in the template! ' +
	          'No parent directive that requires a transclusion found. ' +
	          'Element: {0}',
	          startingTag($element));
	        }
	
	
	        // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
	        if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	          $attrs.ngTransclude = '';
	        }
	        var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
	
	        // If the slot is required and no transclusion content is provided then this call will throw an error
	        $transclude(ngTranscludeCloneAttachFn, null, slotName);
	
	        // If the slot is optional and no transclusion content is provided then use the fallback content
	        if (slotName && !$transclude.isSlotFilled(slotName)) {
	          useFallbackContent();
	        }
	
	        function ngTranscludeCloneAttachFn(clone, transcludedScope) {
	          if (clone.length) {
	            $element.append(clone);
	          } else {
	            useFallbackContent();
	            // There is nothing linked against the transcluded scope since no content was available,
	            // so it should be safe to clean up the generated scope.
	            transcludedScope.$destroy();
	          }
	        }
	
	        function useFallbackContent() {
	          // Since this is the fallback content rather than the transcluded content,
	          // we link against the scope of this directive rather than the transcluded scope
	          fallbackLinkFn($scope, function(clone) {
	            $element.append(clone);
	          });
	        }
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>
	
	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;
	
	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];
	
	var noopNgModelController = { $setViewValue: noop, $render: noop };
	
	function chromeHack(optionElement) {
	  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	  // Adding an <option selected="selected"> element to a <select required="required"> should
	  // automatically select the new element
	  if (optionElement[0].hasAttribute('selected')) {
	    optionElement[0].selected = true;
	  }
	}
	
	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', function($element, $scope) {
	
	  var self = this,
	      optionsMap = new HashMap();
	
	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;
	
	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };
	
	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });
	
	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };
	
	
	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };
	
	
	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };
	
	
	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;
	
	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    self.ngModelCtrl.$render();
	    chromeHack(element);
	  };
	
	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };
	
	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };
	
	
	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
	
	    if (interpolateValueFn) {
	      // The value attribute is interpolated
	      var oldVal;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }
	
	    optionElement.on('$destroy', function() {
	      self.removeOption(optionAttrs.value);
	      self.ngModelCtrl.$render();
	    });
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explicitly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {
	
	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };
	
	  function selectPreLink(scope, element, attr, ctrls) {
	
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;
	
	      var selectCtrl = ctrls[0];
	
	      selectCtrl.ngModelCtrl = ngModelCtrl;
	
	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });
	
	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {
	
	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };
	
	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };
	
	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });
	
	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };
	
	      }
	    }
	
	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;
	
	      var selectCtrl = ctrls[0];
	
	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};
	
	
	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        var interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        var interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }
	
	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup
	
	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];
	
	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});
	
	/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');
	
	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element
	
	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };
	
	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');
	
	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }
	
	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }
	
	        regexp = regex || undefined;
	        ctrl.$validate();
	      });
	
	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');
	
	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');
	
	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};
	
	if (window.angular.bootstrap) {
	  //AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}
	
	//try to bind to jquery now so that one can write jqLite(document).ready()
	//but we will rebind on bootstrap again.
	bindJQuery();
	
	publishExternalAPI(angular);
	
	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}
	
	function getVF(n, opt_precision) {
	  var v = opt_precision;
	
	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }
	
	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}
	
	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);
	
	  jqLite(window.document).ready(function() {
	    angularInit(window.document, bootstrap);
	  });
	
	})(window);
	
	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * State-based routing for AngularJS
	 * @version v1.0.0-beta.3
	 * @link https://ui-router.github.io
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(299));
		else if(typeof define === 'function' && define.amd)
			define("angular-ui-router", ["angular"], factory);
		else if(typeof exports === 'object')
			exports["angular-ui-router"] = factory(require("angular"));
		else
			root["angular-ui-router"] = factory(root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * Main entry point for angular 1.x build
		 * @module ng1
		 */
		/** for typedoc */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(1));
		__export(__webpack_require__(53));
		__export(__webpack_require__(55));
		__export(__webpack_require__(58));
		__webpack_require__(60);
		__webpack_require__(61);
		__webpack_require__(62);
		__webpack_require__(63);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = "ui.router";
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module common */ /** */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(2));
		__export(__webpack_require__(46));
		__export(__webpack_require__(47));
		__export(__webpack_require__(48));
		__export(__webpack_require__(49));
		__export(__webpack_require__(50));
		__export(__webpack_require__(51));
		__export(__webpack_require__(52));
		__export(__webpack_require__(44));
		var router_1 = __webpack_require__(25);
		exports.UIRouter = router_1.UIRouter;
	
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module common */ /** for typedoc */
		__export(__webpack_require__(3));
		__export(__webpack_require__(6));
		__export(__webpack_require__(7));
		__export(__webpack_require__(5));
		__export(__webpack_require__(4));
		__export(__webpack_require__(8));
		__export(__webpack_require__(9));
		__export(__webpack_require__(12));
	
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * Random utility functions used in the UI-Router code
		 *
		 * @preferred @module common
		 */ /** for typedoc */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var w = typeof window === 'undefined' ? {} : window;
		var angular = w.angular || {};
		exports.fromJson = angular.fromJson || JSON.parse.bind(JSON);
		exports.toJson = angular.toJson || JSON.stringify.bind(JSON);
		exports.copy = angular.copy || _copy;
		exports.forEach = angular.forEach || _forEach;
		exports.extend = angular.extend || _extend;
		exports.equals = angular.equals || _equals;
		exports.identity = function (x) { return x; };
		exports.noop = function () { return undefined; };
		/**
		 * Binds and copies functions onto an object
		 *
		 * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions
		 * on the 'to' object.
		 *
		 * This example creates an new class instance whose functions are prebound to the new'd object.
		 * @example
		 * ```
		 *
		 * class Foo {
		 *   constructor(data) {
		 *     // Binds all functions from Foo.prototype to 'this',
		 *     // then copies them to 'this'
		 *     bindFunctions(Foo.prototype, this, this);
		 *     this.data = data;
		 *   }
		 *
		 *   log() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * let myFoo = new Foo([1,2,3]);
		 * var logit = myFoo.log;
		 * logit(); // logs [1, 2, 3] from the myFoo 'this' instance
		 * ```
		 *
		 * This example creates a bound version of a service function, and copies it to another object
		 * @example
		 * ```
		 *
		 * var SomeService = {
		 *   this.data = [3, 4, 5];
		 *   this.log = function() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * // Constructor fn
		 * function OtherThing() {
		 *   // Binds all functions from SomeService to SomeService,
		 *   // then copies them to 'this'
		 *   bindFunctions(SomeService, this, SomeService);
		 * }
		 *
		 * let myOtherThing = new OtherThing();
		 * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'
		 * ```
		 *
		 * @param from The object which contains the functions to be bound
		 * @param to The object which will receive the bound functions
		 * @param bindTo The object which the functions will be bound to
		 * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)
		 */
		function bindFunctions(from, to, bindTo, fnNames) {
		    if (fnNames === void 0) { fnNames = Object.keys(from); }
		    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })
		        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });
		}
		exports.bindFunctions = bindFunctions;
		/**
		 * prototypal inheritance helper.
		 * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it
		 */
		exports.inherit = function (parent, extra) {
		    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);
		};
		/**
		 * Given an arguments object, converts the arguments at index idx and above to an array.
		 * This is similar to es6 rest parameters.
		 *
		 * Optionally, the argument at index idx may itself already be an array.
		 *
		 * For example,
		 * given either:
		 *        arguments = [ obj, "foo", "bar" ]
		 * or:
		 *        arguments = [ obj, ["foo", "bar"] ]
		 * then:
		 *        restArgs(arguments, 1) == ["foo", "bar"]
		 *
		 * This allows functions like pick() to be implemented such that it allows either a bunch
		 * of string arguments (like es6 rest parameters), or a single array of strings:
		 *
		 * given:
		 *        var obj = { foo: 1, bar: 2, baz: 3 };
		 * then:
		 *        pick(obj, "foo", "bar");   // returns { foo: 1, bar: 2 }
		 *        pick(obj, ["foo", "bar"]); // returns { foo: 1, bar: 2 }
		 */
		var restArgs = function (args, idx) {
		    if (idx === void 0) { idx = 0; }
		    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));
		};
		/** Given an array, returns true if the object is found in the array, (using indexOf) */
		exports.inArray = function (array, obj) {
		    return array.indexOf(obj) !== -1;
		};
		/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */
		exports.removeFrom = hof_1.curry(function (array, obj) {
		    var idx = array.indexOf(obj);
		    if (idx >= 0)
		        array.splice(idx, 1);
		    return array;
		});
		/**
		 * Applies a set of defaults to an options object.  The options object is filtered
		 * to only those properties of the objects in the defaultsList.
		 * Earlier objects in the defaultsList take precedence when applying defaults.
		 */
		function defaults(opts) {
		    if (opts === void 0) { opts = {}; }
		    var defaultsList = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        defaultsList[_i - 1] = arguments[_i];
		    }
		    var defaults = merge.apply(null, [{}].concat(defaultsList));
		    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));
		}
		exports.defaults = defaults;
		/**
		 * Merges properties from the list of objects to the destination object.
		 * If a property already exists in the destination object, then it is not overwritten.
		 */
		function merge(dst) {
		    var objs = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        objs[_i - 1] = arguments[_i];
		    }
		    exports.forEach(objs, function (obj) {
		        exports.forEach(obj, function (value, key) {
		            if (!dst.hasOwnProperty(key))
		                dst[key] = value;
		        });
		    });
		    return dst;
		}
		exports.merge = merge;
		/** Reduce function that merges each element of the list into a single object, using extend */
		exports.mergeR = function (memo, item) { return exports.extend(memo, item); };
		/**
		 * Finds the common ancestor path between two states.
		 *
		 * @param {Object} first The first state.
		 * @param {Object} second The second state.
		 * @return {Array} Returns an array of state names in descending order, not including the root.
		 */
		function ancestors(first, second) {
		    var path = [];
		    for (var n in first.path) {
		        if (first.path[n] !== second.path[n])
		            break;
		        path.push(first.path[n]);
		    }
		    return path;
		}
		exports.ancestors = ancestors;
		/**
		 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
		 *
		 * @param {Object} a The first object.
		 * @param {Object} b The second object.
		 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
		 *                     it defaults to the list of keys in `a`.
		 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
		 */
		function equalForKeys(a, b, keys) {
		    if (keys === void 0) { keys = Object.keys(a); }
		    for (var i = 0; i < keys.length; i++) {
		        var k = keys[i];
		        if (a[k] != b[k])
		            return false; // Not '===', values aren't necessarily normalized
		    }
		    return true;
		}
		exports.equalForKeys = equalForKeys;
		function pickOmitImpl(predicate, obj) {
		    var keys = [];
		    for (var _i = 2; _i < arguments.length; _i++) {
		        keys[_i - 2] = arguments[_i];
		    }
		    var objCopy = {};
		    for (var key in obj) {
		        if (predicate(keys, key))
		            objCopy[key] = obj[key];
		    }
		    return objCopy;
		}
		/** Return a copy of the object only containing the whitelisted properties. */
		function pick(obj) {
		    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));
		}
		exports.pick = pick;
		/** Return a copy of the object omitting the blacklisted properties. */
		function omit(obj) {
		    var notInArray = function (array, item) { return !exports.inArray(array, item); };
		    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));
		}
		exports.omit = omit;
		/**
		 * Maps an array, or object to a property (by name)
		 */
		function pluck(collection, propName) {
		    return map(collection, hof_1.prop(propName));
		}
		exports.pluck = pluck;
		/** Filters an Array or an Object's properties based on a predicate */
		function filter(collection, callback) {
		    var arr = predicates_1.isArray(collection), result = arr ? [] : {};
		    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };
		    exports.forEach(collection, function (item, i) {
		        if (callback(item, i))
		            accept(item, i);
		    });
		    return result;
		}
		exports.filter = filter;
		/** Finds an object from an array, or a property of an object, that matches a predicate */
		function find(collection, callback) {
		    var result;
		    exports.forEach(collection, function (item, i) {
		        if (result)
		            return;
		        if (callback(item, i))
		            result = item;
		    });
		    return result;
		}
		exports.find = find;
		/** Given an object, returns a new object, where each property is transformed by the callback function */
		exports.mapObj = map;
		/** Maps an array or object properties using a callback function */
		function map(collection, callback) {
		    var result = predicates_1.isArray(collection) ? [] : {};
		    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });
		    return result;
		}
		exports.map = map;
		/**
		 * Given an object, return its enumerable property values
		 *
		 * @example
		 * ```
		 *
		 * let foo = { a: 1, b: 2, c: 3 }
		 * let vals = values(foo); // [ 1, 2, 3 ]
		 * ```
		 */
		exports.values = function (obj) {
		    return Object.keys(obj).map(function (key) { return obj[key]; });
		};
		/**
		 * Reduce function that returns true if all of the values are truthy.
		 *
		 * @example
		 * ```
		 *
		 * let vals = [ 1, true, {}, "hello world"];
		 * vals.reduce(allTrueR, true); // true
		 *
		 * vals.push(0);
		 * vals.reduce(allTrueR, true); // false
		 * ```
		 */
		exports.allTrueR = function (memo, elem) { return memo && elem; };
		/**
		 * Reduce function that returns true if any of the values are truthy.
		 *
		 *  * @example
		 * ```
		 *
		 * let vals = [ 0, null, undefined ];
		 * vals.reduce(anyTrueR, true); // false
		 *
		 * vals.push("hello world");
		 * vals.reduce(anyTrueR, true); // true
		 * ```
		 */
		exports.anyTrueR = function (memo, elem) { return memo || elem; };
		/**
		 * Reduce function which un-nests a single level of arrays
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnestR = function (memo, elem) { return memo.concat(elem); };
		/**
		 * Reduce function which recursively un-nests all arrays
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flattenR = function (memo, elem) {
		    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);
		};
		/**
		 * Reduce function that pushes an object to an array, then returns the array.
		 * Mostly just for [[flattenR]] and [[uniqR]]
		 */
		function pushR(arr, obj) {
		    arr.push(obj);
		    return arr;
		}
		exports.pushR = pushR;
		/** Reduce function that filters out duplicates */
		exports.uniqR = function (acc, token) {
		    return exports.inArray(acc, token) ? acc : pushR(acc, token);
		};
		/**
		 * Return a new array with a single level of arrays unnested.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };
		/**
		 * Return a completely flattened version of an array.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };
		/**
		 * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.
		 * @example
		 * ```
		 *
		 * let isNumber = (obj) => typeof(obj) === 'number';
		 * let allNumbers = [ 1, 2, 3, 4, 5 ];
		 * allNumbers.filter(assertPredicate(isNumber)); //OK
		 *
		 * let oneString = [ 1, 2, 3, 4, "5" ];
		 * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");
		 * ```
		 */
		function assertPredicate(predicate, errMsg) {
		    if (errMsg === void 0) { errMsg = "assert failure"; }
		    return function (obj) {
		        if (!predicate(obj)) {
		            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);
		        }
		        return true;
		    };
		}
		exports.assertPredicate = assertPredicate;
		/**
		 * Like _.pairs: Given an object, returns an array of key/value pairs
		 *
		 * @example
		 * ```
		 *
		 * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]
		 * ```
		 */
		exports.pairs = function (obj) {
		    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
		};
		/**
		 * Given two or more parallel arrays, returns an array of tuples where
		 * each tuple is composed of [ a[i], b[i], ... z[i] ]
		 *
		 * @example
		 * ```
		 *
		 * let foo = [ 0, 2, 4, 6 ];
		 * let bar = [ 1, 3, 5, 7 ];
		 * let baz = [ 10, 30, 50, 70 ];
		 * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]
		 * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]
		 * ```
		 */
		function arrayTuples() {
		    var arrayArgs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        arrayArgs[_i - 0] = arguments[_i];
		    }
		    if (arrayArgs.length === 0)
		        return [];
		    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER
		    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });
		}
		exports.arrayTuples = arrayTuples;
		/**
		 * Reduce function which builds an object from an array of [key, value] pairs.
		 *
		 * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.
		 *
		 * Each keyValueTuple should be an array with values [ key: string, value: any ]
		 *
		 * @example
		 * ```
		 *
		 * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]
		 *
		 * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 *
		 * // Or, more simply:
		 * var pairsToObj = pairs.reduce(applyPairs, {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 * ```
		 */
		function applyPairs(memo, keyValTuple) {
		    var key, value;
		    if (predicates_1.isArray(keyValTuple))
		        key = keyValTuple[0], value = keyValTuple[1];
		    if (!predicates_1.isString(key))
		        throw new Error("invalid parameters to applyPairs");
		    memo[key] = value;
		    return memo;
		}
		exports.applyPairs = applyPairs;
		/** Get the last element of an array */
		function tail(arr) {
		    return arr.length && arr[arr.length - 1] || undefined;
		}
		exports.tail = tail;
		/**
		 * shallow copy from src to dest
		 *
		 * note: This is a shallow copy, while angular.copy is a deep copy.
		 * ui-router uses `copy` only to make copies of state parameters.
		 */
		function _copy(src, dest) {
		    if (dest)
		        Object.keys(dest).forEach(function (key) { return delete dest[key]; });
		    if (!dest)
		        dest = {};
		    return exports.extend(dest, src);
		}
		/** Naive forEach implementation works with Objects or Arrays */
		function _forEach(obj, cb, _this) {
		    if (predicates_1.isArray(obj))
		        return obj.forEach(cb, _this);
		    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });
		}
		function _copyProps(to, from) {
		    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });
		    return to;
		}
		function _extend(toObj) {
		    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);
		}
		function _equals(o1, o2) {
		    if (o1 === o2)
		        return true;
		    if (o1 === null || o2 === null)
		        return false;
		    if (o1 !== o1 && o2 !== o2)
		        return true; // NaN === NaN
		    var t1 = typeof o1, t2 = typeof o2;
		    if (t1 !== t2 || t1 !== 'object')
		        return false;
		    var tup = [o1, o2];
		    if (hof_1.all(predicates_1.isArray)(tup))
		        return _arraysEq(o1, o2);
		    if (hof_1.all(predicates_1.isDate)(tup))
		        return o1.getTime() === o2.getTime();
		    if (hof_1.all(predicates_1.isRegExp)(tup))
		        return o1.toString() === o2.toString();
		    if (hof_1.all(predicates_1.isFunction)(tup))
		        return true; // meh
		    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];
		    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))
		        return false;
		    var key, keys = {};
		    for (key in o1) {
		        if (!_equals(o1[key], o2[key]))
		            return false;
		        keys[key] = true;
		    }
		    for (key in o2) {
		        if (!keys[key])
		            return false;
		    }
		    return true;
		}
		function _arraysEq(a1, a2) {
		    if (a1.length !== a2.length)
		        return false;
		    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);
		}
		// issue #2676
		exports.silenceUncaughtInPromise = function (promise) {
		    return promise.catch(function (e) { return 0; }) && promise;
		};
		exports.silentRejection = function (error) {
		    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));
		};
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** Predicates @module common_predicates */ /** */
		var hof_1 = __webpack_require__(5);
		var toStr = Object.prototype.toString;
		var tis = function (t) { return function (x) { return typeof (x) === t; }; };
		exports.isUndefined = tis('undefined');
		exports.isDefined = hof_1.not(exports.isUndefined);
		exports.isNull = function (o) { return o === null; };
		exports.isFunction = tis('function');
		exports.isNumber = tis('number');
		exports.isString = tis('string');
		exports.isObject = function (x) { return x !== null && typeof x === 'object'; };
		exports.isArray = Array.isArray;
		exports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });
		exports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });
		/**
		 * Predicate which checks if a value is injectable
		 *
		 * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array
		 * where all the elements in the array are Strings, except the last one, which is a Function
		 */
		function isInjectable(val) {
		    if (exports.isArray(val) && val.length) {
		        var head = val.slice(0, -1), tail = val.slice(-1);
		        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);
		    }
		    return exports.isFunction(val);
		}
		exports.isInjectable = isInjectable;
		/**
		 * Predicate which checks if a value looks like a Promise
		 *
		 * It is probably a Promise if it's an object, and it has a `then` property which is a Function
		 */
		exports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));
	
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		/**
		 * Higher order functions
		 *
		 * @module common_hof
		 */ /** */
		"use strict";
		/**
		 * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.
		 *
		 * Given a function with N parameters, returns a new function that supports partial application.
		 * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,
		 * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to
		 * accept more parameters until all N parameters have been supplied.
		 *
		 *
		 * This contrived example uses a partially applied function as an predicate, which returns true
		 * if an object is found in both arrays.
		 * @example
		 * ```
		 * // returns true if an object is in both of the two arrays
		 * function inBoth(array1, array2, object) {
		 *   return array1.indexOf(object) !== -1 &&
		 *          array2.indexOf(object) !== 1;
		 * }
		 * let obj1, obj2, obj3, obj4, obj5, obj6, obj7
		 * let foos = [obj1, obj3]
		 * let bars = [obj3, obj4, obj5]
		 *
		 * // A curried "copy" of inBoth
		 * let curriedInBoth = curry(inBoth);
		 * // Partially apply both the array1 and array2
		 * let inFoosAndBars = curriedInBoth(foos, bars);
		 *
		 * // Supply the final argument; since all arguments are
		 * // supplied, the original inBoth function is then called.
		 * let obj1InBoth = inFoosAndBars(obj1); // false
		 *
		 * // Use the inFoosAndBars as a predicate.
		 * // Filter, on each iteration, supplies the final argument
		 * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];
		 * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]
		 *
		 * ```
		 *
		 * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function
		 *
		 * @param fn
		 * @returns {*|function(): (*|any)}
		 */
		function curry(fn) {
		    var initial_args = [].slice.apply(arguments, [1]);
		    var func_args_length = fn.length;
		    function curried(args) {
		        if (args.length >= func_args_length)
		            return fn.apply(null, args);
		        return function () {
		            return curried(args.concat([].slice.apply(arguments)));
		        };
		    }
		    return curried(initial_args);
		}
		exports.curry = curry;
		/**
		 * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left
		 * given: f(x), g(x), h(x)
		 * let composed = compose(f,g,h)
		 * then, composed is: f(g(h(x)))
		 */
		function compose() {
		    var args = arguments;
		    var start = args.length - 1;
		    return function () {
		        var i = start, result = args[start].apply(this, arguments);
		        while (i--)
		            result = args[i].call(this, result);
		        return result;
		    };
		}
		exports.compose = compose;
		/**
		 * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right
		 * given: f(x), g(x), h(x)
		 * let piped = pipe(f,g,h);
		 * then, piped is: h(g(f(x)))
		 */
		function pipe() {
		    var funcs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        funcs[_i - 0] = arguments[_i];
		    }
		    return compose.apply(null, [].slice.call(arguments).reverse());
		}
		exports.pipe = pipe;
		/**
		 * Given a property name, returns a function that returns that property from an object
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = prop("name");
		 * getName(obj) === "blarg"
		 */
		exports.prop = function (name) {
		    return function (obj) { return obj && obj[name]; };
		};
		/**
		 * Given a property name and a value, returns a function that returns a boolean based on whether
		 * the passed object has a property that matches the value
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = propEq("name", "blarg");
		 * getName(obj) === true
		 */
		exports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });
		/**
		 * Given a dotted property name, returns a function that returns a nested property from an object, or undefined
		 * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };
		 * let getName = prop("nestedObj.name");
		 * getName(obj) === "blarg"
		 * let propNotFound = prop("this.property.doesnt.exist");
		 * propNotFound(obj) === undefined
		 */
		exports.parse = function (name) {
		    return pipe.apply(null, name.split(".").map(exports.prop));
		};
		/**
		 * Given a function that returns a truthy or falsey value, returns a
		 * function that returns the opposite (falsey or truthy) value given the same inputs
		 */
		exports.not = function (fn) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return !fn.apply(null, args);
		    };
		};
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if both functions return truthy for the given arguments
		 */
		function and(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) && fn2.apply(null, args);
		    };
		}
		exports.and = and;
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if at least one of the functions returns truthy for the given arguments
		 */
		function or(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) || fn2.apply(null, args);
		    };
		}
		exports.or = or;
		/**
		 * Check if all the elements of an array match a predicate function
		 *
		 * @param fn1 a predicate function `fn1`
		 * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array
		 */
		exports.all = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };
		};
		exports.any = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };
		};
		/** Given a class, returns a Predicate function that returns true if the object is of that class */
		exports.is = function (ctor) { return function (obj) {
		    return (obj != null && obj.constructor === ctor || obj instanceof ctor);
		}; };
		/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */
		exports.eq = function (val) { return function (other) {
		    return val === other;
		}; };
		/** Given a value, returns a function which returns the value */
		exports.val = function (v) { return function () { return v; }; };
		function invoke(fnName, args) {
		    return function (obj) {
		        return obj[fnName].apply(obj, args);
		    };
		}
		exports.invoke = invoke;
		/**
		 * Sorta like Pattern Matching (a functional programming conditional construct)
		 *
		 * See http://c2.com/cgi/wiki?PatternMatching
		 *
		 * This is a conditional construct which allows a series of predicates and output functions
		 * to be checked and then applied.  Each predicate receives the input.  If the predicate
		 * returns truthy, then its matching output function (mapping function) is provided with
		 * the input and, then the result is returned.
		 *
		 * Each combination (2-tuple) of predicate + output function should be placed in an array
		 * of size 2: [ predicate, mapFn ]
		 *
		 * These 2-tuples should be put in an outer array.
		 *
		 * @example
		 * ```
		 *
		 * // Here's a 2-tuple where the first element is the isString predicate
		 * // and the second element is a function that returns a description of the input
		 * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];
		 *
		 * // Second tuple: predicate "isNumber", mapfn returns a description
		 * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];
		 *
		 * let third = [ (input) => input === null,  (input) => `Oh, null...` ];
		 *
		 * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];
		 *
		 * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);
		 *
		 * console.log(descriptionOf(undefined)); // 'notdefined'
		 * console.log(descriptionOf(55)); // '(55) That's a number!'
		 * console.log(descriptionOf("foo")); // 'Here's your string foo'
		 * ```
		 *
		 * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,
		 * with a Predicate and a mapping/output function
		 * @returns {function(any): *}
		 */
		function pattern(struct) {
		    return function (x) {
		        for (var i = 0; i < struct.length; i++) {
		            if (struct[i][0](x))
		                return struct[i][1](x);
		        }
		    };
		}
		exports.pattern = pattern;
	
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		"use strict";
		var notImplemented = function (fnname) { return function () {
		    throw new Error(fnname + "(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']");
		}; };
		var services = {
		    $q: undefined,
		    $injector: undefined,
		    location: {},
		    locationConfig: {},
		    template: {}
		};
		exports.services = services;
		["setUrl", "path", "search", "hash", "onChange"]
		    .forEach(function (key) { return services.location[key] = notImplemented(key); });
		["port", "protocol", "host", "baseHref", "html5Mode", "hashPrefix"]
		    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });
	
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		/** @module common */
		/**
		 * Matches state names using glob-like pattern strings.
		 *
		 * Globs can be used in specific APIs including:
		 *
		 * - [[StateService.is]]
		 * - [[StateService.includes]]
		 * - [[HookMatchCriteria.to]]
		 * - [[HookMatchCriteria.from]]
		 * - [[HookMatchCriteria.exiting]]
		 * - [[HookMatchCriteria.retained]]
		 * - [[HookMatchCriteria.entering]]
		 *
		 * A `Glob` string is a pattern which matches state names.
		 * Nested state names are split into segments (separated by a dot) when processing.
		 * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']
		 *
		 * Globs work according to the following rules:
		 *
		 * ### Exact match:
		 *
		 * The glob `'A.B'` matches the state named exactly `'A.B'`.
		 *
		 * | Glob        |Matches states named|Does not match state named|
		 * |:------------|:--------------------|:---------------------|
		 * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |
		 * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |
		 * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|
		 *
		 * ### Single star (`*`)
		 *
		 * A single star (`*`) is a wildcard that matches exactly one segment.
		 *
		 * | Glob        |Matches states named  |Does not match state named |
		 * |:------------|:---------------------|:--------------------------|
		 * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |
		 * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |
		 * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|
		 *
		 * ### Double star (`**`)
		 *
		 * A double star (`'**'`) is a wildcard that matches *zero or more segments*
		 *
		 * | Glob        |Matches states named                           |Does not match state named         |
		 * |:------------|:----------------------------------------------|:----------------------------------|
		 * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |
		 * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |
		 * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |
		 * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |
		 *
		 */
		var Glob = (function () {
		    function Glob(text) {
		        this.text = text;
		        this.glob = text.split('.');
		        var regexpString = this.text.split('.')
		            .map(function (seg) {
		            if (seg === '**')
		                return '(?:|(?:\\.[^.]*)*)';
		            if (seg === '*')
		                return '\\.[^.]*';
		            return '\\.' + seg;
		        }).join('');
		        this.regexp = new RegExp("^" + regexpString + "$");
		    }
		    Glob.prototype.matches = function (name) {
		        return this.regexp.test('.' + name);
		    };
		    /** @deprecated whats the point? */
		    Glob.is = function (text) {
		        return text.indexOf('*') > -1;
		    };
		    /** @deprecated whats the point? */
		    Glob.fromString = function (text) {
		        if (!this.is(text))
		            return null;
		        return new Glob(text);
		    };
		    return Glob;
		}());
		exports.Glob = Glob;
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		/** @module common */ /** for typedoc */
		"use strict";
		var Queue = (function () {
		    function Queue(_items, _limit) {
		        if (_items === void 0) { _items = []; }
		        if (_limit === void 0) { _limit = null; }
		        this._items = _items;
		        this._limit = _limit;
		    }
		    Queue.prototype.enqueue = function (item) {
		        var items = this._items;
		        items.push(item);
		        if (this._limit && items.length > this._limit)
		            items.shift();
		        return item;
		    };
		    Queue.prototype.dequeue = function () {
		        if (this.size())
		            return this._items.splice(0, 1)[0];
		    };
		    Queue.prototype.clear = function () {
		        var current = this._items;
		        this._items = [];
		        return current;
		    };
		    Queue.prototype.size = function () {
		        return this._items.length;
		    };
		    Queue.prototype.remove = function (item) {
		        var idx = this._items.indexOf(item);
		        return idx > -1 && this._items.splice(idx, 1)[0];
		    };
		    Queue.prototype.peekTail = function () {
		        return this._items[this._items.length - 1];
		    };
		    Queue.prototype.peekHead = function () {
		        if (this.size())
		            return this._items[0];
		    };
		    return Queue;
		}());
		exports.Queue = Queue;
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module common_strings */ /** */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var rejectFactory_1 = __webpack_require__(10);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var transition_1 = __webpack_require__(11);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Returns a string shortened to a maximum length
		 *
		 * If the string is already less than the `max` length, return the string.
		 * Else return the string, shortened to `max - 3` and append three dots ("...").
		 *
		 * @param max the maximum length of the string to return
		 * @param str the input string
		 */
		function maxLength(max, str) {
		    if (str.length <= max)
		        return str;
		    return str.substr(0, max - 3) + "...";
		}
		exports.maxLength = maxLength;
		/**
		 * Returns a string, with spaces added to the end, up to a desired str length
		 *
		 * If the string is already longer than the desired length, return the string.
		 * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.
		 *
		 * @param length the desired length of the string to return
		 * @param str the input string
		 */
		function padString(length, str) {
		    while (str.length < length)
		        str += " ";
		    return str;
		}
		exports.padString = padString;
		function kebobString(camelCase) {
		    return camelCase
		        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char
		        .replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); }); // replace rest
		}
		exports.kebobString = kebobString;
		function _toJson(obj) {
		    return JSON.stringify(obj);
		}
		function _fromJson(json) {
		    return predicates_1.isString(json) ? JSON.parse(json) : json;
		}
		function promiseToString(p) {
		    return "Promise(" + JSON.stringify(p) + ")";
		}
		function functionToString(fn) {
		    var fnStr = fnToString(fn);
		    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\([^)]*\))/);
		    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;
		    var fnName = fn['name'] || "";
		    if (fnName && toStr.match(/function \(/)) {
		        return 'function ' + fnName + toStr.substr(9);
		    }
		    return toStr;
		}
		exports.functionToString = functionToString;
		function fnToString(fn) {
		    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;
		    return _fn && _fn.toString() || "undefined";
		}
		exports.fnToString = fnToString;
		var stringifyPatternFn = null;
		var stringifyPattern = function (value) {
		    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;
		    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([
		        [hof_1.not(predicates_1.isDefined), hof_1.val("undefined")],
		        [predicates_1.isNull, hof_1.val("null")],
		        [predicates_1.isPromise, hof_1.val("[Promise]")],
		        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],
		        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke("toString")],
		        [hof_1.is(transition_1.Transition), hof_1.invoke("toString")],
		        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke("toString")],
		        [predicates_1.isInjectable, functionToString],
		        [hof_1.val(true), common_1.identity]
		    ]);
		    return stringifyPatternFn(value);
		};
		function stringify(o) {
		    var seen = [];
		    function format(val) {
		        if (predicates_1.isObject(val)) {
		            if (seen.indexOf(val) !== -1)
		                return '[circular ref]';
		            seen.push(val);
		        }
		        return stringifyPattern(val);
		    }
		    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\"/g, '"');
		}
		exports.stringify = stringify;
		/** Returns a function that splits a string on a character or substring */
		exports.beforeAfterSubstr = function (char) { return function (str) {
		    if (!str)
		        return ["", ""];
		    var idx = str.indexOf(char);
		    if (idx === -1)
		        return [str, ""];
		    return [str.substr(0, idx), str.substr(idx + 1)];
		}; };
	
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		(function (RejectType) {
		    RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";
		    RejectType[RejectType["ABORTED"] = 3] = "ABORTED";
		    RejectType[RejectType["INVALID"] = 4] = "INVALID";
		    RejectType[RejectType["IGNORED"] = 5] = "IGNORED";
		    RejectType[RejectType["ERROR"] = 6] = "ERROR";
		})(exports.RejectType || (exports.RejectType = {}));
		var RejectType = exports.RejectType;
		var Rejection = (function () {
		    function Rejection(type, message, detail) {
		        this.type = type;
		        this.message = message;
		        this.detail = detail;
		    }
		    Rejection.prototype.toString = function () {
		        var detailString = function (d) {
		            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);
		        };
		        var type = this.type, message = this.message, detail = detailString(this.detail);
		        return "TransitionRejection(type: " + type + ", message: " + message + ", detail: " + detail + ")";
		    };
		    Rejection.prototype.toPromise = function () {
		        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });
		    };
		    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */
		    Rejection.isTransitionRejectionPromise = function (obj) {
		        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;
		    };
		    /** Returns a TransitionRejection due to transition superseded */
		    Rejection.superseded = function (detail, options) {
		        var message = "The transition has been superseded by a different transition";
		        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);
		        if (options && options.redirected) {
		            rejection.redirected = true;
		        }
		        return rejection;
		    };
		    /** Returns a TransitionRejection due to redirected transition */
		    Rejection.redirected = function (detail) {
		        return Rejection.superseded(detail, { redirected: true });
		    };
		    /** Returns a TransitionRejection due to invalid transition */
		    Rejection.invalid = function (detail) {
		        var message = "This transition is invalid";
		        return new Rejection(RejectType.INVALID, message, detail);
		    };
		    /** Returns a TransitionRejection due to ignored transition */
		    Rejection.ignored = function (detail) {
		        var message = "The transition was ignored";
		        return new Rejection(RejectType.IGNORED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.aborted = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition has been aborted";
		        return new Rejection(RejectType.ABORTED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.errored = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition errored";
		        return new Rejection(RejectType.ERROR, message, detail);
		    };
		    return Rejection;
		}());
		exports.Rejection = Rejection;
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module transition */ /** for typedoc */
		var strings_1 = __webpack_require__(9);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var transitionHook_1 = __webpack_require__(13);
		var hookRegistry_1 = __webpack_require__(15);
		var hookBuilder_1 = __webpack_require__(16);
		var node_1 = __webpack_require__(21);
		var pathFactory_1 = __webpack_require__(20);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var rejectFactory_1 = __webpack_require__(10);
		var resolveContext_1 = __webpack_require__(17);
		var router_1 = __webpack_require__(25);
		var transitionCount = 0;
		var stateSelf = hof_1.prop("self");
		/**
		 * Represents a transition between two states.
		 *
		 * When navigating to a state, we are transitioning **from** the current state **to** the new state.
		 *
		 * This object contains all contextual information about the to/from states, parameters, resolves.
		 * It has information about all states being entered and exited as a result of the transition.
		 */
		var Transition = (function () {
		    /**
		     * Creates a new Transition object.
		     *
		     * If the target state is not valid, an error is thrown.
		     *
		     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`
		     *        encapsulates the "from state".
		     * @param targetState The target state and parameters being transitioned to (also, the transition options)
		     * @param router The [[UIRouter]] instance
		     */
		    function Transition(fromPath, targetState, router) {
		        var _this = this;
		        /** @hidden */
		        this._deferred = coreservices_1.services.$q.defer();
		        /**
		         * This promise is resolved or rejected based on the outcome of the Transition.
		         *
		         * When the transition is successful, the promise is resolved
		         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error
		         */
		        this.promise = this._deferred.promise;
		        this.treeChanges = function () { return _this._treeChanges; };
		        this.isActive = function () { return _this === _this._options.current(); };
		        this.router = router;
		        this._targetState = targetState;
		        if (!targetState.valid()) {
		            throw new Error(targetState.error());
		        }
		        // Makes the Transition instance a hook registry (onStart, etc)
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.
		        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());
		        this.$id = transitionCount++;
		        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);
		        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);
		        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });
		        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);
		        var rootResolvables = [
		            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),
		            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())
		        ];
		        var rootNode = this._treeChanges.to[0];
		        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        context.addResolvables(rootResolvables, rootNode.state);
		    }
		    /** @inheritdoc */
		    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    Transition.prototype.$from = function () {
		        return common_1.tail(this._treeChanges.from).state;
		    };
		    Transition.prototype.$to = function () {
		        return common_1.tail(this._treeChanges.to).state;
		    };
		    /**
		     * Returns the "from state"
		     *
		     * @returns The state object for the Transition's "from state".
		     */
		    Transition.prototype.from = function () {
		        return this.$from().self;
		    };
		    /**
		     * Returns the "to state"
		     *
		     * @returns The state object for the Transition's target state ("to state").
		     */
		    Transition.prototype.to = function () {
		        return this.$to().self;
		    };
		    /**
		     * Gets the Target State
		     *
		     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].
		     *
		     * @returns the [[TargetState]] of this Transition
		     */
		    Transition.prototype.targetState = function () {
		        return this._targetState;
		    };
		    /**
		     * Determines whether two transitions are equivalent.
		     */
		    Transition.prototype.is = function (compare) {
		        if (compare instanceof Transition) {
		            // TODO: Also compare parameters
		            return this.is({ to: compare.$to().name, from: compare.$from().name });
		        }
		        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||
		            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));
		    };
		    /**
		     * Gets transition parameter values
		     *
		     * @param pathname Pick which treeChanges path to get parameters for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @returns transition parameter values for the desired path.
		     */
		    Transition.prototype.params = function (pathname) {
		        if (pathname === void 0) { pathname = "to"; }
		        return this._treeChanges[pathname].map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {});
		    };
		    /**
		     * Creates a [[UIInjector]] Dependency Injector
		     *
		     * Returns a Dependency Injector for the Transition's target state (to state).
		     * The injector provides resolve values which the target state has access to.
		     *
		     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).
		     *
		     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.
		     *
		     * @param state Limits the resolves provided to only the resolves the provided state has access to.
		     * @returns a [[UIInjector]]
		     */
		    Transition.prototype.injector = function (state) {
		        var path = this.treeChanges().to;
		        if (state)
		            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });
		        return new resolveContext_1.ResolveContext(path).injector();
		    };
		    /**
		     * Gets all available resolve tokens (keys)
		     *
		     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values
		     * available to the Transition.
		     *
		     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states
		     * in the Transition's [[TreeChanges.to]] path.
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveTokens = function () {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();
		    };
		    /**
		     * Gets resolved values
		     *
		     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values
		     * are available to the Transition.
		     *
		     * Given a token, returns the resolved data for that token.
		     * Given an array of tokens, returns an array of resolved data for those tokens.
		     *
		     * If a resolvable hasn't yet been fetched, returns `undefined` for that token
		     * If a resolvable doesn't exist for the token, throws an error.
		     *
		     * @param token the token (or array of tokens)
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveValue = function (token) {
		        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        var getData = function (token) {
		            var resolvable = resolveContext.getResolvable(token);
		            if (resolvable === undefined) {
		                throw new Error("Dependency Injection token not found: " + strings_1.stringify(token));
		            }
		            return resolvable.data;
		        };
		        if (predicates_1.isArray(token)) {
		            return token.map(getData);
		        }
		        return getData(token);
		    };
		    /**
		     * Gets a [[Resolvable]] primitive
		     *
		     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.
		     *
		     * @param token the DI token
		     *
		     * @returns the [[Resolvable]] in the transition's to path, or undefined
		     */
		    Transition.prototype.getResolvable = function (token) {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);
		    };
		    /**
		     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.
		     *
		     * @param resolvable an [[Resolvable]] object
		     * @param state the state in the "to path" which should receive the new resolve (otherwise, the root state)
		     */
		    Transition.prototype.addResolvable = function (resolvable, state) {
		        if (state === void 0) { state = ""; }
		        var stateName = (typeof state === "string") ? state : state.name;
		        var topath = this._treeChanges.to;
		        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });
		        var resolveContext = new resolveContext_1.ResolveContext(topath);
		        resolveContext.addResolvables([resolvable], targetNode.state);
		    };
		    /**
		     * If the current transition is a redirect, returns the transition that was redirected.
		     *
		     * Gets the transition from which this transition was redirected.
		     *
		     *
		     * @example
		     * ```js
		     *
		     * let transitionA = $state.go('A').transitionA
		     * transitionA.onStart({}, () => $state.target('B'));
		     * $transitions.onSuccess({ to: 'B' }, (trans) => {
		     *   trans.to().name === 'B'; // true
		     *   trans.redirectedFrom() === transitionA; // true
		     * });
		     * ```
		     *
		     * @returns The previous Transition, or null if this Transition is not the result of a redirection
		     */
		    Transition.prototype.redirectedFrom = function () {
		        return this._options.redirectedFrom || null;
		    };
		    /**
		     * Get the transition options
		     *
		     * @returns the options for this Transition.
		     */
		    Transition.prototype.options = function () {
		        return this._options;
		    };
		    /**
		     * Gets the states being entered.
		     *
		     * @returns an array of states that will be entered during this transition.
		     */
		    Transition.prototype.entering = function () {
		        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Gets the states being exited.
		     *
		     * @returns an array of states that will be exited during this transition.
		     */
		    Transition.prototype.exiting = function () {
		        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();
		    };
		    /**
		     * Gets the states being retained.
		     *
		     * @returns an array of states that are already entered from a previous Transition, that will not be
		     *    exited during this Transition
		     */
		    Transition.prototype.retained = function () {
		        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Get the [[ViewConfig]]s associated with this Transition
		     *
		     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.
		     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., "to" or "entering").
		     *
		     * @param pathname the name of the path to fetch views for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @param state If provided, only returns the `ViewConfig`s for a single state in the path
		     *
		     * @returns a list of ViewConfig objects for the given path.
		     */
		    Transition.prototype.views = function (pathname, state) {
		        if (pathname === void 0) { pathname = "entering"; }
		        var path = this._treeChanges[pathname];
		        path = !state ? path : path.filter(hof_1.propEq('state', state));
		        return path.map(hof_1.prop("views")).filter(common_1.identity).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Creates a new transition that is a redirection of the current one.
		     *
		     * This transition can be returned from a [[TransitionService]] hook to
		     * redirect a transition to a new state and/or set of parameters.
		     *
		     * @returns Returns a new [[Transition]] instance.
		     */
		    Transition.prototype.redirect = function (targetState) {
		        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: "redirect" });
		        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);
		        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);
		        var originalEnteringNodes = this.treeChanges().entering;
		        var redirectEnteringNodes = newTransition.treeChanges().entering;
		        // --- Re-use resolve data from original transition ---
		        // When redirecting from a parent state to a child state where the parent parameter values haven't changed
		        // (because of the redirect), the resolves fetched by the original transition are still valid in the
		        // redirected transition.
		        //
		        // This allows you to define a redirect on a parent state which depends on an async resolve value.
		        // You can wait for the resolve, then redirect to a child state based on the result.
		        // The redirected transition does not have to re-fetch the resolve.
		        // ---------------------------------------------------------
		        var nodeIsReloading = function (reloadState) { return function (node) {
		            return reloadState && node.state.includes[reloadState.name];
		        }; };
		        // Find any "entering" nodes in the redirect path that match the original path and aren't being reloaded
		        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)
		            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));
		        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.
		        matchingEnteringNodes.forEach(function (node, idx) {
		            node.resolvables = originalEnteringNodes[idx].resolvables;
		        });
		        return newTransition;
		    };
		    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */
		    Transition.prototype._changedParams = function () {
		        var _a = this._treeChanges, to = _a.to, from = _a.from;
		        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)
		            return undefined;
		        var nodeSchemas = to.map(function (node) { return node.paramSchema; });
		        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];
		        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);
		        return tuples.map(function (_a) {
		            var schema = _a[0], toVals = _a[1], fromVals = _a[2];
		            return param_1.Param.changed(schema, toVals, fromVals);
		        }).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Returns true if the transition is dynamic.
		     *
		     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.
		     *
		     * @returns true if the Transition is dynamic
		     */
		    Transition.prototype.dynamic = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);
		    };
		    /**
		     * Returns true if the transition is ignored.
		     *
		     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.
		     *
		     * @returns true if the Transition is ignored.
		     */
		    Transition.prototype.ignored = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.length === 0;
		    };
		    /**
		     * @hidden
		     */
		    Transition.prototype.hookBuilder = function () {
		        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {
		            transition: this,
		            current: this._options.current
		        });
		    };
		    /**
		     * Runs the transition
		     *
		     * This method is generally called from the [[StateService.transitionTo]]
		     *
		     * @returns a promise for a successful transition.
		     */
		    Transition.prototype.run = function () {
		        var _this = this;
		        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;
		        var hookBuilder = this.hookBuilder();
		        var globals = this.router.globals;
		        globals.transitionHistory.enqueue(this);
		        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());
		        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {
		            syncResult.catch(function () { return 0; }); // issue #2676
		            var rejectReason = syncResult._transitionRejection;
		            this._deferred.reject(rejectReason);
		            return this.promise;
		        }
		        if (!this.valid()) {
		            var error = new Error(this.error());
		            this._deferred.reject(error);
		            return this.promise;
		        }
		        if (this.ignored()) {
		            trace_1.trace.traceTransitionIgnored(this);
		            this._deferred.reject(rejectFactory_1.Rejection.ignored());
		            return this.promise;
		        }
		        // When the chain is complete, then resolve or reject the deferred
		        var transitionSuccess = function () {
		            trace_1.trace.traceSuccess(_this.$to(), _this);
		            _this.success = true;
		            _this._deferred.resolve(_this.to());
		            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);
		        };
		        var transitionError = function (reason) {
		            trace_1.trace.traceError(reason, _this);
		            _this.success = false;
		            _this._deferred.reject(reason);
		            _this._error = reason;
		            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);
		        };
		        trace_1.trace.traceTransitionStart(this);
		        // Chain the next hook off the previous
		        var appendHookToChain = function (prev, nextHook) {
		            return prev.then(function () { return nextHook.invokeHook(); });
		        };
		        // Run the hooks, then resolve or reject the overall deferred in the .then() handler
		        hookBuilder.asyncHooks()
		            .reduce(appendHookToChain, syncResult)
		            .then(transitionSuccess, transitionError);
		        return this.promise;
		    };
		    /**
		     * Checks if the Transition is valid
		     *
		     * @returns true if the Transition is valid
		     */
		    Transition.prototype.valid = function () {
		        return !this.error() || this.success !== undefined;
		    };
		    /**
		     * The Transition error reason.
		     *
		     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.
		     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.
		     *
		     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.
		     */
		    Transition.prototype.error = function () {
		        var state = this.$to();
		        var redirects = 0, trans = this;
		        while ((trans = trans.redirectedFrom()) != null) {
		            if (++redirects > 20)
		                return "Too many Transition redirects (20+)";
		        }
		        if (state.self.abstract)
		            return "Cannot transition to abstract state '" + state.name + "'";
		        if (!param_1.Param.validates(state.parameters(), this.params()))
		            return "Param values not valid for state '" + state.name + "'";
		        if (this.success === false)
		            return this._error;
		    };
		    /**
		     * A string representation of the Transition
		     *
		     * @returns A string representation of the Transition
		     */
		    Transition.prototype.toString = function () {
		        var fromStateOrName = this.from();
		        var toStateOrName = this.to();
		        var avoidEmptyHash = function (params) {
		            return (params["#"] !== null && params["#"] !== undefined) ? params : common_1.omit(params, "#");
		        };
		        // (X) means the to state is invalid.
		        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? "" : "(X) ", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));
		        return "Transition#" + id + "( '" + from + "'" + fromParams + " -> " + toValid + "'" + to + "'" + toParams + " )";
		    };
		    Transition.diToken = Transition;
		    return Transition;
		}());
		exports.Transition = Transition;
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * UI-Router Transition Tracing
		 *
		 * Enable transition tracing to print transition information to the console, in order to help debug your application.
		 * Tracing logs detailed information about each Transition to your console.
		 *
		 * To enable tracing, import the [[trace]] singleton and enable one or more categories.
		 *
		 * ES6
		 * ```
		 *
		 * import {trace} from "ui-router-ng2"; // or "angular-ui-router"
		 * trace.enable(1, 5); // TRANSITION and VIEWCONFIG
		 * ```
		 *
		 * CJS
		 * ```
		 *
		 * let trace = require("angular-ui-router").trace; // or "ui-router-ng2"
		 * trace.enable("TRANSITION", "VIEWCONFIG");
		 * ```
		 *
		 * Globals
		 * ```
		 *
		 * let trace = window["angular-ui-router"].trace; // or "ui-router-ng2"
		 * trace.enable(); // Trace everything (very verbose)
		 * ```
		 *
		 * @module trace
		 */ /** for typedoc */
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		/** @hidden */
		function uiViewString(viewData) {
		    if (!viewData)
		        return 'ui-view (defunct)';
		    return ("[ui-view#" + viewData.id + " tag ") +
		        ("in template from '" + (viewData.creationContext && viewData.creationContext.name || '(root)') + "' state]: ") +
		        ("fqn: '" + viewData.fqn + "', ") +
		        ("name: '" + viewData.name + "@" + viewData.creationContext + "')");
		}
		/** @hidden */
		var viewConfigString = function (viewConfig) {
		    return ("[ViewConfig#" + viewConfig.$id + " from '" + (viewConfig.viewDecl.$context.name || '(root)') + "' state]: target ui-view: '" + viewConfig.viewDecl.$uiViewName + "@" + viewConfig.viewDecl.$uiViewContextAnchor + "'");
		};
		/** @hidden */
		function normalizedCat(input) {
		    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];
		}
		/**
		 * Trace categories
		 *
		 * [[Trace.enable]] or [[Trace.disable]] a category
		 *
		 * `trace.enable(Category.TRANSITION)`
		 *
		 * These can also be provided using a matching string, or position ordinal
		 *
		 * `trace.enable("TRANSITION")`
		 *
		 * `trace.enable(1)`
		 */
		(function (Category) {
		    Category[Category["RESOLVE"] = 0] = "RESOLVE";
		    Category[Category["TRANSITION"] = 1] = "TRANSITION";
		    Category[Category["HOOK"] = 2] = "HOOK";
		    Category[Category["UIVIEW"] = 3] = "UIVIEW";
		    Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";
		})(exports.Category || (exports.Category = {}));
		var Category = exports.Category;
		/**
		 * Prints UI-Router Transition trace information to the console.
		 */
		var Trace = (function () {
		    function Trace() {
		        /** @hidden */
		        this._enabled = {};
		        this.approximateDigests = 0;
		    }
		    /** @hidden */
		    Trace.prototype._set = function (enabled, categories) {
		        var _this = this;
		        if (!categories.length) {
		            categories = Object.keys(Category)
		                .map(function (k) { return parseInt(k, 10); })
		                .filter(function (k) { return !isNaN(k); })
		                .map(function (key) { return Category[key]; });
		        }
		        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });
		    };
		    /**
		     * Enables a trace [[Category]]
		     *
		     * ```
		     * trace.enable("TRANSITION");
		     * ```
		     *
		     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.enable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(true, categories);
		    };
		    /**
		     * Disables a trace [[Category]]
		     *
		     * ```
		     * trace.disable("VIEWCONFIG");
		     * ```
		     *
		     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.disable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(false, categories);
		    };
		    /**
		     * Retrieves the enabled stateus of a [[Category]]
		     *
		     * ```
		     * trace.enabled("VIEWCONFIG"); // true or false
		     * ```
		     *
		     * @returns boolean true if the category is enabled
		     */
		    Trace.prototype.enabled = function (category) {
		        return !!this._enabled[normalizedCat(category)];
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionStart = function (transition) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Started  -> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionIgnored = function (trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Ignored  <> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookInvocation = function (step, options) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(options), digest = this.approximateDigests, event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.functionToString(step.eventHook.callback);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   Hook -> " + event + " context: " + context + ", " + strings_1.maxLength(200, name));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   <- Hook returned: " + strings_1.maxLength(200, hookResultStr));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvePath = function (path, when, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();
		        console.log("Transition #" + tid + " Digest #" + digest + ":         Resolving " + pathStr + " (" + when + ")");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);
		        console.log("Transition #" + tid + " Digest #" + digest + ":               <- Resolved  " + resolvableStr + " to: " + strings_1.maxLength(200, result));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceError = function (reason, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Rejected " + transitionStr + ", reason: " + reason);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceSuccess = function (finalState, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Success  " + transitionStr + ", final state: " + state);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {
		        if (extra === void 0) { extra = ""; }
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        console.log("ui-view: " + strings_1.padString(30, event) + " " + uiViewString(viewData) + extra);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Updating", viewData, " with ViewConfig from context='" + context + "'");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewFill = function (viewData, html) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Fill", viewData, " with: " + strings_1.maxLength(200, html));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));
		    };
		    return Trace;
		}());
		exports.Trace = Trace;
		/**
		 * The [[Trace]] singleton
		 *
		 * @example
		 * ```js
		 *
		 * import {trace} from "angular-ui-router";
		 * trace.enable(1, 5);
		 * ```
		 */
		var trace = new Trace();
		exports.trace = trace;
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var defaultOptions = {
		    async: true,
		    rejectIfSuperseded: true,
		    current: common_1.noop,
		    transition: null,
		    traceData: {},
		    bind: null
		};
		/** @hidden */
		var TransitionHook = (function () {
		    function TransitionHook(transition, stateContext, eventHook, options) {
		        var _this = this;
		        this.transition = transition;
		        this.stateContext = stateContext;
		        this.eventHook = eventHook;
		        this.options = options;
		        this.isSuperseded = function () {
		            return _this.options.current() !== _this.options.transition;
		        };
		        this.options = common_1.defaults(options, defaultOptions);
		    }
		    TransitionHook.prototype.invokeHook = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        trace_1.trace.traceHookInvocation(this, options);
		        if (options.rejectIfSuperseded && this.isSuperseded()) {
		            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();
		        }
		        var synchronousHookResult = !eventHook._deregistered
		            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)
		            : undefined;
		        return this.handleHookResult(synchronousHookResult);
		    };
		    /**
		     * This method handles the return value of a Transition Hook.
		     *
		     * A hook can return false (cancel), a TargetState (redirect),
		     * or a promise (which may later resolve to false or a redirect)
		     *
		     * This also handles "transition superseded" -- when a new transition
		     * was started while the hook was still running
		     */
		    TransitionHook.prototype.handleHookResult = function (result) {
		        // This transition is no longer current.
		        // Another transition started while this hook was still running.
		        if (this.isSuperseded()) {
		            // Abort this transition
		            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();
		        }
		        // Hook returned a promise
		        if (predicates_1.isPromise(result)) {
		            // Wait for the promise, then reprocess the resolved value
		            return result.then(this.handleHookResult.bind(this));
		        }
		        trace_1.trace.traceHookResult(result, this.options);
		        // Hook returned false
		        if (result === false) {
		            // Abort this Transition
		            return rejectFactory_1.Rejection.aborted("Hook aborted transition").toPromise();
		        }
		        var isTargetState = hof_1.is(targetState_1.TargetState);
		        // hook returned a TargetState
		        if (isTargetState(result)) {
		            // Halt the current Transition and start a redirected Transition (to the TargetState).
		            return rejectFactory_1.Rejection.redirected(result).toPromise();
		        }
		    };
		    TransitionHook.prototype.toString = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        var event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.fnToString(eventHook.callback);
		        return event + " context: " + context + ", " + strings_1.maxLength(200, name);
		    };
		    /**
		     * Given an array of TransitionHooks, runs each one synchronously and sequentially.
		     *
		     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call
		     */
		    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {
		        if (swallowExceptions === void 0) { swallowExceptions = false; }
		        var results = [];
		        for (var i = 0; i < hooks.length; i++) {
		            var hook = hooks[i];
		            try {
		                results.push(hook.invokeHook());
		            }
		            catch (exception) {
		                if (!swallowExceptions) {
		                    return rejectFactory_1.Rejection.errored(exception).toPromise();
		                }
		                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();
		                errorHandler(exception);
		            }
		        }
		        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);
		        if (rejections.length)
		            return rejections[0];
		        return results
		            .filter(predicates_1.isPromise)
		            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());
		    };
		    return TransitionHook;
		}());
		exports.TransitionHook = TransitionHook;
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:TargetState
		 *
		 * @description
		 * Encapsulate the desired target of a transition.
		 * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.
		 *
		 * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object
		 *            used to define the state.
		 * @param {IState} _definition The `State` object definition.
		 * @param {ParamsOrArray} _params Parameters for the target state
		 * @param {TransitionOptions} _options Transition options.
		 */
		var TargetState = (function () {
		    function TargetState(_identifier, _definition, _params, _options) {
		        if (_params === void 0) { _params = {}; }
		        if (_options === void 0) { _options = {}; }
		        this._identifier = _identifier;
		        this._definition = _definition;
		        this._options = _options;
		        this._params = _params || {};
		    }
		    TargetState.prototype.name = function () {
		        return this._definition && this._definition.name || this._identifier;
		    };
		    TargetState.prototype.identifier = function () {
		        return this._identifier;
		    };
		    TargetState.prototype.params = function () {
		        return this._params;
		    };
		    TargetState.prototype.$state = function () {
		        return this._definition;
		    };
		    TargetState.prototype.state = function () {
		        return this._definition && this._definition.self;
		    };
		    TargetState.prototype.options = function () {
		        return this._options;
		    };
		    TargetState.prototype.exists = function () {
		        return !!(this._definition && this._definition.self);
		    };
		    TargetState.prototype.valid = function () {
		        return !this.error();
		    };
		    TargetState.prototype.error = function () {
		        var base = this.options().relative;
		        if (!this._definition && !!base) {
		            var stateName = base.name ? base.name : base;
		            return "Could not resolve '" + this.name() + "' from state '" + stateName + "'";
		        }
		        if (!this._definition)
		            return "No such state '" + this.name() + "'";
		        if (!this._definition.self)
		            return "State '" + this.name() + "' has an invalid definition";
		    };
		    TargetState.prototype.toString = function () {
		        return "'" + this.name() + "'" + common_1.toJson(this.params());
		    };
		    return TargetState;
		}());
		exports.TargetState = TargetState;
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module transition */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		/**
		 * Determines if the given state matches the matchCriteria
		 *
		 * @hidden
		 *
		 * @param state a State Object to test against
		 * @param criterion
		 * - If a string, matchState uses the string as a glob-matcher against the state name
		 * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name
		 *   and returns a positive match if any of the globs match.
		 * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.
		 * @returns {boolean}
		 */
		function matchState(state, criterion) {
		    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;
		    function matchGlobs(_state) {
		        var globStrings = toMatch;
		        for (var i = 0; i < globStrings.length; i++) {
		            var glob = glob_1.Glob.fromString(globStrings[i]);
		            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {
		                return true;
		            }
		        }
		        return false;
		    }
		    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);
		    return !!matchFn(state);
		}
		exports.matchState = matchState;
		/** @hidden */
		var EventHook = (function () {
		    function EventHook(matchCriteria, callback, options) {
		        if (options === void 0) { options = {}; }
		        this.callback = callback;
		        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);
		        this.priority = options.priority || 0;
		        this.bind = options.bind || null;
		        this._deregistered = false;
		    }
		    EventHook._matchingNodes = function (nodes, criterion) {
		        if (criterion === true)
		            return nodes;
		        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });
		        return matching.length ? matching : null;
		    };
		    /**
		     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]
		     *
		     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values
		     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)
		     */
		    EventHook.prototype.matches = function (treeChanges) {
		        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;
		        var matches = {
		            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),
		            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),
		            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),
		            retained: _matchingNodes(treeChanges.retained, mc.retained),
		            entering: _matchingNodes(treeChanges.entering, mc.entering),
		        };
		        // Check if all the criteria matched the TreeChanges object
		        var allMatched = ["to", "from", "exiting", "retained", "entering"]
		            .map(function (prop) { return matches[prop]; })
		            .reduce(common_1.allTrueR, true);
		        return allMatched ? matches : null;
		    };
		    return EventHook;
		}());
		exports.EventHook = EventHook;
		/** @hidden Return a registration function of the requested type. */
		function makeHookRegistrationFn(hooks, name) {
		    return function (matchObject, callback, options) {
		        if (options === void 0) { options = {}; }
		        var eventHook = new EventHook(matchObject, callback, options);
		        hooks[name].push(eventHook);
		        return function deregisterEventHook() {
		            eventHook._deregistered = true;
		            common_1.removeFrom(hooks[name])(eventHook);
		        };
		    };
		}
		/**
		 * Mixin class acts as a Transition Hook registry.
		 *
		 * Holds the registered [[HookFn]] objects.
		 * Exposes functions to register new hooks.
		 *
		 * This is a Mixin class which can be applied to other objects.
		 *
		 * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].
		 *
		 * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.
		 * Global hooks are added to the [[TransitionService]].
		 * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions
		 * (note: the hook criteria still must match the Transition).
		 */
		var HookRegistry = (function () {
		    function HookRegistry() {
		        var _this = this;
		        this._transitionEvents = {
		            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []
		        };
		        this.getHooks = function (name) { return _this._transitionEvents[name]; };
		        /** @inheritdoc */
		        this.onBefore = makeHookRegistrationFn(this._transitionEvents, "onBefore");
		        /** @inheritdoc */
		        this.onStart = makeHookRegistrationFn(this._transitionEvents, "onStart");
		        /** @inheritdoc */
		        this.onEnter = makeHookRegistrationFn(this._transitionEvents, "onEnter");
		        /** @inheritdoc */
		        this.onRetain = makeHookRegistrationFn(this._transitionEvents, "onRetain");
		        /** @inheritdoc */
		        this.onExit = makeHookRegistrationFn(this._transitionEvents, "onExit");
		        /** @inheritdoc */
		        this.onFinish = makeHookRegistrationFn(this._transitionEvents, "onFinish");
		        /** @inheritdoc */
		        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, "onSuccess");
		        /** @inheritdoc */
		        this.onError = makeHookRegistrationFn(this._transitionEvents, "onError");
		    }
		    HookRegistry.mixin = function (source, target) {
		        Object.keys(source._transitionEvents).concat(["getHooks"]).forEach(function (key) { return target[key] = source[key]; });
		    };
		    return HookRegistry;
		}());
		exports.HookRegistry = HookRegistry;
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var transitionHook_1 = __webpack_require__(13);
		var resolveContext_1 = __webpack_require__(17);
		/**
		 * This class returns applicable TransitionHooks for a specific Transition instance.
		 *
		 * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.
		 * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is
		 * determined by the type of hook)
		 *
		 * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.
		 *
		 * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder
		 * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private
		 * in the Transition class, so we must also provide the Transition's _treeChanges)
		 *
		 */
		var HookBuilder = (function () {
		    function HookBuilder($transitions, transition, baseHookOptions) {
		        var _this = this;
		        this.$transitions = $transitions;
		        this.transition = transition;
		        this.baseHookOptions = baseHookOptions;
		        this.getOnBeforeHooks = function () { return _this._buildNodeHooks("onBefore", "to", tupleSort(), { async: false }); };
		        this.getOnStartHooks = function () { return _this._buildNodeHooks("onStart", "to", tupleSort()); };
		        this.getOnExitHooks = function () { return _this._buildNodeHooks("onExit", "exiting", tupleSort(true), { stateHook: true }); };
		        this.getOnRetainHooks = function () { return _this._buildNodeHooks("onRetain", "retained", tupleSort(false), { stateHook: true }); };
		        this.getOnEnterHooks = function () { return _this._buildNodeHooks("onEnter", "entering", tupleSort(false), { stateHook: true }); };
		        this.getOnFinishHooks = function () { return _this._buildNodeHooks("onFinish", "to", tupleSort()); };
		        this.getOnSuccessHooks = function () { return _this._buildNodeHooks("onSuccess", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.getOnErrorHooks = function () { return _this._buildNodeHooks("onError", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.treeChanges = transition.treeChanges();
		        this.toState = common_1.tail(this.treeChanges.to).state;
		        this.fromState = common_1.tail(this.treeChanges.from).state;
		        this.transitionOptions = transition.options();
		    }
		    HookBuilder.prototype.asyncHooks = function () {
		        var onStartHooks = this.getOnStartHooks();
		        var onExitHooks = this.getOnExitHooks();
		        var onRetainHooks = this.getOnRetainHooks();
		        var onEnterHooks = this.getOnEnterHooks();
		        var onFinishHooks = this.getOnFinishHooks();
		        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];
		        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);
		    };
		    /**
		     * Returns an array of newly built TransitionHook objects.
		     *
		     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].
		     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)
		     * - For each of the [[PathNode]]s, creates a TransitionHook
		     *
		     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.
		     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.
		     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables
		     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1
		     * @param options any specific Transition Hook Options
		     */
		    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {
		        var _this = this;
		        // Find all the matching registered hooks for a given hook type
		        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);
		        if (!matchingHooks)
		            return [];
		        var makeTransitionHooks = function (hook) {
		            // Fetch the Nodes that caused this hook to match.
		            var matches = hook.matches(_this.treeChanges);
		            // Select the PathNode[] that will be used as TransitionHook context objects
		            var matchingNodes = matches[matchingNodesProp];
		            // When invoking 'exiting' hooks, give them the "from path" for resolve data.
		            // Everything else gets the "to path"
		            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;
		            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);
		            // Return an array of HookTuples
		            return matchingNodes.map(function (node) {
		                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);
		                var state = _options.stateHook ? node.state : null;
		                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);
		                return { hook: hook, node: node, transitionHook: transitionHook };
		            });
		        };
		        return matchingHooks.map(makeTransitionHooks)
		            .reduce(common_1.unnestR, [])
		            .sort(sortHooksFn)
		            .map(function (tuple) { return tuple.transitionHook; });
		    };
		    /**
		     * Finds all IEventHooks from:
		     * - The Transition object instance hook registry
		     * - The TransitionService ($transitions) global hook registry
		     *
		     * which matched:
		     * - the eventType
		     * - the matchCriteria (to, from, exiting, retained, entering)
		     *
		     * @returns an array of matched [[IEventHook]]s
		     */
		    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {
		        return [this.transition, this.$transitions] // Instance and Global hook registries
		            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries
		            .filter(common_1.assertPredicate(predicates_1.isArray, "broken event named: " + hookName)) // Sanity check
		            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array
		            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria
		    };
		    return HookBuilder;
		}());
		exports.HookBuilder = HookBuilder;
		/**
		 * A factory for a sort function for HookTuples.
		 *
		 * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares
		 * the EventHook priority.
		 *
		 * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth
		 * @returns a tuple sort function
		 */
		function tupleSort(reverseDepthSort) {
		    if (reverseDepthSort === void 0) { reverseDepthSort = false; }
		    return function nodeDepthThenPriority(l, r) {
		        var factor = reverseDepthSort ? -1 : 1;
		        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;
		        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;
		    };
		}
	
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var interface_1 = __webpack_require__(18);
		var resolvable_1 = __webpack_require__(19);
		var pathFactory_1 = __webpack_require__(20);
		var strings_1 = __webpack_require__(9);
		var when = interface_1.resolvePolicies.when;
		var ALL_WHENS = [when.EAGER, when.LAZY];
		var EAGER_WHENS = [when.EAGER];
		exports.NATIVE_INJECTOR_TOKEN = "Native Injector";
		/**
		 * Encapsulates Depenency Injection for a path of nodes
		 *
		 * UI-Router states are organized as a tree.
		 * A nested state has a path of ancestors to the root of the tree.
		 * When a state is being activated, each element in the path is wrapped as a [[PathNode]].
		 * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.
		 *
		 * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.
		 */
		var ResolveContext = (function () {
		    function ResolveContext(_path) {
		        this._path = _path;
		    }
		    /** Gets all the tokens found in the resolve context, de-duplicated */
		    ResolveContext.prototype.getTokens = function () {
		        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);
		    };
		    /**
		     * Gets the Resolvable that matches the token
		     *
		     * Gets the last Resolvable that matches the token in this context, or undefined.
		     * Throws an error if it doesn't exist in the ResolveContext
		     */
		    ResolveContext.prototype.getResolvable = function (token) {
		        var matching = this._path.map(function (node) { return node.resolvables; })
		            .reduce(common_1.unnestR, [])
		            .filter(function (r) { return r.token === token; });
		        return common_1.tail(matching);
		    };
		    /**
		     * Returns a ResolveContext that includes a portion of this one
		     *
		     * Given a state, this method creates a new ResolveContext from this one.
		     * The new context starts at the first node (root) and stops at the node for the `state` parameter.
		     *
		     * #### Why
		     *
		     * When a transition is created, the nodes in the "To Path" are injected from a ResolveContext.
		     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.
		     * The "To State" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).
		     * This method is used to create a narrower context when injecting ancestor nodes.
		     *
		     * @example
		     * `let ABCD = new ResolveContext([A, B, C, D]);`
		     *
		     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:
		     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.
		     * However, `B` should only be able to access resolvables from `A`, `B`.
		     *
		     * When resolving for the `B` node, first take the full "To Path" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.
		     * `let AB = ABCD.subcontext(a)`
		     */
		    ResolveContext.prototype.subContext = function (state) {
		        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));
		    };
		    /**
		     * Adds Resolvables to the node that matches the state
		     *
		     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).
		     * The resolvable is added to the node matching the `state` parameter.
		     *
		     * These new resolvables are not automatically fetched.
		     * The calling code should either fetch them, fetch something that depends on them,
		     * or rely on [[resolvePath]] being called when some state is being entered.
		     *
		     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.
		     *
		     * @param newResolvables the new Resolvables
		     * @param state Used to find the node to put the resolvable on
		     */
		    ResolveContext.prototype.addResolvables = function (newResolvables, state) {
		        var node = common_1.find(this._path, hof_1.propEq('state', state));
		        var keys = newResolvables.map(function (r) { return r.token; });
		        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);
		    };
		    /**
		     * Returns a promise for an array of resolved path Element promises
		     *
		     * @param when
		     * @param trans
		     * @returns {Promise<any>|any}
		     */
		    ResolveContext.prototype.resolvePath = function (when, trans) {
		        var _this = this;
		        if (when === void 0) { when = "LAZY"; }
		        // This option determines which 'when' policy Resolvables we are about to fetch.
		        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : "LAZY";
		        // If the caller specified EAGER, only the EAGER Resolvables are fetched.
		        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`
		        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;
		        // get the subpath to the state argument, if provided
		        trace_1.trace.traceResolvePath(this._path, when, trans);
		        var promises = this._path.reduce(function (acc, node) {
		            var matchesRequestedPolicy = function (resolvable) {
		                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);
		            };
		            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);
		            var subContext = _this.subContext(node.state);
		            // For the matching Resolvables, start their async fetch process.
		            var getResult = function (r) { return r.get(subContext, trans)
		                .then(function (value) { return ({ token: r.token, value: value }); }); };
		            return acc.concat(nodeResolvables.map(getResult));
		        }, []);
		        return coreservices_1.services.$q.all(promises);
		    };
		    ResolveContext.prototype.injector = function () {
		        return this._injector || (this._injector = new UIInjectorImpl(this));
		    };
		    ResolveContext.prototype.findNode = function (resolvable) {
		        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });
		    };
		    /**
		     * Gets the async dependencies of a Resolvable
		     *
		     * Given a Resolvable, returns its dependencies as a Resolvable[]
		     */
		    ResolveContext.prototype.getDependencies = function (resolvable) {
		        var _this = this;
		        var node = this.findNode(resolvable);
		        // Find which other resolvables are "visible" to the `resolvable` argument
		        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)
		        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;
		        var availableResolvables = subPath
		            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables
		            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument
		        var getDependency = function (token) {
		            var matching = availableResolvables.filter(function (r) { return r.token === token; });
		            if (matching.length)
		                return common_1.tail(matching);
		            var fromInjector = _this.injector().getNative(token);
		            if (!fromInjector) {
		                throw new Error("Could not find Dependency Injection token: " + strings_1.stringify(token));
		            }
		            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);
		        };
		        return resolvable.deps.map(getDependency);
		    };
		    return ResolveContext;
		}());
		exports.ResolveContext = ResolveContext;
		var UIInjectorImpl = (function () {
		    function UIInjectorImpl(context) {
		        this.context = context;
		        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;
		    }
		    UIInjectorImpl.prototype.get = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable) {
		            if (!resolvable.resolved) {
		                throw new Error("Resolvable async .get() not complete:" + strings_1.stringify(resolvable.token));
		            }
		            return resolvable.data;
		        }
		        return this.native && this.native.get(token);
		    };
		    UIInjectorImpl.prototype.getAsync = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable)
		            return resolvable.get(this.context);
		        return coreservices_1.services.$q.when(this.native.get(token));
		    };
		    UIInjectorImpl.prototype.getNative = function (token) {
		        return this.native.get(token);
		    };
		    return UIInjectorImpl;
		}());
	
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		"use strict";
		exports.resolvePolicies = {
		    when: {
		        LAZY: "LAZY",
		        EAGER: "EAGER"
		    },
		    async: {
		        WAIT: "WAIT",
		        NOWAIT: "NOWAIT",
		        RXWAIT: "RXWAIT"
		    }
		};
	
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		// TODO: explicitly make this user configurable
		exports.defaultResolvePolicy = {
		    when: "LAZY",
		    async: "WAIT"
		};
		/**
		 * The basic building block for the resolve system.
		 *
		 * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),
		 * and the unwrapped-when-complete (.data) result of the resolveFn.
		 *
		 * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the
		 * resolveFn) and returns the resulting promise.
		 *
		 * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first
		 * parameter to those fns.
		 */
		var Resolvable = (function () {
		    function Resolvable(arg1, resolveFn, deps, policy, data) {
		        this.resolved = false;
		        this.promise = undefined;
		        if (arg1 instanceof Resolvable) {
		            common_1.extend(this, arg1);
		        }
		        else if (predicates_1.isFunction(resolveFn)) {
		            if (arg1 == null || arg1 == undefined)
		                throw new Error("new Resolvable(): token argument is required");
		            if (!predicates_1.isFunction(resolveFn))
		                throw new Error("new Resolvable(): resolveFn argument must be a function");
		            this.token = arg1;
		            this.policy = policy;
		            this.resolveFn = resolveFn;
		            this.deps = deps || [];
		            this.data = data;
		            this.resolved = data !== undefined;
		            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;
		        }
		        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {
		            var literal = arg1;
		            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);
		        }
		    }
		    Resolvable.prototype.getPolicy = function (state) {
		        var thisPolicy = this.policy || {};
		        var statePolicy = state && state.resolvePolicy || {};
		        return {
		            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,
		            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,
		        };
		    };
		    /**
		     * Asynchronously resolve this Resolvable's data
		     *
		     * Given a ResolveContext that this Resolvable is found in:
		     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function
		     * and update the Resolvable's state
		     */
		    Resolvable.prototype.resolve = function (resolveContext, trans) {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        // Gets all dependencies from ResolveContext and wait for them to be resolved
		        var getResolvableDependencies = function () {
		            return $q.all(resolveContext.getDependencies(_this).map(function (r) {
		                return r.get(resolveContext, trans);
		            }));
		        };
		        // Invokes the resolve function passing the resolved dependencies as arguments
		        var invokeResolveFn = function (resolvedDeps) {
		            return _this.resolveFn.apply(null, resolvedDeps);
		        };
		        /**
		         * For RXWAIT policy:
		         *
		         * Given an observable returned from a resolve function:
		         * - enables .cache() mode (this allows multicast subscribers)
		         * - then calls toPromise() (this triggers subscribe() and thus fetches)
		         * - Waits for the promise, then return the cached observable (not the first emitted value).
		         */
		        var waitForRx = function (observable$) {
		            var cached = observable$.cache(1);
		            return cached.take(1).toPromise().then(function () { return cached; });
		        };
		        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.
		        var node = resolveContext.findNode(this);
		        var state = node && node.state;
		        var maybeWaitForRx = this.getPolicy(state).async === "RXWAIT" ? waitForRx : common_1.identity;
		        // After the final value has been resolved, update the state of the Resolvable
		        var applyResolvedValue = function (resolvedValue) {
		            _this.data = resolvedValue;
		            _this.resolved = true;
		            trace_1.trace.traceResolvableResolved(_this, trans);
		            return _this.data;
		        };
		        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.
		        return this.promise = $q.when()
		            .then(getResolvableDependencies)
		            .then(invokeResolveFn)
		            .then(maybeWaitForRx)
		            .then(applyResolvedValue);
		    };
		    /**
		     * Gets a promise for this Resolvable's data.
		     *
		     * Fetches the data and returns a promise.
		     * Returns the existing promise if it has already been fetched once.
		     */
		    Resolvable.prototype.get = function (resolveContext, trans) {
		        return this.promise || this.resolve(resolveContext, trans);
		    };
		    Resolvable.prototype.toString = function () {
		        return "Resolvable(token: " + strings_1.stringify(this.token) + ", requires: [" + this.deps.map(strings_1.stringify) + "])";
		    };
		    Resolvable.prototype.clone = function () {
		        return new Resolvable(this);
		    };
		    Resolvable.fromData = function (token, data) {
		        return new Resolvable(token, function () { return data; }, null, null, data);
		    };
		    return Resolvable;
		}());
		exports.Resolvable = Resolvable;
	
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module path */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var targetState_1 = __webpack_require__(14);
		var node_1 = __webpack_require__(21);
		/**
		 * This class contains functions which convert TargetStates, Nodes and paths from one type to another.
		 */
		var PathFactory = (function () {
		    function PathFactory() {
		    }
		    /** Given a PathNode[], create an TargetState */
		    PathFactory.makeTargetState = function (path) {
		        var state = common_1.tail(path).state;
		        return new targetState_1.TargetState(state, state, path.map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {}));
		    };
		    PathFactory.buildPath = function (targetState) {
		        var toParams = targetState.params();
		        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });
		    };
		    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */
		    PathFactory.buildToPath = function (fromPath, targetState) {
		        var toPath = PathFactory.buildPath(targetState);
		        if (targetState.options().inherit) {
		            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));
		        }
		        return toPath;
		    };
		    /**
		     * Creates ViewConfig objects and adds to nodes.
		     *
		     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state
		     */
		    PathFactory.applyViewConfigs = function ($view, path, states) {
		        // Only apply the viewConfigs to the nodes for the given states
		        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {
		            var viewDecls = common_1.values(node.state.views || {});
		            var subPath = PathFactory.subPath(path, function (n) { return n === node; });
		            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });
		            node.views = viewConfigs.reduce(common_1.unnestR, []);
		        });
		    };
		    /**
		     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath
		     *
		     * For a parameter in a node to be inherited from the from path:
		     * - The toPath's node must have a matching node in the fromPath (by state).
		     * - The parameter name must not be found in the toKeys parameter array.
		     *
		     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some
		     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,
		     * it is not inherited from the fromPath.
		     */
		    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {
		        if (toKeys === void 0) { toKeys = []; }
		        function nodeParamVals(path, state) {
		            var node = common_1.find(path, hof_1.propEq('state', state));
		            return common_1.extend({}, node && node.paramValues);
		        }
		        /**
		         * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the
		         * matching node in fromPath.  Only inherit keys that aren't found in "toKeys" from the node in "fromPath""
		         */
		        function makeInheritedParamsNode(toNode) {
		            // All param values for the node (may include default key/vals, when key was not found in toParams)
		            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);
		            // limited to only those keys found in toParams
		            var incomingParamVals = common_1.pick(toParamVals, toKeys);
		            toParamVals = common_1.omit(toParamVals, toKeys);
		            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};
		            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals
		            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);
		            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);
		        }
		        // The param keys specified by the incoming toParams
		        return toPath.map(makeInheritedParamsNode);
		    };
		    /**
		     * Computes the tree changes (entering, exiting) between a fromPath and toPath.
		     */
		    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {
		        var keep = 0, max = Math.min(fromPath.length, toPath.length);
		        var staticParams = function (state) {
		            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));
		        };
		        var nodesMatch = function (node1, node2) {
		            return node1.equals(node2, staticParams(node1.state));
		        };
		        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {
		            keep++;
		        }
		        /** Given a retained node, return a new node which uses the to node's param values */
		        function applyToParams(retainedNode, idx) {
		            var cloned = node_1.PathNode.clone(retainedNode);
		            cloned.paramValues = toPath[idx].paramValues;
		            return cloned;
		        }
		        var from, retained, exiting, entering, to;
		        from = fromPath;
		        retained = from.slice(0, keep);
		        exiting = from.slice(keep);
		        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped
		        var retainedWithToParams = retained.map(applyToParams);
		        entering = toPath.slice(keep);
		        to = (retainedWithToParams).concat(entering);
		        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };
		    };
		    /**
		     * Return a subpath of a path, which stops at the first matching node
		     *
		     * Given an array of nodes, returns a subset of the array starting from the first node,
		     * stopping when the first node matches the predicate.
		     *
		     * @param path a path of [[PathNode]]s
		     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s
		     * @returns a subpath up to the matching node, or undefined if no match is found
		     */
		    PathFactory.subPath = function (path, predicate) {
		        var node = common_1.find(path, predicate);
		        var elementIdx = path.indexOf(node);
		        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);
		    };
		    /** Gets the raw parameter values from a path */
		    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };
		    return PathFactory;
		}());
		exports.PathFactory = PathFactory;
	
	
	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module path */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		/**
		 * A node in a [[TreeChanges]] path
		 *
		 * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.
		 * Each PathNode corresponds to a state being entered, exited, or retained.
		 * The stateful information includes parameter values and resolve data.
		 */
		var PathNode = (function () {
		    function PathNode(stateOrPath) {
		        if (stateOrPath instanceof PathNode) {
		            var node = stateOrPath;
		            this.state = node.state;
		            this.paramSchema = node.paramSchema.slice();
		            this.paramValues = common_1.extend({}, node.paramValues);
		            this.resolvables = node.resolvables.slice();
		            this.views = node.views && node.views.slice();
		        }
		        else {
		            var state = stateOrPath;
		            this.state = state;
		            this.paramSchema = state.parameters({ inherit: false });
		            this.paramValues = {};
		            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });
		        }
		    }
		    /** Sets [[paramValues]] for the node, from the values of an object hash */
		    PathNode.prototype.applyRawParams = function (params) {
		        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };
		        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});
		        return this;
		    };
		    /** Gets a specific [[Param]] metadata that belongs to the node */
		    PathNode.prototype.parameter = function (name) {
		        return common_1.find(this.paramSchema, hof_1.propEq("id", name));
		    };
		    /**
		     * @returns true if the state and parameter values for another PathNode are
		     * equal to the state and param values for this PathNode
		     */
		    PathNode.prototype.equals = function (node, keys) {
		        var _this = this;
		        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }
		        var paramValsEq = function (key) {
		            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);
		        };
		        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);
		    };
		    /** Returns a clone of the PathNode */
		    PathNode.clone = function (node) {
		        return new PathNode(node);
		    };
		    /**
		     * Returns a new path which is a subpath of the first path which matched the second path.
		     *
		     * The new path starts from root and contains any nodes that match the nodes in the second path.
		     * Nodes are compared using their state property and parameter values.
		     *
		     * @param pathA the first path
		     * @param pathB the second path
		     * @param ignoreDynamicParams don't compare dynamic parameter values
		     */
		    PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {
		        if (ignoreDynamicParams === void 0) { ignoreDynamicParams = true; }
		        var matching = [];
		        for (var i = 0; i < pathA.length && i < pathB.length; i++) {
		            var a = pathA[i], b = pathB[i];
		            if (a.state !== b.state)
		                break;
		            var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues)
		                .filter(function (param) { return !(ignoreDynamicParams && param.dynamic); });
		            if (changedParams.length)
		                break;
		            matching.push(a);
		        }
		        return matching;
		    };
		    return PathNode;
		}());
		exports.PathNode = PathNode;
	
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var type_1 = __webpack_require__(24);
		var hasOwn = Object.prototype.hasOwnProperty;
		var isShorthand = function (cfg) {
		    return ["value", "type", "squash", "array", "dynamic"].filter(hasOwn.bind(cfg || {})).length === 0;
		};
		(function (DefType) {
		    DefType[DefType["PATH"] = 0] = "PATH";
		    DefType[DefType["SEARCH"] = 1] = "SEARCH";
		    DefType[DefType["CONFIG"] = 2] = "CONFIG";
		})(exports.DefType || (exports.DefType = {}));
		var DefType = exports.DefType;
		function unwrapShorthand(cfg) {
		    cfg = isShorthand(cfg) && { value: cfg } || cfg;
		    return common_1.extend(cfg, {
		        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }
		    });
		}
		function getType(cfg, urlType, location, id, paramTypes) {
		    if (cfg.type && urlType && urlType.name !== 'string')
		        throw new Error("Param '" + id + "' has two type configurations.");
		    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))
		        return paramTypes.type(cfg.type);
		    if (urlType)
		        return urlType;
		    if (!cfg.type)
		        return (location === DefType.CONFIG ? paramTypes.type("any") : paramTypes.type("string"));
		    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);
		}
		/**
		 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
		 */
		function getSquashPolicy(config, isOptional) {
		    var squash = config.squash;
		    if (!isOptional || squash === false)
		        return false;
		    if (!predicates_1.isDefined(squash) || squash == null)
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();
		    if (squash === true || predicates_1.isString(squash))
		        return squash;
		    throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
		}
		function getReplace(config, arrayMode, isOptional, squash) {
		    var replace, configuredKeys, defaultPolicy = [
		        { from: "", to: (isOptional || arrayMode ? undefined : "") },
		        { from: null, to: (isOptional || arrayMode ? undefined : "") }
		    ];
		    replace = predicates_1.isArray(config.replace) ? config.replace : [];
		    if (predicates_1.isString(squash))
		        replace.push({ from: squash, to: undefined });
		    configuredKeys = common_1.map(replace, hof_1.prop("from"));
		    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);
		}
		var Param = (function () {
		    function Param(id, type, config, location, paramTypes) {
		        config = unwrapShorthand(config);
		        type = getType(config, type, location, id, paramTypes);
		        var arrayMode = getArrayMode();
		        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;
		        var isOptional = config.value !== undefined;
		        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;
		        var squash = getSquashPolicy(config, isOptional);
		        var replace = getReplace(config, arrayMode, isOptional, squash);
		        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
		        function getArrayMode() {
		            var arrayDefaults = { array: (location === DefType.SEARCH ? "auto" : false) };
		            var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
		            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;
		        }
		        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });
		    }
		    Param.prototype.isDefaultValue = function (value) {
		        return this.isOptional && this.type.equals(this.value(), value);
		    };
		    /**
		     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
		     * default value, which may be the result of an injectable function.
		     */
		    Param.prototype.value = function (value) {
		        var _this = this;
		        /**
		         * [Internal] Get the default value of a parameter, which may be an injectable function.
		         */
		        var $$getDefaultValue = function () {
		            if (!coreservices_1.services.$injector)
		                throw new Error("Injectable functions cannot be called at configuration time");
		            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);
		            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))
		                throw new Error("Default value (" + defaultValue + ") for parameter '" + _this.id + "' is not an instance of ParamType (" + _this.type.name + ")");
		            return defaultValue;
		        };
		        var $replace = function (val) {
		            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop("to"));
		            return replacement.length ? replacement[0] : val;
		        };
		        value = $replace(value);
		        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);
		    };
		    Param.prototype.isSearch = function () {
		        return this.location === DefType.SEARCH;
		    };
		    Param.prototype.validates = function (value) {
		        // There was no parameter value, but the param is optional
		        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)
		            return true;
		        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType
		        var normalized = this.type.$normalize(value);
		        if (!this.type.is(normalized))
		            return false;
		        // The value was of the correct type, but when encoded, did not match the ParamType's regexp
		        var encoded = this.type.encode(normalized);
		        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));
		    };
		    Param.prototype.toString = function () {
		        return "{Param:" + this.id + " " + this.type + " squash: '" + this.squash + "' optional: " + this.isOptional + "}";
		    };
		    /** Creates a new [[Param]] from a CONFIG block */
		    Param.fromConfig = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.CONFIG, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url PATH */
		    Param.fromPath = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.PATH, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url SEARCH */
		    Param.fromSearch = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.SEARCH, paramTypes);
		    };
		    Param.values = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});
		    };
		    /**
		     * Finds [[Param]] objects which have different param values
		     *
		     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects
		     *
		     * @param params: The list of Param objects to filter
		     * @param values1: The first set of parameter values
		     * @param values2: the second set of parameter values
		     *
		     * @returns any Param objects whose values were different between values1 and values2
		     */
		    Param.changed = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });
		    };
		    /**
		     * Checks if two param value objects are equal (for a set of [[Param]] objects)
		     *
		     * @param params The list of [[Param]] objects to check
		     * @param values1 The first set of param values
		     * @param values2 The second set of param values
		     *
		     * @returns true if the param values in values1 and values2 are equal
		     */
		    Param.equals = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return Param.changed(params, values1, values2).length === 0;
		    };
		    /** Returns true if a the parameter values are valid, according to the Param definitions */
		    Param.validates = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);
		    };
		    return Param;
		}());
		exports.Param = Param;
	
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var MatcherConfig = (function () {
		    function MatcherConfig() {
		        this._isCaseInsensitive = false;
		        this._isStrictMode = true;
		        this._defaultSquashPolicy = false;
		    }
		    MatcherConfig.prototype.caseInsensitive = function (value) {
		        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;
		    };
		    MatcherConfig.prototype.strictMode = function (value) {
		        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;
		    };
		    MatcherConfig.prototype.defaultSquashPolicy = function (value) {
		        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))
		            throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
		        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;
		    };
		    return MatcherConfig;
		}());
		exports.MatcherConfig = MatcherConfig;
		// TODO: Do not export global instance; create one in UIRouter() constructor
		exports.matcherConfig = new MatcherConfig();
	
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		/**
		 * Wraps up a `ParamType` object to handle array values.
		 */
		function ArrayType(type, mode) {
		    var _this = this;
		    // Wrap non-array value as array
		    function arrayWrap(val) {
		        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);
		    }
		    // Unwrap array value for "auto" mode. Return undefined for empty array.
		    function arrayUnwrap(val) {
		        switch (val.length) {
		            case 0: return undefined;
		            case 1: return mode === "auto" ? val[0] : val;
		            default: return val;
		        }
		    }
		    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
		    function arrayHandler(callback, allTruthyMode) {
		        return function handleArray(val) {
		            if (predicates_1.isArray(val) && val.length === 0)
		                return val;
		            var arr = arrayWrap(val);
		            var result = common_1.map(arr, callback);
		            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);
		        };
		    }
		    // Wraps type (.equals) functions to operate on each value of an array
		    function arrayEqualsHandler(callback) {
		        return function handleArray(val1, val2) {
		            var left = arrayWrap(val1), right = arrayWrap(val2);
		            if (left.length !== right.length)
		                return false;
		            for (var i = 0; i < left.length; i++) {
		                if (!callback(left[i], right[i]))
		                    return false;
		            }
		            return true;
		        };
		    }
		    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {
		        var paramTypeFn = type[name].bind(type);
		        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;
		        _this[name] = wrapperFn(paramTypeFn);
		    });
		    common_1.extend(this, {
		        dynamic: type.dynamic,
		        name: type.name,
		        pattern: type.pattern,
		        is: arrayHandler(type.is.bind(type), true),
		        $arrayMode: mode
		    });
		}
		/**
		 * A class that implements Custom Parameter Type functionality.
		 *
		 * This class has naive implementations for all the [[ParamTypeDefinition]] methods.
		 *
		 * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].
		 *
		 * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.
		 *
		 * @example
		 * ```
		 *
		 * {
		 *   decode: function(val) { return parseInt(val, 10); },
		 *   encode: function(val) { return val && val.toString(); },
		 *   equals: function(a, b) { return this.is(a) && a === b; },
		 *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },
		 *   pattern: /\d+/
		 * }
		 * ```
		 */
		var ParamType = (function () {
		    /**
		     * @param def  A configuration object which contains the custom type definition.  The object's
		     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.
		     * @returns a new ParamType object
		     */
		    function ParamType(def) {
		        this.pattern = /.*/;
		        common_1.extend(this, def);
		    }
		    // consider these four methods to be "abstract methods" that should be overridden
		    /** @inheritdoc */
		    ParamType.prototype.is = function (val, key) { return true; };
		    /** @inheritdoc */
		    ParamType.prototype.encode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.decode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.equals = function (a, b) { return a == b; };
		    ParamType.prototype.$subPattern = function () {
		        var sub = this.pattern.toString();
		        return sub.substr(1, sub.length - 2);
		    };
		    ParamType.prototype.toString = function () {
		        return "{ParamType:" + this.name + "}";
		    };
		    /** Given an encoded string, or a decoded object, returns a decoded object */
		    ParamType.prototype.$normalize = function (val) {
		        return this.is(val) ? val : this.decode(val);
		    };
		    /**
		     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.
		     * e.g.:
		     * - urlmatcher pattern "/path?{queryParam[]:int}"
		     * - url: "/path?queryParam=1&queryParam=2
		     * - $stateParams.queryParam will be [1, 2]
		     * if `mode` is "auto", then
		     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
		     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
		     */
		    ParamType.prototype.$asArray = function (mode, isSearch) {
		        if (!mode)
		            return this;
		        if (mode === "auto" && !isSearch)
		            throw new Error("'auto' array mode is for query parameters only");
		        return new ArrayType(this, mode);
		    };
		    return ParamType;
		}());
		exports.ParamType = ParamType;
	
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module core */ /** */
		var urlMatcherFactory_1 = __webpack_require__(26);
		var urlRouter_1 = __webpack_require__(29);
		var urlRouter_2 = __webpack_require__(29);
		var transitionService_1 = __webpack_require__(30);
		var view_1 = __webpack_require__(37);
		var stateRegistry_1 = __webpack_require__(38);
		var stateService_1 = __webpack_require__(43);
		var globals_1 = __webpack_require__(44);
		/**
		 * The master class used to instantiate an instance of UI-Router.
		 *
		 * This class instantiates and wires the global UI-Router services.
		 *
		 * After instantiating a new instance of the Router class, configure it for your app.  For instance, register
		 * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor
		 * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])
		 */
		var UIRouter = (function () {
		    function UIRouter() {
		        this.viewService = new view_1.ViewService();
		        this.transitionService = new transitionService_1.TransitionService(this);
		        this.globals = new globals_1.Globals(this.transitionService);
		        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();
		        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);
		        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);
		        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);
		        this.stateService = new stateService_1.StateService(this);
		        this.viewService.rootContext(this.stateRegistry.root());
		        this.globals.$current = this.stateRegistry.root();
		        this.globals.current = this.globals.$current.self;
		    }
		    return UIRouter;
		}());
		exports.UIRouter = UIRouter;
	
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var urlMatcher_1 = __webpack_require__(27);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var param_1 = __webpack_require__(22);
		var paramTypes_1 = __webpack_require__(28);
		/** @hidden */
		function getDefaultConfig() {
		    return {
		        strict: urlMatcherConfig_1.matcherConfig.strictMode(),
		        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()
		    };
		}
		/**
		 * Factory for [[UrlMatcher]] instances.
		 *
		 * The factory is available to ng1 services as
		 * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.
		 */
		var UrlMatcherFactory = (function () {
		    function UrlMatcherFactory() {
		        this.paramTypes = new paramTypes_1.ParamTypes();
		        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });
		    }
		    /**
		     * Defines whether URL matching should be case sensitive (the default behavior), or not.
		     *
		     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;
		     * @returns the current value of caseInsensitive
		     */
		    UrlMatcherFactory.prototype.caseInsensitive = function (value) {
		        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);
		    };
		    /**
		     * Defines whether URLs should match trailing slashes, or not (the default behavior).
		     *
		     * @param value `false` to match trailing slashes in URLs, otherwise `true`.
		     * @returns the current value of strictMode
		     */
		    UrlMatcherFactory.prototype.strictMode = function (value) {
		        return urlMatcherConfig_1.matcherConfig.strictMode(value);
		    };
		    /**
		     * Sets the default behavior when generating or matching URLs with default parameter values.
		     *
		     * @param value A string that defines the default parameter URL squashing behavior.
		     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
		     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
		     *             parameter is surrounded by slashes, squash (remove) one slash from the URL
		     *    - any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
		     *             the parameter value from the URL and replace it with this string.
		     * @returns the current value of defaultSquashPolicy
		     */
		    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);
		    };
		    /**
		     * Creates a [[UrlMatcher]] for the specified pattern.
		     *
		     * @param pattern  The URL pattern.
		     * @param config  The config object hash.
		     * @returns The UrlMatcher.
		     */
		    UrlMatcherFactory.prototype.compile = function (pattern, config) {
		        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));
		    };
		    /**
		     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.
		     *
		     * @param object  The object to perform the type check against.
		     * @returns `true` if the object matches the `UrlMatcher` interface, by
		     *          implementing all the same methods.
		     */
		    UrlMatcherFactory.prototype.isMatcher = function (object) {
		        // TODO: typeof?
		        if (!predicates_1.isObject(object))
		            return false;
		        var result = true;
		        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {
		            if (predicates_1.isFunction(val))
		                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));
		        });
		        return result;
		    };
		    ;
		    /**
		     * Creates and registers a custom [[ParamType]] object
		     *
		     * A [[ParamType]] can be used to generate URLs with typed parameters.
		     *
		     * @param name  The type name.
		     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.
		     * @param definitionFn A function that is injected before the app runtime starts.
		     *        The result of this function should be a [[ParamTypeDefinition]].
		     *        The result is merged into the existing `definition`.
		     *        See [[ParamType]] for information on the values accepted.
		     *
		     * @returns - if a type was registered: the [[UrlMatcherFactory]]
		     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined
		     *
		     * Note: Register custom types *before using them* in a state definition.
		     *
		     * See [[ParamTypeDefinition]] for examples
		     */
		    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {
		        var type = this.paramTypes.type(name, definition, definitionFn);
		        return !predicates_1.isDefined(definition) ? type : this;
		    };
		    ;
		    /** @hidden */
		    UrlMatcherFactory.prototype.$get = function () {
		        this.paramTypes.enqueue = false;
		        this.paramTypes._flushTypeQueue();
		        return this;
		    };
		    ;
		    return UrlMatcherFactory;
		}());
		exports.UrlMatcherFactory = UrlMatcherFactory;
	
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var param_1 = __webpack_require__(22);
		var predicates_2 = __webpack_require__(4);
		var param_2 = __webpack_require__(22);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		/** @hidden */
		function quoteRegExp(string, param) {
		    var surroundPattern = ['', ''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
		    if (!param)
		        return result;
		    switch (param.squash) {
		        case false:
		            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];
		            break;
		        case true:
		            result = result.replace(/\/$/, '');
		            surroundPattern = ['(?:\/(', ')|\/)?'];
		            break;
		        default:
		            surroundPattern = [("(" + param.squash + "|"), ')?'];
		            break;
		    }
		    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];
		}
		/** @hidden */
		var memoizeTo = function (obj, prop, fn) {
		    return obj[prop] = obj[prop] || fn();
		};
		/**
		 * Matches URLs against patterns.
		 *
		 * Matches URLs against patterns and extracts named parameters from the path or the search
		 * part of the URL.
		 *
		 * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)
		 * parameters. Multiple search parameter names are separated by '&'. Search parameters
		 * do not influence whether or not a URL is matched, but their values are passed through into
		 * the matched parameters returned by [[UrlMatcher.exec]].
		 *
		 * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)
		 * or colon placeholders (`/somePath/:param`).
		 *
		 * - *A parameter RegExp* may be defined for a param after a colon
		 * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.
		 * The regexp must match for the url to be matched.
		 * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
		 *
		 * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)
		 * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.
		 *
		 * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all
		 * parameter value will contain the remainder of the URL.
		 *
		 * ---
		 *
		 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
		 * must be unique within the pattern (across both path and search parameters).
		 * A path parameter matches any number of characters other than '/'. For catch-all
		 * placeholders the path parameter matches any number of characters.
		 *
		 * Examples:
		 *
		 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
		 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
		 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
		 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
		 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
		 * * `'/user/{id:[^/]*}'` - Same as the previous example.
		 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
		 *   parameter consists of 1 to 8 hex digits.
		 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
		 *   path into the parameter 'path'.
		 * * `'/files/*path'` - ditto.
		 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
		 *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start
		 *
		 */
		var UrlMatcher = (function () {
		    /**
		     * @param pattern The pattern to compile into a matcher.
		     * @param paramTypes The [[ParamTypes]] registry
		     * @param config  A configuration object
		     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
		     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
		     */
		    function UrlMatcher(pattern, paramTypes, config) {
		        var _this = this;
		        this.config = config;
		        /** @hidden */
		        this._cache = { path: [], pattern: null };
		        /** @hidden */
		        this._children = [];
		        /** @hidden */
		        this._params = [];
		        /** @hidden */
		        this._segments = [];
		        /** @hidden */
		        this._compiled = [];
		        this.pattern = pattern;
		        this.config = common_1.defaults(this.config, {
		            params: {},
		            strict: true,
		            caseInsensitive: false,
		            paramMap: common_1.identity
		        });
		        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
		        //   '*' name
		        //   ':' name
		        //   '{' name '}'
		        //   '{' name ':' regexp '}'
		        // The regular expression is somewhat complicated due to the need to allow curly braces
		        // inside the regular expression. The placeholder regexp breaks down as follows:
		        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
		        //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
		        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
		        //    [^{}\\]+                       - anything other than curly braces or backslash
		        //    \\.                            - a backslash escape
		        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
		        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, last = 0, m, patterns = [];
		        var checkParamErrors = function (id) {
		            if (!UrlMatcher.nameValidator.test(id))
		                throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
		            if (common_1.find(_this._params, hof_1.propEq('id', id)))
		                throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
		        };
		        // Split into static segments separated by path parameter placeholders.
		        // The number of segments is always 1 more than the number of parameters.
		        var matchDetails = function (m, isSearch) {
		            // IE[78] returns '' for unmatched groups instead of null
		            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);
		            return {
		                id: id,
		                regexp: regexp,
		                cfg: _this.config.params[id],
		                segment: pattern.substring(last, m.index),
		                type: !regexp ? null : paramTypes.type(regexp || "string") || common_1.inherit(paramTypes.type("string"), {
		                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)
		                })
		            };
		        };
		        var p, segment;
		        while ((m = placeholder.exec(pattern))) {
		            p = matchDetails(m, false);
		            if (p.segment.indexOf('?') >= 0)
		                break; // we're into the search part
		            checkParamErrors(p.id);
		            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));
		            this._segments.push(p.segment);
		            patterns.push([p.segment, common_1.tail(this._params)]);
		            last = placeholder.lastIndex;
		        }
		        segment = pattern.substring(last);
		        // Find any search parameter names and remove them from the last segment
		        var i = segment.indexOf('?');
		        if (i >= 0) {
		            var search = segment.substring(i);
		            segment = segment.substring(0, i);
		            if (search.length > 0) {
		                last = 0;
		                while ((m = searchPlaceholder.exec(search))) {
		                    p = matchDetails(m, true);
		                    checkParamErrors(p.id);
		                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));
		                    last = placeholder.lastIndex;
		                }
		            }
		        }
		        this._segments.push(segment);
		        common_1.extend(this, {
		            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),
		            prefix: this._segments[0]
		        });
		        Object.freeze(this);
		    }
		    /**
		     * Creates a new concatenated UrlMatcher
		     *
		     * Builds a new UrlMatcher by appending another UrlMatcher to this one.
		     *
		     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.
		     */
		    UrlMatcher.prototype.append = function (url) {
		        this._children.push(url);
		        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });
		        url._cache.path = this._cache.path.concat(this);
		        return url;
		    };
		    /** @hidden */
		    UrlMatcher.prototype.isRoot = function () {
		        return this._cache.path.length === 0;
		    };
		    /** Returns the input pattern string */
		    UrlMatcher.prototype.toString = function () {
		        return this.pattern;
		    };
		    /**
		     * Tests the specified url/path against this matcher.
		     *
		     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured
		     * parameter values.  Returns null if the path does not match.
		     *
		     * The returned object contains the values
		     * of any search parameters that are mentioned in the pattern, but their value may be null if
		     * they are not present in `search`. This means that search parameters are always treated
		     * as optional.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
		     *   x: '1', q: 'hello'
		     * });
		     * // returns { id: 'bob', q: 'hello', r: null }
		     * ```
		     *
		     * @param path    The URL path to match, e.g. `$location.path()`.
		     * @param search  URL search parameters, e.g. `$location.search()`.
		     * @param hash    URL hash e.g. `$location.hash()`.
		     * @param options
		     *
		     * @returns The captured parameter values.
		     */
		    UrlMatcher.prototype.exec = function (path, search, hash, options) {
		        var _this = this;
		        if (search === void 0) { search = {}; }
		        if (options === void 0) { options = {}; }
		        var match = memoizeTo(this._cache, 'pattern', function () {
		            return new RegExp([
		                '^',
		                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),
		                _this.config.strict === false ? '\/?' : '',
		                '$'
		            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);
		        }).exec(path);
		        if (!match)
		            return null;
		        //options = defaults(options, { isolate: false });
		        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};
		        if (nPathSegments !== match.length - 1)
		            throw new Error("Unbalanced capture group in route '" + this.pattern + "'");
		        function decodePathArray(string) {
		            var reverseString = function (str) { return str.split("").reverse().join(""); };
		            var unquoteDashes = function (str) { return str.replace(/\\-/g, "-"); };
		            var split = reverseString(string).split(/-(?!\\)/);
		            var allReversed = common_1.map(split, reverseString);
		            return common_1.map(allReversed, unquoteDashes).reverse();
		        }
		        for (var i = 0; i < nPathSegments; i++) {
		            var param = pathParams[i];
		            var value = match[i + 1];
		            // if the param value matches a pre-replace pair, replace the value before decoding.
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (value && param.array === true)
		                value = decodePathArray(value);
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        }
		        searchParams.forEach(function (param) {
		            var value = search[param.id];
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        });
		        if (hash)
		            values["#"] = hash;
		        return values;
		    };
		    /**
		     * @hidden
		     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.
		     *
		     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the
		     *    pattern has no parameters, an empty array is returned.
		     */
		    UrlMatcher.prototype.parameters = function (opts) {
		        if (opts === void 0) { opts = {}; }
		        if (opts.inherit === false)
		            return this._params;
		        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));
		    };
		    /**
		     * @hidden
		     * Returns a single parameter from this UrlMatcher by id
		     *
		     * @param id
		     * @param opts
		     * @returns {T|Param|any|boolean|UrlMatcher|null}
		     */
		    UrlMatcher.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        var parent = common_1.tail(this._cache.path);
		        return (common_1.find(this._params, hof_1.propEq('id', id)) ||
		            (opts.inherit !== false && parent && parent.parameter(id)) ||
		            null);
		    };
		    /**
		     * Validates the input parameter values against this UrlMatcher
		     *
		     * Checks an object hash of parameters to validate their correctness according to the parameter
		     * types of this `UrlMatcher`.
		     *
		     * @param params The object hash of parameters to validate.
		     * @returns Returns `true` if `params` validates, otherwise `false`.
		     */
		    UrlMatcher.prototype.validates = function (params) {
		        var _this = this;
		        var validParamVal = function (param, val) {
		            return !param || param.validates(val);
		        };
		        return common_1.pairs(params || {}).map(function (_a) {
		            var key = _a[0], val = _a[1];
		            return validParamVal(_this.parameter(key), val);
		        }).reduce(common_1.allTrueR, true);
		    };
		    /**
		     * Given a set of parameter values, creates a URL from this UrlMatcher.
		     *
		     * Creates a URL that matches this pattern by substituting the specified values
		     * for the path and search parameters.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
		     * // returns '/user/bob?q=yes'
		     * ```
		     *
		     * @param values  the values to substitute for the parameters in this pattern.
		     * @returns the formatted URL (path and optionally search part).
		     */
		    UrlMatcher.prototype.format = function (values) {
		        if (values === void 0) { values = {}; }
		        if (!this.validates(values))
		            return null;
		        // Build the full path of UrlMatchers (including all parent UrlMatchers)
		        var urlMatchers = this._cache.path.slice().concat(this);
		        // Extract all the static segments and Params into an ordered array
		        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);
		        // Extract the query params into a separate array
		        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);
		        /**
		         * Given a Param,
		         * Applies the parameter value, then returns details about it
		         */
		        function getDetails(param) {
		            // Normalize to typed value
		            var value = param.value(values[param.id]);
		            var isDefaultValue = param.isDefaultValue(value);
		            // Check if we're in squash mode for the parameter
		            var squash = isDefaultValue ? param.squash : false;
		            // Allow the Parameter's Type to encode the value
		            var encoded = param.type.encode(value);
		            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };
		        }
		        // Build up the path-portion from the list of static segments and parameters
		        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {
		            // The element is a static segment (a raw string); just append it
		            if (predicates_1.isString(x))
		                return acc + x;
		            // Otherwise, it's a Param.  Fetch details about the parameter value
		            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;
		            // If squash is === true, try to remove a slash from the path
		            if (squash === true)
		                return (acc.match(/\/$/)) ? acc.slice(0, -1) : acc;
		            // If squash is a string, use the string for the param value
		            if (predicates_1.isString(squash))
		                return acc + squash;
		            if (squash !== false)
		                return acc; // ?
		            if (encoded == null)
		                return acc;
		            // If this parameter value is an array, encode the value using encodeDashes
		            if (predicates_1.isArray(encoded))
		                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join("-");
		            // If the parameter type is "raw", then do not encodeURIComponent
		            if (param.type.raw)
		                return acc + encoded;
		            // Encode the value
		            return acc + encodeURIComponent(encoded);
		        }, "");
		        // Build the query string by applying parameter values (array or regular)
		        // then mapping to key=value, then flattening and joining using "&"
		        var queryString = queryParams.map(function (param) {
		            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;
		            if (encoded == null || (isDefaultValue && squash !== false))
		                return;
		            if (!predicates_1.isArray(encoded))
		                encoded = [encoded];
		            if (encoded.length === 0)
		                return;
		            if (!param.type.raw)
		                encoded = common_1.map(encoded, encodeURIComponent);
		            return encoded.map(function (val) { return (param.id + "=" + val); });
		        }).filter(common_1.identity).reduce(common_2.unnestR, []).join("&");
		        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)
		        return pathString + (queryString ? "?" + queryString : "") + (values["#"] ? "#" + values["#"] : "");
		    };
		    /** @hidden */
		    UrlMatcher.encodeDashes = function (str) {
		        return encodeURIComponent(str).replace(/-/g, function (c) { return ("%5C%" + c.charCodeAt(0).toString(16).toUpperCase()); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */
		    UrlMatcher.pathSegmentsAndParams = function (matcher) {
		        var staticSegments = matcher._segments;
		        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });
		        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== "" && predicates_2.isDefined(x); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's query params */
		    UrlMatcher.queryParams = function (matcher) {
		        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });
		    };
		    /** @hidden */
		    UrlMatcher.nameValidator = /^\w+([-.]+\w+)*(?:\[\])?$/;
		    return UrlMatcher;
		}());
		exports.UrlMatcher = UrlMatcher;
	
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var type_1 = __webpack_require__(24);
		// Use tildes to pre-encode slashes.
		// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
		// and bidirectional encoding/decoding fails.
		// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
		function valToString(val) { return val != null ? val.toString().replace(/(~|\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val; }
		function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val; }
		var ParamTypes = (function () {
		    function ParamTypes() {
		        this.enqueue = true;
		        this.typeQueue = [];
		        this.defaultTypes = {
		            "hash": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /.*/,
		                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/""
		            },
		            "string": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /[^/]*/
		            },
		            "int": {
		                encode: valToString,
		                decode: function (val) { return parseInt(val, 10); },
		                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },
		                pattern: /-?\d+/
		            },
		            "bool": {
		                encode: function (val) { return val && 1 || 0; },
		                decode: function (val) { return parseInt(val, 10) !== 0; },
		                is: hof_1.is(Boolean),
		                pattern: /0|1/
		            },
		            "date": {
		                encode: function (val) {
		                    return !this.is(val) ? undefined : [
		                        val.getFullYear(),
		                        ('0' + (val.getMonth() + 1)).slice(-2),
		                        ('0' + val.getDate()).slice(-2)
		                    ].join("-");
		                },
		                decode: function (val) {
		                    if (this.is(val))
		                        return val;
		                    var match = this.capture.exec(val);
		                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
		                },
		                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },
		                equals: function (l, r) {
		                    return ['getFullYear', 'getMonth', 'getDate']
		                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);
		                },
		                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
		                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
		            },
		            "json": {
		                encode: common_1.toJson,
		                decode: common_1.fromJson,
		                is: hof_1.is(Object),
		                equals: common_1.equals,
		                pattern: /[^/]*/
		            },
		            "any": {
		                encode: common_1.identity,
		                decode: common_1.identity,
		                equals: common_1.equals,
		                pattern: /.*/
		            }
		        };
		        // Register default types. Store them in the prototype of this.types.
		        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };
		        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});
		    }
		    ParamTypes.prototype.type = function (name, definition, definitionFn) {
		        if (!predicates_1.isDefined(definition))
		            return this.types[name];
		        if (this.types.hasOwnProperty(name))
		            throw new Error("A type named '" + name + "' has already been defined.");
		        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));
		        if (definitionFn) {
		            this.typeQueue.push({ name: name, def: definitionFn });
		            if (!this.enqueue)
		                this._flushTypeQueue();
		        }
		        return this;
		    };
		    ParamTypes.prototype._flushTypeQueue = function () {
		        while (this.typeQueue.length) {
		            var type = this.typeQueue.shift();
		            if (type.pattern)
		                throw new Error("You cannot override a type's .pattern at runtime.");
		            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));
		        }
		    };
		    return ParamTypes;
		}());
		exports.ParamTypes = ParamTypes;
	
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		/** @hidden */
		var $location = coreservices_1.services.location;
		/** @hidden Returns a string that is a prefix of all strings matching the RegExp */
		function regExpPrefix(re) {
		    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
		    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
		}
		/** @hidden Interpolates matched values into a String.replace()-style pattern */
		function interpolate(pattern, match) {
		    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
		        return match[what === '$' ? 0 : Number(what)];
		    });
		}
		/** @hidden */
		function handleIfMatch($injector, $stateParams, handler, match) {
		    if (!match)
		        return false;
		    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });
		    return predicates_1.isDefined(result) ? result : true;
		}
		/** @hidden */
		function appendBasePath(url, isHtml5, absolute) {
		    var baseHref = coreservices_1.services.locationConfig.baseHref();
		    if (baseHref === '/')
		        return url;
		    if (isHtml5)
		        return baseHref.slice(0, -1) + url;
		    if (absolute)
		        return baseHref.slice(1) + url;
		    return url;
		}
		// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
		/** @hidden */
		function update(rules, otherwiseFn, evt) {
		    if (evt && evt.defaultPrevented)
		        return;
		    function check(rule) {
		        var handled = rule(coreservices_1.services.$injector, $location);
		        if (!handled)
		            return false;
		        if (predicates_1.isString(handled)) {
		            $location.setUrl(handled, true);
		        }
		        return true;
		    }
		    var n = rules.length;
		    for (var i = 0; i < n; i++) {
		        if (check(rules[i]))
		            return;
		    }
		    // always check otherwise last to allow dynamic updates to the set of rules
		    if (otherwiseFn)
		        check(otherwiseFn);
		}
		/**
		 * Manages rules for client-side URL
		 *
		 * This class manages the router rules for what to do when the URL changes.
		 */
		var UrlRouterProvider = (function () {
		    function UrlRouterProvider($urlMatcherFactory, $stateParams) {
		        /** @hidden */
		        this.rules = [];
		        /** @hidden */
		        this.interceptDeferred = false;
		        this.$urlMatcherFactory = $urlMatcherFactory;
		        this.$stateParams = $stateParams;
		    }
		    /**
		     * Registers a url handler function.
		     *
		     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns
		     * a redirect, or performs some action.
		     *
		     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Here's an example of how you might allow case insensitive urls
		     *   $urlRouterProvider.rule(function ($injector, $location) {
		     *     var path = $location.path(),
		     *         normalized = path.toLowerCase();
		     *
		     *     if (path !== normalized) {
		     *       return normalized;
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * Handler function that takes `$injector` and `$location` services as arguments.
		     * You can use them to detect a url and return a different url as a string.
		     *
		     * @return [[$urlRouterProvider]] (`this`)
		     */
		    UrlRouterProvider.prototype.rule = function (rule) {
		        if (!predicates_1.isFunction(rule))
		            throw new Error("'rule' must be a function");
		        this.rules.push(rule);
		        return this;
		    };
		    ;
		    /**
		     * Remove a rule previously registered
		     *
		     * @param rule the matcher rule that was previously registered using [[rule]]
		     * @return true if the rule was found (and removed)
		     */
		    UrlRouterProvider.prototype.removeRule = function (rule) {
		        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;
		    };
		    /**
		     * Defines the path or behavior to use when no url can be matched.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // if the path doesn't match any of the urls you configured
		     *   // otherwise will take care of routing the user to the
		     *   // specified url
		     *   $urlRouterProvider.otherwise('/index');
		     *
		     *   // Example of using function rule as param
		     *   $urlRouterProvider.otherwise(function ($injector, $location) {
		     *     return '/a/valid/url';
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.
		     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.
		     *
		     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
		     */
		    UrlRouterProvider.prototype.otherwise = function (rule) {
		        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))
		            throw new Error("'rule' must be a string or function");
		        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;
		        return this;
		    };
		    ;
		    /**
		     * Registers a handler for a given url matching.
		     *
		     * If the handler is a string, it is
		     * treated as a redirect, and is interpolated according to the syntax of match
		     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
		     *
		     * If the handler is a function, it is injectable.
		     * It gets invoked if `$location` matches.
		     * You have the option of inject the match object as `$match`.
		     *
		     * The handler can return
		     *
		     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
		     *   will continue trying to find another one that matches.
		     * - **string** which is treated as a redirect and passed to `$location.url()`
		     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
		     *     if ($state.$current.navigable !== state ||
		     *         !equalForKeys($match, $stateParams) {
		     *      $state.transitionTo(state, $match, false);
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param what A pattern string to match, compiled as a [[UrlMatcher]].
		     * @param handler The path (or function that returns a path) that you want to redirect your user to.
		     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]
		     *
		     * Note: the handler may also invoke arbitrary code, such as `$state.go()`
		     */
		    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {
		        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }
		        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;
		        var redirect, handlerIsString = predicates_1.isString(handler);
		        // @todo Queue this
		        if (predicates_1.isString(what))
		            what = $urlMatcherFactory.compile(what);
		        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))
		            throw new Error("invalid 'handler' in when()");
		        var strategies = {
		            matcher: function (_what, _handler) {
		                if (handlerIsString) {
		                    redirect = $urlMatcherFactory.compile(_handler);
		                    _handler = ['$match', redirect.format.bind(redirect)];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));
		                }, {
		                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''
		                });
		            },
		            regex: function (_what, _handler) {
		                if (_what.global || _what.sticky)
		                    throw new Error("when() RegExp must not be global or sticky");
		                if (handlerIsString) {
		                    redirect = _handler;
		                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));
		                }, {
		                    prefix: regExpPrefix(_what)
		                });
		            }
		        };
		        var check = {
		            matcher: $urlMatcherFactory.isMatcher(what),
		            regex: what instanceof RegExp
		        };
		        for (var n in check) {
		            if (check[n]) {
		                var rule = strategies[n](what, handler);
		                ruleCallback(rule);
		                return this.rule(rule);
		            }
		        }
		        throw new Error("invalid 'what' in when()");
		    };
		    ;
		    /**
		     * Disables monitoring of the URL.
		     *
		     * Call this method before UI-Router has bootstrapped.
		     * It will stop UI-Router from performing the initial url sync.
		     *
		     * This can be useful to perform some asynchronous initialization before the router starts.
		     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Prevent $urlRouter from automatically intercepting URL changes;
		     *   $urlRouterProvider.deferIntercept();
		     * })
		     *
		     * app.run(function (MyService, $urlRouter, $http) {
		     *   $http.get("/stuff").then(function(resp) {
		     *     MyService.doStuff(resp.data);
		     *     $urlRouter.listen();
		     *     $urlRouter.sync();
		     *   });
		     * });
		     * ```
		     *
		     * @param defer Indicates whether to defer location change interception. Passing
		     *        no parameter is equivalent to `true`.
		     */
		    UrlRouterProvider.prototype.deferIntercept = function (defer) {
		        if (defer === undefined)
		            defer = true;
		        this.interceptDeferred = defer;
		    };
		    ;
		    return UrlRouterProvider;
		}());
		exports.UrlRouterProvider = UrlRouterProvider;
		var UrlRouter = (function () {
		    /** @hidden */
		    function UrlRouter(urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        common_1.bindFunctions(UrlRouter.prototype, this, this);
		    }
		    /**
		     * Checks the current URL for a matching rule
		     *
		     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
		     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
		     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
		     * with the transition by calling `$urlRouter.sync()`.
		     *
		     * @example
		     * ```js
		     *
		     * angular.module('app', ['ui.router'])
		     *   .run(function($rootScope, $urlRouter) {
		     *     $rootScope.$on('$locationChangeSuccess', function(evt) {
		     *       // Halt state change from even starting
		     *       evt.preventDefault();
		     *       // Perform custom logic
		     *       var meetsRequirement = ...
		     *       // Continue with the update and state transition if logic allows
		     *       if (meetsRequirement) $urlRouter.sync();
		     *     });
		     * });
		     * ```
		     */
		    UrlRouter.prototype.sync = function () {
		        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);
		    };
		    /**
		     * Starts listening for URL changes
		     *
		     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.
		     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.
		     */
		    UrlRouter.prototype.listen = function () {
		        var _this = this;
		        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });
		    };
		    /**
		     * Internal API.
		     */
		    UrlRouter.prototype.update = function (read) {
		        if (read) {
		            this.location = $location.path();
		            return;
		        }
		        if ($location.path() === this.location)
		            return;
		        $location.setUrl(this.location, true);
		    };
		    /**
		     * Internal API.
		     *
		     * Pushes a new location to the browser history.
		     *
		     * @param urlMatcher
		     * @param params
		     * @param options
		     */
		    UrlRouter.prototype.push = function (urlMatcher, params, options) {
		        var replace = options && !!options.replace;
		        $location.setUrl(urlMatcher.format(params || {}), replace);
		    };
		    /**
		     * Builds and returns a URL with interpolated parameters
		     *
		     * @example
		     * ```js
		     *
		     * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
		     *   person: "bob"
		     * });
		     * // $bob == "/about/bob";
		     * ```
		     *
		     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.
		     * @param params An object of parameter values to fill the matcher's required parameters.
		     * @param options Options object. The options are:
		     *
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
		     */
		    UrlRouter.prototype.href = function (urlMatcher, params, options) {
		        if (!urlMatcher.validates(params))
		            return null;
		        var url = urlMatcher.format(params);
		        options = options || { absolute: false };
		        var cfg = coreservices_1.services.locationConfig;
		        var isHtml5 = cfg.html5Mode();
		        if (!isHtml5 && url !== null) {
		            url = "#" + cfg.hashPrefix() + url;
		        }
		        url = appendBasePath(url, isHtml5, options.absolute);
		        if (!options.absolute || !url) {
		            return url;
		        }
		        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();
		        port = (port === 80 || port === 443 ? '' : ':' + port);
		        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');
		    };
		    return UrlRouter;
		}());
		exports.UrlRouter = UrlRouter;
	
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var transition_1 = __webpack_require__(11);
		var hookRegistry_1 = __webpack_require__(15);
		var resolve_1 = __webpack_require__(31);
		var views_1 = __webpack_require__(32);
		var url_1 = __webpack_require__(33);
		var redirectTo_1 = __webpack_require__(34);
		var onEnterExitRetain_1 = __webpack_require__(35);
		var lazyLoadStates_1 = __webpack_require__(36);
		/**
		 * The default [[Transition]] options.
		 *
		 * Include this object when applying custom defaults:
		 * let reloadOpts = { reload: true, notify: true }
		 * let options = defaults(theirOpts, customDefaults, defaultOptions);
		 */
		exports.defaultTransOpts = {
		    location: true,
		    relative: null,
		    inherit: false,
		    notify: true,
		    reload: false,
		    custom: {},
		    current: function () { return null; },
		    source: "unknown"
		};
		/**
		 * This class provides services related to Transitions.
		 *
		 * - Most importantly, it allows global Transition Hooks to be registered.
		 * - It allows the default transition error handler to be set.
		 * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).
		 *
		 * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.
		 */
		var TransitionService = (function () {
		    function TransitionService(_router) {
		        this._router = _router;
		        this.$view = _router.viewService;
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        this._deregisterHookFns = {};
		        this.registerTransitionHooks();
		    }
		    /** @hidden */
		    TransitionService.prototype.registerTransitionHooks = function () {
		        var fns = this._deregisterHookFns;
		        // Wire up redirectTo hook
		        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);
		        // Wire up onExit/Retain/Enter state hooks
		        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);
		        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);
		        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);
		        // Wire up Resolve hooks
		        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);
		        fns.lazyResolve = resolve_1.registerLazyResolveState(this);
		        // Wire up the View management hooks
		        fns.loadViews = views_1.registerLoadEnteringViews(this);
		        fns.activateViews = views_1.registerActivateViews(this);
		        // After globals.current is updated at priority: 10000
		        fns.updateUrl = url_1.registerUpdateUrl(this);
		        // Lazy load state trees
		        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);
		    };
		    /** @inheritdoc */
		    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /**
		     * Creates a new [[Transition]] object
		     *
		     * This is a factory function for creating new Transition objects.
		     * It is used internally by the [[StateService]] and should generally not be called by application code.
		     *
		     * @param fromPath the path to the current state (the from state)
		     * @param targetState the target state (destination)
		     * @returns a Transition
		     */
		    TransitionService.prototype.create = function (fromPath, targetState) {
		        return new transition_1.Transition(fromPath, targetState, this._router);
		    };
		    return TransitionService;
		}());
		exports.TransitionService = TransitionService;
	
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var hof_1 = __webpack_require__(5);
		/**
		 * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path
		 *
		 * Registered using `transitionService.onStart({}, eagerResolvePath);`
		 *
		 * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var eagerResolvePath = function (trans) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .resolvePath("EAGER", trans)
		        .then(common_1.noop);
		};
		exports.registerEagerResolvePath = function (transitionService) {
		    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });
		};
		/**
		 * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path
		 *
		 * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`
		 *
		 * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var lazyResolveState = function (trans, state) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .subContext(state)
		        .resolvePath("LAZY", trans)
		        .then(common_1.noop);
		};
		exports.registerLazyResolveState = function (transitionService) {
		    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });
		};
	
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] which waits for the views to load
		 *
		 * Registered using `transitionService.onStart({}, loadEnteringViews);`
		 *
		 * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.
		 * In angular 1, this includes loading the templates.
		 */
		var loadEnteringViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    if (!enteringViews.length)
		        return;
		    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);
		};
		exports.registerLoadEnteringViews = function (transitionService) {
		    return transitionService.onStart({}, loadEnteringViews);
		};
		/**
		 * A [[TransitionHookFn]] which activates the new views when a transition is successful.
		 *
		 * Registered using `transitionService.onSuccess({}, activateViews);`
		 *
		 * After a transition is complete, this hook deactivates the old views from the previous state,
		 * and activates the new views from the destination state.
		 *
		 * See [[ViewService]]
		 */
		var activateViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    var exitingViews = transition.views("exiting");
		    if (!enteringViews.length && !exitingViews.length)
		        return;
		    var $view = transition.router.viewService;
		    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });
		    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });
		    $view.sync();
		};
		exports.registerActivateViews = function (transitionService) {
		    return transitionService.onSuccess({}, activateViews);
		};
	
	
	/***/ },
	/* 33 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * A [[TransitionHookFn]] which updates the URL after a successful transition
		 *
		 * Registered using `transitionService.onSuccess({}, updateUrl);`
		 */
		var updateUrl = function (transition) {
		    var options = transition.options();
		    var $state = transition.router.stateService;
		    var $urlRouter = transition.router.urlRouter;
		    // Dont update the url in these situations:
		    // The transition was triggered by a URL sync (options.source === 'url')
		    // The user doesn't want the url to update (options.location === false)
		    // The destination state, and all parents have no navigable url
		    if (options.source !== 'url' && options.location && $state.$current.navigable) {
		        var urlOptions = { replace: options.location === 'replace' };
		        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);
		    }
		    $urlRouter.update(true);
		};
		exports.registerUpdateUrl = function (transitionService) {
		    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });
		};
	
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var targetState_1 = __webpack_require__(14);
		/**
		 * A [[TransitionHookFn]] that redirects to a different state or params
		 *
		 * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`
		 *
		 * See [[StateDeclaration.redirectTo]]
		 */
		var redirectToHook = function (trans) {
		    var redirect = trans.to().redirectTo;
		    if (!redirect)
		        return;
		    function handleResult(result) {
		        var $state = trans.router.stateService;
		        if (result instanceof targetState_1.TargetState)
		            return result;
		        if (predicates_1.isString(result))
		            return $state.target(result, trans.params(), trans.options());
		        if (result['state'] || result['params'])
		            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());
		    }
		    if (predicates_1.isFunction(redirect)) {
		        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);
		    }
		    return handleResult(redirect);
		};
		exports.registerRedirectToHook = function (transitionService) {
		    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);
		};
	
	
	/***/ },
	/* 35 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * A factory which creates an onEnter, onExit or onRetain transition hook function
		 *
		 * The returned function invokes the (for instance) state.onEnter hook when the
		 * state is being entered.
		 *
		 * @hidden
		 */
		function makeEnterExitRetainHook(hookName) {
		    return function (transition, state) {
		        var hookFn = state[hookName];
		        return hookFn(transition, state);
		    };
		}
		/**
		 * The [[TransitionStateHookFn]] for onExit
		 *
		 * When the state is being exited, the state's .onExit function is invoked.
		 *
		 * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`
		 *
		 * See: [[IHookRegistry.onExit]]
		 */
		var onExitHook = makeEnterExitRetainHook('onExit');
		exports.registerOnExitHook = function (transitionService) {
		    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onRetain
		 *
		 * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.
		 *
		 * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`
		 *
		 * See: [[IHookRegistry.onRetain]]
		 */
		var onRetainHook = makeEnterExitRetainHook('onRetain');
		exports.registerOnRetainHook = function (transitionService) {
		    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onEnter
		 *
		 * When the state is being entered, the state's .onEnter function is invoked.
		 *
		 * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`
		 *
		 * See: [[IHookRegistry.onEnter]]
		 */
		var onEnterHook = makeEnterExitRetainHook('onEnter');
		exports.registerOnEnterHook = function (transitionService) {
		    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);
		};
	
	
	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] that lazy loads a state tree.
		 *
		 * When transitioning to a state "abc" which has a `lazyLoad` function defined:
		 * - Invoke the `lazyLoad` function
		 *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s
		 * - Wait for the promise to resolve
		 * - Deregister the original state "abc"
		 *   - The original state definition is a placeholder for the lazy loaded states
		 * - Register the new states
		 * - Retry the transition
		 *
		 * See [[StateDeclaration.lazyLoad]]
		 */
		var lazyLoadHook = function (transition) {
		    var toState = transition.to();
		    var registry = transition.router.stateRegistry;
		    function retryOriginalTransition() {
		        if (transition.options().source === 'url') {
		            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();
		            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };
		            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {
		                var state = _a[0], params = _a[1];
		                return !!params;
		            });
		            if (matches.length) {
		                var _a = matches[0], state = _a[0], params = _a[1];
		                return transition.router.stateService.target(state, params, transition.options());
		            }
		            transition.router.urlRouter.sync();
		        }
		        // The original transition was not triggered via url sync
		        // The lazy state should be loaded now, so re-try the original transition
		        var orig = transition.targetState();
		        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());
		    }
		    /**
		     * Replace the placeholder state with the newly loaded states from the NgModule.
		     */
		    function updateStateRegistry(result) {
		        // deregister placeholder state
		        registry.deregister(transition.$to());
		        if (result && Array.isArray(result.states)) {
		            result.states.forEach(function (state) { return registry.register(state); });
		        }
		    }
		    var hook = toState.lazyLoad;
		    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked
		    var promise = hook['_promise'];
		    if (!promise) {
		        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);
		        var cleanup = function () { return delete hook['_promise']; };
		        promise.then(cleanup, cleanup);
		    }
		    return promise.then(retryOriginalTransition);
		};
		exports.registerLazyLoadHook = function (transitionService) {
		    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);
		};
	
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module view */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		/**
		 * The View service
		 */
		var ViewService = (function () {
		    function ViewService() {
		        var _this = this;
		        this.uiViews = [];
		        this.viewConfigs = [];
		        this._viewConfigFactories = {};
		        this.sync = function () {
		            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});
		            /**
		             * Given a ui-view and a ViewConfig, determines if they "match".
		             *
		             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in
		             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.
		             *
		             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or
		             * can be a segmented ui-view path, describing a portion of a ui-view fqn.
		             *
		             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type
		             *
		             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:
		             * - the ui-view's name matches the ViewConfig's target name
		             * - the ui-view's context matches the ViewConfig's anchor
		             *
		             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:
		             * - There exists a parent ui-view where:
		             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name
		             *    - the parent ui-view's context matches the ViewConfig's anchor
		             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn
		             *
		             * Example:
		             *
		             * DOM:
		             * <div ui-view>                        <!-- created in the root context (name: "") -->
		             *   <div ui-view="foo">                <!-- created in the context named: "A"      -->
		             *     <div ui-view>                    <!-- created in the context named: "A.B"    -->
		             *       <div ui-view="bar">            <!-- created in the context named: "A.B.C"  -->
		             *       </div>
		             *     </div>
		             *   </div>
		             * </div>
		             *
		             * uiViews: [
		             *  { fqn: "$default",                  creationContext: { name: "" } },
		             *  { fqn: "$default.foo",              creationContext: { name: "A" } },
		             *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }
		             *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }
		             * ]
		             *
		             * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":
		             *
		             * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }
		             * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }
		             * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }
		             * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }
		             *
		             * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:
		             * - The ViewConfig's segmented target name is: [ "foo", "$default", "bar" ]
		             * - There exists a parent ui-view (which has fqn: "$default.foo") where:
		             *    - the parent ui-view's name "foo" matches the first segment "foo" of the ViewConfig's target name
		             *    - the parent ui-view's context "A" matches the ViewConfig's anchor context "A"
		             * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig's target name match
		             *   the tail of the ui-view's fqn "default.bar"
		             */
		            var matches = function (uiView) { return function (viewConfig) {
		                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc
		                if (uiView.$type !== viewConfig.viewDecl.$type)
		                    return false;
		                // Split names apart from both viewConfig and uiView into segments
		                var vc = viewConfig.viewDecl;
		                var vcSegments = vc.$uiViewName.split(".");
		                var uivSegments = uiView.fqn.split(".");
		                // Check if the tails of the segment arrays match. ex, these arrays' tails match:
		                // vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]
		                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))
		                    return false;
		                // Now check if the fqn ending at the first segment of the viewConfig matches the context:
		                // ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?
		                var negOffset = (1 - vcSegments.length) || undefined;
		                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(".");
		                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;
		                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);
		            }; };
		            // Return the number of dots in the fully qualified name
		            function uiViewDepth(uiView) {
		                return uiView.fqn.split(".").length;
		            }
		            // Return the ViewConfig's context's depth in the context tree.
		            function viewConfigDepth(config) {
		                var context = config.viewDecl.$context, count = 0;
		                while (++count && context.parent)
		                    context = context.parent;
		                return count;
		            }
		            // Given a depth function, returns a compare function which can return either ascending or descending order
		            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });
		            var matchingConfigPair = function (uiView) {
		                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));
		                if (matchingConfigs.length > 1)
		                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending
		                return [uiView, matchingConfigs[0]];
		            };
		            var configureUIView = function (_a) {
		                var uiView = _a[0], viewConfig = _a[1];
		                // If a parent ui-view is reconfigured, it could destroy child ui-views.
		                // Before configuring a child ui-view, make sure it's still in the active uiViews array.
		                if (_this.uiViews.indexOf(uiView) !== -1)
		                    uiView.configUpdated(viewConfig);
		            };
		            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);
		        };
		    }
		    ViewService.prototype.rootContext = function (context) {
		        return this._rootContext = context || this._rootContext;
		    };
		    ;
		    ViewService.prototype.viewConfigFactory = function (viewType, factory) {
		        this._viewConfigFactories[viewType] = factory;
		    };
		    ViewService.prototype.createViewConfig = function (path, decl) {
		        var cfgFactory = this._viewConfigFactories[decl.$type];
		        if (!cfgFactory)
		            throw new Error("ViewService: No view config factory registered for type " + decl.$type);
		        var cfgs = cfgFactory(path, decl);
		        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];
		    };
		    /**
		     * De-registers a ViewConfig.
		     *
		     * @param viewConfig The ViewConfig view to deregister.
		     */
		    ViewService.prototype.deactivateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("<- Removing", viewConfig);
		        common_1.removeFrom(this.viewConfigs, viewConfig);
		    };
		    ;
		    ViewService.prototype.activateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("-> Registering", viewConfig);
		        this.viewConfigs.push(viewConfig);
		    };
		    ;
		    /**
		     * Allows a `ui-view` element to register its canonical name with a callback that allows it to
		     * be updated with a template, controller, and local variables.
		     *
		     * @param {String} name The fully-qualified name of the `ui-view` object being registered.
		     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration
		     *                   of the view.
		     * @return {Function} Returns a de-registration function used when the view is destroyed.
		     */
		    ViewService.prototype.registerUIView = function (uiView) {
		        trace_1.trace.traceViewServiceUIViewEvent("-> Registering", uiView);
		        var uiViews = this.uiViews;
		        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };
		        if (uiViews.filter(fqnMatches).length)
		            trace_1.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:", uiView);
		        uiViews.push(uiView);
		        this.sync();
		        return function () {
		            var idx = uiViews.indexOf(uiView);
		            if (idx === -1) {
		                trace_1.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView", uiView);
		                return;
		            }
		            trace_1.trace.traceViewServiceUIViewEvent("<- Deregistering", uiView);
		            common_1.removeFrom(uiViews)(uiView);
		        };
		    };
		    ;
		    /**
		     * Returns the list of views currently available on the page, by fully-qualified name.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.available = function () {
		        return this.uiViews.map(hof_1.prop("fqn"));
		    };
		    /**
		     * Returns the list of views on the page containing loaded content.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.active = function () {
		        return this.uiViews.filter(hof_1.prop("$config")).map(hof_1.prop("name"));
		    };
		    /**
		     * Normalizes a view's name from a state.views configuration block.
		     *
		     * @param context the context object (state declaration) that the view belongs to
		     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]
		     *
		     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets
		     */
		    ViewService.normalizeUIViewTarget = function (context, rawViewName) {
		        if (rawViewName === void 0) { rawViewName = ""; }
		        // TODO: Validate incoming view name with a regexp to allow:
		        // ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,
		        // "@" , "$default@^" , "!$default.$default" , "!foo.bar"
		        var viewAtContext = rawViewName.split("@");
		        var uiViewName = viewAtContext[0] || "$default"; // default to unnamed view
		        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : "^"; // default to parent context
		        // Handle relative view-name sugar syntax.
		        // Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],
		        var relativeViewNameSugar = /^(\^(?:\.\^)*)\.(.*$)/.exec(uiViewName);
		        if (relativeViewNameSugar) {
		            // Clobbers existing contextAnchor (rawViewName validation will fix this)
		            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"
		            uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"
		        }
		        if (uiViewName.charAt(0) === '!') {
		            uiViewName = uiViewName.substr(1);
		            uiViewContextAnchor = ""; // target absolutely from root
		        }
		        // handle parent relative targeting "^.^.^"
		        var relativeMatch = /^(\^(?:\.\^)*)$/;
		        if (relativeMatch.exec(uiViewContextAnchor)) {
		            var anchor = uiViewContextAnchor.split(".").reduce((function (anchor, x) { return anchor.parent; }), context);
		            uiViewContextAnchor = anchor.name;
		        }
		        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };
		    };
		    return ViewService;
		}());
		exports.ViewService = ViewService;
	
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var stateMatcher_1 = __webpack_require__(39);
		var stateBuilder_1 = __webpack_require__(40);
		var stateQueueManager_1 = __webpack_require__(41);
		var common_1 = __webpack_require__(3);
		var StateRegistry = (function () {
		    function StateRegistry(urlMatcherFactory, urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        this.states = {};
		        this.listeners = [];
		        this.matcher = new stateMatcher_1.StateMatcher(this.states);
		        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);
		        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);
		        var rootStateDef = {
		            name: '',
		            url: '^',
		            views: null,
		            params: {
		                '#': { value: null, type: 'hash', dynamic: true }
		            },
		            abstract: true
		        };
		        var _root = this._root = this.stateQueue.register(rootStateDef);
		        _root.navigable = null;
		    }
		    /**
		     * Listen for a State Registry events
		     *
		     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.
		     *
		     * @example
		     * ```js
		     *
		     * let allStates = registry.get();
		     *
		     * // Later, invoke deregisterFn() to remove the listener
		     * let deregisterFn = registry.onStatesChanged((event, states) => {
		     *   switch(event) {
		     *     case: 'registered':
		     *       states.forEach(state => allStates.push(state));
		     *       break;
		     *     case: 'deregistered':
		     *       states.forEach(state => {
		     *         let idx = allStates.indexOf(state);
		     *         if (idx !== -1) allStates.splice(idx, 1);
		     *       });
		     *       break;
		     *   }
		     * });
		     * ```
		     *
		     * @param listener a callback function invoked when the registered states changes.
		     *        The function receives two parameters, `event` and `state`.
		     *        See [[StateRegistryListener]]
		     * @return a function that deregisters the listener
		     */
		    StateRegistry.prototype.onStatesChanged = function (listener) {
		        this.listeners.push(listener);
		        return function deregisterListener() {
		            common_1.removeFrom(this.listeners)(listener);
		        }.bind(this);
		    };
		    /**
		     * Gets the implicit root state
		     *
		     * Gets the root of the state tree.
		     * The root state is implicitly created by UI-Router.
		     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]
		     *
		     * @return the root [[State]]
		     */
		    StateRegistry.prototype.root = function () {
		        return this._root;
		    };
		    /**
		     * Adds a state to the registry
		     *
		     * Registers a [[StateDefinition]] or queues it for registration.
		     *
		     * Note: a state will be queued if the state's parent isn't yet registered.
		     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.
		     *
		     * @param stateDefinition the definition of the state to register.
		     * @returns the internal [[State]] object.
		     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).
		     *          If the state was only queued, then the object is not fully built.
		     */
		    StateRegistry.prototype.register = function (stateDefinition) {
		        return this.stateQueue.register(stateDefinition);
		    };
		    /** @hidden */
		    StateRegistry.prototype._deregisterTree = function (state) {
		        var _this = this;
		        var all = this.get().map(function (s) { return s.$$state(); });
		        var getChildren = function (states) {
		            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });
		            return children.length === 0 ? children : children.concat(getChildren(children));
		        };
		        var children = getChildren([state]);
		        var deregistered = [state].concat(children).reverse();
		        deregistered.forEach(function (state) {
		            _this.urlRouterProvider.removeRule(state._urlRule);
		            delete _this.states[state.name];
		        });
		        return deregistered;
		    };
		    /**
		     * Removes a state from the registry
		     *
		     * This removes a state from the registry.
		     * If the state has children, they are are also removed from the registry.
		     *
		     * @param stateOrName the state's name or object representation
		     * @returns {State[]} a list of removed states
		     */
		    StateRegistry.prototype.deregister = function (stateOrName) {
		        var _state = this.get(stateOrName);
		        if (!_state)
		            throw new Error("Can't deregister state; not found: " + stateOrName);
		        var deregisteredStates = this._deregisterTree(_state.$$state());
		        this.listeners.forEach(function (listener) { return listener("deregistered", deregisteredStates.map(function (s) { return s.self; })); });
		        return deregisteredStates;
		    };
		    StateRegistry.prototype.get = function (stateOrName, base) {
		        var _this = this;
		        if (arguments.length === 0)
		            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });
		        var found = this.matcher.find(stateOrName, base);
		        return found && found.self || null;
		    };
		    StateRegistry.prototype.decorator = function (name, func) {
		        return this.builder.builder(name, func);
		    };
		    return StateRegistry;
		}());
		exports.StateRegistry = StateRegistry;
	
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		var common_1 = __webpack_require__(3);
		var StateMatcher = (function () {
		    function StateMatcher(_states) {
		        this._states = _states;
		    }
		    StateMatcher.prototype.isRelative = function (stateName) {
		        stateName = stateName || "";
		        return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
		    };
		    StateMatcher.prototype.find = function (stateOrName, base) {
		        if (!stateOrName && stateOrName !== "")
		            return undefined;
		        var isStr = predicates_1.isString(stateOrName);
		        var name = isStr ? stateOrName : stateOrName.name;
		        if (this.isRelative(name))
		            name = this.resolvePath(name, base);
		        var state = this._states[name];
		        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
		            return state;
		        }
		        else if (isStr) {
		            var matches = common_1.values(this._states)
		                .filter(function (state) { return new glob_1.Glob(state.name).matches(name); });
		            if (matches.length > 1) {
		                console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) { return match.name; }));
		            }
		            return matches[0];
		        }
		        return undefined;
		    };
		    StateMatcher.prototype.resolvePath = function (name, base) {
		        if (!base)
		            throw new Error("No reference point given for path '" + name + "'");
		        var baseState = this.find(base);
		        var splitName = name.split("."), i = 0, pathLength = splitName.length, current = baseState;
		        for (; i < pathLength; i++) {
		            if (splitName[i] === "" && i === 0) {
		                current = baseState;
		                continue;
		            }
		            if (splitName[i] === "^") {
		                if (!current.parent)
		                    throw new Error("Path '" + name + "' not valid for state '" + baseState.name + "'");
		                current = current.parent;
		                continue;
		            }
		            break;
		        }
		        var relName = splitName.slice(i).join(".");
		        return current.name + (current.name && relName ? "." : "") + relName;
		    };
		    return StateMatcher;
		}());
		exports.StateMatcher = StateMatcher;
	
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var coreservices_1 = __webpack_require__(6);
		var parseUrl = function (url) {
		    if (!predicates_1.isString(url))
		        return false;
		    var root = url.charAt(0) === '^';
		    return { val: root ? url.substring(1) : url, root: root };
		};
		function nameBuilder(state) {
		    if (state.lazyLoad)
		        state.name = state.self.name + ".**";
		    return state.name;
		}
		function selfBuilder(state) {
		    state.self.$$state = function () { return state; };
		    return state.self;
		}
		function dataBuilder(state) {
		    if (state.parent && state.parent.data) {
		        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);
		    }
		    return state.data;
		}
		var getUrlBuilder = function ($urlMatcherFactoryProvider, root) {
		    return function urlBuilder(state) {
		        var stateDec = state;
		        if (stateDec && stateDec.url && stateDec.lazyLoad) {
		            stateDec.url += "{remainder:any}"; // match any path (.*)
		        }
		        var parsed = parseUrl(stateDec.url), parent = state.parent;
		        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {
		            params: state.params || {},
		            paramMap: function (paramConfig, isSearch) {
		                if (stateDec.reloadOnSearch === false && isSearch)
		                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });
		                return paramConfig;
		            }
		        });
		        if (!url)
		            return null;
		        if (!$urlMatcherFactoryProvider.isMatcher(url))
		            throw new Error("Invalid url '" + url + "' in state '" + state + "'");
		        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);
		    };
		};
		var getNavigableBuilder = function (isRoot) {
		    return function navigableBuilder(state) {
		        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);
		    };
		};
		var getParamsBuilder = function (paramTypes) {
		    return function paramsBuilder(state) {
		        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };
		        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];
		        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));
		        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});
		    };
		};
		function pathBuilder(state) {
		    return state.parent ? state.parent.path.concat(state) : [state];
		}
		function includesBuilder(state) {
		    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};
		    includes[state.name] = true;
		    return includes;
		}
		/**
		 * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * validates the `resolve` property and converts it to a [[Resolvable]] array.
		 *
		 * resolve: input value can be:
		 *
		 * {
		 *   // analyzed but not injected
		 *   myFooResolve: function() { return "myFooData"; },
		 *
		 *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)
		 *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },
		 *
		 *   // Array split; "DependencyName" dep as string
		 *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },
		 *
		 *   // Array split; DependencyType dep as token (compared using ===)
		 *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },
		 *
		 *   // val.$inject used as deps
		 *   // where:
		 *   //     corgeResolve.$inject = ["DependencyName"];
		 *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }
		 *   // then "DependencyName" dep as string
		 *   myCorgeResolve: corgeResolve,
		 *
		 *  // inject service by name
		 *  // When a string is found, desugar creating a resolve that injects the named service
		 *   myGraultResolve: "SomeService"
		 * }
		 *
		 * or:
		 *
		 * [
		 *   new Resolvable("myFooResolve", function() { return "myFooData" }),
		 *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),
		 *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }
		 * ]
		 */
		function resolvablesBuilder(state) {
		    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */
		    var objects2Tuples = function (resolveObj, resolvePolicies) {
		        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });
		    };
		    /** fetch DI annotations from a function or ng1-style array */
		    var annotate = function (fn) {
		        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);
		    };
		    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */
		    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };
		    /** true if the object looks like a provide literal, or a ng2 Provider */
		    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };
		    /** true if the object looks like a tuple from obj2Tuples */
		    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };
		    /** extracts the token from a Provider or provide literal */
		    var token = function (p) { return p.provide || p.token; };
		    /** Given a literal resolve or provider object, returns a Resolvable */
		    var literal2Resolvable = hof_1.pattern([
		        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],
		        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],
		        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],
		        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],
		        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],
		    ]);
		    var tuple2Resolvable = hof_1.pattern([
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],
		    ]);
		    var item2Resolvable = hof_1.pattern([
		        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],
		        [isResolveLiteral, literal2Resolvable],
		        [isLikeNg2Provider, literal2Resolvable],
		        [isTupleFromObj, tuple2Resolvable],
		        [hof_1.val(true), function (obj) { throw new Error("Invalid resolve value: " + strings_1.stringify(obj)); }]
		    ]);
		    // If resolveBlock is already an array, use it as-is.
		    // Otherwise, assume it's an object and convert to an Array of tuples
		    var decl = state.resolve;
		    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});
		    return items.map(item2Resolvable);
		}
		exports.resolvablesBuilder = resolvablesBuilder;
		/**
		 * @internalapi A internal global service
		 *
		 * StateBuilder is a factory for the internal [[State]] objects.
		 *
		 * When you register a state with the [[StateRegistry]], you register a plain old javascript object which
		 * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding
		 * [[State]] object, which has an API and is used internally.
		 *
		 * Custom properties or API may be added to the internal [[State]] object by registering a decorator function
		 * using the [[builder]] method.
		 */
		var StateBuilder = (function () {
		    function StateBuilder(matcher, $urlMatcherFactoryProvider) {
		        this.matcher = matcher;
		        var self = this;
		        var root = function () { return matcher.find(""); };
		        var isRoot = function (state) { return state.name === ""; };
		        function parentBuilder(state) {
		            if (isRoot(state))
		                return null;
		            return matcher.find(self.parentName(state)) || root();
		        }
		        this.builders = {
		            name: [nameBuilder],
		            self: [selfBuilder],
		            parent: [parentBuilder],
		            data: [dataBuilder],
		            // Build a URLMatcher if necessary, either via a relative or absolute URL
		            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],
		            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
		            navigable: [getNavigableBuilder(isRoot)],
		            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],
		            // Each framework-specific ui-router implementation should define its own `views` builder
		            // e.g., src/ng1/statebuilders/views.ts
		            views: [],
		            // Keep a full path from the root down to this state as this is needed for state activation.
		            path: [pathBuilder],
		            // Speed up $state.includes() as it's used a lot
		            includes: [includesBuilder],
		            resolvables: [resolvablesBuilder]
		        };
		    }
		    /**
		     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).
		     * More than one BuilderFunction can be registered for a given property.
		     *
		     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.
		     *
		     * @param name The name of the State property being registered for.
		     * @param fn The BuilderFunction which will be used to build the State property
		     * @returns a function which deregisters the BuilderFunction
		     */
		    StateBuilder.prototype.builder = function (name, fn) {
		        var builders = this.builders;
		        var array = builders[name] || [];
		        // Backwards compat: if only one builder exists, return it, else return whole arary.
		        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))
		            return array.length > 1 ? array : array[0];
		        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))
		            return;
		        builders[name] = array;
		        builders[name].push(fn);
		        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };
		    };
		    /**
		     * Builds all of the properties on an essentially blank State object, returning a State object which has all its
		     * properties and API built.
		     *
		     * @param state an uninitialized State object
		     * @returns the built State object
		     */
		    StateBuilder.prototype.build = function (state) {
		        var _a = this, matcher = _a.matcher, builders = _a.builders;
		        var parent = this.parentName(state);
		        if (parent && !matcher.find(parent))
		            return null;
		        for (var key in builders) {
		            if (!builders.hasOwnProperty(key))
		                continue;
		            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);
		            state[key] = chain(state);
		        }
		        return state;
		    };
		    StateBuilder.prototype.parentName = function (state) {
		        var name = state.name || "";
		        var segments = name.split('.');
		        if (segments.length > 1) {
		            if (state.parent) {
		                throw new Error("States that specify the 'parent:' property should not have a '.' in their name (" + name + ")");
		            }
		            var lastSegment = segments.pop();
		            if (lastSegment === '**')
		                segments.pop();
		            return segments.join(".");
		        }
		        if (!state.parent)
		            return "";
		        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		    };
		    StateBuilder.prototype.name = function (state) {
		        var name = state.name;
		        if (name.indexOf('.') !== -1 || !state.parent)
		            return name;
		        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		        return parentName ? parentName + "." + name : name;
		    };
		    return StateBuilder;
		}());
		exports.StateBuilder = StateBuilder;
	
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var stateObject_1 = __webpack_require__(42);
		var StateQueueManager = (function () {
		    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {
		        this.states = states;
		        this.builder = builder;
		        this.$urlRouterProvider = $urlRouterProvider;
		        this.listeners = listeners;
		        this.queue = [];
		    }
		    StateQueueManager.prototype.register = function (config) {
		        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;
		        // Wrap a new object around the state so we can store our private details easily.
		        // @TODO: state = new State(extend({}, config, { ... }))
		        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {
		            self: config,
		            resolve: config.resolve || [],
		            toString: function () { return config.name; }
		        }));
		        if (!predicates_1.isString(state.name))
		            throw new Error("State must have a valid name");
		        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)
		            throw new Error("State '" + state.name + "' is already defined");
		        queue.push(state);
		        if (this.$state) {
		            this.flush($state);
		        }
		        return state;
		    };
		    StateQueueManager.prototype.flush = function ($state) {
		        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;
		        var registered = [], // states that got registered
		        orphans = [], // states that dodn't yet have a parent registered
		        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered
		        while (queue.length > 0) {
		            var state = queue.shift();
		            var result = builder.build(state);
		            var orphanIdx = orphans.indexOf(state);
		            if (result) {
		                if (states.hasOwnProperty(state.name))
		                    throw new Error("State '" + name + "' is already defined");
		                states[state.name] = state;
		                this.attachRoute($state, state);
		                if (orphanIdx >= 0)
		                    orphans.splice(orphanIdx, 1);
		                registered.push(state);
		                continue;
		            }
		            var prev = previousQueueLength[state.name];
		            previousQueueLength[state.name] = queue.length;
		            if (orphanIdx >= 0 && prev === queue.length) {
		                // Wait until two consecutive iterations where no additional states were dequeued successfully.
		                // throw new Error(`Cannot register orphaned state '${state.name}'`);
		                queue.push(state);
		                return states;
		            }
		            else if (orphanIdx < 0) {
		                orphans.push(state);
		            }
		            queue.push(state);
		        }
		        if (registered.length) {
		            this.listeners.forEach(function (listener) { return listener("registered", registered.map(function (s) { return s.self; })); });
		        }
		        return states;
		    };
		    StateQueueManager.prototype.autoFlush = function ($state) {
		        this.$state = $state;
		        this.flush($state);
		    };
		    StateQueueManager.prototype.attachRoute = function ($state, state) {
		        var $urlRouterProvider = this.$urlRouterProvider;
		        if (state.abstract || !state.url)
		            return;
		        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
		                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {
		                    $state.transitionTo(state, $match, { inherit: true, source: "url" });
		                }
		            }], function (rule) { return state._urlRule = rule; });
		    };
		    return StateQueueManager;
		}());
		exports.StateQueueManager = StateQueueManager;
	
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:State
		 *
		 * @description
		 * Definition object for states. Includes methods for manipulating the state heirarchy.
		 *
		 * @param {Object} config  A configuration object hash that includes the results of user-supplied
		 *        values, as well as values from `StateBuilder`.
		 *
		 * @returns {Object}  Returns a new `State` object.
		 */
		var State = (function () {
		    function State(config) {
		        common_1.extend(this, config);
		        // Object.freeze(this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#is
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Compares the identity of the state against the passed value, which is either an object
		     * reference to the actual `State` instance, the original definition object passed to
		     * `$stateProvider.state()`, or the fully-qualified name.
		     *
		     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed
		     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.
		     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.
		     */
		    State.prototype.is = function (ref) {
		        return this === ref || this.self === ref || this.fqn() === ref;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#fqn
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the fully-qualified name of the state, based on its current position in the tree.
		     *
		     * @returns {string} Returns a dot-separated name of the state.
		     */
		    State.prototype.fqn = function () {
		        if (!this.parent || !(this.parent instanceof this.constructor))
		            return this.name;
		        var name = this.parent.fqn();
		        return name ? name + "." + this.name : this.name;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#root
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the root node of this state's tree.
		     *
		     * @returns {State} The root of this state's tree.
		     */
		    State.prototype.root = function () {
		        return this.parent && this.parent.root() || this;
		    };
		    State.prototype.parameters = function (opts) {
		        opts = common_1.defaults(opts, { inherit: true });
		        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];
		        return inherited.concat(common_1.values(this.params));
		    };
		    State.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        return (this.url && this.url.parameter(id, opts) ||
		            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||
		            opts.inherit && this.parent && this.parent.parameter(id));
		    };
		    State.prototype.toString = function () {
		        return this.fqn();
		    };
		    return State;
		}());
		exports.State = State;
	
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var queue_1 = __webpack_require__(8);
		var coreservices_1 = __webpack_require__(6);
		var pathFactory_1 = __webpack_require__(20);
		var node_1 = __webpack_require__(21);
		var transitionService_1 = __webpack_require__(30);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var glob_1 = __webpack_require__(7);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var StateService = (function () {
		    /** @hidden */
		    function StateService(router) {
		        this.router = router;
		        this.invalidCallbacks = [];
		        /** @hidden */
		        this._defaultErrorHandler = function $defaultErrorHandler($error$) {
		            if ($error$ instanceof Error && $error$.stack) {
		                console.error($error$);
		                console.error($error$.stack);
		            }
		            else if ($error$ instanceof rejectFactory_1.Rejection) {
		                console.error($error$.toString());
		                if ($error$.detail && $error$.detail.stack)
		                    console.error($error$.detail.stack);
		            }
		            else {
		                console.error($error$);
		            }
		        };
		        var getters = ['current', '$current', 'params', 'transition'];
		        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });
		        common_3.bindFunctions(StateService.prototype, this, this, boundFns);
		    }
		    Object.defineProperty(StateService.prototype, "transition", {
		        get: function () { return this.router.globals.transition; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "params", {
		        get: function () { return this.router.globals.params; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "current", {
		        get: function () { return this.router.globals.current; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "$current", {
		        get: function () { return this.router.globals.$current; },
		        enumerable: true,
		        configurable: true
		    });
		    /**
		     * Handler for when [[transitionTo]] is called with an invalid state.
		     *
		     * Invokes the [[onInvalid]] callbacks, in natural order.
		     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.
		     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.
		     *
		     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.
		     */
		    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {
		        var _this = this;
		        var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);
		        var globals = this.router.globals;
		        var latestThing = function () { return globals.transitionHistory.peekTail(); };
		        var latest = latestThing();
		        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());
		        var injector = new resolveContext_1.ResolveContext(fromPath).injector();
		        var checkForRedirect = function (result) {
		            if (!(result instanceof targetState_1.TargetState)) {
		                return;
		            }
		            var target = result;
		            // Recreate the TargetState, in case the state is now defined.
		            target = _this.target(target.identifier(), target.params(), target.options());
		            if (!target.valid())
		                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();
		            if (latestThing() !== latest)
		                return rejectFactory_1.Rejection.superseded().toPromise();
		            return _this.transitionTo(target.identifier(), target.params(), target.options());
		        };
		        function invokeNextCallback() {
		            var nextCallback = callbackQueue.dequeue();
		            if (nextCallback === undefined)
		                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();
		            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));
		            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });
		        }
		        return invokeNextCallback();
		    };
		    /**
		     * Registers an Invalid State handler
		     *
		     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]
		     * has been called with an invalid state reference parameter
		     *
		     * Example:
		     * ```js
		     * stateService.onInvalid(function(to, from, injector) {
		     *   if (to.name() === 'foo') {
		     *     let lazyLoader = injector.get('LazyLoadService');
		     *     return lazyLoader.load('foo')
		     *         .then(() => stateService.target('foo'));
		     *   }
		     * });
		     * ```
		     *
		     * @param {function} callback invoked when the toState is invalid
		     *   This function receives the (invalid) toState, the fromState, and an injector.
		     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.
		     *   If one is returned, it is treated as a redirect.
		     *
		     * @returns a function which deregisters the callback
		     */
		    StateService.prototype.onInvalid = function (callback) {
		        this.invalidCallbacks.push(callback);
		        return function deregisterListener() {
		            common_1.removeFrom(this.invalidCallbacks)(callback);
		        }.bind(this);
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#reload
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,
		     * controllers reinstantiated, and events re-fired.
		     *
		     * @example
		     * <pre>
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     $state.reload();
		     *   }
		     * });
		     * </pre>
		     *
		     * `reload()` is just an alias for:
		     * <pre>
		     * $state.transitionTo($state.current, $stateParams, {
		     *   reload: true, inherit: false, notify: true
		     * });
		     * </pre>
		     *
		     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.
		     * @example
		     * <pre>
		     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
		     * //and current state is 'contacts.detail.item'
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     //will reload 'contact.detail' and nested 'contact.detail.item' states
		     *     $state.reload('contact.detail');
		     *   }
		     * });
		     * </pre>
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.reload = function (reloadState) {
		        return this.transitionTo(this.current, this.params, {
		            reload: predicates_1.isDefined(reloadState) ? reloadState : true,
		            inherit: false,
		            notify: false
		        });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#go
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Convenience method for transitioning to a new state. `$state.go` calls
		     * `$state.transitionTo` internally but automatically sets options to
		     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
		     * This allows you to easily use an absolute or relative to path and specify
		     * only the parameters you'd like to update (while letting unspecified parameters
		     * inherit from the currently active ancestor states).
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.go('contact.detail');
		     *   };
		     * });
		     * </pre>
		     * <img src='../ngdoc_assets/StateGoExamples.png'/>
		     *
		     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:
		     *
		     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
		     * - `$state.go('^')` - will go to a parent state
		     * - `$state.go('^.sibling')` - will go to a sibling state
		     * - `$state.go('.child.grandchild')` - will go to grandchild state
		     *
		     * @param {object=} params A map of the parameters that will be sent to the state,
		     * will populate $stateParams. Any parameters that are not specified will be inherited from currently
		     * defined parameters. This allows, for example, going to a sibling state that shares parameters
		     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
		     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
		     * will get you all current parameters, etc.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition.
		     *
		     * Possible success values:
		     *
		     * - $state.current
		     *
		     * <br/>Possible rejection values:
		     *
		     * - 'transition superseded' - when a newer transition has been started after this one
		     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
		     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
		     *   when a `$stateNotFound` `event.retry` promise errors.
		     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
		     * - *resolve error* - when an error has occurred with a `resolve`
		     *
		     */
		    StateService.prototype.go = function (to, params, options) {
		        var defautGoOpts = { relative: this.$current, inherit: true };
		        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);
		        return this.transitionTo(to, params, transOpts);
		    };
		    ;
		    /** Factory method for creating a TargetState */
		    StateService.prototype.target = function (identifier, params, options) {
		        if (options === void 0) { options = {}; }
		        // If we're reloading, find the state object to reload from
		        if (predicates_1.isObject(options.reload) && !options.reload.name)
		            throw new Error('Invalid reload state object');
		        var reg = this.router.stateRegistry;
		        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);
		        if (options.reload && !options.reloadState)
		            throw new Error("No such reload state '" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + "'");
		        var stateDefinition = reg.matcher.find(identifier, options.relative);
		        return new targetState_1.TargetState(identifier, stateDefinition, params, options);
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#transitionTo
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
		     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.transitionTo('contact.detail');
		     *   };
		     * });
		     * </pre>
		     *
		     * @param {string|object} to State name or state object.
		     * @param {object=} toParams A map of the parameters that will be sent to the state,
		     * will populate $stateParams.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.transitionTo = function (to, toParams, options) {
		        var _this = this;
		        if (toParams === void 0) { toParams = {}; }
		        if (options === void 0) { options = {}; }
		        var router = this.router;
		        var globals = router.globals;
		        var transHistory = globals.transitionHistory;
		        options = common_1.defaults(options, transitionService_1.defaultTransOpts);
		        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });
		        var ref = this.target(to, toParams, options);
		        var latestSuccess = globals.successfulTransitions.peekTail();
		        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };
		        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();
		        if (!ref.exists())
		            return this._handleInvalidTargetState(currentPath, ref);
		        if (!ref.valid())
		            return common_1.silentRejection(ref.error());
		        /**
		         * Special handling for Ignored, Aborted, and Redirected transitions
		         *
		         * The semantics for the transition.run() promise and the StateService.transitionTo()
		         * promise differ. For instance, the run() promise may be rejected because it was
		         * IGNORED, but the transitionTo() promise is resolved because from the user perspective
		         * no error occurred.  Likewise, the transition.run() promise may be rejected because of
		         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.
		         */
		        var rejectedTransitionHandler = function (transition) { return function (error) {
		            if (error instanceof rejectFactory_1.Rejection) {
		                if (error.type === rejectFactory_1.RejectType.IGNORED) {
		                    // Consider ignored `Transition.run()` as a successful `transitionTo`
		                    router.urlRouter.update();
		                    return coreservices_1.services.$q.when(globals.current);
		                }
		                var detail = error.detail;
		                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {
		                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully
		                    // by returning the promise for the new (redirect) `Transition.run()`.
		                    var redirect = transition.redirect(detail);
		                    return redirect.run().catch(rejectedTransitionHandler(redirect));
		                }
		                if (error.type === rejectFactory_1.RejectType.ABORTED) {
		                    router.urlRouter.update();
		                }
		            }
		            var errorHandler = _this.defaultErrorHandler();
		            errorHandler(error);
		            return coreservices_1.services.$q.reject(error);
		        }; };
		        var transition = this.router.transitionService.create(currentPath, ref);
		        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));
		        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676
		        // Return a promise for the transition, which also has the transition object on it.
		        return common_1.extend(transitionToPromise, { transition: transition });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#is
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
		     * but only checks for the full state name. If params is supplied then it will be
		     * tested for strict equality against the current active params object, so all params
		     * must match with none missing and no extras.
		     *
		     * @example
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // absolute name
		     * $state.is('contact.details.item'); // returns true
		     * $state.is(contactDetailItemStateObject); // returns true
		     *
		     * // relative name (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
		     * to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
		     * test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it is the state.
		     */
		    StateService.prototype.is = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (this.$current !== state)
		            return false;
		        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#includes
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method to determine if the current active state is equal to or is the child of the
		     * state stateName. If any params are passed then they will be tested for a match as well.
		     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
		     *
		     * @example
		     * Partial and relative names
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // Using partial names
		     * $state.includes("contacts"); // returns true
		     * $state.includes("contacts.details"); // returns true
		     * $state.includes("contacts.details.item"); // returns true
		     * $state.includes("contacts.list"); // returns false
		     * $state.includes("about"); // returns false
		     *
		     * // Using relative names (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
		     * </pre>
		     *
		     * Basic globbing patterns
		     * <pre>
		     * $state.$current.name = 'contacts.details.item.url';
		     *
		     * $state.includes("*.details.*.*"); // returns true
		     * $state.includes("*.details.**"); // returns true
		     * $state.includes("**.item.**"); // returns true
		     * $state.includes("*.details.item.url"); // returns true
		     * $state.includes("*.details.*.url"); // returns true
		     * $state.includes("*.details.*"); // returns false
		     * $state.includes("item.**"); // returns false
		     * </pre>
		     *
		     * @param {string|object} stateOrName A partial name, relative name, glob pattern,
		     * or state object to be searched for within the current state name.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
		     * that you'd like to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
		     * .includes will test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it does include the state
		     */
		    StateService.prototype.includes = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);
		        if (glob) {
		            if (!glob.matches(this.$current.name))
		                return false;
		            stateOrName = this.$current.name;
		        }
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (!predicates_1.isDefined(include[state.name]))
		            return false;
		        // @TODO Replace with Param.equals() ?
		        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#href
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A url generation method that returns the compiled url for the given state populated with the given params.
		     *
		     * @example
		     * <pre>
		     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
		     * @param {object=} params An object of parameter values to fill the state's required parameters.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
		     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
		     *    ancestor with a valid url).
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns {string} compiled state url
		     */
		    StateService.prototype.href = function (stateOrName, params, options) {
		        var defaultHrefOpts = {
		            lossy: true,
		            inherit: true,
		            absolute: false,
		            relative: this.$current
		        };
		        options = common_1.defaults(options, defaultHrefOpts);
		        params = params || {};
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return null;
		        if (options.inherit)
		            params = this.params.$inherit(params, this.$current, state);
		        var nav = (state && options.lossy) ? state.navigable : state;
		        if (!nav || nav.url === undefined || nav.url === null) {
		            return null;
		        }
		        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {
		            absolute: options.absolute
		        });
		    };
		    ;
		    /**
		     * Sets or gets the default [[transitionTo]] error handler.
		     *
		     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.
		     * This includes errors caused by resolves and transition hooks.
		     *
		     * Note:
		     * This handler does not receive certain Transition rejections.
		     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].
		     *
		     * The built-in default error handler logs the error to the console.
		     *
		     * You can provide your own custom handler.
		     *
		     * @example
		     * ```js
		     *
		     * stateService.defaultErrorHandler(function() {
		     *   // Do not log transitionTo errors
		     * });
		     * ```
		     *
		     * @param handler a global error handler function
		     * @returns the current global error handler
		     */
		    StateService.prototype.defaultErrorHandler = function (handler) {
		        return this._defaultErrorHandler = handler || this._defaultErrorHandler;
		    };
		    StateService.prototype.get = function (stateOrName, base) {
		        var reg = this.router.stateRegistry;
		        if (arguments.length === 0)
		            return reg.get();
		        return reg.get(stateOrName, base || this.$current);
		    };
		    return StateService;
		}());
		exports.StateService = StateService;
	
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module core */ /** */
		var stateParams_1 = __webpack_require__(45);
		var queue_1 = __webpack_require__(8);
		var common_1 = __webpack_require__(3);
		/**
		 * Global mutable state
		 */
		var Globals = (function () {
		    function Globals(transitionService) {
		        var _this = this;
		        this.params = new stateParams_1.StateParams();
		        this.transitionHistory = new queue_1.Queue([], 1);
		        this.successfulTransitions = new queue_1.Queue([], 1);
		        var beforeNewTransition = function ($transition$) {
		            _this.transition = $transition$;
		            _this.transitionHistory.enqueue($transition$);
		            var updateGlobalState = function () {
		                _this.successfulTransitions.enqueue($transition$);
		                _this.$current = $transition$.$to();
		                _this.current = _this.$current.self;
		                common_1.copy($transition$.params(), _this.params);
		            };
		            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });
		            var clearCurrentTransition = function () { if (_this.transition === $transition$)
		                _this.transition = null; };
		            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);
		        };
		        transitionService.onBefore({}, beforeNewTransition);
		    }
		    return Globals;
		}());
		exports.Globals = Globals;
	
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var StateParams = (function () {
		    function StateParams(params) {
		        if (params === void 0) { params = {}; }
		        common_1.extend(this, params);
		    }
		    /**
		     * Merges a set of parameters with all parameters inherited between the common parents of the
		     * current state and a given destination state.
		     *
		     * @param {Object} newParams The set of parameters which will be composited with inherited params.
		     * @param {Object} $current Internal definition of object representing the current state.
		     * @param {Object} $to Internal definition of object representing state to transition to.
		     */
		    StateParams.prototype.$inherit = function (newParams, $current, $to) {
		        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
		        for (var i in parents) {
		            if (!parents[i] || !parents[i].params)
		                continue;
		            parentParams = Object.keys(parents[i].params);
		            if (!parentParams.length)
		                continue;
		            for (var j in parentParams) {
		                if (inheritList.indexOf(parentParams[j]) >= 0)
		                    continue;
		                inheritList.push(parentParams[j]);
		                inherited[parentParams[j]] = this[parentParams[j]];
		            }
		        }
		        return common_1.extend({}, inherited, newParams);
		    };
		    ;
		    return StateParams;
		}());
		exports.StateParams = StateParams;
	
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains code for State Parameters.
		 *
		 * See [[ParamDeclaration]]
		 * @module params
		 * @preferred doc
		 */
		/** for typedoc */
		__export(__webpack_require__(22));
		__export(__webpack_require__(28));
		__export(__webpack_require__(45));
		__export(__webpack_require__(24));
	
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module path */ /** for typedoc */
		__export(__webpack_require__(21));
		__export(__webpack_require__(20));
	
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module resolve */ /** for typedoc */
		__export(__webpack_require__(18));
		__export(__webpack_require__(19));
		__export(__webpack_require__(17));
	
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module state */ /** for typedoc */
		__export(__webpack_require__(40));
		__export(__webpack_require__(42));
		__export(__webpack_require__(39));
		__export(__webpack_require__(41));
		__export(__webpack_require__(38));
		__export(__webpack_require__(43));
		__export(__webpack_require__(14));
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains APIs related to a Transition.
		 *
		 * See [[Transition]], [[$transitions]]
		 *
		 * @module transition
		 * @preferred
		 */
		/** for typedoc */
		__export(__webpack_require__(16));
		__export(__webpack_require__(15));
		__export(__webpack_require__(10));
		__export(__webpack_require__(11));
		__export(__webpack_require__(13));
		__export(__webpack_require__(30));
	
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module url */ /** for typedoc */
		__export(__webpack_require__(27));
		__export(__webpack_require__(23));
		__export(__webpack_require__(26));
		__export(__webpack_require__(29));
	
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module view */ /** for typedoc */
		__export(__webpack_require__(37));
	
	
	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * # UI-Router for Angular 1
		 *
		 * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.
		 * - Also registers some services with the angular 1 injector.
		 * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.
		 *
		 * @module ng1
		 * @preferred
		 */
		"use strict";
		/** for typedoc */
		var router_1 = __webpack_require__(25);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var resolveService_1 = __webpack_require__(54);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var templateFactory_1 = __webpack_require__(56);
		var stateProvider_1 = __webpack_require__(58);
		var onEnterExitRetain_1 = __webpack_require__(59);
		var angular = __webpack_require__(57);
		/** @hidden */
		var app = angular.module("ui.router.angular1", []);
		/**
		 * @ngdoc overview
		 * @name ui.router.util
		 *
		 * @description
		 * # ui.router.util sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.util', ['ng', 'ui.router.init']);
		/**
		 * @ngdoc overview
		 * @name ui.router.router
		 *
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.router sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 */
		angular.module('ui.router.router', ['ui.router.util']);
		/**
		 * @ngdoc overview
		 * @name ui.router.state
		 *
		 * @requires ui.router.router
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.state sub-module
		 *
		 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);
		/**
		 * @ngdoc overview
		 * @name ui.router
		 *
		 * @requires ui.router.state
		 *
		 * @description
		 * # ui.router
		 *
		 * ## The main module for ui.router
		 * There are several sub-modules included with the ui.router module, however only this module is needed
		 * as a dependency within your angular app. The other modules are for organization purposes.
		 *
		 * The modules are:
		 * * ui.router - the main "umbrella" module
		 * * ui.router.router -
		 *
		 * *You'll need to include **only** this module as the dependency within your angular app.*
		 *
		 * <pre>
		 * <!doctype html>
		 * <html ng-app="myApp">
		 * <head>
		 *   <script src="js/angular.js"></script>
		 *   <!-- Include the ui-router script -->
		 *   <script src="js/angular-ui-router.min.js"></script>
		 *   <script>
		 *     // ...and add 'ui.router' as a dependency
		 *     var myApp = angular.module('myApp', ['ui.router']);
		 *   </script>
		 * </head>
		 * <body>
		 * </body>
		 * </html>
		 * </pre>
		 */
		angular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);
		angular.module('ui.router.compat', ['ui.router']);
		/**
		 * Annotates a controller expression (may be a controller function(), a "controllername",
		 * or "controllername as name")
		 *
		 * - Temporarily decorates $injector.instantiate.
		 * - Invokes $controller() service
		 *   - Calls $injector.instantiate with controller constructor
		 * - Annotate constructor
		 * - Undecorate $injector
		 *
		 * returns an array of strings, which are the arguments of the controller expression
		 */
		function annotateController(controllerExpression) {
		    var $injector = coreservices_1.services.$injector;
		    var $controller = $injector.get("$controller");
		    var oldInstantiate = $injector.instantiate;
		    try {
		        var deps_1;
		        $injector.instantiate = function fakeInstantiate(constructorFunction) {
		            $injector.instantiate = oldInstantiate; // Un-decorate ASAP
		            deps_1 = $injector.annotate(constructorFunction);
		        };
		        $controller(controllerExpression, { $scope: {} });
		        return deps_1;
		    }
		    finally {
		        $injector.instantiate = oldInstantiate;
		    }
		}
		exports.annotateController = annotateController;
		var router = null;
		$uiRouter.$inject = ['$locationProvider'];
		/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */
		function $uiRouter($locationProvider) {
		    // Create a new instance of the Router when the $uiRouterProvider is initialized
		    router = new router_1.UIRouter();
		    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);
		    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties
		    router.stateRegistry.decorator("views", views_1.ng1ViewsBuilder);
		    router.stateRegistry.decorator("onExit", onEnterExitRetain_1.getStateHookBuilder("onExit"));
		    router.stateRegistry.decorator("onRetain", onEnterExitRetain_1.getStateHookBuilder("onRetain"));
		    router.stateRegistry.decorator("onEnter", onEnterExitRetain_1.getStateHookBuilder("onEnter"));
		    router.viewService.viewConfigFactory('ng1', views_1.ng1ViewConfigFactory);
		    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix
		    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);
		    // Create a LocationService.onChange registry
		    var urlListeners = [];
		    coreservices_1.services.location.onChange = function (callback) {
		        urlListeners.push(callback);
		        return function () { return common_1.removeFrom(urlListeners)(callback); };
		    };
		    this.$get = $get;
		    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];
		    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {
		        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange
		        $rootScope.$on("$locationChangeSuccess", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });
		        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history
		        coreservices_1.services.locationConfig.html5Mode = function () {
		            var html5Mode = $locationProvider.html5Mode();
		            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;
		            return html5Mode && $sniffer.history;
		        };
		        coreservices_1.services.location.setUrl = function (newUrl, replace) {
		            if (replace === void 0) { replace = false; }
		            $location.url(newUrl);
		            if (replace)
		                $location.replace();
		        };
		        coreservices_1.services.template.get = function (url) {
		            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop("data"));
		        };
		        // Bind these LocationService functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.location, $location, ["replace", "url", "path", "search", "hash"]);
		        // Bind these LocationConfig functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);
		        // Bind these LocationConfig functions to $browser
		        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);
		        return router;
		    }
		}
		// The 'ui.router' ng1 module depends on 'ui.router.init' module.
		angular.module('ui.router.init', []).provider("$uiRouter", $uiRouter);
		runBlock.$inject = ['$injector', '$q'];
		function runBlock($injector, $q) {
		    coreservices_1.services.$injector = $injector;
		    coreservices_1.services.$q = $q;
		}
		angular.module('ui.router.init').run(runBlock);
		// This effectively calls $get() to init when we enter runtime
		angular.module('ui.router.init').run(['$uiRouter', function ($uiRouter) { }]);
		// $urlMatcherFactory service and $urlMatcherFactoryProvider
		angular.module('ui.router.util').provider('$urlMatcherFactory', ['$uiRouterProvider', function () { return router.urlMatcherFactory; }]);
		angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);
		// $urlRouter service and $urlRouterProvider
		function getUrlRouterProvider() {
		    router.urlRouterProvider["$get"] = function () {
		        router.urlRouter.update(true);
		        if (!this.interceptDeferred)
		            router.urlRouter.listen();
		        return router.urlRouter;
		    };
		    return router.urlRouterProvider;
		}
		angular.module('ui.router.router').provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);
		angular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);
		// $state service and $stateProvider
		// $urlRouter service and $urlRouterProvider
		function getStateProvider() {
		    router.stateProvider["$get"] = function () {
		        // Autoflush once we are in runtime
		        router.stateRegistry.stateQueue.autoFlush(router.stateService);
		        return router.stateService;
		    };
		    return router.stateProvider;
		}
		angular.module('ui.router.state').provider('$state', ['$uiRouterProvider', getStateProvider]);
		angular.module('ui.router.state').run(['$state', function ($state) { }]);
		// $stateParams service
		angular.module('ui.router.state').factory('$stateParams', ['$uiRouter', function ($uiRouter) {
		        return $uiRouter.globals.params;
		    }]);
		// $transitions service and $transitionsProvider
		function getTransitionsProvider() {
		    router.transitionService["$get"] = function () { return router.transitionService; };
		    return router.transitionService;
		}
		angular.module('ui.router.state').provider('$transitions', ['$uiRouterProvider', getTransitionsProvider]);
		// $templateFactory service
		angular.module('ui.router.util').factory('$templateFactory', ['$uiRouter', function () { return new templateFactory_1.TemplateFactory(); }]);
		// The $view service
		angular.module('ui.router').factory('$view', function () { return router.viewService; });
		// The old $resolve service
		angular.module('ui.router').factory('$resolve', resolveService_1.resolveFactory);
		// $trace service
		angular.module("ui.router").service("$trace", function () { return trace_1.trace; });
		watchDigests.$inject = ['$rootScope'];
		function watchDigests($rootScope) {
		    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });
		}
		exports.watchDigests = watchDigests;
		angular.module("ui.router").run(watchDigests);
		exports.getLocals = function (ctx) {
		    var tokens = ctx.getTokens().filter(predicates_1.isString);
		    var tuples = tokens.map(function (key) { return [key, ctx.getResolvable(key).data]; });
		    return tuples.reduce(common_1.applyPairs, {});
		};
		/** Injectable services */
		/**
		 * An injectable service object which has the current state parameters
		 *
		 * This angular service (singleton object) holds the current state parameters.
		 * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.
		 *
		 * This object can be injected into other services.
		 *
		 * @example
		 * ```js
		 *
		 * SomeService.$inject = ['$http', '$stateParams'];
		 * function SomeService($http, $stateParams) {
		 *   return {
		 *     getUser: function() {
		 *       return $http.get('/api/users/' + $stateParams.username);
		 *     }
		 *   }
		 * };
		 * angular.service('SomeService', SomeService);
		 * ```
		 *
		 * ### Deprecation warning:
		 *
		 * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different
		 * object than this global service object.  In those cases, the injected object has the parameter values for the
		 * *pending* Transition.
		 *
		 * Because of these confusing details, this service is deprecated.
		 *
		 * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]
		 * ```js
		 * MyController.$inject = ['$transition$'];
		 * function MyController($transition$) {
		 *   var username = $transition$.params().username;
		 *   // .. do something with username
		 * }
		 * ```
		 */
		var $stateParams;
		/**
		 * An injectable service primarily used to register transition hooks
		 *
		 * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.
		 */
		var $transitions;
		/**
		 * A config-time injectable provider primarily used to register transition hooks
		 *
		 * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitions]] for injection at runtime.
		 */
		var $transitionsProvider;
		/**
		 * An injectable service used to query for current state information.
		 *
		 * This angular service exposes the [[StateService]] singleton.
		 */
		var $state;
		/**
		 * A config-time injectable provider used to register states.
		 *
		 * This angular service exposes the [[StateProvider]] singleton.
		 */
		var $stateProvider;
		/**
		 * A config-time injectable provider used to manage the URL.
		 *
		 * This angular service exposes the [[UrlRouterProvider]] singleton.
		 */
		var $urlRouterProvider;
		/**
		 * An injectable service used to configure URL redirects.
		 *
		 * This angular service exposes the [[UrlRouter]] singleton.
		 */
		var $urlRouter;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton.
		 * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].
		 */
		var $urlMatcherFactory;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.
		 * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].
		 */
		var $urlMatcherFactoryProvider;
	
	
	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** */
		var stateObject_1 = __webpack_require__(42);
		var node_1 = __webpack_require__(21);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		var stateBuilder_1 = __webpack_require__(40);
		/**
		 * Implementation of the legacy `$resolve` service for angular 1.
		 */
		var $resolve = {
		    /**
		     * Asynchronously injects a resolve block.
		     *
		     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.
		     *
		     * Given an object `invocables`, where keys are strings and values are injectable functions,
		     * injects each function, and waits for the resulting promise to resolve.
		     * When all resulting promises are resolved, returns the results as an object.
		     *
		     * @example
		     * ```js
		     *
		     * let invocables = {
		     *   foo: [ '$http', ($http) =>
		     *            $http.get('/api/foo').then(resp => resp.data) ],
		     *   bar: [ 'foo', '$http', (foo, $http) =>
		     *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]
		     * }
		     * $resolve.resolve(invocables)
		     *     .then(results => console.log(results.foo, results.bar))
		     * // Logs foo and bar:
		     * // { id: 123, barId: 456, fooData: 'foo data' }
		     * // { id: 456, barData: 'bar data' }
		     * ```
		     *
		     * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions
		     * @param locals key/value pre-resolved data (locals)
		     * @param parent a promise for a "parent resolve"
		     */
		    resolve: function (invocables, locals, parent) {
		        if (locals === void 0) { locals = {}; }
		        var parentNode = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var node = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var context = new resolveContext_1.ResolveContext([parentNode, node]);
		        context.addResolvables(stateBuilder_1.resolvablesBuilder({ resolve: invocables }), node.state);
		        var resolveData = function (parentLocals) {
		            var rewrap = function (_locals) { return stateBuilder_1.resolvablesBuilder({ resolve: common_1.mapObj(_locals, function (local) { return function () { return local; }; }) }); };
		            context.addResolvables(rewrap(parentLocals), parentNode.state);
		            context.addResolvables(rewrap(locals), node.state);
		            var tuples2ObjR = function (acc, tuple) {
		                acc[tuple.token] = tuple.value;
		                return acc;
		            };
		            return context.resolvePath().then(function (results) { return results.reduce(tuples2ObjR, {}); });
		        };
		        return parent ? parent.then(resolveData) : resolveData({});
		    }
		};
		/** @hidden */
		exports.resolveFactory = function () { return $resolve; };
	
	
	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var view_1 = __webpack_require__(37);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var templateFactory_1 = __webpack_require__(56);
		var resolveContext_1 = __webpack_require__(17);
		var resolvable_1 = __webpack_require__(19);
		var angular = __webpack_require__(57);
		exports.ng1ViewConfigFactory = function (path, view) {
		    return [new Ng1ViewConfig(path, view)];
		};
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `views`.
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * handles the `views` property with logic specific to angular-ui-router (ng1).
		 *
		 * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object
		 * and applies the state-level configuration to a view named `$default`.
		 */
		function ng1ViewsBuilder(state) {
		    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);
		    var views = {}, viewsObject = state.views || { "$default": common_1.pick(state, allKeys) };
		    common_1.forEach(viewsObject, function (config, name) {
		        // Account for views: { "": { template... } }
		        name = name || "$default";
		        // Account for views: { header: "headerComponent" }
		        if (predicates_1.isString(config))
		            config = { component: config };
		        if (!Object.keys(config).length)
		            return;
		        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)
		        if (config.component) {
		            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {
		                throw new Error("Cannot combine: " + compKeys.join("|") + " with: " + nonCompKeys.join("|") + " in stateview: 'name@" + state.name + "'");
		            }
		            // Dynamically build a template like "<component-name input1='::$resolve.foo'></component-name>"
		            config.templateProvider = ['$injector', function ($injector) {
		                    var resolveFor = function (key) {
		                        return config.bindings && config.bindings[key] || key;
		                    };
		                    var prefix = angular.version.minor >= 3 ? "::" : "";
		                    var attributeTpl = function (input) {
		                        var attrName = strings_1.kebobString(input.name);
		                        var resolveName = resolveFor(input.name);
		                        if (input.type === '@')
		                            return attrName + "='{{" + prefix + "$resolve." + resolveName + "}}'";
		                        return attrName + "='" + prefix + "$resolve." + resolveName + "'";
		                    };
		                    var attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(" ");
		                    var kebobName = strings_1.kebobString(config.component);
		                    return "<" + kebobName + " " + attrs + "></" + kebobName + ">";
		                }];
		        }
		        config.resolveAs = config.resolveAs || '$resolve';
		        config.$type = "ng1";
		        config.$context = state;
		        config.$name = name;
		        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);
		        config.$uiViewName = normalized.uiViewName;
		        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;
		        views[name] = config;
		    });
		    return views;
		}
		exports.ng1ViewsBuilder = ng1ViewsBuilder;
		// for ng 1.2 style, process the scope: { input: "=foo" }
		// for ng 1.3 through ng 1.5, process the component's bindToController: { input: "=foo" } object
		var scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})
		    .map(function (key) { return [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])]; })
		    .filter(function (tuple) { return predicates_1.isDefined(tuple) && predicates_1.isDefined(tuple[1]); })
		    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); };
		// Given a directive definition, find its object input attributes
		// Use different properties, depending on the type of directive (component, bindToController, normal)
		var getBindings = function (def) {
		    if (predicates_1.isObject(def.bindToController))
		        return scopeBindings(def.bindToController);
		    return scopeBindings(def.scope);
		};
		// Gets all the directive(s)' inputs ('@', '=', and '<')
		function getComponentInputs($injector, name) {
		    var cmpDefs = $injector.get(name + "Directive"); // could be multiple
		    if (!cmpDefs || !cmpDefs.length)
		        throw new Error("Unable to find component named '" + name + "'");
		    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);
		}
		var id = 0;
		var Ng1ViewConfig = (function () {
		    function Ng1ViewConfig(path, viewDecl) {
		        this.path = path;
		        this.viewDecl = viewDecl;
		        this.$id = id++;
		        this.loaded = false;
		    }
		    Ng1ViewConfig.prototype.load = function () {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        if (!this.hasTemplate())
		            throw new Error("No template configuration specified for '" + this.viewDecl.$uiViewName + "@" + this.viewDecl.$uiViewContextAnchor + "'");
		        var context = new resolveContext_1.ResolveContext(this.path);
		        var params = this.path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});
		        var promises = {
		            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), context)),
		            controller: $q.when(this.getController(context))
		        };
		        return $q.all(promises).then(function (results) {
		            trace_1.trace.traceViewServiceEvent("Loaded", _this);
		            _this.controller = results.controller;
		            _this.template = results.template;
		            return _this;
		        });
		    };
		    /**
		     * Checks a view configuration to ensure that it specifies a template.
		     *
		     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.
		     */
		    Ng1ViewConfig.prototype.hasTemplate = function () {
		        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);
		    };
		    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, context) {
		        return $factory.fromConfig(this.viewDecl, params, context);
		    };
		    /**
		     * Gets the controller for a view configuration.
		     *
		     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.
		     */
		    Ng1ViewConfig.prototype.getController = function (context) {
		        var provider = this.viewDecl.controllerProvider;
		        if (!predicates_1.isInjectable(provider))
		            return this.viewDecl.controller;
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    return Ng1ViewConfig;
		}());
		exports.Ng1ViewConfig = Ng1ViewConfig;
	
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module view */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Service which manages loading of templates from a ViewConfig.
		 */
		var TemplateFactory = (function () {
		    function TemplateFactory() {
		    }
		    /**
		     * Creates a template from a configuration object.
		     *
		     * @param config Configuration object for which to load a template.
		     * The following properties are search in the specified order, and the first one
		     * that is defined is used to create the template:
		     *
		     * @param params  Parameters to pass to the template function.
		     * @param context The resolve context associated with the template's view
		     *
		     * @return {string|object}  The template html as a string, or a promise for
		     * that string,or `null` if no template is configured.
		     */
		    TemplateFactory.prototype.fromConfig = function (config, params, context) {
		        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :
		            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
		                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :
		                    null);
		    };
		    ;
		    /**
		     * Creates a template from a string or a function returning a string.
		     *
		     * @param template html template as a string or function that returns an html template as a string.
		     * @param params Parameters to pass to the template function.
		     *
		     * @return {string|object} The template html as a string, or a promise for that
		     * string.
		     */
		    TemplateFactory.prototype.fromString = function (template, params) {
		        return predicates_1.isFunction(template) ? template(params) : template;
		    };
		    ;
		    /**
		     * Loads a template from the a URL via `$http` and `$templateCache`.
		     *
		     * @param {string|Function} url url of the template to load, or a function
		     * that returns a url.
		     * @param {Object} params Parameters to pass to the url function.
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromUrl = function (url, params) {
		        if (predicates_1.isFunction(url))
		            url = url(params);
		        if (url == null)
		            return null;
		        return coreservices_1.services.template.get(url);
		    };
		    ;
		    /**
		     * Creates a template by invoking an injectable provider function.
		     *
		     * @param provider Function to invoke via `locals`
		     * @param {Function} injectFn a function used to invoke the template provider
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromProvider = function (provider, params, context) {
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    ;
		    return TemplateFactory;
		}());
		exports.TemplateFactory = TemplateFactory;
	
	
	/***/ },
	/* 57 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_57__;
	
	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$stateProvider
		 *
		 * @requires ui.router.router.$urlRouterProvider
		 * @requires ui.router.util.$urlMatcherFactoryProvider
		 *
		 * @description
		 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
		 * on state.
		 *
		 * A state corresponds to a "place" in the application in terms of the overall UI and
		 * navigation. A state describes (via the controller / template / view properties) what
		 * the UI looks like and does at that place.
		 *
		 * States often have things in common, and the primary way of factoring out these
		 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
		 * nested states.
		 *
		 * The `$stateProvider` provides interfaces to declare these states for your app.
		 */
		var StateProvider = (function () {
		    function StateProvider(stateRegistry, stateService) {
		        this.stateRegistry = stateRegistry;
		        this.stateService = stateService;
		        common_1.bindFunctions(StateProvider.prototype, this, this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$stateProvider#decorator
		     * @methodOf ui.router.state.$stateProvider
		     *
		     * @description
		     * Allows you to extend (carefully) or override (at your own peril) the
		     * `stateBuilder` object used internally by `$stateProvider`. This can be used
		     * to add custom functionality to ui-router, for example inferring templateUrl
		     * based on the state name.
		     *
		     * When passing only a name, it returns the current (original or decorated) builder
		     * function that matches `name`.
		     *
		     * The builder functions that can be decorated are listed below. Though not all
		     * necessarily have a good use case for decoration, that is up to you to decide.
		     *
		     * In addition, users can attach custom decorators, which will generate new
		     * properties within the state's internal definition. There is currently no clear
		     * use-case for this beyond accessing internal states (i.e. $state.$current),
		     * however, expect this to become increasingly relevant as we introduce additional
		     * meta-programming features.
		     *
		     * **Warning**: Decorators should not be interdependent because the order of
		     * execution of the builder functions in non-deterministic. Builder functions
		     * should only be dependent on the state definition object and super function.
		     *
		     *
		     * Existing builder functions and current return values:
		     *
		     * - **parent** `{object}` - returns the parent state object.
		     * - **data** `{object}` - returns state data, including any inherited data that is not
		     *   overridden by own values (if any).
		     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
		     *   or `null`.
		     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
		     *   navigable).
		     * - **params** `{object}` - returns an array of state params that are ensured to
		     *   be a super-set of parent's params.
		     * - **views** `{object}` - returns a views object where each key is an absolute view
		     *   name (i.e. "viewName@stateName") and each value is the config object
		     *   (template, controller) for the view. Even when you don't use the views object
		     *   explicitly on a state config, one is still created for you internally.
		     *   So by decorating this builder function you have access to decorating template
		     *   and controller properties.
		     * - **ownParams** `{object}` - returns an array of params that belong to the state,
		     *   not including any params defined by ancestor states.
		     * - **path** `{string}` - returns the full path from the root down to this state.
		     *   Needed for state activation.
		     * - **includes** `{object}` - returns an object that includes every state that
		     *   would pass a `$state.includes()` test.
		     *
		     * @example
		     * <pre>
		     * // Override the internal 'views' builder with a function that takes the state
		     * // definition, and a reference to the internal function being overridden:
		     * $stateProvider.decorator('views', function (state, parent) {
		     *   let result = {},
		     *       views = parent(state);
		     *
		     *   angular.forEach(views, function (config, name) {
		     *     let autoName = (state.name + '.' + name).replace('.', '/');
		     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
		     *     result[name] = config;
		     *   });
		     *   return result;
		     * });
		     *
		     * $stateProvider.state('home', {
		     *   views: {
		     *     'contact.list': { controller: 'ListController' },
		     *     'contact.item': { controller: 'ItemController' }
		     *   }
		     * });
		     *
		     * // ...
		     *
		     * $state.go('home');
		     * // Auto-populates list and item views with /partials/home/contact/list.html,
		     * // and /partials/home/contact/item.html, respectively.
		     * </pre>
		     *
		     * @param {string} name The name of the builder function to decorate.
		     * @param {object} func A function that is responsible for decorating the original
		     * builder function. The function receives two parameters:
		     *
		     *   - `{object}` - state - The state config object.
		     *   - `{object}` - super - The original builder function.
		     *
		     * @return {object} $stateProvider - $stateProvider instance
		     */
		    StateProvider.prototype.decorator = function (name, func) {
		        return this.stateRegistry.decorator(name, func) || this;
		    };
		    StateProvider.prototype.state = function (name, definition) {
		        if (predicates_1.isObject(name)) {
		            definition = name;
		        }
		        else {
		            definition.name = name;
		        }
		        this.stateRegistry.register(definition);
		        return this;
		    };
		    /**
		     * Registers an invalid state handler
		     *
		     * This is a passthrough to [[StateService.onInvalid]] for ng1.
		     */
		    StateProvider.prototype.onInvalid = function (callback) {
		        return this.stateService.onInvalid(callback);
		    };
		    return StateProvider;
		}());
		exports.StateProvider = StateProvider;
	
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var coreservices_1 = __webpack_require__(6);
		var services_1 = __webpack_require__(53);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,
		 * `onRetain` callback hooks on a [[Ng1StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * ensures that those hooks are injectable for angular-ui-router (ng1).
		 */
		exports.getStateHookBuilder = function (hookName) {
		    return function stateHookBuilder(state, parentFn) {
		        var hook = state[hookName];
		        function decoratedNg1Hook(trans, state) {
		            var resolveContext = new resolveContext_1.ResolveContext(trans.treeChanges().to);
		            return coreservices_1.services.$injector.invoke(hook, this, common_1.extend({ $state$: state }, services_1.getLocals(resolveContext)));
		        }
		        return hook ? decoratedNg1Hook : undefined;
		    };
		};
	
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * These are the UI-Router angular 1 directives.
		 *
		 * These directives are used in templates to create viewports and navigate to states
		 *
		 * @preferred @module ng1_directives
		 */ /** for typedoc */
		var angular = __webpack_require__(57);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		/** @hidden */
		function parseStateRef(ref, current) {
		    var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
		    if (preparsed)
		        ref = current + '(' + preparsed[1] + ')';
		    parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
		    if (!parsed || parsed.length !== 4)
		        throw new Error("Invalid state ref '" + ref + "'");
		    return { state: parsed[1], paramExpr: parsed[3] || null };
		}
		/** @hidden */
		function stateContext(el) {
		    var $uiView = el.parent().inheritedData('$uiView');
		    var path = hof_1.parse('$cfg.path')($uiView);
		    return path ? common_1.tail(path).state.name : undefined;
		}
		/** @hidden */
		function getTypeInfo(el) {
		    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
		    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
		    var isForm = el[0].nodeName === "FORM";
		    return {
		        attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
		        isAnchor: el.prop("tagName").toUpperCase() === "A",
		        clickable: !isForm
		    };
		}
		/** @hidden */
		function clickHook(el, $state, $timeout, type, current) {
		    return function (e) {
		        var button = e.which || e.button, target = current();
		        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
		            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
		            var transition = $timeout(function () {
		                $state.go(target.state, target.params, target.options);
		            });
		            e.preventDefault();
		            // if the state has no URL, ignore one preventDefault from the <a> directive.
		            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
		            e.preventDefault = function () {
		                if (ignorePreventDefaultCount-- <= 0)
		                    $timeout.cancel(transition);
		            };
		        }
		    };
		}
		/** @hidden */
		function defaultOpts(el, $state) {
		    return {
		        relative: stateContext(el) || $state.$current,
		        inherit: true,
		        source: "sref"
		    };
		}
		/**
		 * `ui-sref`: A directive for linking to a state
		 *
		 * A directive that binds a link (`<a>` tag) to a state.
		 * If the state has an associated URL, the directive will automatically generate and
		 * update the `href` attribute via the [[StateService.href]]  method.
		 * Clicking the link will trigger a state transition with optional parameters.
		 *
		 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
		 * handled natively by the browser.
		 *
		 * You can also use relative state paths within ui-sref, just like the relative
		 * paths passed to `$state.go()`.
		 * You just need to be aware that the path is relative to the state that the link lives in.
		 * In other words, the state that created the view containing the link.
		 *
		 * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.
		 * Options are restricted to `location`, `inherit`, and `reload`.
		 *
		 * Here's an example of how you'd use ui-sref and how it would compile.
		 * If you have the following template:
		 *
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
		 *     </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
		 *
		 * ```html
		 *
		 * <pre>
		 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
		 *     </li>
		 * </ul>
		 *
		 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
		 * </pre>
		 * ```
		 *
		 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-sref-opts options to pass to [[StateService.go]]
		 */
		var uiSref = ['$state', '$timeout',
		    function $StateRefDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var ref = parseStateRef(attrs.uiSref, $state.current.name);
		                var def = { state: ref.state, href: null, params: null, options: null };
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var unlinkInfoFn = null;
		                var hookFn;
		                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
		                var update = function (val) {
		                    if (val)
		                        def.params = angular.copy(val);
		                    def.href = $state.href(ref.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
		                    if (def.href !== null)
		                        attrs.$set(type.attr, def.href);
		                };
		                if (ref.paramExpr) {
		                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)
		                        update(val); }, true);
		                    def.params = angular.copy(scope.$eval(ref.paramExpr));
		                }
		                update();
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-state`: A dynamic version of `ui-sref`
		 *
		 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
		 * params and override options.
		 *
		 * @example
		 * ```html
		 *
		 * <li ng-repeat="nav in navlinks">
		 *   <a ui-state="nav.statename">{{nav.description}}</a>
		 * </li>
		 *
		 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-state-params params to pass to [[StateService.href]]
		 * @param {Object} ui-state-opts options to pass to [[StateService.go]]
		 */
		var uiState = ['$state', '$timeout',
		    function $StateRefDynamicDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
		                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';
		                var def = { state: null, params: null, options: null, href: null };
		                var unlinkInfoFn = null;
		                var hookFn;
		                function runStateRefLink(group) {
		                    def.state = group[0];
		                    def.params = group[1];
		                    def.options = group[2];
		                    def.href = $state.href(def.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
		                    if (def.href)
		                        attrs.$set(type.attr, def.href);
		                }
		                scope.$watch(watch, runStateRefLink, true);
		                runStateRefLink(scope.$eval(watch));
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active
		 *
		 * A directive working alongside ui-sref to add classes to an element when the
		 * related ui-sref directive's state is active, and removing them when it is inactive.
		 * The primary use-case is to simplify the special appearance of navigation menus
		 * relying on `ui-sref`, by having the "active" state's menu button appear different,
		 * distinguishing it from the inactive menu items.
		 *
		 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
		 * ui-sref-active found at the same level or above the ui-sref will be used.
		 *
		 * Will activate when the ui-sref's target state or any child state is active. If you
		 * need to activate only when the ui-sref target state is active and *not* any of
		 * it's children, then you will use ui-sref-active-eq
		 *
		 * Given the following template:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item">
		 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 *
		 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
		 * the resulting HTML will appear as (note the 'active' class):
		 *
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item active">
		 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * The class name is interpolated **once** during the directives link time (any further changes to the
		 * interpolated value are ignored).
		 *
		 * Multiple classes may be specified in a space-separated format:
		 *
		 * ```html
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active='class1 class2 class3'>
		 *     <a ui-sref="app.user">link</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * It is also possible to pass ui-sref-active an expression that evaluates
		 * to an object hash, whose keys represent active class names and whose
		 * values represent the respective state names/globs.
		 * ui-sref-active will match if the current active state **includes** any of
		 * the specified state names/globs, even the abstract ones.
		 *
		 * Given the following template, with "admin" being an abstract state:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <div ui-sref-active="{'active': 'admin.*'}">
		 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
		 * </div>
		 * </pre>
		 * ```
		 *
		 * When the current state is "admin.roles" the "active" class will be applied
		 * to both the <div> and <a> elements. It is important to note that the state
		 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
		 */
		var uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions', '$uiRouter',
		    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions, $uiRouter) {
		        return {
		            restrict: "A",
		            controller: ['$scope', '$element', '$attrs', '$timeout',
		                function ($scope, $element, $attrs, $timeout) {
		                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;
		                    // There probably isn't much point in $observing this
		                    // uiSrefActive and uiSrefActiveEq share the same directive object with some
		                    // slight difference in logic routing
		                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);
		                    try {
		                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
		                    }
		                    catch (e) {
		                    }
		                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
		                    if (predicates_1.isObject(uiSrefActive)) {
		                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {
		                            if (predicates_1.isString(stateOrName)) {
		                                var ref = parseStateRef(stateOrName, $state.current.name);
		                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
		                            }
		                        });
		                    }
		                    // Allow uiSref to communicate with uiSrefActive[Equals]
		                    this.$$addStateInfo = function (newState, newParams) {
		                        // we already got an explicit state provided by ui-sref-active, so we
		                        // shadow the one that comes from ui-sref
		                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {
		                            return;
		                        }
		                        var deregister = addState(newState, newParams, uiSrefActive);
		                        update();
		                        return deregister;
		                    };
		                    function updateAfterTransition(trans) { trans.promise.then(update); }
		                    $scope.$on('$stateChangeSuccess', update);
		                    $scope.$on('$destroy', $transitions.onStart({}, updateAfterTransition));
		                    if ($uiRouter.globals.transition) {
		                        updateAfterTransition($uiRouter.globals.transition);
		                    }
		                    function addState(stateName, stateParams, activeClass) {
		                        var state = $state.get(stateName, stateContext($element));
		                        var stateHash = createStateHash(stateName, stateParams);
		                        var stateInfo = {
		                            state: state || { name: stateName },
		                            params: stateParams,
		                            hash: stateHash
		                        };
		                        states.push(stateInfo);
		                        activeClasses[stateHash] = activeClass;
		                        return function removeState() {
		                            var idx = states.indexOf(stateInfo);
		                            if (idx !== -1)
		                                states.splice(idx, 1);
		                        };
		                    }
		                    /**
		                     * @param {string} state
		                     * @param {Object|string} [params]
		                     * @return {string}
		                     */
		                    function createStateHash(state, params) {
		                        if (!predicates_1.isString(state)) {
		                            throw new Error('state should be a string');
		                        }
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        params = $scope.$eval(params);
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        return state;
		                    }
		                    // Update route state
		                    function update() {
		                        for (var i = 0; i < states.length; i++) {
		                            if (anyMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeClasses[states[i].hash]);
		                            }
		                            else {
		                                removeClass($element, activeClasses[states[i].hash]);
		                            }
		                            if (exactMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeEqClass);
		                            }
		                            else {
		                                removeClass($element, activeEqClass);
		                            }
		                        }
		                    }
		                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
		                    function removeClass(el, className) { el.removeClass(className); }
		                    function anyMatch(state, params) { return $state.includes(state.name, params); }
		                    function exactMatch(state, params) { return $state.is(state.name, params); }
		                    update();
		                }]
		        };
		    }];
		angular.module('ui.router.state')
		    .directive('uiSref', uiSref)
		    .directive('uiSrefActive', uiSrefActive)
		    .directive('uiSrefActiveEq', uiSrefActive)
		    .directive('uiState', uiState);
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:isState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
		 */
		$IsStateFilter.$inject = ['$state'];
		function $IsStateFilter($state) {
		    var isFilter = function (state, params, options) {
		        return $state.is(state, params, options);
		    };
		    isFilter.$stateful = true;
		    return isFilter;
		}
		exports.$IsStateFilter = $IsStateFilter;
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:includedByState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
		 */
		$IncludedByStateFilter.$inject = ['$state'];
		function $IncludedByStateFilter($state) {
		    var includesFilter = function (state, params, options) {
		        return $state.includes(state, params, options);
		    };
		    includesFilter.$stateful = true;
		    return includesFilter;
		}
		exports.$IncludedByStateFilter = $IncludedByStateFilter;
		angular.module('ui.router.state')
		    .filter('isState', $IsStateFilter)
		    .filter('includedByState', $IncludedByStateFilter);
	
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module ng1_directives */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var hof_1 = __webpack_require__(5);
		var resolveContext_1 = __webpack_require__(17);
		var strings_1 = __webpack_require__(9);
		var services_1 = __webpack_require__(53);
		var angular = __webpack_require__(57);
		/**
		 * `ui-view`: A viewport directive which is filled in by a view from the active state.
		 *
		 * @param {string=} name A view name. The name should be unique amongst the other views in the
		 * same state. You can have views of the same name that live in different states.
		 *
		 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
		 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
		 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
		 * scroll ui-view elements into view when they are populated during a state activation.
		 *
		 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
		 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
		 *
		 * @param {string=} onload Expression to evaluate whenever the view updates.
		 *
		 * A view can be unnamed or named.
		 * @example
		 * ```html
		 *
		 * <!-- Unnamed -->
		 * <div ui-view></div>
		 *
		 * <!-- Named -->
		 * <div ui-view="viewName"></div>
		 * ```
		 *
		 * You can only have one unnamed view within any template (or root html). If you are only using a
		 * single view and it is unnamed then you can populate it like so:
		 * ```
		 *
		 * <div ui-view></div>
		 * $stateProvider.state("home", {
		 *   template: "<h1>HELLO!</h1>"
		 * })
		 * ```
		 *
		 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
		 * config property, by name, in this case an empty name:
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * But typically you'll only use the views property if you name your view or have more than one view
		 * in the same template. There's not really a compelling reason to name a view if its the only one,
		 * but you could if you wanted, like so:
		 *
		 * ```html
		 *
		 * <div ui-view="main"></div>
		 * ```
		 *
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "main": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Really though, you'll use views to set up multiple views:
		 * ```html
		 *
		 * <div ui-view></div>
		 * <div ui-view="chart"></div>
		 * <div ui-view="data"></div>
		 * ```
		 *
		 * ```js
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     },
		 *     "chart": {
		 *       template: "<chart_thing/>"
		 *     },
		 *     "data": {
		 *       template: "<data_thing/>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Examples for `autoscroll`:
		 *
		 * ```html
		 *
		 * <!-- If autoscroll present with no expression,
		 *      then scroll ui-view into view -->
		 * <ui-view autoscroll/>
		 *
		 * <!-- If autoscroll present with valid expression,
		 *      then scroll ui-view into view if expression evaluates to true -->
		 * <ui-view autoscroll='true'/>
		 * <ui-view autoscroll='false'/>
		 * <ui-view autoscroll='scopeVariable'/>
		 * ```
		 *
		 * Resolve data:
		 *
		 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
		 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
		 *
		 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
		 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
		 * depends on `$resolve` data.
		 *
		 * @example
		 * ```js
		 *
		 * $stateProvider.state('home', {
		 *   template: '<my-component user="$resolve.user"></my-component>',
		 *   resolve: {
		 *     user: function(UserService) { return UserService.fetchUser(); }
		 *   }
		 * });
		 * ```
		 */
		var uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',
		    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {
		        function getRenderer(attrs, scope) {
		            return {
		                enter: function (element, target, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.enter(element, null, target).then(cb);
		                    }
		                    else {
		                        $animate.enter(element, null, target, cb);
		                    }
		                },
		                leave: function (element, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.leave(element).then(cb);
		                    }
		                    else {
		                        $animate.leave(element, cb);
		                    }
		                }
		            };
		        }
		        function configsEqual(config1, config2) {
		            return config1 === config2;
		        }
		        var rootData = {
		            $cfg: { viewDecl: { $context: $view.rootContext() } },
		            $uiView: {}
		        };
		        var directive = {
		            count: 0,
		            restrict: 'ECA',
		            terminal: true,
		            priority: 400,
		            transclude: 'element',
		            compile: function (tElement, tAttrs, $transclude) {
		                return function (scope, $element, attrs) {
		                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs['onload'] || '', autoScrollExp = attrs['autoscroll'], renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';
		                    var activeUIView = {
		                        $type: 'ng1',
		                        id: directive.count++,
		                        name: name,
		                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + "." + name : name,
		                        config: null,
		                        configUpdated: configUpdatedCallback,
		                        get creationContext() {
		                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);
		                        }
		                    };
		                    trace_1.trace.traceUIViewEvent("Linking", activeUIView);
		                    function configUpdatedCallback(config) {
		                        if (config && !(config instanceof views_1.Ng1ViewConfig))
		                            return;
		                        if (configsEqual(viewConfig, config))
		                            return;
		                        trace_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);
		                        viewConfig = config;
		                        updateView(config);
		                    }
		                    $element.data('$uiView', { $uiView: activeUIView });
		                    updateView();
		                    unregister = $view.registerUIView(activeUIView);
		                    scope.$on("$destroy", function () {
		                        trace_1.trace.traceUIViewEvent("Destroying/Unregistering", activeUIView);
		                        unregister();
		                    });
		                    function cleanupLastView() {
		                        if (previousEl) {
		                            trace_1.trace.traceUIViewEvent("Removing (previous) el", previousEl.data('$uiView'));
		                            previousEl.remove();
		                            previousEl = null;
		                        }
		                        if (currentScope) {
		                            trace_1.trace.traceUIViewEvent("Destroying scope", activeUIView);
		                            currentScope.$destroy();
		                            currentScope = null;
		                        }
		                        if (currentEl) {
		                            var _viewData_1 = currentEl.data('$uiViewAnim');
		                            trace_1.trace.traceUIViewEvent("Animate out", _viewData_1);
		                            renderer.leave(currentEl, function () {
		                                _viewData_1.$$animLeave.resolve();
		                                previousEl = null;
		                            });
		                            previousEl = currentEl;
		                            currentEl = null;
		                        }
		                    }
		                    function updateView(config) {
		                        var newScope = scope.$new();
		                        var animEnter = $q.defer(), animLeave = $q.defer();
		                        var $uiViewData = {
		                            $cfg: config,
		                            $uiView: activeUIView,
		                        };
		                        var $uiViewAnim = {
		                            $animEnter: animEnter.promise,
		                            $animLeave: animLeave.promise,
		                            $$animLeave: animLeave
		                        };
		                        var cloned = $transclude(newScope, function (clone) {
		                            clone.data('$uiViewAnim', $uiViewAnim);
		                            clone.data('$uiView', $uiViewData);
		                            renderer.enter(clone, $element, function onUIViewEnter() {
		                                animEnter.resolve();
		                                if (currentScope)
		                                    currentScope.$emit('$viewContentAnimationEnded');
		                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
		                                    $uiViewScroll(clone);
		                                }
		                            });
		                            cleanupLastView();
		                        });
		                        currentEl = cloned;
		                        currentScope = newScope;
		                        /**
		                         * @ngdoc event
		                         * @name ui.router.state.directive:ui-view#$viewContentLoaded
		                         * @eventOf ui.router.state.directive:ui-view
		                         * @eventType emits on ui-view directive scope
		                         * @description           *
		                         * Fired once the view is **loaded**, *after* the DOM is rendered.
		                         *
		                         * @param {Object} event Event object.
		                         */
		                        currentScope.$emit('$viewContentLoaded', config || viewConfig);
		                        currentScope.$eval(onloadExp);
		                    }
		                };
		            }
		        };
		        return directive;
		    }];
		$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];
		/** @hidden */
		function $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {
		    var getControllerAs = hof_1.parse('viewDecl.controllerAs');
		    var getResolveAs = hof_1.parse('viewDecl.resolveAs');
		    return {
		        restrict: 'ECA',
		        priority: -400,
		        compile: function (tElement) {
		            var initial = tElement.html();
		            return function (scope, $element) {
		                var data = $element.data('$uiView');
		                if (!data)
		                    return;
		                var cfg = data.$cfg || { viewDecl: {} };
		                $element.html(cfg.template || initial);
		                trace_1.trace.traceUIViewFill(data.$uiView, $element.html());
		                var link = $compile($element.contents());
		                var controller = cfg.controller;
		                var controllerAs = getControllerAs(cfg);
		                var resolveAs = getResolveAs(cfg);
		                var resolveCtx = cfg.path && new resolveContext_1.ResolveContext(cfg.path);
		                var locals = resolveCtx && services_1.getLocals(resolveCtx);
		                scope[resolveAs] = locals;
		                if (controller) {
		                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));
		                    if (controllerAs) {
		                        scope[controllerAs] = controllerInstance;
		                        scope[controllerAs][resolveAs] = locals;
		                    }
		                    // TODO: Use $view service as a central point for registering component-level hooks
		                    // Then, when a component is created, tell the $view service, so it can invoke hooks
		                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });
		                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));
		                    $element.data('$ngControllerController', controllerInstance);
		                    $element.children().data('$ngControllerController', controllerInstance);
		                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);
		                }
		                // Wait for the component to appear in the DOM
		                if (predicates_1.isString(cfg.viewDecl.component)) {
		                    var cmp_1 = cfg.viewDecl.component;
		                    var kebobName_1 = strings_1.kebobString(cmp_1);
		                    var getComponentController = function () {
		                        var directiveEl = [].slice.call($element[0].children)
		                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });
		                        return directiveEl && angular.element(directiveEl).data("$" + cmp_1 + "Controller");
		                    };
		                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {
		                        if (!ctrlInstance)
		                            return;
		                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);
		                        deregisterWatch_1();
		                    });
		                }
		                link(scope);
		            };
		        }
		    };
		}
		/** @hidden */
		var hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';
		/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */
		function registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {
		    // Call $onInit() ASAP
		    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))
		        controllerInstance.$onInit();
		    var viewState = common_1.tail(cfg.path).state.self;
		    var hookOptions = { bind: controllerInstance };
		    // Add component-level hook for onParamsChange
		    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {
		        var resolveContext = new resolveContext_1.ResolveContext(cfg.path);
		        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;
		        // Fire callback on any successful transition
		        var paramsUpdated = function ($transition$) {
		            // Exit early if the $transition$ is the same as the view was created within.
		            // Exit early if the $transition$ will exit the state the view is for.
		            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)
		                return;
		            var toParams = $transition$.params("to");
		            var fromParams = $transition$.params("from");
		            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            // Find the to params that have different values than the from params
		            var changedToParams = toSchema.filter(function (param) {
		                var idx = fromSchema.indexOf(param);
		                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);
		            });
		            // Only trigger callback if a to param has changed or is new
		            if (changedToParams.length) {
		                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });
		                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.
		                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);
		            }
		        };
		        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));
		    }
		    // Add component-level hook for uiCanExit
		    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {
		        var criteria = { exiting: viewState.name };
		        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));
		    }
		}
		angular.module('ui.router.state').directive('uiView', uiView);
		angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
	
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** */
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$uiViewScrollProvider
		 *
		 * @description
		 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
		 */
		function $ViewScrollProvider() {
		    var useAnchorScroll = false;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
		     * @methodOf ui.router.state.$uiViewScrollProvider
		     *
		     * @description
		     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
		     * scrolling based on the url anchor.
		     */
		    this.useAnchorScroll = function () {
		        useAnchorScroll = true;
		    };
		    /**
		     * @ngdoc object
		     * @name ui.router.state.$uiViewScroll
		     *
		     * @requires $anchorScroll
		     * @requires $timeout
		     *
		     * @description
		     * When called with a jqLite element, it scrolls the element into view (after a
		     * `$timeout` so the DOM has time to refresh).
		     *
		     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
		     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
		     */
		    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
		            if (useAnchorScroll) {
		                return $anchorScroll;
		            }
		            return function ($element) {
		                return $timeout(function () {
		                    $element[0].scrollIntoView();
		                }, 0, false);
		            };
		        }];
		}
		angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
	
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=angular-ui-router.js.map

/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var AppComponent = {
	  template: '<div ui-view></div>'
	};
	
	exports.default = AppComponent;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _overview = __webpack_require__(304);
	
	var _overview2 = _interopRequireDefault(_overview);
	
	var _authorizationCode = __webpack_require__(306);
	
	var _authorizationCode2 = _interopRequireDefault(_authorizationCode);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var components = _angular2.default.module('components', [_overview2.default, _authorizationCode2.default]).name; /*!
	                                                                                                                  * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	                                                                                                                  * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	                                                                                                                  *
	                                                                                                                  * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	                                                                                                                  * Unless required by applicable law or agreed to in writing, software
	                                                                                                                  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	                                                                                                                  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	                                                                                                                  *
	                                                                                                                  * See the License for the specific language governing permissions and limitations under the License.
	                                                                                                                  */
	
	exports.default = components;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(301);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _overview = __webpack_require__(305);
	
	var _overview2 = _interopRequireDefault(_overview);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var overview = _angular2.default.module('overview', [_angularUiRouter2.default]).component('overview', _overview2.default).config(function ($stateProvider, $urlRouterProvider) {
	  $stateProvider.state('overview', {
	    url: '/',
	    component: 'overview'
	  });
	  $urlRouterProvider.otherwise('/');
	}).name; /*!
	          * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	          * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	          *
	          * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	          * Unless required by applicable law or agreed to in writing, software
	          * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	          * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	          *
	          * See the License for the specific language governing permissions and limitations under the License.
	          */
	
	exports.default = overview;

/***/ },
/* 305 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var OverviewComponent = {
	  template: "\n    <div id=\"default-app-text\" ng-non-bindable>{{ Samples render here }}</div>\n  "
	};
	
	exports.default = OverviewComponent;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _loginRedirect = __webpack_require__(307);
	
	var _loginRedirect2 = _interopRequireDefault(_loginRedirect);
	
	var _loginCustom = __webpack_require__(334);
	
	var _loginCustom2 = _interopRequireDefault(_loginCustom);
	
	var _profile = __webpack_require__(344);
	
	var _profile2 = _interopRequireDefault(_profile);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var authorizationCode = _angular2.default.module('authorizationCode', [_loginRedirect2.default, _loginCustom2.default, _profile2.default]).name;
	
	exports.default = authorizationCode;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(301);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _loginRedirect = __webpack_require__(308);
	
	var _loginRedirect2 = _interopRequireDefault(_loginRedirect);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var loginRedirect = _angular2.default.module('authorizationCode.loginRedirect', [_angularUiRouter2.default]).component('loginRedirect', _loginRedirect2.default).config(function ($stateProvider, $urlRouterProvider) {
	  $stateProvider.state('authorization-code/login-redirect', {
	    url: '/authorization-code/login-redirect',
	    component: 'loginRedirect'
	  });
	  $urlRouterProvider.otherwise('/');
	}).name; /*!
	          * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	          * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	          *
	          * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	          * Unless required by applicable law or agreed to in writing, software
	          * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	          * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	          *
	          * See the License for the specific language governing permissions and limitations under the License.
	          */
	
	exports.default = loginRedirect;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _loginRedirect = __webpack_require__(309);
	
	var _loginRedirect2 = _interopRequireDefault(_loginRedirect);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoginRedirectComponent = {
	  controller: _loginRedirect2.default,
	  template: '\n    <p>\n      Click <strong>Login with Okta</strong> to redirect to your Okta org for\n      authentication.\n    </p>\n    <table class="ui collapsing celled table compact inverted grey">\n      <thead>\n        <tr>\n          <th colspan="2">If you\'re using the mock-okta server:</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr><td>User</td><td><strong>george</strong></td></tr>\n        <tr><td>Pass</td><td><strong>Asdf1234</strong></td></tr>\n      </tbody>\n    </table>\n    <p>\n      <button\n        id="login"\n        data-se="login-link"\n        class="ui icon button blue"\n        ng-click="$ctrl.login()">\n        <i class="sign in icon"></i>\n        Login with Okta\n      </button>\n    </p>\n  '
	}; /*!
	    * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	    *
	    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	    * Unless required by applicable law or agreed to in writing, software
	    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	    *
	    * See the License for the specific language governing permissions and limitations under the License.
	    */
	
	exports.default = LoginRedirectComponent;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!
	opyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	he Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	
	ou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	either express or implied.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
	ee the License for the specific language governing permissions and limitations under the License.
	
	
	var _jquery = __webpack_require__(310);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoginRedirectController = function () {
	  function LoginRedirectController(config) {
	    _classCallCheck(this, LoginRedirectController);
	
	    this.config = config;
	  }
	
	  _createClass(LoginRedirectController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      this.authClient = new _jquery2.default({
	        url: this.config.oktaUrl,
	        clientId: this.config.clientId,
	        redirectUri: this.config.redirectUri,
	        scopes: ['openid', 'email', 'profile']
	      });
	    }
	  }, {
	    key: 'login',
	    value: function login() {
	      this.authClient.token.getWithRedirect({ responseType: 'code' });
	    }
	  }]);
	
	  return LoginRedirectController;
	}();
	
	exports.default = LoginRedirectController;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var jqueryRequest = __webpack_require__(311);
	module.exports = __webpack_require__(313)(jqueryRequest);


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var $ = __webpack_require__(312);
	
	function jqueryRequest(method, url, args) {
	  var deferred = $.Deferred();
	  $.ajax({
	    type: method,
	    url: url,
	    headers: args.headers,
	    data: JSON.stringify(args.data),
	    xhrFields: {
	      withCredentials: true
	    }
	  })
	  .then(function(data, textStatus, jqXHR) {
	    delete jqXHR.then;
	    deferred.resolve(jqXHR);
	  }, function(jqXHR) {
	    delete jqXHR.then;
	    deferred.reject(jqXHR);
	  });
	  return deferred;
	}
	
	module.exports = jqueryRequest;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.12.1
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-02-22T19:07Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var deletedIds = [];
	
	var document = window.document;
	
	var slice = deletedIds.slice;
	
	var concat = deletedIds.concat;
	
	var push = deletedIds.push;
	
	var indexOf = deletedIds.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "1.12.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray || function( obj ) {
			return jQuery.type( obj ) === "array";
		},
	
		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			try {
	
				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
					return false;
				}
			} catch ( e ) {
	
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}
	
			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( !support.ownFirst ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {
	
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
				} )( data );
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			var len;
	
			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}
	
				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
	
				for ( ; i < len; i++ ) {
	
					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}
	
			return -1;
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}
	
			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[ j ] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: function() {
			return +( new Date() );
		},
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// init accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt( 0 ) === "<" &&
					selector.charAt( selector.length - 1 ) === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
	
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[ 2 ] ) {
								return rootjQuery.find( selector );
							}
	
							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof root.ready !== "undefined" ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;
	
			return this.filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[ 0 ], jQuery( elem ) );
			}
	
			// Locate the position of the desired element
			return jQuery.inArray(
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem, this );
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );
	
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.uniqueSort( ret );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}
	
			return this.pushStack( ret );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = true;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
	
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed );
			window.removeEventListener( "load", completed );
	
		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
	
		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener ||
			window.event.type === "load" ||
			document.readyState === "complete" ) {
	
			detach();
			jQuery.ready();
		}
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE6-10
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
	
			// If IE event model is used
			} else {
	
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );
	
				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );
	
				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;
	
				try {
					top = window.frameElement == null && document.documentElement;
				} catch ( e ) {}
	
				if ( top && top.doScroll ) {
					( function doScrollCheck() {
						if ( !jQuery.isReady ) {
	
							try {
	
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll( "left" );
							} catch ( e ) {
								return window.setTimeout( doScrollCheck, 50 );
							}
	
							// detach all dom ready events
							detach();
	
							// and execute any waiting functions
							jQuery.ready();
						}
					} )();
				}
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownFirst = i === "0";
	
	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;
	
	// Execute ASAP in case we need to set body.style.zoom
	jQuery( function() {
	
		// Minified: var a,b,c,d
		var val, div, body, container;
	
		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
	
			// Return for frameset docs that don't have a body
			return;
		}
	
		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );
	
		if ( typeof div.style.zoom !== "undefined" ) {
	
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
	
			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {
	
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}
	
		body.removeChild( container );
	} );
	
	
	( function() {
		var div = document.createElement( "div" );
	
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch ( e ) {
			support.deleteExpando = false;
		}
	
		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	var acceptData = function( elem ) {
		var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
			nodeType = +elem.nodeType || 1;
	
		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :
	
			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
	};
	
	
	
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;
	
	function dataAttr( elem, key, data ) {
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
	
			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
	
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );
	
			} else {
				data = undefined;
			}
		}
	
		return data;
	}
	
	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {
	
			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}
	
		return true;
	}
	
	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !acceptData( elem ) ) {
			return;
		}
	
		var ret, thisCache,
			internalKey = jQuery.expando,
	
			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,
	
			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,
	
			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;
	
		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
			data === undefined && typeof name === "string" ) {
			return;
		}
	
		if ( !id ) {
	
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}
	
		if ( !cache[ id ] ) {
	
			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}
	
		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}
	
		thisCache = cache[ id ];
	
		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}
	
			thisCache = thisCache.data;
		}
	
		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}
	
		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {
	
			// First Try to find as-is property data
			ret = thisCache[ name ];
	
			// Test for null|undefined property data
			if ( ret == null ) {
	
				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}
	
		return ret;
	}
	
	function internalRemoveData( elem, name, pvt ) {
		if ( !acceptData( elem ) ) {
			return;
		}
	
		var thisCache, i,
			isNode = elem.nodeType,
	
			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
	
		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}
	
		if ( name ) {
	
			thisCache = pvt ? cache[ id ] : cache[ id ].data;
	
			if ( thisCache ) {
	
				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {
	
					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {
	
						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				} else {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}
	
				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[ i ] ];
				}
	
				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
					return;
				}
			}
		}
	
		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;
	
			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}
	
		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );
	
		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];
	
		// When all else fails, undefined
		} else {
			cache[ id ] = undefined;
		}
	}
	
	jQuery.extend( {
		cache: {},
	
		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,
	
			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},
	
		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},
	
		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},
	
		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},
	
		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );
	
					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					jQuery.data( this, key );
				} );
			}
	
			return arguments.length > 1 ?
	
				// Sets one value
				this.each( function() {
					jQuery.data( this, key, value );
				} ) :
	
				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},
	
		removeData: function( key ) {
			return this.each( function() {
				jQuery.removeData( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// not intended for public consumption - generates a queueHooks object,
		// or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	
	
	( function() {
		var shrinkWrapBlocksVal;
	
		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}
	
			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;
	
			// Minified: var b,c,d
			var div, body, container;
	
			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
	
				// Test fired too early or in an unsupported environment, exit.
				return;
			}
	
			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );
	
			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== "undefined" ) {
	
				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =
	
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}
	
			body.removeChild( container );
	
			return shrinkWrapBlocksVal;
		};
	
	} )();
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn(
						elems[ i ],
						key,
						raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	var rleadingWhitespace = ( /^\s+/ );
	
	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
			"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
			"mark|meter|nav|output|picture|progress|section|summary|template|time|video";
	
	
	
	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();
	
		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}
	
	
	( function() {
		var div = document.createElement( "div" ),
			fragment = document.createDocumentFragment(),
			input = document.createElement( "input" );
	
		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	
		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;
	
		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;
	
		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;
	
		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";
	
		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;
	
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	
		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );
	
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input = document.createElement( "input" );
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<9
		// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
		support.noCloneEvent = !!div.addEventListener;
	
		// Support: IE<9
		// Since attributes and properties are the same in IE,
		// cleanData must set properties to undefined rather than use removeAttribute
		div[ jQuery.expando ] = 1;
		support.attributes = !div.getAttribute( jQuery.expando );
	} )();
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
	
		// Support: IE8
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
	};
	
	// Support: IE8-IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
					undefined;
	
		if ( !found ) {
			for ( found = [], elems = context.childNodes || context;
				( elem = elems[ i ] ) != null;
				i++
			) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			jQuery._data(
				elem,
				"globalEval",
				!refElements || jQuery._data( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/,
		rtbody = /<tbody/i;
	
	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,
	
			// Ensure a safe fragment
			safe = createSafeFragment( context ),
	
			nodes = [],
			i = 0;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
	
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
					}
	
					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {
	
						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :
	
							// String was a bare <thead> or <tfoot>
							wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;
	
						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
								!tbody.childNodes.length ) {
	
								elem.removeChild( tbody );
							}
						}
					}
	
					jQuery.merge( nodes, tmp.childNodes );
	
					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";
	
					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}
	
					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}
	
		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}
	
		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
	
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		tmp = null;
	
		return safe;
	}
	
	
	( function() {
		var i, eventName,
			div = document.createElement( "div" );
	
		// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
		for ( i in { submit: true, change: true, focusin: true } ) {
			eventName = "on" + i;
	
			if ( !( support[ i ] = eventName in window ) ) {
	
				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i ] = div.attributes[ eventName ].expando === false;
			}
		}
	
		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	
	
	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" &&
						( !e || jQuery.event.triggered !== e.type ) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};
	
				// Add elem as a property of the handle fn to prevent a memory leak
				// with IE non-native events
				eventHandle.elem = elem;
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
	
						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
	
				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},
	
		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
					jQuery._data( cur, "handle" );
	
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if (
					( !special._default ||
					 special._default.apply( eventPath.pop(), data ) === false
					) && acceptData( elem )
				) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {
	
							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}
	
			// Support: Safari 6-8+
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
				"pageX pageY screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ?
						original.toElement :
						fromElement;
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {
	
							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},
	
		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
	
					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// Guard for simulated events was moved to jQuery.event.stopPropagation function
					// since `originalEvent` should point to the original event for the
					// constancy with other events and for more focused logic
				}
			);
	
			jQuery.event.trigger( e, null, elem );
	
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};
	
	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {
	
			// This "if" is needed for plain objects
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;
	
			if ( elem.detachEvent ) {
	
				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event,
				// to properly expose it to GC
				if ( typeof elem[ name ] === "undefined" ) {
					elem[ name ] = null;
				}
	
				elem.detachEvent( name, handle );
			}
		};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}
	
			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();
	
			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( !e || this.isSimulated ) {
				return;
			}
	
			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}
	
			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	// IE submit delegation
	if ( !support.submit ) {
	
		jQuery.event.special.submit = {
			setup: function() {
	
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
	
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?
	
							// Support: IE <=8
							// We use jQuery.prop instead of elem.form
							// to allow fixing the IE8 delegated submit issue (gh-2332)
							// by 3rd party polyfills/workarounds.
							jQuery.prop( elem, "form" ) :
							undefined;
	
					if ( form && !jQuery._data( form, "submit" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submitBubble = true;
						} );
						jQuery._data( form, "submit", true );
					}
				} );
	
				// return undefined since we don't need an event listener
			},
	
			postDispatch: function( event ) {
	
				// If form was submitted by the user, bubble the event up the tree
				if ( event._submitBubble ) {
					delete event._submitBubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event );
					}
				}
			},
	
			teardown: function() {
	
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}
	
	// IE change delegation and checkbox/radio fix
	if ( !support.change ) {
	
		jQuery.event.special.change = {
	
			setup: function() {
	
				if ( rformElems.test( this.nodeName ) ) {
	
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._justChanged = true;
							}
						} );
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._justChanged && !event.isTrigger ) {
								this._justChanged = false;
							}
	
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event );
						} );
					}
					return false;
				}
	
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;
	
					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event );
							}
						} );
						jQuery._data( elem, "change", true );
					}
				} );
			},
	
			handle: function( event ) {
				var elem = event.target;
	
				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger ||
					( elem.type !== "radio" && elem.type !== "checkbox" ) ) {
	
					return event.handleObj.handler.apply( this, arguments );
				}
			},
	
			teardown: function() {
				jQuery.event.remove( this, "._change" );
	
				return !rformElems.test( this.nodeName );
			}
		};
	}
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		} );
	}
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		},
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );
	
	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}
	
		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;
	
		if ( events ) {
			delete curData.handle;
			curData.events = {};
	
			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	
		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}
	
	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;
	
		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		nodeName = dest.nodeName.toLowerCase();
	
		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );
	
			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}
	
			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}
	
		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );
	
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}
	
			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
				dest.innerHTML = src.innerHTML;
			}
	
		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
	
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set
	
			dest.defaultChecked = dest.checked = src.checked;
	
			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}
	
		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;
	
		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval(
									( node.text || node.textContent || node.innerHTML || "" )
										.replace( rcleanScript, "" )
								);
							}
						}
					}
				}
	
				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			elems = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = elems[ i ] ) != null; i++ ) {
	
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
				!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
	
				clone = elem.cloneNode( true );
	
			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}
	
			if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
					( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				// Fix all IE cloning issues
				for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {
	
					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[ i ] ) {
						fixCloneNodeIssues( node, destElements[ i ] );
					}
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
						cloneCopyEvent( node, destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			destElements = srcElements = node = null;
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems, /* internal */ forceAcceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				attributes = support.attributes,
				special = jQuery.event.special;
	
			for ( ; ( elem = elems[ i ] ) != null; i++ ) {
				if ( forceAcceptData || acceptData( elem ) ) {
	
					id = elem[ internalKey ];
					data = id && cache[ id ];
	
					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {
	
							delete cache[ id ];
	
							// Support: IE<9
							// IE does not allow us to delete expando properties from nodes
							// IE creates expando attributes along with the property
							// IE does not have a removeAttribute function on Document nodes
							if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
								elem.removeAttribute( internalKey );
	
							// Webkit & Blink performance suffers when deleting properties
							// from DOM nodes, so set to undefined instead
							// https://code.google.com/p/chromium/issues/detail?id=378607
							} else {
								elem[ internalKey ] = undefined;
							}
	
							deletedIds.push( id );
						}
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append(
						( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
					);
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
	
				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}
	
				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}
	
				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
	
							// Remove element nodes and prevent memory leaks
							elem = this[ i ] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		div.style.cssText = "float:left;opacity:.5";
	
		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = div.style.opacity === "0.5";
	
		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!div.style.cssFloat;
	
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container = document.createElement( "div" );
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		div.innerHTML = "";
		container.appendChild( div );
	
		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
			div.style.WebkitBoxSizing === "";
	
		jQuery.extend( support, {
			reliableHiddenOffsets: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},
	
			boxSizingReliable: function() {
	
				// We're checking for pixelPositionVal here instead of boxSizingReliableVal
				// since that compresses better and they're computed together anyway.
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
	
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
	
			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},
	
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			},
	
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			}
		} );
	
		function computeStyleTests() {
			var contents, divStyle,
				documentElement = document.documentElement;
	
			// Setup
			documentElement.appendChild( container );
	
			div.style.cssText =
	
				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
	
			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
			pixelMarginRightVal = reliableMarginRightVal = true;
	
			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				divStyle = window.getComputedStyle( div );
				pixelPositionVal = ( divStyle || {} ).top !== "1%";
				reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
				boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";
	
				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";
	
				// Support: Android 2.3 only
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";
	
				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );
	
				div.removeChild( contents );
			}
	
			// Support: IE6-8
			// First check that getClientRects works as expected
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.style.display = "none";
			reliableHiddenOffsetsVal = div.getClientRects().length === 0;
			if ( reliableHiddenOffsetsVal ) {
				div.style.display = "";
				div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
				contents = div.getElementsByTagName( "td" );
				contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				if ( reliableHiddenOffsetsVal ) {
					contents[ 0 ].style.display = "";
					contents[ 1 ].style.display = "none";
					reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				}
			}
	
			// Teardown
			documentElement.removeChild( container );
		}
	
	} )();
	
	
	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;
	
	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;
	
			computed = computed || getStyles( elem );
	
			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
			// Support: Opera 12.1x only
			// Fall back to style even without computed
			// computed is undefined for elems on document fragments
			if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			if ( computed ) {
	
				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value"
				// instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values,
				// but width seems to be reliably pixels
				// this is against the CSSOM draft spec:
				// http://dev.w3.org/csswg/cssom/#resolved-values
				if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;
	
					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;
	
					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}
	
			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};
	
		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;
	
			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;
	
			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}
	
			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	
			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are
			// proportional to the parent element instead
			// and we can't measure the parent instead because it
			// might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {
	
				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;
	
				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";
	
				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}
	
			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}
	
	
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/i,
	
		// swappable if display is none or starts with table except
		// "table", "table-cell", or "table-caption"
		// see here for display values:
		// https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	
	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// check for vendor prefixed names
		var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] =
						jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display && display !== "none" || !hidden ) {
					jQuery._data(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {
	
			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}
	
		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
	
			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight
				// (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch ( e ) {}
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing &&
							jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	} );
	
	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {
	
				// IE uses filters for opacity
				return ropacity.test( ( computed && elem.currentStyle ?
					elem.currentStyle.filter :
					elem.style.filter ) || "" ) ?
						( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
						computed ? "1" : "";
			},
	
			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";
	
				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;
	
				// if setting opacity to 1, and no other filters exist -
				// attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {
	
					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );
	
					// if there is no filter style applied in a css rule
					// or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}
	
				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}
	
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return (
					parseFloat( curCSS( elem, "marginLeft" ) ) ||
	
					// Support: IE<=11+
					// Running getBoundingClientRect on a disconnected node in IE throws an error
					// Support: IE8 only
					// getClientRects() errors on disconnected elems
					( jQuery.contains( elem.ownerDocument, elem ) ?
						elem.getBoundingClientRect().left -
							swap( elem, { marginLeft: 0 }, function() {
								return elem.getBoundingClientRect().left;
							} ) :
						0
					)
				) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes
	
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;
	
		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// we're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );
	
		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
	
				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always( function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				} );
			}
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}
	
			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// enable finishing flag on private data
				data.finish = true;
	
				// empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var a,
			input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];
	
		// Support: Windows Web Apps (WWA)
		// `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "checkbox" );
		div.appendChild( input );
	
		a = div.getElementsByTagName( "a" )[ 0 ];
	
		// First batch of tests.
		a.style.cssText = "top:1px";
	
		// Test setAttribute on camelCase class.
		// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";
	
		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute( "style" ) );
	
		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute( "href" ) === "/a";
	
		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;
	
		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;
	
		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement( "form" ).enctype;
	
		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";
	
		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	} )();
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if (
						hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled :
									option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {
	
							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;
	
							} catch ( _ ) {
	
								// Will be executed only in IE6
								option.scrollHeight;
							}
	
						} else {
							option.selected = false;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
	
					return options;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
	
						// Setting the type on a radio button after the value resets the value in IE8-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;
	
						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}
	
					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}
	
					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
	
				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );
	
			} else {
	
				// Support: IE<9
				// Use defaultChecked and defaultSelected for oldIE
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			attrHandle[ name ] = function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {
	
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			};
		} else {
			attrHandle[ name ] = function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
		}
	} );
	
	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
	
					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {
	
					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}
	
	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {
	
		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {
	
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						( ret = elem.ownerDocument.createAttribute( name ) )
					);
				}
	
				ret.value = value += "";
	
				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};
	
		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
						ret.value :
						null;
				}
			};
	
		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};
	
		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};
	
		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each( [ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		} );
	}
	
	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {
	
				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case sensitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each( function() {
	
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch ( e ) {}
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {
	
		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each( [ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		} );
	}
	
	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
	
				if ( parent ) {
					parent.selectedIndex;
	
					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return jQuery.attr( elem, "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// store className if set
						jQuery._data( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					jQuery.attr( this, "class",
						className || value === false ?
						"" :
						jQuery._data( this, "__className__" ) || ""
					);
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
	
	jQuery.parseJSON = function( data ) {
	
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
	
			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}
	
		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );
	
		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {
	
			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}
	
			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}
	
			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;
	
			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;
	
			// Remove this token
			return "";
		} ) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new window.DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch ( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
	
		// IE leaves an \r character at EOL
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Document location
		ajaxLocation = location.href,
	
		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var
	
				// Cross-domain detection vars
				parts,
	
				// Loop variable
				i,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers as string
				responseHeadersString,
	
				// timeout handle
				timeoutTimer,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				transport,
	
				// Response headers
				responseHeaders,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" )
				.replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	function getDisplay( elem ) {
		return elem.style && elem.style.display || jQuery.css( elem, "display" );
	}
	
	function filterHidden( elem ) {
		while ( elem && elem.nodeType === 1 ) {
			if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
				return true;
			}
			elem = elem.parentNode;
		}
		return false;
	}
	
	jQuery.expr.filters.hidden = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return support.reliableHiddenOffsets() ?
			( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
				!elem.getClientRects().length ) :
				filterHidden( elem );
	};
	
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	
		// Support: IE6-IE8
		function() {
	
			// XHR cannot access local files, always use ActiveX for that case
			if ( this.isLocal ) {
				return createActiveXHR();
			}
	
			// Support: IE 9-11
			// IE seems to error on cross-domain PATCH requests when ActiveX XHR
			// is used. In IE 9+ always use the native XHR.
			// Note: this condition won't catch Edge as it doesn't define
			// document.documentMode but it also doesn't support ActiveX so it won't
			// reach this code.
			if ( document.documentMode > 8 ) {
				return createStandardXHR();
			}
	
			// Support: IE<9
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
				createStandardXHR() || createActiveXHR();
		} :
	
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;
	
	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		} );
	}
	
	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;
	
	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {
	
		jQuery.ajaxTransport( function( options ) {
	
			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {
	
				var callback;
	
				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;
	
						// Open the socket
						xhr.open(
							options.type,
							options.url,
							options.async,
							options.username,
							options.password
						);
	
						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}
	
						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}
	
						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
							headers[ "X-Requested-With" ] = "XMLHttpRequest";
						}
	
						// Set headers
						for ( i in headers ) {
	
							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}
	
						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );
	
						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;
	
							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
	
								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;
	
								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
	
									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}
	
									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch ( e ) {
	
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}
	
									// Filter status for non standard behaviors
	
									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;
	
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
	
							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};
	
						// Do send the request
						// `xhr.send` may raise an exception, but it will be
						// handled in jQuery.ajax (so no try/catch here)
						if ( !options.async ) {
	
							// If we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {
	
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							window.setTimeout( callback );
						} else {
	
							// Register the callback, but delay it in case `xhr.send` throws
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},
	
					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		} );
	}
	
	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	}
	
	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch ( e ) {}
	}
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
	
			var script,
				head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;
	
			return {
	
				send: function( _, callback ) {
	
					script = document.createElement( "script" );
	
					script.async = true;
	
					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}
	
					script.src = s.url;
	
					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {
	
						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
	
							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;
	
							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}
	
							// Dereference the script
							script = null;
	
							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};
	
					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},
	
				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		if ( !document.implementation.createHTMLDocument ) {
			return false;
		}
		var doc = document.implementation.createHTMLDocument( "" );
		doc.body.innerHTML = "<form></form><form></form>";
		return doc.body.childNodes.length === 2;
	} )();
	
	
	// data: string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		// document.implementation stops scripts or inline event handlers from
		// being executed immediately
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;
	
			// need to be able to calculate position if either top or left
			// is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== "undefined" ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? ( prop in win ) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {
	
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only,
						// but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	__webpack_require__(314);
	
	var util              = __webpack_require__(316);
	var tx                = __webpack_require__(317);
	var session           = __webpack_require__(327);
	var cookies           = __webpack_require__(319);
	var token             = __webpack_require__(328);
	var AuthSdkError      = __webpack_require__(325);
	var config            = __webpack_require__(323);
	var TokenManager      = __webpack_require__(332);
	
	function OktaAuthBuilder(args) {
	  var sdk = this;
	
	  if (!args) {
	    throw new AuthSdkError('No arguments passed to constructor. ' +
	      'Required usage: new OktaAuth(args)');
	  }
	
	  if (!args.url) {
	    throw new AuthSdkError('No url passed to constructor. ' +
	      'Required usage: new OktaAuth({url: "https://sample.okta.com"})');
	  }
	
	  this.options = {
	    url: util.removeTrailingSlash(args.url),
	    clientId: args.clientId,
	    issuer: util.removeTrailingSlash(args.issuer),
	    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),
	    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),
	    redirectUri: args.redirectUri,
	    ajaxRequest: args.ajaxRequest,
	    transformErrorXHR: args.transformErrorXHR,
	    headers: args.headers
	  };
	
	  // Digital clocks will drift over time, so the server
	  // can misalign with the time reported by the browser.
	  // The maxClockSkew allows relaxing the time-based
	  // validation of tokens (in seconds, not milliseconds).
	  // It currently defaults to 300, because 5 min is the
	  // default maximum tolerance allowed by Kerberos.
	  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)
	  if (!args.maxClockSkew && args.maxClockSkew !== 0) {
	    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;
	  } else {
	    this.options.maxClockSkew = args.maxClockSkew;
	  }
	
	  sdk.session = {
	    close: util.bind(session.closeSession, null, sdk),
	    exists: util.bind(session.sessionExists, null, sdk),
	    get: util.bind(session.getSession, null, sdk),
	    refresh: util.bind(session.refreshSession, null, sdk),
	    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)
	  };
	
	  sdk.tx = {
	    status: util.bind(tx.transactionStatus, null, sdk),
	    resume: util.bind(tx.resumeTransaction, null, sdk),
	    exists: util.bind(tx.transactionExists, null, sdk)
	  };
	
	  // This is exposed so we can mock document.cookie in our tests
	  sdk.tx.exists._getCookie = function(name) {
	    return cookies.getCookie(name);
	  };
	
	  sdk.idToken = {
	    authorize: util.deprecateWrap('Use token.getWithoutPrompt, token.getWithPopup, or token.getWithRedirect ' +
	      'instead of idToken.authorize.', util.bind(token.getToken, null, sdk)),
	    verify: util.deprecateWrap('Use token.verify instead of idToken.verify', util.bind(token.verifyIdToken, null, sdk)),
	    refresh: util.deprecateWrap('Use token.refresh instead of idToken.refresh',
	      util.bind(token.refreshIdToken, null, sdk)),
	    decode: util.deprecateWrap('Use token.decode instead of idToken.decode', token.decodeToken)
	  };
	
	  // This is exposed so we can mock window.location.href in our tests
	  sdk.idToken.authorize._getLocationHref = function() {
	    return window.location.href;
	  };
	
	  sdk.token = {
	    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),
	    getWithPopup: util.bind(token.getWithPopup, null, sdk),
	    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),
	    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),
	    decode: token.decodeToken,
	    refresh: util.bind(token.refreshToken, null, sdk),
	    getUserInfo: util.bind(token.getUserInfo, null, sdk),
	    verify: util.bind(token.verifyToken, null, sdk)
	  };
	
	  // This is exposed so we can set window.location in our tests
	  sdk.token.getWithRedirect._setLocation = function(url) {
	    window.location = url;
	  };
	
	  // This is exposed so we can mock window.location.hash in our tests
	  sdk.token.parseFromUrl._getLocationHash = function(url) {
	    return window.location.hash;
	  };
	
	  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);
	}
	
	var proto = OktaAuthBuilder.prototype;
	
	proto.features = {};
	
	proto.features.isPopupPostMessageSupported = function() {
	  var isIE8or9 = document.documentMode && document.documentMode < 10;
	  if (window.postMessage && !isIE8or9) {
	    return true;
	  }
	  return false;
	};
	
	proto.features.isTokenVerifySupported = function() {
	  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';
	};
	
	// { username, password, (relayState), (context) }
	proto.signIn = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn', opts);
	};
	
	proto.signOut = function () {
	  return this.session.close();
	};
	
	// { username, (relayState) }
	proto.forgotPassword = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/password', opts);
	};
	
	// { username, (relayState) }
	proto.unlockAccount = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);
	};
	
	// { recoveryToken }
	proto.verifyRecoveryToken = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/token', opts);
	};
	
	module.exports = function(ajaxRequest) {
	  function OktaAuth(args) {
	    if (!(this instanceof OktaAuth)) {
	      return new OktaAuth(args);
	    }
	    
	    if (args && !args.ajaxRequest) {
	      args.ajaxRequest = ajaxRequest;
	    }
	    util.bind(OktaAuthBuilder, this)(args);
	  }
	  OktaAuth.prototype = OktaAuthBuilder.prototype;
	  OktaAuth.prototype.constructor = OktaAuth;
	
	  return OktaAuth;
	};


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	__webpack_require__(315);
	
	// Production steps of ECMA-262, Edition 5, 15.4.4.14
	// Reference: http://es5.github.io/#x15.4.4.14
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
	if (!Array.prototype.indexOf) {
	  Array.prototype.indexOf = function(searchElement, fromIndex) {
	
	    var k;
	
	    // 1. Let o be the result of calling ToObject passing
	    //    the this value as the argument.
	    if (this == null) {
	      throw new TypeError('"this" is null or not defined');
	    }
	
	    var o = Object(this);
	
	    // 2. Let lenValue be the result of calling the Get
	    //    internal method of o with the argument "length".
	    // 3. Let len be ToUint32(lenValue).
	    var len = o.length >>> 0;
	
	    // 4. If len is 0, return -1.
	    if (len === 0) {
	      return -1;
	    }
	
	    // 5. If argument fromIndex was passed let n be
	    //    ToInteger(fromIndex); else let n be 0.
	    var n = +fromIndex || 0;
	
	    if (Math.abs(n) === Infinity) {
	      n = 0;
	    }
	
	    // 6. If n >= len, return -1.
	    if (n >= len) {
	      return -1;
	    }
	
	    // 7. If n >= 0, then Let k be n.
	    // 8. Else, n<0, Let k be len - abs(n).
	    //    If k is less than 0, then let k be 0.
	    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
	
	    // 9. Repeat, while k < len
	    while (k < len) {
	      // a. Let Pk be ToString(k).
	      //   This is implicit for LHS operands of the in operator
	      // b. Let kPresent be the result of calling the
	      //    HasProperty internal method of o with argument Pk.
	      //   This step can be combined with c
	      // c. If kPresent is true, then
	      //    i.  Let elementK be the result of calling the Get
	      //        internal method of o with the argument ToString(k).
	      //   ii.  Let same be the result of applying the
	      //        Strict Equality Comparison Algorithm to
	      //        searchElement and elementK.
	      //  iii.  If same is true, return k.
	      if (k in o && o[k] === searchElement) {
	        return k;
	      }
	      k++;
	    }
	    return -1;
	  };
	}
	
	if (!Array.isArray) {
	  Array.isArray = function(obj) {
	    return Object.prototype.toString.call(obj) === '[object Array]';
	  };
	}


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	
	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    var str = String(input);
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next str index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      str.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = str.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });
	
	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    var str = String(input).replace(/=+$/, '');
	    if (str.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = str.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });
	
	}());


/***/ },
/* 316 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint-env es6 */
	function base64UrlToBase64(b64u) {
	  return b64u.replace(/\-/g, '+').replace(/_/g, '/');
	}
	
	function base64UrlToString(b64u) {
	  var b64 = base64UrlToBase64(b64u);
	  switch (b64.length % 4) {
	    case 0:
	      break;
	    case 2:
	      b64 += '==';
	      break;
	    case 3:
	      b64 += '=';
	      break;
	    default:
	      throw 'Not a valid Base64Url';
	  }
	  var utf8 = atob(b64);
	  try {
	    return decodeURIComponent(escape(utf8));
	  } catch (e) {
	    return utf8;
	  }
	}
	
	function stringToBuffer(str) {
	  var buffer = new Uint8Array(str.length);
	  for (var i = 0; i < str.length; i++) {
	    buffer[i] = str.charCodeAt(i);
	  }
	  return buffer;
	}
	
	function base64UrlDecode(str) {
	  return atob(base64UrlToBase64(str));
	}
	
	
	function bind(fn, ctx) {
	  var additionalArgs = Array.prototype.slice.call(arguments, 2);
	  return function() {
	    var args = Array.prototype.slice.call(arguments);
	    args = additionalArgs.concat(args);
	    return fn.apply(ctx, args);
	  };
	}
	
	function isAbsoluteUrl(url) {
	  return /^(?:[a-z]+:)?\/\//i.test(url);
	}
	
	function isString(obj) {
	  return Object.prototype.toString.call(obj) === '[object String]';
	}
	
	function isObject(obj) {
	  return Object.prototype.toString.call(obj) === '[object Object]';
	}
	
	function isNumber(obj) {
	  return Object.prototype.toString.call(obj) === '[object Number]';
	}
	
	function isArray(obj) {
	  return Object.prototype.toString.call(obj) === '[object Array]';
	}
	
	function isoToUTCString(str) {
	  var parts = str.match(/\d+/g),
	      isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]),
	      isoDate = new Date(isoTime);
	
	  return isoDate.toUTCString();
	}
	
	function toQueryParams(obj) {
	  var str = [];
	  if (obj !== null) {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key) &&
	          obj[key] !== undefined &&
	          obj[key] !== null) {
	        str.push(key + '=' + encodeURIComponent(obj[key]));
	      }
	    }
	  }
	  if (str.length) {
	    return '?' + str.join('&');
	  } else {
	    return '';
	  }
	}
	
	function genRandomString(length) {
	  var randomCharset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	  var random = '';
	  for (var c = 0, cl = randomCharset.length; c < length; ++c) {
	    random += randomCharset[Math.floor(Math.random() * cl)];
	  }
	  return random;
	}
	
	function extend(obj1, obj2) {
	  for (var prop in obj2) {
	    if (obj2.hasOwnProperty(prop)) {
	      obj1[prop] = obj2[prop];
	    }
	  }
	}
	
	function removeNils(obj) {
	  var cleaned = {};
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) {
	      var value = obj[prop];
	      if (value !== null && value !== undefined) {
	        cleaned[prop] = value;
	      }
	    }
	  }
	  return cleaned;
	}
	
	function clone(obj) {
	  if (obj) {
	    var str = JSON.stringify(obj);
	    if (str) {
	      return JSON.parse(str);
	    }
	  }
	  return obj;
	}
	
	// Analogous to _.omit
	function omit(obj) {
	  var props = Array.prototype.slice.call(arguments, 1);
	  var newobj = {};
	  for (var p in obj) {
	    if (obj.hasOwnProperty(p) && props.indexOf(p) == -1) {
	      newobj[p] = obj[p];
	    }
	  }
	  return clone(newobj);
	}
	
	function find(collection, searchParams) {
	  var c = collection.length;
	  while (c--) {
	    var item = collection[c];
	    var found = true;
	    for (var prop in searchParams) {
	      if (!searchParams.hasOwnProperty(prop)) {
	        continue;
	      }
	      if (item[prop] !== searchParams[prop]) {
	        found = false;
	        break;
	      }
	    }
	    if (found) {
	      return item;
	    }
	  }
	}
	
	function getLink(obj, linkName, altName) {
	  if (!obj || !obj._links) {
	    return;
	  }
	  
	  var link = clone(obj._links[linkName]);
	
	  // If a link has a name and we have an altName, return if they match
	  if (link && link.name && altName) {
	    if (link.name === altName) {
	      return link;
	    }
	  } else {
	    return link;
	  }
	}
	
	function deprecate(text) {
	  /* eslint-disable no-console */
	  console.log('[okta-auth-sdk] DEPRECATION: ' + text);
	  /* eslint-enable */
	}
	
	function deprecateWrap(text, fn) {
	  return function() {
	    deprecate(text);
	    return fn.apply(null, arguments);
	  };
	}
	
	function removeTrailingSlash(path) {
	  if (!path) {
	    return;
	  }
	  if (path.slice(-1) === '/') {
	    return path.slice(0, -1);
	  }
	  return path;
	}
	
	module.exports = {
	  base64UrlToBase64: base64UrlToBase64,
	  base64UrlToString: base64UrlToString,
	  stringToBuffer: stringToBuffer,
	  base64UrlDecode: base64UrlDecode,
	  bind: bind,
	  isAbsoluteUrl: isAbsoluteUrl,
	  isString: isString,
	  isObject: isObject,
	  isNumber: isNumber,
	  isArray: isArray,
	  isoToUTCString: isoToUTCString,
	  toQueryParams: toQueryParams,
	  genRandomString: genRandomString,
	  extend: extend,
	  removeNils: removeNils,
	  clone: clone,
	  omit: omit,
	  find: find,
	  getLink: getLink,
	  deprecate: deprecate,
	  deprecateWrap: deprecateWrap,
	  removeTrailingSlash: removeTrailingSlash
	};


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity */
	var http              = __webpack_require__(318);
	var util              = __webpack_require__(316);
	var Q                 = __webpack_require__(320);
	var AuthSdkError      = __webpack_require__(325);
	var AuthPollStopError = __webpack_require__(326);
	var config            = __webpack_require__(323);
	
	function addStateToken(res, options) {
	  var builtArgs = util.clone(options) || {};
	
	  // Add the stateToken if one isn't passed and we have one
	  if (!builtArgs.stateToken && res.stateToken) {
	    builtArgs.stateToken = res.stateToken;
	  }
	
	  return builtArgs;
	}
	
	function getStateToken(res) {
	  return addStateToken(res);
	}
	
	function transactionStatus(sdk, args) {
	  args = addStateToken(sdk, args);
	  return http.post(sdk, sdk.options.url + '/api/v1/authn', args);
	}
	
	function resumeTransaction(sdk, args) {
	  if (!args || !args.stateToken) {
	    var stateToken = sdk.tx.exists._getCookie(config.STATE_TOKEN_COOKIE_NAME);
	    if (stateToken) {
	      args = {
	        stateToken: stateToken
	      };
	    } else {
	      return Q.reject(new AuthSdkError('No transaction to resume'));
	    }
	  }
	  return sdk.tx.status(args)
	    .then(function(res) {
	      return new AuthTransaction(sdk, res);
	    });
	}
	
	function transactionExists(sdk) {
	  // We have a cookie state token
	  return !!sdk.tx.exists._getCookie(config.STATE_TOKEN_COOKIE_NAME);
	}
	
	function postToTransaction(sdk, url, options) {
	  return http.post(sdk, url, options)
	    .then(function(res) {
	      return new AuthTransaction(sdk, res);
	    });
	}
	
	function getPollFn(sdk, res, ref) {
	  return function (options) {
	    var delay;
	    var rememberDevice;
	
	    if (util.isNumber(options)) {
	      delay = options;
	    } else if (util.isObject(options)) {
	      delay = options.delay;
	      rememberDevice = options.rememberDevice;
	    }
	
	    if (!delay && delay !== 0) {
	      delay = config.DEFAULT_POLLING_DELAY;
	    }
	
	    // Get the poll function
	    var pollLink = util.getLink(res, 'next', 'poll');
	    function pollFn() {
	      var href = pollLink.href;
	      if (rememberDevice) {
	        href += '?rememberDevice=true';
	      }
	      return http.post(sdk, href, getStateToken(res), {
	        saveAuthnState: false  
	      });
	    }
	
	    ref.isPolling = true;
	
	    var retryCount = 0;
	    var recursivePoll = function () {
	
	      // If the poll was manually stopped during the delay
	      if (!ref.isPolling) {
	        return Q.reject(new AuthPollStopError());
	      }
	
	      return pollFn()
	        .then(function (pollRes) {
	          // Reset our retry counter on success
	          retryCount = 0;
	
	          // If we're still waiting
	          if (pollRes.factorResult && pollRes.factorResult === 'WAITING') {
	
	            // If the poll was manually stopped while the pollFn was called
	            if (!ref.isPolling) {
	              throw new AuthPollStopError();
	            }
	
	            // Continue poll
	            return Q.delay(delay)
	              .then(recursivePoll);
	
	          } else {
	            // Any non-waiting result, even if polling was stopped
	            // during a request, will return
	            ref.isPolling = false;
	            return new AuthTransaction(sdk, pollRes);
	          }
	        })
	        .fail(function(err) {
	          // Exponential backoff, up to 16 seconds
	          if (err.xhr &&
	              (err.xhr.status === 0 || err.xhr.status === 429) &&
	              retryCount <= 4) {
	            var delayLength = Math.pow(2, retryCount) * 1000;
	            retryCount++;
	            return Q.delay(delayLength)
	              .then(recursivePoll);
	          }
	          throw err;
	        });
	    };
	    return recursivePoll()
	      .fail(function(err) {
	        ref.isPolling = false;
	        throw err;
	      });
	  };
	}
	
	function link2fn(sdk, res, obj, link, ref) {
	  if (Array.isArray(link)) {
	    return function(name, opts) {
	      if (!name) {
	        throw new AuthSdkError('Must provide a link name');
	      }
	
	      var lk = util.find(link, {name: name});
	      if (!lk) {
	        throw new AuthSdkError('No link found for that name');
	      }
	
	      return link2fn(sdk, res, obj, lk, ref)(opts);
	    };
	
	  } else if (link.hints &&
	      link.hints.allow &&
	      link.hints.allow.length === 1) {
	    var method = link.hints.allow[0];
	    switch (method) {
	
	      case 'GET':
	        return function() {
	          return http.get(sdk, link.href);
	        };
	
	      case 'POST':
	        return function(opts) {
	          if (ref && ref.isPolling) {
	            ref.isPolling = false;
	          }
	
	          var data = addStateToken(res, opts);
	
	          if (res.status === 'MFA_ENROLL') {
	            // Add factorType and provider
	            util.extend(data, {
	              factorType: obj.factorType,
	              provider: obj.provider
	            });
	          }
	
	          var href = link.href;
	          if (data.rememberDevice !== undefined) {
	            if (data.rememberDevice) {
	              href += '?rememberDevice=true';
	            }
	            data = util.omit(data, 'rememberDevice');
	
	          } else if (data.profile &&
	                    data.profile.updatePhone !== undefined) {
	            if (data.profile.updatePhone) {
	              href += '?updatePhone=true';
	            }
	            data.profile = util.omit(data.profile, 'updatePhone');
	          }
	
	          return postToTransaction(sdk, href, data);
	        };
	    }
	  }
	}
	
	function links2fns(sdk, res, obj, ref) {
	  var fns = {};
	  for (var linkName in obj._links) {
	    if (!obj._links.hasOwnProperty(linkName)) {
	      continue;
	    }
	
	    var link = obj._links[linkName];
	    
	    if (linkName === 'next') {
	      linkName = link.name;
	    }
	
	    if (link.type) {
	      fns[linkName] = link;
	      continue;
	    }
	
	    switch (linkName) {
	      // poll is only found at the transaction
	      // level, so we don't need to pass the link
	      case 'poll':
	        fns.poll = getPollFn(sdk, res, ref);
	        break;
	
	      default:
	        var fn = link2fn(sdk, res, obj, link, ref);
	        if (fn) {
	          fns[linkName] = fn;
	        }
	    }
	  }
	  return fns;
	}
	
	function flattenEmbedded(sdk, res, obj, ref) {
	  obj = obj || res;
	  obj = util.clone(obj);
	
	  if (Array.isArray(obj)) {
	    var objArr = [];
	    for (var o = 0, ol = obj.length; o < ol; o++) {
	      objArr.push(flattenEmbedded(sdk, res, obj[o], ref));
	    }
	    return objArr;
	  }
	
	  var embedded = obj._embedded || {};
	
	  for (var key in embedded) {
	    if (!embedded.hasOwnProperty(key)) {
	      continue;
	    }
	
	    // Flatten any nested _embedded objects
	    if (util.isObject(embedded[key]) || Array.isArray(embedded[key])) {
	      embedded[key] = flattenEmbedded(sdk, res, embedded[key], ref);
	    }
	  }
	
	  // Convert any links on the embedded object
	  var fns = links2fns(sdk, res, obj, ref);
	  util.extend(embedded, fns);
	
	  obj = util.omit(obj, '_embedded', '_links');
	  util.extend(obj, embedded);
	  return obj;
	}
	
	function AuthTransaction(sdk, res) {
	  if (res) {
	    this.data = res;
	    util.extend(this, flattenEmbedded(sdk, res, res, {}));
	    delete this.stateToken;
	
	    // RECOVERY_CHALLENGE has some responses without _links.
	    // Without _links, we emulate cancel to make it intuitive
	    // to return to the starting state. We may remove this
	    // when OKTA-75434 is resolved
	    if (res.status === 'RECOVERY_CHALLENGE' && !res._links) {
	      this.cancel = function() {
	        return new Q(new AuthTransaction(sdk));
	      };
	    }
	  }
	}
	
	module.exports = {
	  transactionStatus: transactionStatus,
	  resumeTransaction: resumeTransaction,
	  transactionExists: transactionExists,
	  postToTransaction: postToTransaction
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity */
	var util = __webpack_require__(316);
	var cookies = __webpack_require__(319);
	var Q = __webpack_require__(320);
	var AuthApiError = __webpack_require__(322);
	var config = __webpack_require__(323);
	var storageBuilder = __webpack_require__(324);
	
	var httpCache = storageBuilder(localStorage, config.CACHE_STORAGE_NAME);
	
	function httpRequest(sdk, options) {
	  options = options || {};
	  var url = options.url,
	      method = options.method,
	      args = options.args,
	      saveAuthnState = options.saveAuthnState,
	      accessToken = options.accessToken;
	
	  if (options.cacheResponse) {
	    var cacheContents = httpCache.getStorage();
	    var cachedResponse = cacheContents[url];
	    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
	      return Q.resolve(cachedResponse.response);
	    }
	  }
	
	  var headers = {
	    'Accept': 'application/json',
	    'Content-Type': 'application/json',
	    'X-Okta-User-Agent-Extended': 'okta-auth-js-' + config.SDK_VERSION
	  };
	  util.extend(headers, sdk.options.headers || {});
	
	  if (accessToken && util.isString(accessToken)) {
	    headers['Authorization'] = 'Bearer ' + accessToken;
	  }
	
	  var ajaxOptions = {
	    headers: headers,
	    data: args || undefined
	  };
	
	  var err, res;
	  return new Q(sdk.options.ajaxRequest(method, url, ajaxOptions))
	    .then(function(resp) {
	      res = resp.responseText;
	      if (res && util.isString(res)) {
	        res = JSON.parse(res);
	      }
	
	      if (saveAuthnState) {
	        if (!res.stateToken) {
	          cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);
	        }
	      }
	
	      if (res && res.stateToken && res.expiresAt) {
	        cookies.setCookie(config.STATE_TOKEN_COOKIE_NAME, res.stateToken, res.expiresAt);
	      }
	
	      if (res && options.cacheResponse) {
	        httpCache.updateStorage(url, {
	          expiresAt: Math.floor(Date.now()/1000) + config.DEFAULT_CACHE_DURATION,
	          response: res
	        });
	      }
	
	      return res;
	    })
	    .fail(function(resp) { 
	      var serverErr = resp.responseText || {};
	      if (util.isString(serverErr)) {
	        try {
	          serverErr = JSON.parse(serverErr);
	        } catch (e) {
	          serverErr = {
	            errorSummary: 'Unknown error'
	          };
	        }
	      }
	
	      if (resp.status >= 500) {
	        serverErr.errorSummary = 'Unknown error';
	      }
	
	      if (sdk.options.transformErrorXHR) {
	        resp = sdk.options.transformErrorXHR(util.clone(resp));
	      }
	
	      err = new AuthApiError(serverErr, resp);
	
	      if (err.errorCode === 'E0000011') {
	        cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);
	      }
	
	      throw err;
	    });
	}
	
	function get(sdk, url, options) {
	  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
	  var getOptions = {
	    url: url,
	    method: 'GET'
	  };
	  util.extend(getOptions, options);
	  return httpRequest(sdk, getOptions);
	}
	
	function post(sdk, url, args, options) {
	  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
	  var postOptions = {
	    url: url,
	    method: 'POST',
	    args: args,
	    saveAuthnState: true
	  };
	  util.extend(postOptions, options);
	  return httpRequest(sdk, postOptions);
	}
	
	module.exports = {
	  get: get,
	  post: post,
	  httpRequest: httpRequest
	};


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(316);
	
	function setCookie(name, value, expiresAt) {
	  var expiresText = '';
	  if (expiresAt) {
	    expiresText = ' expires=' + util.isoToUTCString(expiresAt) + ';';
	  }
	
	  var cookieText = name + '=' + value + '; path=/;' + expiresText;
	  setCookie._setDocumentCookie(cookieText);
	
	  return cookieText;
	}
	
	// Exposed for testing
	setCookie._setDocumentCookie = function(cookieText) {
	  document.cookie = cookieText;
	};
	
	function getCookie(name) {
	  var pattern = new RegExp(name + '=([^;]*)'),
	      matched = getCookie._getDocumentCookie().match(pattern);
	
	  if (matched) {
	    var cookie = matched[1];
	    return cookie;
	  }
	}
	
	// Exposed for testing
	getCookie._getDocumentCookie = function() {
	  return document.cookie;
	};
	
	function deleteCookie(name) {
	  setCookie(name, '', '1970-01-01T00:00:00Z');
	}
	
	module.exports = {
	  setCookie: setCookie,
	  getCookie: getCookie,
	  deleteCookie: deleteCookie
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	
	(function (definition) {
	    "use strict";
	
	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.
	
	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);
	
	    // CommonJS
	    } else if (true) {
	        module.exports = definition();
	
	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);
	
	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }
	
	    // <script>
	    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
	        // Prefer window over self for add-on scripts. Use self for
	        // non-windowed contexts.
	        var global = typeof window !== "undefined" ? window : self;
	
	        // Get the `window` object, save the previous Q global
	        // and initialize Q as a global.
	        var previousQ = global.Q;
	        global.Q = definition();
	
	        // Add a noConflict function so Q can be removed from the
	        // global namespace.
	        global.Q.noConflict = function () {
	            global.Q = previousQ;
	            return this;
	        };
	
	    } else {
	        throw new Error("This environment was not anticipated by Q. Please file a bug.");
	    }
	
	})(function () {
	"use strict";
	
	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}
	
	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;
	
	// shims
	
	// used for fallback in "allResolved"
	var noop = function () {};
	
	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;
	    // queue for late tasks, used by unhandled rejection tracking
	    var laterQueue = [];
	
	    function flush() {
	        /* jshint loopfunc: true */
	        var task, domain;
	
	        while (head.next) {
	            head = head.next;
	            task = head.task;
	            head.task = void 0;
	            domain = head.domain;
	
	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }
	            runSingle(task, domain);
	
	        }
	        while (laterQueue.length) {
	            task = laterQueue.pop();
	            runSingle(task);
	        }
	        flushing = false;
	    }
	    // runs a single function in the async queue
	    function runSingle(task, domain) {
	        try {
	            task();
	
	        } catch (e) {
	            if (isNodeJS) {
	                // In node, uncaught exceptions are considered fatal errors.
	                // Re-throw them synchronously to interrupt flushing!
	
	                // Ensure continuation if the uncaught exception is suppressed
	                // listening "uncaughtException" events (as domains does).
	                // Continue in next event to avoid tick recursion.
	                if (domain) {
	                    domain.exit();
	                }
	                setTimeout(flush, 0);
	                if (domain) {
	                    domain.enter();
	                }
	
	                throw e;
	
	            } else {
	                // In browsers, uncaught exceptions are not fatal.
	                // Re-throw them asynchronously to avoid slow-downs.
	                setTimeout(function () {
	                    throw e;
	                }, 0);
	            }
	        }
	
	        if (domain) {
	            domain.exit();
	        }
	    }
	
	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };
	
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	
	    if (typeof process === "object" &&
	        process.toString() === "[object process]" && process.nextTick) {
	        // Ensure Q is in a real Node environment, with a `process.nextTick`.
	        // To see through fake Node environments:
	        // * Mocha test runner - exposes a `process` global without a `nextTick`
	        // * Browserify - exposes a `process.nexTick` function that uses
	        //   `setTimeout`. In this case `setImmediate` is preferred because
	        //    it is faster. Browserify's `process.toString()` yields
	        //   "[object Object]", while in a real Node environment
	        //   `process.nextTick()` yields "[object process]".
	        isNodeJS = true;
	
	        requestTick = function () {
	            process.nextTick(flush);
	        };
	
	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }
	
	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };
	
	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }
	    // runs a task after all other tasks have been run
	    // this is useful for unhandled rejection tracking that needs to happen
	    // after all `then`d tasks have been run.
	    nextTick.runAfter = function (task) {
	        laterQueue.push(task);
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	    return nextTick;
	})();
	
	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis
	
	var array_slice = uncurryThis(Array.prototype.slice);
	
	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);
	
	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);
	
	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);
	
	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};
	
	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	
	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};
	
	var object_toString = uncurryThis(Object.prototype.toString);
	
	function isObject(value) {
	    return value === Object(value);
	}
	
	// generator related shims
	
	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}
	
	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}
	
	// long stack traces
	
	var STACK_JUMP_SEPARATOR = "From previous event:";
	
	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}
	
	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	
	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}
	
	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}
	
	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}
	
	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	
	    if (!fileNameAndLineNumber) {
	        return false;
	    }
	
	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}
	
	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }
	
	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }
	
	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}
	
	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}
	
	// end of shims
	// beginning of real work
	
	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (value instanceof Promise) {
	        return value;
	    }
	
	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;
	
	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;
	
	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;
	
	// enable long stacks if Q_DEBUG is set
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}
	
	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;
	
	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            Q.nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };
	
	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };
	
	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };
	
	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }
	
	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.
	
	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;
	
	        array_reduce(messages, function (undefined, message) {
	            Q.nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);
	
	        messages = void 0;
	        progressListeners = void 0;
	    }
	
	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(Q(value));
	    };
	
	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        array_reduce(progressListeners, function (undefined, progressListener) {
	            Q.nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };
	
	    return deferred;
	}
	
	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};
	
	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}
	
	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6
	
	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};
	
	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};
	
	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	/**
	 * Returns a promise for the first of an array of promises to become settled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be settled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function (resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function (answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }
	
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };
	
	    promise.inspect = inspect;
	
	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }
	
	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }
	
	    return promise;
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks
	
	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }
	
	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }
	
	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }
	
	    Q.nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_rejected(exception));
	        }]);
	    });
	
	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }
	
	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);
	
	    return deferred.promise;
	};
	
	Q.tap = function (promise, callback) {
	    return Q(promise).tap(callback);
	};
	
	/**
	 * Works almost like "finally", but not called for rejections.
	 * Original resolution value is passed through callback unaffected.
	 * Callback may return a promise that will be awaited for.
	 * @param {Function} callback
	 * @returns {Q.Promise}
	 * @example
	 * doSomething()
	 *   .then(...)
	 *   .tap(console.log)
	 *   .then(...);
	 */
	Promise.prototype.tap = function (callback) {
	    callback = Q(callback);
	
	    return this.then(function (value) {
	        return callback.fcall(value).thenResolve(value);
	    });
	};
	
	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}
	
	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};
	
	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};
	
	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};
	
	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};
	
	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */
	
	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}
	
	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return object instanceof Promise;
	}
	
	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}
	
	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}
	
	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};
	
	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}
	
	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};
	
	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}
	
	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};
	
	//// BEGIN UNHANDLED REJECTION TRACKING
	
	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var reportedUnhandledRejections = [];
	var trackUnhandledRejections = true;
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	    if (typeof process === "object" && typeof process.emit === "function") {
	        Q.nextTick.runAfter(function () {
	            if (array_indexOf(unhandledRejections, promise) !== -1) {
	                process.emit("unhandledRejection", reason, promise);
	                reportedUnhandledRejections.push(promise);
	            }
	        });
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        if (typeof process === "object" && typeof process.emit === "function") {
	            Q.nextTick.runAfter(function () {
	                var atReport = array_indexOf(reportedUnhandledRejections, promise);
	                if (atReport !== -1) {
	                    process.emit("rejectionHandled", unhandledReasons[at], promise);
	                    reportedUnhandledRejections.splice(atReport, 1);
	                }
	            });
	        }
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	//// END UNHANDLED REJECTION TRACKING
	
	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });
	
	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);
	
	    return rejection;
	}
	
	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}
	
	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    Q.nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}
	
	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}
	
	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}
	
	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};
	
	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;
	
	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.
	
	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return Q(result.value);
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return Q(exception.value);
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}
	
	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}
	
	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}
	
	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}
	
	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}
	
	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    Q.nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};
	
	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};
	
	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};
	
	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};
	
	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};
	
	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};
	
	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};
	
	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};
	
	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};
	
	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};
	
	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};
	
	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};
	
	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};
	
	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	
	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};
	
	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};
	
	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var pendingCount = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++pendingCount;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--pendingCount === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (pendingCount === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}
	
	Promise.prototype.all = function () {
	    return all(this);
	};
	
	/**
	 * Returns the first resolved promise of an array. Prior rejected promises are
	 * ignored.  Rejects only if all promises are rejected.
	 * @param {Array*} an array containing values or promises for values
	 * @returns a promise fulfilled with the value of the first resolved promise,
	 * or a rejected promise if all promises are rejected.
	 */
	Q.any = any;
	
	function any(promises) {
	    if (promises.length === 0) {
	        return Q.resolve();
	    }
	
	    var deferred = Q.defer();
	    var pendingCount = 0;
	    array_reduce(promises, function (prev, current, index) {
	        var promise = promises[index];
	
	        pendingCount++;
	
	        when(promise, onFulfilled, onRejected, onProgress);
	        function onFulfilled(result) {
	            deferred.resolve(result);
	        }
	        function onRejected() {
	            pendingCount--;
	            if (pendingCount === 0) {
	                deferred.reject(new Error(
	                    "Can't get fulfillment value from any promise, all " +
	                    "promises were rejected."
	                ));
	            }
	        }
	        function onProgress(progress) {
	            deferred.notify({
	                index: index,
	                value: progress
	            });
	        }
	    }, undefined);
	
	    return deferred.promise;
	}
	
	Promise.prototype.any = function () {
	    return any(this);
	};
	
	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}
	
	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};
	
	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}
	
	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};
	
	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};
	
	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};
	
	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}
	
	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};
	
	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};
	
	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};
	
	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        Q.nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {Any*} custom error message or Error object (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, error) {
	    return Q(object).timeout(ms, error);
	};
	
	Promise.prototype.timeout = function (ms, error) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        if (!error || "string" === typeof error) {
	            error = new Error(error || "Timed out after " + ms + " ms");
	            error.code = "ETIMEDOUT";
	        }
	        deferred.reject(error);
	    }, ms);
	
	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);
	
	    return deferred.promise;
	};
	
	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};
	
	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};
	
	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};
	
	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}
	
	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            Q.nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            Q.nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};
	
	Q.noConflict = function() {
	    throw new Error("Q.noConflict only works when Q is used as a global");
	};
	
	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();
	
	return Q;
	
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(321).setImmediate))

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(294).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(321).setImmediate, __webpack_require__(321).clearImmediate))

/***/ },
/* 322 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthApiError(err, xhr) {
	  this.name = 'AuthApiError';
	  this.message = err.errorSummary;
	  this.errorSummary = err.errorSummary;
	  this.errorCode = err.errorCode;
	  this.errorLink = err.errorLink;
	  this.errorId = err.errorId;
	  this.errorCauses = err.errorCauses;
	
	  if (xhr) {
	    this.xhr = xhr;
	  }
	}
	AuthApiError.prototype = new Error();
	
	module.exports = AuthApiError;


/***/ },
/* 323 */
/***/ function(module, exports) {

	module.exports = {
	  "STATE_TOKEN_COOKIE_NAME": "oktaStateToken",
	  "DEFAULT_POLLING_DELAY": 500,
	  "DEFAULT_MAX_CLOCK_SKEW": 300,
	  "DEFAULT_CACHE_DURATION": 86400,
	  "FRAME_ID": "okta-oauth-helper-frame",
	  "REDIRECT_OAUTH_PARAMS_COOKIE_NAME": "okta-oauth-redirect-params",
	  "REDIRECT_STATE_COOKIE_NAME": "okta-oauth-state",
	  "REDIRECT_NONCE_COOKIE_NAME": "okta-oauth-nonce",
	  "TOKEN_STORAGE_NAME": "okta-token-storage",
	  "CACHE_STORAGE_NAME": "okta-cache-storage",
	  "SDK_VERSION": "1.6.0"
	};

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var AuthSdkError = __webpack_require__(325);
	
	// storage must have getItem and setItem
	function storageBuilder(webstorage, storageName) {
	  function getStorage() {
	    var storageString = webstorage.getItem(storageName);
	    storageString = storageString || '{}';
	    try {
	      return JSON.parse(storageString);
	    } catch(e) {
	      throw new AuthSdkError('Unable to parse storage string: ' + storageName);
	    }
	  }
	
	  function setStorage(storage) {
	    try {
	      var storageString = JSON.stringify(storage);
	      webstorage.setItem(storageName, storageString);
	    } catch(e) {
	      throw new AuthSdkError('Unable to set storage: ' + storageName);
	    }
	  }
	
	  function clearStorage(key) {
	    if (!key) {
	      setStorage({});
	    }
	    var storage = getStorage();
	    delete storage[key];
	    setStorage(storage);
	  }
	
	  function updateStorage(key, value) {
	    var storage = getStorage();
	    storage[key] = value;
	    setStorage(storage);
	  }
	
	  return {
	    getStorage: getStorage,
	    setStorage: setStorage,
	    clearStorage: clearStorage,
	    updateStorage: updateStorage
	  };
	}
	
	module.exports = storageBuilder;


/***/ },
/* 325 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthSdkError(msg, xhr) {
	  this.name = 'AuthSdkError';
	  this.message = msg;
	
	  this.errorCode = 'INTERNAL';
	  this.errorSummary = msg;
	  this.errorLink = 'INTERNAL';
	  this.errorId = 'INTERNAL';
	  this.errorCauses = [];
	  if (xhr) {
	    this.xhr = xhr;
	  }
	}
	AuthSdkError.prototype = new Error();
	
	module.exports = AuthSdkError;


/***/ },
/* 326 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthPollStopError() {
	  this.name = 'AuthPollStopError';
	  this.message = 'The poll was stopped by the sdk';
	}
	AuthPollStopError.prototype = new Error();
	
	module.exports = AuthPollStopError;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(316);
	var http = __webpack_require__(318);
	
	function sessionExists(sdk) {
	  return sdk.session.get()
	    .then(function(res) {
	      if (res.status === 'ACTIVE') {
	        return true;
	      }
	      return false;
	    })
	    .fail(function() {
	      return false;
	    });
	}
	
	function getSession(sdk) { 
	  return http.get(sdk, '/api/v1/sessions/me')
	  .then(function(session) {
	    var res = util.omit(session, '_links');
	
	    res.refresh = function() {
	      return http.post(sdk, util.getLink(session, 'refresh').href);
	    };
	
	    res.user = function() {
	      return http.get(sdk, util.getLink(session, 'user').href);
	    };
	
	    return res;
	  })
	  .fail(function() {
	    // Return INACTIVE status on failure
	    return {status: 'INACTIVE'};
	  });
	}
	
	function closeSession(sdk) {
	  return http.httpRequest(sdk, {
	    url: sdk.options.url + '/api/v1/sessions/me',
	    method: 'DELETE'
	  });
	}
	
	function refreshSession(sdk) {
	  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');
	}
	
	function setCookieAndRedirect(sdk, sessionToken, redirectUrl) {
	  redirectUrl = redirectUrl || window.location.href;
	  window.location = sdk.options.url + '/login/sessionCookieRedirect' +
	    util.toQueryParams({
	      checkAccountSetupComplete: true,
	      token: sessionToken,
	      redirectUrl: redirectUrl
	    });
	}
	
	module.exports = {
	  sessionExists: sessionExists,
	  getSession: getSession,
	  closeSession: closeSession,
	  refreshSession: refreshSession,
	  setCookieAndRedirect: setCookieAndRedirect
	};


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity, max-statements */
	var http          = __webpack_require__(318);
	var util          = __webpack_require__(316);
	var oauthUtil     = __webpack_require__(329);
	var Q             = __webpack_require__(320);
	var sdkCrypto     = __webpack_require__(330);
	var AuthSdkError  = __webpack_require__(325);
	var OAuthError    = __webpack_require__(331);
	var config        = __webpack_require__(323);
	var cookies       = __webpack_require__(319);
	
	function decodeToken(token) {
	  var jwt = token.split('.');
	  var decodedToken;
	
	  try {
	    decodedToken = {
	      header: JSON.parse(util.base64UrlToString(jwt[0])),
	      payload: JSON.parse(util.base64UrlToString(jwt[1])),
	      signature: jwt[2]
	    };
	  } catch(e) {
	    throw new AuthSdkError('Malformed token');
	  }
	
	  return decodedToken;
	}
	
	function verifyIdToken(sdk, idToken, options) {
	  options = options || {};
	
	  if (!sdk.features.isTokenVerifySupported()) {
	    return Q.reject(new AuthSdkError('This browser doesn\'t support crypto.subtle'));
	  }
	
	  function isExpired(jwtExp) {
	    var expirationTime;
	    if (options.expirationTime || options.expirationTime === 0) {
	      expirationTime = options.expirationTime;
	    } else {
	      expirationTime = Math.floor(Date.now()/1000);
	    }
	    if (jwtExp &&
	        jwtExp > expirationTime) {
	      return true;
	    }
	  }
	
	  function hasAudience(jwtAudience) {
	    if (!options.audience) {
	      return true;
	    }
	    var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
	    var jwtAudiences = Array.isArray(jwtAudience) ? jwtAudience : [jwtAudience];
	    var ai = audiences.length;
	    while (ai--) {
	      var aud = audiences[ai];
	      if (jwtAudiences.indexOf(aud) !== -1) {
	        return true;
	      }
	    }
	  }
	
	  return oauthUtil.getWellKnown(sdk)
	    .then(function(res) {
	      return http.get(sdk, res['jwks_uri']);
	    })
	    .then(function(res) {
	      var key = res.keys[0];
	      return sdkCrypto.verifyToken(idToken, key);
	    })
	    .then(function(res) {
	      if (!res) {
	        return false;
	      }
	      var jwt = sdk.token.decode(idToken);
	
	      if (isExpired(jwt.payload.exp)) {
	        return false;
	      }
	
	      if (!hasAudience(jwt.payload.aud)) {
	        return false;
	      }
	
	      if (options.issuer &&
	          options.issuer !== jwt.payload.iss) {
	        return false;
	      }
	
	      return true;
	    });
	}
	
	function verifyToken(sdk, token, nonce, ignoreSignature) {
	  return new Q()
	  .then(function() {
	    if (!token || !token.idToken) {
	      throw new AuthSdkError('Only idTokens may be verified');
	    }
	
	    var jwt = decodeToken(token.idToken);
	
	    // Standard claim validation
	    oauthUtil.validateClaims(sdk, jwt.payload, token.clientId, token.issuer, nonce);
	
	    // If the browser doesn't support native crypto or we choose not 
	    // to verify the signature, bail early
	    if (ignoreSignature || !sdk.features.isTokenVerifySupported()) {
	      return token;
	    }
	
	    return oauthUtil.getKey(sdk, token.issuer, jwt.header.kid)
	    .then(function(key) {
	      return sdkCrypto.verifyToken(token.idToken, key);
	    })
	    .then(function(valid) {
	      if (!valid) {
	        throw new AuthSdkError('The token signature is not valid');
	      }
	      return token;
	    });
	  });
	}
	
	function refreshIdToken(sdk, options) {
	  options = options || {};
	  options.display = null;
	  options.prompt = 'none';
	  return getToken(sdk, options);
	}
	
	function addPostMessageListener(sdk, timeout, state) {
	  var deferred = Q.defer();
	
	  function responseHandler(e) {
	    if (!e.data ||
	        e.origin !== sdk.options.url ||
	        (e.data && util.isString(state) && e.data.state !== state)) {
	      return;
	    }
	    deferred.resolve(e.data);
	  }
	
	  oauthUtil.addListener(window, 'message', responseHandler);
	
	  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'))
	    .fin(function() {
	      oauthUtil.removeListener(window, 'message', responseHandler);
	    });
	}
	
	function addFragmentListener(sdk, windowEl, timeout) {
	  var deferred = Q.defer();
	
	  function hashChangeHandler() {
	    /*
	      We are only able to access window.location.hash on a window
	      that has the same domain. A try/catch is necessary because
	      there's no other way to determine that the popup is in
	      another domain. When we try to access a window on another 
	      domain, an error is thrown.
	    */
	    try {
	      if (windowEl &&
	          windowEl.location &&
	          windowEl.location.hash) {
	        deferred.resolve(oauthUtil.hashToObject(windowEl.location.hash));
	      } else if (windowEl && !windowEl.closed) {
	        setTimeout(hashChangeHandler, 500);
	      }
	    } catch (err) {
	      setTimeout(hashChangeHandler, 500);
	    }
	  }
	
	  hashChangeHandler();
	
	  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'));
	}
	
	function handleOAuthResponse(sdk, oauthParams, res, urls) {
	  urls = urls || {};
	
	  var tokenTypes = oauthParams.responseType;
	  var scopes = util.clone(oauthParams.scopes);
	  var clientId = oauthParams.clientId || sdk.options.clientId;
	
	  return new Q()
	  .then(function() {
	    if (res['error'] || res['error_description']) {
	      throw new OAuthError(res['error'], res['error_description']);
	    }
	
	    if (res.state !== oauthParams.state) {
	      throw new AuthSdkError('OAuth flow response state doesn\'t match request state');
	    }
	
	    var tokenDict = {};
	    
	    if (res['access_token']) {
	      tokenDict['token'] = {
	        accessToken: res['access_token'],
	        expiresAt: Number(res['expires_in']) + Math.floor(Date.now()/1000),
	        tokenType: res['token_type'],
	        scopes: scopes,
	        authorizeUrl: urls.authorizeUrl,
	        userinfoUrl: urls.userinfoUrl
	      };
	    }
	
	    if (res['code']) {
	      tokenDict['code'] = {
	        authorizationCode: res['code']
	      };
	    }
	
	    if (res['id_token']) {
	      var jwt = sdk.token.decode(res['id_token']);
	
	      var idToken = {
	        idToken: res['id_token'],
	        claims: jwt.payload,
	        expiresAt: jwt.payload.exp,
	        scopes: scopes,
	        authorizeUrl: urls.authorizeUrl,
	        issuer: urls.issuer,
	        clientId: clientId
	      };
	
	      return verifyToken(sdk, idToken, oauthParams.nonce, true)
	      .then(function(token) {
	        tokenDict['id_token'] = idToken;
	        return tokenDict;
	      });
	    }
	
	    return tokenDict;
	  })
	  .then(function(tokenDict) {
	    if (!Array.isArray(tokenTypes)) {
	      return tokenDict[tokenTypes];
	    }
	
	    if (!tokenDict['token'] && !tokenDict['id_token']) {
	      throw new AuthSdkError('Unable to parse OAuth flow response');
	    }
	
	    // Create token array in the order of the responseType array
	    return tokenTypes.map(function(item) {
	      return tokenDict[item];
	    });
	  });
	}
	
	function getDefaultOAuthParams(sdk, oauthOptions) {
	  oauthOptions = util.clone(oauthOptions) || {};
	
	  if (oauthOptions.scope) {
	    util.deprecate('The param "scope" is equivalent to "scopes". Use "scopes" instead.');
	    oauthOptions.scopes = oauthOptions.scope;
	    delete oauthOptions.scope;
	  }
	
	  var defaults = {
	    clientId: sdk.options.clientId,
	    redirectUri: sdk.options.redirectUri || window.location.href,
	    responseType: 'id_token',
	    responseMode: 'okta_post_message',
	    state: util.genRandomString(64),
	    nonce: util.genRandomString(64),
	    scopes: ['openid', 'email']
	  };
	  util.extend(defaults, oauthOptions);
	  return defaults;
	}
	
	function convertOAuthParamsToQueryParams(oauthParams) {
	  // Quick validation
	  if (!oauthParams.clientId) {
	    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
	  }
	
	  if (util.isString(oauthParams.responseType) && oauthParams.responseType.indexOf(' ') !== -1) {
	    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');
	  }
	
	  // Convert our params to their actual OAuth equivalents
	  var oauthQueryParams = util.removeNils({
	    'client_id': oauthParams.clientId,
	    'redirect_uri': oauthParams.redirectUri,
	    'response_type': oauthParams.responseType,
	    'response_mode': oauthParams.responseMode,
	    'state': oauthParams.state,
	    'nonce': oauthParams.nonce,
	    'prompt': oauthParams.prompt,
	    'display': oauthParams.display,
	    'sessionToken': oauthParams.sessionToken,
	    'idp': oauthParams.idp,
	    'max_age': oauthParams.maxAge
	  });
	
	  if (Array.isArray(oauthQueryParams['response_type'])) {
	    oauthQueryParams['response_type'] = oauthQueryParams['response_type'].join(' ');
	  }
	
	  if (oauthParams.responseType.indexOf('id_token') !== -1 &&
	      oauthParams.scopes.indexOf('openid') === -1) {
	    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');
	  } else {
	    oauthQueryParams.scope = oauthParams.scopes.join(' ');
	  }
	
	  return oauthQueryParams;
	}
	
	function buildAuthorizeParams(oauthParams) {
	  var oauthQueryParams = convertOAuthParamsToQueryParams(oauthParams);
	  return util.toQueryParams(oauthQueryParams);
	}
	
	/*
	 * Retrieve an idToken from an Okta or a third party idp
	 * 
	 * Two main flows:
	 *
	 *  1) Exchange a sessionToken for a token
	 * 
	 *    Required:
	 *      clientId: passed via the OktaAuth constructor or into getToken
	 *      sessionToken: 'yourtoken'
	 *
	 *    Optional:
	 *      redirectUri: defaults to window.location.href
	 *      scopes: defaults to ['openid', 'email']
	 *
	 *    Forced:
	 *      prompt: 'none'
	 *      responseMode: 'okta_post_message'
	 *      display: undefined
	 *
	 *  2) Get a token from an idp
	 *
	 *    Required:
	 *      clientId: passed via the OktaAuth constructor or into getToken
	 *
	 *    Optional:
	 *      redirectUri: defaults to window.location.href
	 *      scopes: defaults to ['openid', 'email']
	 *      idp: defaults to Okta as an idp
	 *      prompt: no default. Pass 'none' to throw an error if user is not signed in
	 *
	 *    Forced:
	 *      display: 'popup'
	 *
	 *  Only common optional params shown. Any OAuth parameters not explicitly forced are available to override
	 *
	 * @param {Object} oauthOptions
	 * @param {String} [oauthOptions.clientId] ID of this client
	 * @param {String} [oauthOptions.redirectUri] URI that the iframe or popup will go to once authenticated
	 * @param {String[]} [oauthOptions.scopes] OAuth 2.0 scopes to request (openid must be specified)
	 * @param {String} [oauthOptions.idp] ID of an external IdP to use for user authentication
	 * @param {String} [oauthOptions.sessionToken] Bootstrap Session Token returned by the Okta Authentication API
	 * @param {String} [oauthOptions.prompt] Determines whether the Okta login will be displayed on failure.
	 *                                       Use 'none' to prevent this behavior
	 *
	 * @param {Object} options
	 * @param {Integer} [options.timeout] Time in ms before the flow is automatically terminated. Defaults to 120000
	 * @param {String} [options.popupTitle] Title dispayed in the popup.
	 *                                      Defaults to 'External Identity Provider User Authentication'
	 */
	function getToken(sdk, oauthOptions, options) {
	  oauthOptions = oauthOptions || {};
	  options = options || {};
	
	  // Default OAuth query params
	  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions);
	
	  // Start overriding any options that don't make sense
	  var sessionTokenOverrides = {
	    prompt: 'none',
	    responseMode: 'okta_post_message',
	    display: null
	  };
	
	  var idpOverrides = {
	    display: 'popup'
	  };
	
	  if (oauthOptions.sessionToken) {
	    util.extend(oauthParams, sessionTokenOverrides);
	  } else if (oauthOptions.idp) {
	    util.extend(oauthParams, idpOverrides);
	  }
	
	  // Use the query params to build the authorize url
	  var requestUrl,
	      urls;
	  try {
	    // Get authorizeUrl and issuer
	    urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
	    requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);
	  } catch (e) {
	    return Q.reject(e);
	  }
	
	  // Determine the flow type
	  var flowType;
	  if (oauthParams.sessionToken || oauthParams.display === null) {
	    flowType = 'IFRAME';
	  } else if (oauthParams.display === 'popup') {
	    flowType = 'POPUP';
	  } else {
	    flowType = 'IMPLICIT';
	  }
	
	  function getOrigin(url) {
	    var originRegex = /^(https?\:\/\/)?([^:\/?#]*(?:\:[0-9]+)?)/;
	    return originRegex.exec(url)[0];
	  }
	
	  // Execute the flow type
	  switch (flowType) {
	    case 'IFRAME':
	      var iframePromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
	      var iframeEl = oauthUtil.loadFrame(requestUrl);
	      return iframePromise
	        .then(function(res) {
	          return handleOAuthResponse(sdk, oauthParams, res, urls);
	        })
	        .fin(function() {
	          if (document.body.contains(iframeEl)) {
	            iframeEl.parentElement.removeChild(iframeEl);
	          }
	        });
	
	    case 'POPUP': // eslint-disable-line no-case-declarations
	      var popupPromise;
	
	      // Add listener on postMessage before window creation, so
	      // postMessage isn't triggered before we're listening
	      if (oauthParams.responseMode === 'okta_post_message') {
	        if (!sdk.features.isPopupPostMessageSupported()) {
	          return Q.reject(new AuthSdkError('This browser doesn\'t have full postMessage support'));
	        }
	        popupPromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
	      }
	
	      // Create the window
	      var windowOptions = {
	        popupTitle: options.popupTitle
	      };
	      var windowEl = oauthUtil.loadPopup(requestUrl, windowOptions);
	
	      // Poll until we get a valid hash fragment
	      if (oauthParams.responseMode === 'fragment') {
	        var windowOrigin = getOrigin(sdk.idToken.authorize._getLocationHref());
	        var redirectUriOrigin = getOrigin(oauthParams.redirectUri);
	        if (windowOrigin !== redirectUriOrigin) {
	          return Q.reject(new AuthSdkError('Using fragment, the redirectUri origin (' + redirectUriOrigin +
	            ') must match the origin of this page (' + windowOrigin + ')'));
	        }
	        popupPromise = addFragmentListener(sdk, windowEl, options.timeout);
	      }
	
	      // Both postMessage and fragment require a poll to see if the popup closed
	      var popupDeferred = Q.defer();
	      function hasClosed(win) { // eslint-disable-line no-inner-declarations
	        if (win.closed) {
	          popupDeferred.reject(new AuthSdkError('Unable to parse OAuth flow response'));
	        }
	      }
	      var closePoller = setInterval(function() {
	        hasClosed(windowEl);
	      }, 500);
	
	      // Proxy the promise results into the deferred
	      popupPromise
	      .then(function(res) {
	        popupDeferred.resolve(res);
	      })
	      .fail(function(err) {
	        popupDeferred.reject(err);
	      });
	
	      return popupDeferred.promise
	        .then(function(res) {
	          return handleOAuthResponse(sdk, oauthParams, res, urls);
	        })
	        .fin(function() {
	          if (!windowEl.closed) {
	            clearInterval(closePoller);
	            windowEl.close();
	          }
	        });
	
	    default:
	      return Q.reject(new AuthSdkError('The full page redirect flow is not supported'));
	  }
	}
	
	function getWithoutPrompt(sdk, oauthOptions, options) {
	  var oauthParams = util.clone(oauthOptions) || {};
	  util.extend(oauthParams, {
	    prompt: 'none',
	    responseMode: 'okta_post_message',
	    display: null
	  });
	  return getToken(sdk, oauthParams, options);
	}
	
	function getWithPopup(sdk, oauthOptions, options) {
	  var oauthParams = util.clone(oauthOptions) || {};
	  util.extend(oauthParams, {
	    display: 'popup'
	  });
	  return getToken(sdk, oauthParams, options);
	}
	
	function getWithRedirect(sdk, oauthOptions, options) {
	  oauthOptions = util.clone(oauthOptions) || {};
	  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions);
	  // If the user didn't specify a responseMode
	  if (!oauthOptions.responseMode) {
	    // And it's only an auth code request (responseType could be an array)
	    var respType = oauthParams.responseType;
	    if (respType.indexOf('code') !== -1 &&
	        (util.isString(respType) || (Array.isArray(respType) && respType.length === 1))) {
	        // Default the responseMode to query
	        util.extend(oauthParams, {
	          responseMode: 'query'
	        });
	    // Otherwise, default to fragment
	    } else {
	      util.extend(oauthParams, {
	        responseMode: 'fragment'
	      });
	    }
	  }
	  
	  var urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
	  var requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);
	
	  // Set session cookie to store the oauthParams
	  cookies.setCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME, JSON.stringify({
	    responseType: oauthParams.responseType,
	    state: oauthParams.state,
	    nonce: oauthParams.nonce,
	    scopes: oauthParams.scopes,
	    urls: urls
	  }));
	
	  // Set nonce cookie for servers to validate nonce in id_token
	  cookies.setCookie(config.REDIRECT_NONCE_COOKIE_NAME, oauthParams.nonce);
	
	  // Set state cookie for servers to validate state
	  cookies.setCookie(config.REDIRECT_STATE_COOKIE_NAME, oauthParams.state);
	
	  sdk.token.getWithRedirect._setLocation(requestUrl);
	}
	
	function refreshToken(sdk, token) {
	  if (!oauthUtil.isToken(token)) {
	    return Q.reject(new AuthSdkError('Refresh must be passed a token with ' +
	      'an array of scopes and an accessToken or idToken'));
	  }
	
	  var responseType;
	  if (token.accessToken) {
	    responseType = 'token';
	  } else {
	    responseType = 'id_token';
	  }
	  return sdk.token.getWithoutPrompt({
	    responseType: responseType,
	    scopes: token.scopes
	  }, {
	    authorizeUrl: token.authorizeUrl,
	    userinfoUrl: token.userinfoUrl,
	    issuer: token.issuer
	  });
	}
	
	function parseFromUrl(sdk, url) {
	  var hash = sdk.token.parseFromUrl._getLocationHash();
	  if (url) {
	    hash = url.substring(url.indexOf('#'));
	  }
	
	  var oauthParamsCookie = cookies.getCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
	  if (!hash || !oauthParamsCookie) {
	    return Q.reject(new AuthSdkError('Unable to parse a token from the url'));
	  }
	  try {
	    var oauthParams = JSON.parse(oauthParamsCookie);
	    var urls = oauthParams.urls;
	    delete oauthParams.urls;
	    cookies.deleteCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
	  } catch(e) {
	    return Q.reject(new AuthSdkError('Unable to parse the ' + 
	      config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME + ' cookie: ' + e.message));
	  }
	
	  return Q.resolve(oauthUtil.hashToObject(hash))
	    .then(function(res) {
	      return handleOAuthResponse(sdk, oauthParams, res, urls);
	    });
	}
	
	function getUserInfo(sdk, accessTokenObject) {
	  if (!accessTokenObject ||
	      (!oauthUtil.isToken(accessTokenObject) && !accessTokenObject.accessToken && !accessTokenObject.userinfoUrl)) {
	    return Q.reject(new AuthSdkError('getUserInfo requires an access token object'));
	  }
	  return http.httpRequest(sdk, {
	    url: accessTokenObject.userinfoUrl,
	    method: 'GET',
	    accessToken: accessTokenObject.accessToken
	  })
	  .fail(function(err) {
	    if (err.xhr && (err.xhr.status === 401 || err.xhr.status === 403)) {
	      var authenticateHeader = err.xhr.getResponseHeader('WWW-Authenticate');
	      if (authenticateHeader) {
	        var errorMatches = authenticateHeader.match(/error="(.*?)"/) || [];
	        var errorDescriptionMatches = authenticateHeader.match(/error_description="(.*?)"/) || [];
	        var error = errorMatches[1];
	        var errorDescription = errorDescriptionMatches[1];
	        if (error && errorDescription) {
	          err = new OAuthError(error, errorDescription);
	        }
	      }
	    }
	    throw err;
	  });
	}
	
	module.exports = {
	  getToken: getToken,
	  getWithoutPrompt: getWithoutPrompt,
	  getWithPopup: getWithPopup,
	  getWithRedirect: getWithRedirect,
	  parseFromUrl: parseFromUrl,
	  refreshIdToken: refreshIdToken,
	  decodeToken: decodeToken,
	  verifyIdToken: verifyIdToken,
	  refreshToken: refreshToken,
	  getUserInfo: getUserInfo,
	  verifyToken: verifyToken
	};


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity, max-statements */
	var http = __webpack_require__(318);
	var util = __webpack_require__(316);
	var AuthSdkError = __webpack_require__(325);
	var config = __webpack_require__(323);
	var storageBuilder = __webpack_require__(324);
	
	var httpCache = storageBuilder(localStorage, config.CACHE_STORAGE_NAME);
	
	function isToken(obj) {
	  if (obj &&
	      (obj.accessToken || obj.idToken) &&
	      Array.isArray(obj.scopes)) {
	    return true;
	  }
	  return false;
	}
	
	function addListener(eventTarget, name, fn) {
	  if (eventTarget.addEventListener) {
	    eventTarget.addEventListener(name, fn);
	  } else {
	    eventTarget.attachEvent('on' + name, fn);
	  }
	}
	
	function removeListener(eventTarget, name, fn) {
	  if (eventTarget.removeEventListener) {
	    eventTarget.removeEventListener(name, fn);
	  } else {
	    eventTarget.detachEvent('on' + name, fn);
	  }
	}
	
	function loadFrame(src) {
	  var iframe = document.createElement('iframe');
	  iframe.style.display = 'none';
	  iframe.src = src;
	
	  return document.body.appendChild(iframe);
	}
	
	function loadPopup(src, options) {
	  var title = options.popupTitle || 'External Identity Provider User Authentication';
	  var appearance = 'toolbar=no, scrollbars=yes, resizable=yes, ' +
	    'top=100, left=500, width=600, height=600';
	  return window.open(src, title, appearance);
	}
	
	function getWellKnown(sdk, issuer) {
	  return http.get(sdk, (issuer || sdk.options.url) + '/.well-known/openid-configuration', {
	    cacheResponse: true
	  });
	}
	
	function getKey(sdk, issuer, kid) {
	  return getWellKnown(sdk, issuer)
	  .then(function(wellKnown) {
	    var jwksUri = wellKnown['jwks_uri'];
	
	    // Check our kid against the cached version (if it exists and isn't expired)
	    var cacheContents = httpCache.getStorage();
	    var cachedResponse = cacheContents[jwksUri];
	    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
	      var cachedKey = util.find(cachedResponse.response.keys, {
	        kid: kid
	      });
	
	      if (cachedKey) {
	        return cachedKey;
	      }
	    }
	
	    // Remove cache for the key
	    httpCache.clearStorage(jwksUri);
	
	    // Pull the latest keys if the key wasn't in the cache
	    return http.get(sdk, jwksUri, {
	      cacheResponse: true
	    })
	    .then(function(res) {
	      var key = util.find(res.keys, {
	        kid: kid
	      });
	
	      if (key) {
	        return key;
	      }
	
	      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\'s keys');
	    });
	  });
	}
	
	function validateClaims(sdk, claims, aud, iss, nonce) {
	  if (!claims || !iss || !aud) {
	    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');
	  }
	
	  if (nonce && claims.nonce !== nonce) {
	    throw new AuthSdkError('OAuth flow response nonce doesn\'t match request nonce');
	  }
	
	  var now = Math.floor(new Date().getTime()/1000);
	
	  if (claims.iss !== iss) {
	    throw new AuthSdkError('The issuer [' + claims.iss + '] ' +
	      'does not match [' + iss + ']');
	  }
	
	  if (claims.aud !== aud) {
	    throw new AuthSdkError('The audience [' + claims.aud + '] ' +
	      'does not match [' + aud + ']');
	  }
	
	  if (claims.iat > claims.exp) {
	    throw new AuthSdkError('The JWT expired before it was issued');
	  }
	
	  if ((now - sdk.options.maxClockSkew) > claims.exp) {
	    throw new AuthSdkError('The JWT expired and is no longer valid');
	  }
	
	  if (claims.iat > (now + sdk.options.maxClockSkew)) {
	    throw new AuthSdkError('The JWT was issued in the future');
	  }
	}
	
	function getOAuthUrls(sdk, oauthParams, options) {
	  options = options || {};
	
	  // Get user-supplied arguments
	  var authorizeUrl = util.removeTrailingSlash(options.authorizeUrl) || sdk.options.authorizeUrl;
	  var issuer = util.removeTrailingSlash(options.issuer) || sdk.options.issuer;
	  var userinfoUrl = util.removeTrailingSlash(options.userinfoUrl) || sdk.options.userinfoUrl;
	
	  // If an issuer exists but it's not a url, assume it's an authServerId
	  if (issuer && !(/^https?:/.test(issuer))) {
	    // Make it a url
	    issuer = sdk.options.url + '/oauth2/' + issuer;
	  }
	
	  // If an authorizeUrl is supplied without an issuer, and an id_token is requested
	  if (!issuer && authorizeUrl &&
	      oauthParams.responseType.indexOf('id_token') !== -1) {
	    // The issuer is ambiguous, so we won't be able to validate the id_token jwt
	    throw new AuthSdkError('Cannot request idToken with an authorizeUrl without an issuer');
	  }
	
	  // If a token is requested without an issuer
	  if (!issuer && oauthParams.responseType.indexOf('token') !== -1) {
	    // If an authorizeUrl is supplied without a userinfoUrl
	    if (authorizeUrl && !userinfoUrl) {
	      // The userinfoUrl is ambiguous, so we won't be able to call getUserInfo
	      throw new AuthSdkError('Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl');
	    }
	
	    // If a userinfoUrl is supplied without a authorizeUrl
	    if (userinfoUrl && !authorizeUrl) {
	      // The authorizeUrl is ambiguous, so we won't be able to call the authorize endpoint
	      throw new AuthSdkError('Cannot request token with an userinfoUrl without an issuer or authorizeUrl');
	    }
	  }
	
	  var sharedResourceServerRegex = new RegExp('^https?://.*?/oauth2/.+');
	
	  // Default the issuer to our baseUrl
	  issuer = issuer || sdk.options.url;
	
	  // A shared resource server issuer looks like:
	  // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7
	  if (sharedResourceServerRegex.test(issuer)) {
	    // A shared resource server authorizeUrl looks like:
	    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/authorize
	    authorizeUrl = authorizeUrl || issuer + '/v1/authorize';
	    // Shared resource server userinfoUrls look like:
	    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/userinfo
	    userinfoUrl = userinfoUrl || issuer + '/v1/userinfo';
	
	  // Normally looks like:
	  // https://example.okta.com
	  } else {
	    // Normal authorizeUrls look like:
	    // https://example.okta.com/oauth2/v1/authorize
	    authorizeUrl = authorizeUrl || issuer + '/oauth2/v1/authorize';
	    // Normal userinfoUrls look like:
	    // https://example.okta.com/oauth2/v1/userinfo
	    userinfoUrl = userinfoUrl || issuer + '/oauth2/v1/userinfo';
	  }
	
	  return {
	    issuer: issuer,
	    authorizeUrl: authorizeUrl,
	    userinfoUrl: userinfoUrl
	  };
	}
	
	function hashToObject(hash) {
	  // Predefine regexs for parsing hash
	  var plus2space = /\+/g;
	  var paramSplit = /([^&=]+)=?([^&]*)/g;
	
	  // Remove the leading hash
	  var fragment = hash.substring(1);
	
	  var obj = {};
	
	  // Loop until we have no more params
	  var param;
	  while (true) { // eslint-disable-line no-constant-condition
	    param = paramSplit.exec(fragment);
	    if (!param) { break; }
	
	    var key = param[1];
	    var value = param[2];
	
	    // id_token should remain base64url encoded
	    if (key === 'id_token' || key === 'access_token' || key === 'code') {
	      obj[key] = value;
	    } else {
	      obj[key] = decodeURIComponent(value.replace(plus2space, ' '));
	    }
	  }
	  return obj;
	}
	
	module.exports = {
	  getWellKnown: getWellKnown,
	  getKey: getKey,
	  validateClaims: validateClaims,
	  getOAuthUrls: getOAuthUrls,
	  loadFrame: loadFrame,
	  loadPopup: loadPopup,
	  hashToObject: hashToObject,
	  isToken: isToken,
	  addListener: addListener,
	  removeListener: removeListener
	};


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var util = __webpack_require__(316);
	
	function verifyToken(idToken, key) {
	  key = util.clone(key);
	
	  var format = 'jwk';
	  var algo = {
	    name: 'RSASSA-PKCS1-v1_5',
	    hash: { name: 'SHA-256' }
	  };
	  var extractable = true;
	  var usages = ['verify'];
	
	  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails
	  // This is a metadata tag that specifies the intent of how the key should be used.
	  // It's not necessary to properly verify the jwt's signature.
	  delete key.use;
	
	  return crypto.subtle.importKey(
	    format,
	    key,
	    algo,
	    extractable,
	    usages
	  )
	  .then(function(cryptoKey) {
	    var jwt = idToken.split('.');
	    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);
	    var b64Signature = util.base64UrlDecode(jwt[2]);
	    var signature = util.stringToBuffer(b64Signature);
	
	    return crypto.subtle.verify(
	      algo,
	      cryptoKey,
	      signature,
	      payload
	    );
	  });
	}
	
	module.exports = {
	  verifyToken: verifyToken
	};


/***/ },
/* 331 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function OAuthError(errorCode, summary) {
	  this.name = 'OAuthError';
	  this.message = summary;
	
	  this.errorCode = errorCode;
	  this.errorSummary = summary;
	}
	OAuthError.prototype = new Error();
	
	module.exports = OAuthError;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(316);
	var AuthSdkError = __webpack_require__(325);
	var cookies = __webpack_require__(319);
	var storageBuilder = __webpack_require__(324);
	var Q = __webpack_require__(320);
	var Emitter = __webpack_require__(333);
	var config = __webpack_require__(323);
	
	// Provides webStorage-like interface for cookies
	var cookieStorage = {
	  getItem: cookies.getCookie,
	  setItem: function(key, value) {
	    // Cookie shouldn't expire
	    cookies.setCookie(key, value, '2038-01-19T03:14:07.000Z');
	  }
	};
	
	function emitExpired(tokenMgmtRef, key, token) {
	  tokenMgmtRef.emitter.emit('expired', key, token);
	}
	
	function clearRefreshTimeout(tokenMgmtRef, key) {
	  clearTimeout(tokenMgmtRef.refreshTimeouts[key]);
	  delete tokenMgmtRef.refreshTimeouts[key];
	}
	
	function clearRefreshTimeoutAll(tokenMgmtRef) {
	  var refreshTimeouts = tokenMgmtRef.refreshTimeouts;
	  for(var key in refreshTimeouts) {
	    if (!refreshTimeouts.hasOwnProperty(key)) {
	      continue;
	    }
	    clearRefreshTimeout(tokenMgmtRef, key);
	  }
	  tokenMgmtRef.refreshTimeouts = {};
	}
	
	function setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token) {
	  var refreshWait = (token.expiresAt * 1000) - Date.now();
	  if (refreshWait < 0) {
	    // Already expired
	    refreshWait = 0;
	  }
	  var refreshTimeout = setTimeout(function() {
	    if (tokenMgmtRef.autoRefresh) {
	      return refresh(sdk, tokenMgmtRef, storage, key);
	    } else if (token.expiresAt * 1000 <= Date.now()) {
	      remove(tokenMgmtRef, storage, key);
	      emitExpired(tokenMgmtRef, key, token);
	    }
	  }, refreshWait);
	
	  // Clear any existing timeout
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  // Add a new timeout
	  tokenMgmtRef.refreshTimeouts[key] = refreshTimeout;
	}
	
	function setRefreshTimeoutAll(sdk, tokenMgmtRef, storage) {
	  try {
	    var tokenStorage = storage.getStorage();
	  } catch(e) {
	    // Any errors thrown on instantiation will not be caught,
	    // because there are no listeners yet
	    tokenMgmtRef.emitter.emit('error', e);
	    return;
	  }
	
	  for(var key in tokenStorage) {
	    if (!tokenStorage.hasOwnProperty(key)) {
	      continue;
	    }
	    var token = tokenStorage[key];
	    setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);
	  }
	}
	
	function add(sdk, tokenMgmtRef, storage, key, token) {
	  var tokenStorage = storage.getStorage();
	  if (!util.isObject(token) ||
	      !token.scopes ||
	      (!token.expiresAt && token.expiresAt !== 0) ||
	      (!token.idToken && !token.accessToken)) {
	    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');
	  }
	  tokenStorage[key] = token;
	  storage.setStorage(tokenStorage);
	  setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);
	}
	
	function get(storage, key) {
	  var tokenStorage = storage.getStorage();
	  return tokenStorage[key];
	}
	
	function remove(tokenMgmtRef, storage, key) {
	  // Clear any listener for this token
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  // Remove it from storage
	  var tokenStorage = storage.getStorage();
	  delete tokenStorage[key];
	  storage.setStorage(tokenStorage);
	}
	
	function refresh(sdk, tokenMgmtRef, storage, key) {
	  try {
	    var token = get(storage, key);
	    if (!token) {
	      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);
	    }
	  } catch (e) {
	    return Q.reject(e);
	  }
	
	  // Remove existing autoRefresh timeout for this key
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  return sdk.token.refresh(token)
	  .then(function(freshToken) {
	    add(sdk, tokenMgmtRef, storage, key, freshToken);
	    tokenMgmtRef.emitter.emit('refreshed', key, freshToken, token);
	    return freshToken;
	  })
	  .fail(function(err) {
	    if (err.name === 'OAuthError') {
	      remove(tokenMgmtRef, storage, key);
	      emitExpired(tokenMgmtRef, key, token);
	    }
	    throw err;
	  });
	}
	
	function clear(tokenMgmtRef, storage) {
	  clearRefreshTimeoutAll(tokenMgmtRef);
	  storage.clearStorage();
	}
	
	function TokenManager(sdk, options) {
	  options = options || {};
	  options.storage = options.storage || 'localStorage';
	  if (!options.autoRefresh && options.autoRefresh !== false) {
	    options.autoRefresh = true;
	  }
	
	  var storage;
	  switch(options.storage) {
	    case 'localStorage':
	      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);
	      break;
	    case 'sessionStorage':
	      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);
	      break;
	    case 'cookie':
	      storage = storageBuilder(cookieStorage, config.TOKEN_STORAGE_NAME);
	      break;
	    default:
	      throw new AuthSdkError('Unrecognized storage option');
	  }
	
	  var tokenMgmtRef = {
	    emitter: new Emitter(),
	    autoRefresh: options.autoRefresh,
	    refreshTimeouts: {}
	  };
	
	  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);
	  this.get = util.bind(get, this, storage);
	  this.remove = util.bind(remove, this, tokenMgmtRef, storage);
	  this.clear = util.bind(clear, this, tokenMgmtRef, storage);
	  this.refresh = util.bind(refresh, this, sdk, tokenMgmtRef, storage);
	  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);
	  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);
	  
	  setRefreshTimeoutAll(sdk, tokenMgmtRef, storage);
	}
	
	module.exports = TokenManager;


/***/ },
/* 333 */
/***/ function(module, exports) {

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}
	
	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});
	
	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });
	
	    return this;
	  },
	
	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };
	
	    listener._ = callback
	    return this.on(name, listener, ctx);
	  },
	
	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;
	
	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }
	
	    return this;
	  },
	
	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];
	
	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }
	
	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
	
	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];
	
	    return this;
	  }
	};
	
	module.exports = E;


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(301);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _loginCustom = __webpack_require__(335);
	
	var _loginCustom2 = _interopRequireDefault(_loginCustom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var loginCustom = _angular2.default.module('authorizationCode.loginCustom', [_angularUiRouter2.default]).component('loginCustom', _loginCustom2.default).config(function ($stateProvider, $urlRouterProvider) {
	  $stateProvider.state('authorization-code/login-custom', {
	    url: '/authorization-code/login-custom',
	    component: 'loginCustom'
	  });
	  $urlRouterProvider.otherwise('/');
	}).name; /*!
	          * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	          * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	          *
	          * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	          * Unless required by applicable law or agreed to in writing, software
	          * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	          * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	          *
	          * See the License for the specific language governing permissions and limitations under the License.
	          */
	
	exports.default = loginCustom;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _loginCustom = __webpack_require__(336);
	
	var _loginCustom2 = _interopRequireDefault(_loginCustom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoginCustomComponent = {
	  controller: _loginCustom2.default,
	  template: '<div id="sign-in-container"></div>'
	}; /*!
	    * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	    *
	    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	    * Unless required by applicable law or agreed to in writing, software
	    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	    *
	    * See the License for the specific language governing permissions and limitations under the License.
	    */
	
	exports.default = LoginCustomComponent;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!
	opyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	
	ou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	either express or implied.
	
	ee the License for the specific language governing permissions and limitations under the License.
	
	
	var _oktaSigninWidget = __webpack_require__(337);
	
	var _oktaSigninWidget2 = _interopRequireDefault(_oktaSigninWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoginCustomController = function () {
	  function LoginCustomController(config) {
	    _classCallCheck(this, LoginCustomController);
	
	    this.config = config;
	  }
	
	  _createClass(LoginCustomController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      var signIn = new _oktaSigninWidget2.default({
	        baseUrl: this.config.oktaUrl,
	        clientId: this.config.clientId,
	        redirectUri: this.config.redirectUri,
	        authParams: {
	          responseType: 'code',
	          scopes: ['openid', 'email', 'profile']
	        },
	        i18n: {
	          en: {
	            'primaryauth.title': 'Use john/Asdf1234 for the mock Okta server'
	          }
	        }
	      });
	      signIn.renderEl({ el: '#sign-in-container' }, function () {});
	    }
	  }]);
	
	  return LoginCustomController;
	}();
	
	exports.default = LoginCustomController;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(338), __webpack_require__(339), __webpack_require__(312), __webpack_require__(320), __webpack_require__(310), __webpack_require__(340), __webpack_require__(341), __webpack_require__(342), __webpack_require__(343));
		else if(typeof define === 'function' && define.amd)
			define(["underscore", "handlebars", "jquery", "q", "@okta/okta-auth-js/jquery", "backbone", "qtip2", "jquery.cookie", "u2f-api-polyfill"], factory);
		else if(typeof exports === 'object')
			exports["OktaSignIn"] = factory(require("underscore"), require("handlebars/dist/handlebars"), require("jquery"), require("q"), require("@okta/okta-auth-js/jquery"), require("backbone"), require("qtip2"), require("jquery.cookie"), require("u2f-api-polyfill"));
		else
			root["OktaSignIn"] = factory(root["underscore"], root["handlebars"], root["jQuery"], root["q"], root["@okta/okta-auth-js/jquery"], root["backbone"], root["qtip2"], root["jquery.cookie"], root["u2f-api-polyfill"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_65__, __WEBPACK_EXTERNAL_MODULE_109__, __WEBPACK_EXTERNAL_MODULE_120__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	
	
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*globals module */
		/*jshint unused:false, camelcase: false */
	
		var OktaSignIn = (function () {
	
		  var config  = __webpack_require__(1),
		      _ = __webpack_require__(2);
	
		  function getProperties(authClient, LoginRouter, Util, config) {
	
		    /**
		     * Check if a session exists
		     * @param callback - callback function invoked with 'true'/'false' as the argument.
		     */
		    function checkSession(callback) {
		      authClient.session.exists().then(callback);
		    }
	
		    /**
		     * Close the current session (sign-out). Callback is invoked with an error message
		     * if the operation was not successful.
		     * @param callback - function to invoke after closing the session.
		     */
		    function closeSession(callback) {
		      authClient.session.close().then(callback)
		      .fail(function () {
		        callback('There was a problem closing the session');
		      });
		    }
	
		    /**
		     * Keep-alive for the session. The callback is invoked with the object containing
		     * the session if successful and {status: 'INACTIVE'} if it is not successful.
		     * @param callback - function to invoke after refreshing the session.
		     */
		    function refreshSession(callback) {
		      authClient.session.refresh().then(callback)
		      .fail(function() {
		        callback({status: 'INACTIVE'});
		      });
		    }
	
		    /**
		     * Refresh the idToken
		     * @param idToken - idToken generated from the OAUTH call
		     * @param callback - function to invoke after refreshing the idToken.
		     *        The callback will be passed a new idToken if successful and
		     *        an error message if not.
		     * @param opts - OAUTH options to refresh the idToken
		     */
		    function refreshIdToken(idToken, callback, opts) {
		      authClient.idToken.refresh(opts).then(callback)
		      .fail(function () {
		        callback('There was a problem refreshing the id_token');
		      });
		    }
	
		    /**
		     * Check if there is an active session. If there is one, the callback is invoked with
		     * the session and user information (similar to calling the global success callback)
		     * and if not, the callback is invoked with {status: 'INACTIVE'}, at which point,
		     * the widget can be rendered using renderEl().
		     * @param callback - function to invoke after checking if there is an active session.
		     */
		    function getSession(callback) {
		      authClient.session.get()
		      .then(function(res) {
		        if (res.status === 'ACTIVE' && res.user) {
		          // only include the attributes that are passed into the successFn on primary auth.
		          res.user = _.pick(res.user, 'id', 'profile', 'passwordChanged');
		        }
		        callback(res);
		      });
		    }
	
		    /**
		     * Render the sign in widget to an element.
		     * @param options - options for the signin widget.
		     *        Must have an el or $el property to render the widget to.
		     * @param success - success callback function
		     * @param error - error callback function
		     */
		    function render(options, success, error) {
		      var router = new LoginRouter(_.extend({}, config, options, {
		        authClient: authClient,
		        globalSuccessFn: success,
		        globalErrorFn: error
		      }));
		      router.start();
		    }
	
		    /**
		     * Check if tokens have been passed back into the url, which happens in
		     * the social auth IDP redirect flow.
		     */
		    function hasTokensInUrl() {
		      return Util.hasTokensInHash(window.location.hash);
		    }
	
		    /**
		     * Parses tokens from the url.
		     * @param success - success callback function (usually the same as passed to render)
		     * @param error - error callback function (usually the same as passed to render)
		     */
		    function parseTokensFromUrl(success, error) {
		      authClient.token.parseFromUrl()
		      .then(success)
		      .fail(error);
		    }
	
		    // Properties exposed on OktaSignIn object.
		    return {
		      renderEl: render,
		      signOut: closeSession,
		      idToken: {
		        refresh: refreshIdToken
		      },
		      session: {
		        close: closeSession,
		        exists: checkSession,
		        get: getSession,
		        refresh: refreshSession
		      },
		      token: {
		        hasTokensInUrl: hasTokensInUrl,
		        parseTokensFromUrl: parseTokensFromUrl
		      },
		      tokenManager: authClient.tokenManager
		    };
		  }
	
		  function OktaSignIn(options) {
		    var OktaAuth, Util, authClient, LoginRouter;
	
		    // Modify the underscore, handlebars, and jquery modules
		    // Remove once these are explicitly required in Courage
		    __webpack_require__(3);
		    __webpack_require__(5);
		    __webpack_require__(16);
	
		    OktaAuth = __webpack_require__(17);
		    Util = __webpack_require__(18);
		    LoginRouter = __webpack_require__(74);
	
		    authClient = new OktaAuth({
		      url: options.baseUrl,
		      transformErrorXHR: Util.transformErrorXHR,
		      headers: {
		        'X-Okta-User-Agent-Extended': 'okta-signin-widget-' + config.version
		      },
		      clientId: options.clientId,
		      redirectUri: options.redirectUri
		    });
		    _.extend(this, LoginRouter.prototype.Events, getProperties(authClient, LoginRouter, Util, options));
	
		    // Triggers the event up the chain so it is available to the consumers of the widget.
		    this.listenTo(LoginRouter.prototype, 'all', this.trigger);
	
		  }
	
		  return OktaSignIn;
	
		})();
	
		module.exports = OktaSignIn;
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		module.exports = {
			"version": "1.9.0",
			"supportedLanguages": [
				"en",
				"cs",
				"da",
				"de",
				"es",
				"fi",
				"fr",
				"hu",
				"it",
				"ja",
				"ko",
				"nl-NL",
				"pt-BR",
				"ro",
				"ru",
				"sv",
				"th",
				"uk",
				"zh-CN",
				"zh-TW"
			]
		};
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (underscore, Handlebars) {
	
		  var _ = underscore.noConflict();
	
		  _.mixin({
	
		    resultCtx: function (object, property, context, defaultValue) {
		      var value = _.isObject(object) ? object[property] : void 0;
		      if (_.isFunction(value)) {
		        value = value.call(context || object);
		      }
		      if (value) {
		        return value;
		      }
		      else {
		        return !_.isUndefined(defaultValue) ? defaultValue : value;
		      }
		    },
	
		    isInteger: function (x) {
		      return _.isNumber(x) && (x % 1 === 0);
		    },
	
		    template: function (source, data) {
		      var template = Handlebars.compile(source);
		      return data ? template(data) : function (data) { return template(data); };
		    }
	
		  });
	
		  return _;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
	
	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(4),
		  __webpack_require__(2),
		  __webpack_require__(6),
		  __webpack_require__(7),
		  __webpack_require__(15),
		  __webpack_require__(15)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Handlebars, _, $, StringUtil, markdownToHtml, moment) {
	
		  var CACHE_BUST_URL_PREFIX = '/assets';
	
		  function formatDate(format, dateInISOString) {
		    return moment.utc(dateInISOString).zone('-07:00').format(format);
		  }
	
		  function trim(str) {
		    return str && str.replace(/^\s+|\s+$/g, '');
		  }
	
		  function prependCachebustPrefix(path) {
		    if (path.indexOf(CACHE_BUST_URL_PREFIX) === 0) {
		      return path;
		    }
		    return CACHE_BUST_URL_PREFIX + path;
		  }
	
		  Handlebars.registerHelper('i18n', function (options) {
		    var params,
		        key = trim(options.hash.code),
		        bundle = trim(options.hash.bundle),
		        args = trim(options.hash['arguments']);
	
		    if (args) {
		      params = _.map(trim(args).split(';'), function (param) {
		        param = trim(param);
		        var val,
		            data = this;
		        /*
		         * the context(data) may be a deep object, ex {user: {name: 'John', gender: 'M'}}
		         * arguments may be 'user.name'
		         * return data['user']['name']
		         */
		        _.each(param.split('.'), function (p) {
		          val = val ? val[p] : data[p];
		        });
		        return val;
		      }, this);
		    }
	
		    return StringUtil.localize(key, bundle, params);
		  });
	
		  Handlebars.registerHelper('xsrfTokenInput', function () {
		    return '<input type="hidden" class="hide" name="_xsrfToken" ' +
		           'value="' + $('#_xsrfToken').text() + '">';
		  });
	
		  Handlebars.registerHelper('img', function (options) {
		    /*global okta */
		    var cdn = (typeof okta != 'undefined' && okta.cdnUrlHostname || '');
		    var hash = _.pick(options.hash, ['src', 'alt', 'width', 'height', 'class', 'title']);
		    hash.src = '' + cdn + prependCachebustPrefix(hash.src);
		    var attrs = _.map(hash, function (value, attr) {
		      return attr + '="' + _.escape(value) + '"';
		    });
		    return '<img ' + attrs.join(' ') + '/>';
		  });
	
		  Handlebars.registerHelper('shortDate',  _.partial(formatDate, 'MMM DD'));
		  Handlebars.registerHelper('mediumDate', _.partial(formatDate, 'MMMM DD, YYYY'));
		  Handlebars.registerHelper('longDate',   _.partial(formatDate, 'MMMM DD, YYYY, h:mma'));
		  Handlebars.registerHelper('formatDate', formatDate);
	
	
		  Handlebars.registerHelper('markdown', function (mdText) {
		    return markdownToHtml(Handlebars, mdText);
		  });
	
		  return Handlebars;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_6__;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(6),
		  __webpack_require__(8),
		  __webpack_require__(14)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, Bundles) {
	
		  /**
		   * @class StringUtil
		   * @private
		   *
		   * Handy utility functions to handle strings.
		   */
	
		  var entityMap = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': '\'',
		    '&#039;': '\'',
		    '&#x2F;': '/'
		  };
	
		  /* eslint max-len: 0*/
		  var emailValidator = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@(?!-)((\[?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]?)|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	
		  var StringUtil = {
		    sprintf: function () {
		      /* eslint max-statements: [2, 11] */
	
		      var args = Array.prototype.slice.apply(arguments),
		          value = args.shift(),
		          oldValue = value;
	
		      function triggerError() {
		        throw new Error('Mismatch number of variables: ' + arguments[0] + ', ' + JSON.stringify(args));
		      }
	
		      for (var i = 0, l = args.length; i < l; i++) {
		        var entity = args[i];
		        value = value.replace('{' + i + '}', entity);
		        if (entity === undefined || entity === null || value === oldValue) {
		          triggerError();
		        }
		        oldValue = value;
		      }
	
		      if (/\{[\d+]\}/.test(value)) {
		        triggerError();
		      }
	
		      return value;
		    },
	
		    /**
		     * Converts a URI encoded query string into a hash map
		     *
		     * ### Example:
		     *
		     *  ```javascript
		     *  StringUtil.parseQuery('foo=bar&baz=qux') // {foo: 'bar', baz: 'qux'}
		     *
		     * ```
		     * @static
		     * @param  {String} query The query string
		     * @return {Object} The map
		     */
		    parseQuery: function (query) {
		      var params = {};
		      var pairs = decodeURIComponent(query.replace(/\+/g, ' ')).split('&');
		      for (var i = 0; i < pairs.length; i++) {
		        var pair = pairs[i];
		        var data = pair.split('=');
		        params[data.shift()] = data.join('=');
		      }
		      return params;
		    },
	
		    encodeJSObject: function (jsObj) {
		      return encodeURIComponent(JSON.stringify(jsObj));
		    },
	
		    decodeJSObject: function (jsObj) {
		      try {
		        return JSON.parse(decodeURIComponent(jsObj));
		      } catch (e) {
		        return null;
		      }
		    },
	
		    unescapeHtml: function (string) {
		      return String(string).replace(/&[\w\#\d]{2,};/g, function (s) {
		        return entityMap[s] || s;
		      });
		    },
	
		    /**
		     * Translate a key to the localized value
		     * @static
		     * @param  {String} key The key
		     * @param  {String} [bundle="messages"] The name of the i18n bundle. Defaults to the first bundle in the list.
		     * @param  {Array} [params] A list of parameters to apply as tokens to the i18n value
		     * @return {String} The localized value
		     */
		    localize: function (key, bundleName, params) {
		      var bundle = bundleName ? Bundles[bundleName] : Bundles[_.keys(Bundles)[0]];
	
		      if (!bundle) {
		        return 'L10N_ERROR[' + (bundleName) + ']';
		      }
	
		      var value = bundle[key];
	
		      try {
		        params = params && params.slice ? params.slice(0) : [];
		        params.unshift(value);
		        value = StringUtil.sprintf.apply(null, params);
		      }
		      catch (e) {
		        value = null;
		      }
	
		      return value || 'L10N_ERROR[' + key + ']';
		    },
	
		    /**
		    * Convert a string to a float if valid, otherwise return the string.
		    * Valid numbers may contain a negative sign and a decimal point.
		    * @static
		    * @param {String} string The string to convert to a number
		    * @return {String|Number} Returns a number if the string can be casted, otherwise returns the original string
		    */
		    parseFloat: function (string) {
		      var number = +string;
		      return typeof string == 'string' && number === parseFloat(string) ? number : string;
		    },
	
		    /**
		     * Returns a random string from [a-z][A-Z][0-9] of a given length
		     * @static
		     * @param {Number} length The length of the random string.
		     * @return {String} Returns a random string from [a-z][A-Z][0-9] of a given length
		     */
		    randomString: function (length) {
		      var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
	
		      if (length === undefined) {
		        length = Math.floor(Math.random() * chars.length);
		      } else if (length === 0) {
		        return '';
		      }
	
		      var str = '';
		      for (var i = 0; i < length; i++) {
		        str += chars[Math.floor(Math.random() * chars.length)];
		      }
		      return str;
		    },
	
		    /**
		     * Returns if a str ends with another string
		     * @static
		     * @param {String} str The string to search
		     * @param {String} ends The string it should end with
		     *
		     * @return {Boolean} Returns if the str ends with ends
		     */
		    endsWith: function (str, ends) {
		      str += '';
		      ends += '';
		      return str.length >= ends.length && str.substring(str.length - ends.length) === ends;
		    },
	
		    isEmail: function (str) {
		      var target = $.trim(str);
		      return !_.isEmpty(target) && emailValidator.test(target);
		    }
	
		  };
	
		  return StringUtil;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint newcap:false */
		/*global JSON */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(9),
		  __webpack_require__(6),
		  __webpack_require__(10),
		  __webpack_require__(11),
		  __webpack_require__(12),
		  __webpack_require__(1)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Q, $, login, country, Logger, config) {
	
		  var STORAGE_KEY = 'osw.languages';
	
		  var bundlePathTpl = _.template('/labels/jsonp/{{bundle}}_{{languageCode}}.jsonp');
	
		  /**
		   * Converts options to our internal format, which distinguishes between
		   * login and country bundles.
		   *
		   * Example options.i18n passed in by the developer:
		   * {
		   *   'en': {
		   *     'needhelp': 'need help override',
		   *     'primaryauth.title': 'new sign in text',
		   *     'country.JP' = 'Japan, Japan'
		   *   }
		   * }
		   *
		   * Parsed:
		   * {
		   *  'en': {
		   *    'login': {
		   *      'needhelp': 'need help override',
		   *      'primaryauth.title': 'new sign in text',
		   *    },
		   *    'country': {
		   *      'JP': 'Japan, Japan'
		   *    }
		   *  }
		   * }
		   */
		  function parseOverrides(i18n) {
		    if (!i18n) {
		      return {};
		    }
		    return _.mapObject(i18n, function (props) {
		      var mapped = { login: {}, country: {} };
		      if (!_.isObject(props)) {
		        throw new Error('Invalid format for "i18n"');
		      }
		      _.each(props, function (val, key) {
		        var split = key.split(/^country\./);
		        if (split.length > 1) {
		          mapped.country[split[1]] = val;
		        }
		        else {
		          mapped.login[split[0]] = val;
		        }
		      });
		      return mapped;
		    });
		  }
	
		  // Caching: We only bundle English by default in the Sign-In Widget. Other
		  // languages are loaded on demand and cached in localStorage. These languages
		  // are tied to the version of the widget - when it bumps, we reset the cache.
	
		  function getCachedLanguages() {
		    var storage = JSON.parse(localStorage.getItem(STORAGE_KEY));
		    if (!storage || storage.version !== config.version) {
		      storage = {
		        version: config.version
		      };
		    }
		    return storage;
		  }
	
		  function addLanguageToCache(language, loginJson, countryJson) {
		    var current = getCachedLanguages();
		    current[language] = {
		      login: loginJson,
		      country: countryJson
		    };
		    localStorage.setItem(STORAGE_KEY, JSON.stringify(current));
		  }
	
		  // We use jsonp to get around any CORS issues if the developer is using
		  // the hosted version of the widget - by default, the assets.bundleUrl is
		  // tied to the Okta CDN.
		  //
		  // There are two overrides available for modifying where we load the asset
		  // bundles from:
		  //
		  // 1. assets.baseUrl
		  //
		  //    This is the base path the OSW pulls assets from, which in this case is
		  //    the Okta CDN. Override this config option if you want to host the
		  //    files on your own domain, or if you're using a new version of the
		  //    widget whose language files haven't been published to the CDN yet.
		  //
		  // 2. assets.rewrite
		  //
		  //    This is a function that can be used to modify the path + fileName of
		  //    the bundle we're loading, relative to the baseUrl. When called, it
		  //    will pass the current path, and expect the new path to be returned.
		  //    This is useful, for example, if your build process has an extra
		  //    cachebusting step, i.e:
		  //
		  //    function rewrite(file) {
		  //      // file: /labels/jsonp/login_ja.jsonp
		  //      return file.replace('.jsonp', '.' + md5file(file) + '.jsonp');
		  //    }
		  //
		  // Note: Most developers will not need to use these overrides - the default
		  // is to use the Okta CDN and to use the same path + file structure the
		  // widget module publishes by default.
		  function fetchJsonp(bundle, language, assets) {
		    var languageCode, path;
	
		    // Our bundles use _ to separate country and region, i.e:
		    // zh-CN -> zh_CN
		    languageCode = language.replace('-', '_');
	
		    path = assets.rewrite(bundlePathTpl({
		      bundle: bundle,
		      languageCode: languageCode
		    }));
	
		    return $.ajax({
		      url: assets.baseUrl + path,
		      dataType: 'jsonp',
		      cache: true,
		      // jQuery jsonp doesn't handle errors, so set a long timeout as a
		      // fallback option
		      timeout: 5000,
		      jsonpCallback: 'jsonp_' + bundle
		    });
		  }
	
		  function getBundles(language, assets) {
		    // Two special cases:
		    // 1. English is already bundled with the widget
		    // 2. If the language is not in our config file, it means that they've
		    //    probably defined it on their own.
		    if (language === 'en' || !_.contains(config.supportedLanguages, language)) {
		      return Q({});
		    }
	
		    var cached = getCachedLanguages();
		    if (cached[language]) {
		      return Q(cached[language]);
		    }
	
		    return Q.all([
		      fetchJsonp('login', language, assets),
		      fetchJsonp('country', language, assets)
		    ])
		    .spread(function (loginJson, countryJson) {
		      addLanguageToCache(language, loginJson, countryJson);
		      return { login: loginJson, country: countryJson };
		    })
		    .fail(function () {
		      // If there is an error, this will default to the bundled language and
		      // we will no longer try to load the language this session.
		      Logger.warn('Unable to load language: ' + language);
		      return {};
		    });
		  }
	
		  return {
		    login: login,
		    country: country,
	
		    currentLanguage: null,
	
		    isLoaded: function (language) {
		      return this.currentLanguage === language;
		    },
	
		    loadLanguage: function (language, overrides, assets) {
		      var parsedOverrides = parseOverrides(overrides);
		      return getBundles(language, assets)
		      .then(_.bind(function (bundles) {
		        // Always extend from the built in defaults in the event that some
		        // properties are not translated
		        this.login = _.extend({}, login, bundles.login);
		        this.country = _.extend({}, country, bundles.country);
		        if (parsedOverrides[language]) {
		          _.extend(this.login, parsedOverrides[language]['login']);
		          _.extend(this.country, parsedOverrides[language]['country']);
		        }
		        this.currentLanguage = language;
		      }, this));
		    }
	
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_9__;
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		module.exports = {
			"signout": "Sign Out",
			"remember": "Remember me",
			"rememberDevice": "Trust this device",
			"rememberDevice.timebased": "Do not challenge me on this device for the next {0}",
			"rememberDevice.devicebased": "Do not challenge me on this device again",
			"autoPush": "Send push automatically",
			"unlockaccount": "Unlock account?",
			"needhelp": "Need help signing in?",
			"goback": "Back to Sign In",
			"forgotpassword": "Forgot password?",
			"help": "Help",
			"minutes.oneMinute": "minute",
			"minutes": "{0} minutes",
			"hours": "{0} hours",
			"days": "{0} days",
			"error.config": "There was a configuration error",
			"error.required.authParams": "Missing parameters for the configured authentication scheme - \"OAUTH2\"",
			"error.required.baseUrl": "\"baseUrl\" is a required widget parameter",
			"error.required.success": "A success handler is required",
			"error.required.el": "\"el\" is a required widget parameter",
			"error.unsupported.browser": "Unsupported browser",
			"error.unsupported.cors": "Unsupported browser - missing CORS support",
			"error.unsupported.localStorage": "Unsupported browser - missing localStorage support",
			"error.enabled.cors": "There was an error sending the request - have you enabled CORS?",
			"error.expired.session": "Your session has expired. Please try to log in again.",
			"error.auth.lockedOut": "Your account is locked. Please contact your administrator.",
			"error.oauth.idToken": "There was a problem generating the id_token for the user. Please try again.",
			"error.network.connection": "Unable to connect to the server. Please check your network connection.",
			"errors.E0000004": "Sign in failed!",
			"errors.E0000069": "Your account was locked due to excessive MFA attempts.",
			"errors.E0000047": "You exceeded the maximum number of requests. Try again in a while.",
			"oform.next": "Next",
			"oform.verify": "Verify",
			"oform.send": "Send",
			"oform.back": "Back",
			"oform.save": "Save",
			"oform.cancel": "Cancel",
			"oform.edit": "Edit",
			"oform.previous": "Previous",
			"oform.errorbanner.title": "We found some errors. Please review the form and make corrections.",
			"oform.errormsg.title": "Please review the form to correct the following errors:",
			"oform.error.unexpected": "There was an unexpected internal error. Please try again.",
			"model.validation.field.blank": "The field cannot be left blank",
			"model.validation.field.wrong.type": "The field is of the wrong type",
			"model.validation.field.invalid": "The field has an invalid value",
			"model.validation.field.value.not.allowed": "The field value is not allowed",
			"model.validation.field.array.minItems": "The array does not have enough items",
			"model.validation.field.array.unique": "The array can only have unique values",
			"model.validation.field.username": "Please check your username",
			"factor.totpSoft.oktaVerify": "Okta Verify",
			"factor.totpSoft.googleAuthenticator": "Google Authenticator",
			"factor.totpSoft.description": "Enter single-use code from the mobile app.",
			"factor.totpHard.rsaSecurId": "RSA SecurID",
			"factor.totpHard.symantecVip": "Symantec VIP",
			"factor.totpHard.description": "Enter a single-use code from a hardware token.",
			"factor.totpHard.yubikey": "Yubikey",
			"factor.totpHard.yubikey.description": "Insert your Yubikey and tap it to get a verification code.",
			"factor.totpHard.yubikey.placeholder": "Click here, then tap your Yubikey",
			"factor.oktaVerifyPush": "Okta Verify",
			"factor.push.description": "Use a push notification sent to the mobile app.",
			"factor.duo": "Duo Security",
			"factor.duo.description": "Use Push Notification, SMS, or Voice call to authenticate.",
			"factor.sms": "SMS Authentication",
			"factor.sms.description": "Enter a single-use code sent to your mobile phone.",
			"factor.call": "Voice Call Authentication",
			"factor.call.description": "Use a phone to authenticate by following voice instructions.",
			"factor.securityQuestion": "Security Question",
			"factor.securityQuestion.description": "Use the answer to a security question to authenticate.",
			"factor.windowsHello": "Windows Hello",
			"factor.windowsHello.signin.description": "Sign in to Okta using Windows Hello.",
			"factor.u2f": "Security Key (U2F)",
			"factor.u2f.description": "Use a Universal 2nd Factor (U2F) security key to sign on to Okta.",
			"mfa.challenge.verify": "Verify",
			"mfa.challenge.answer.placeholder": "Answer",
			"mfa.challenge.answer.tooltip": "Answer",
			"mfa.challenge.answer.showAnswer": "Show",
			"mfa.challenge.answer.hideAnswer": "Hide",
			"mfa.challenge.enterCode.placeholder": "Enter Code",
			"mfa.challenge.enterCode.tooltip": "Enter Code",
			"mfa.backToFactors": "Back to factor list",
			"mfa.phoneNumber.placeholder": "Phone number",
			"mfa.phoneNumber.ext.placeholder": "Extension",
			"mfa.sendCode": "Send code",
			"mfa.sent": "Sent",
			"mfa.resendCode": "Re-send code",
			"mfa.call": "Call",
			"mfa.calling": "Calling",
			"mfa.redial": "Redial",
			"mfa.scanBarcode": "Scan barcode",
			"mfa.noAccessToEmail": "Can't access email",
			"password.reset": "Reset Password",
			"password.oldPassword.placeholder": "Old password",
			"password.oldPassword.tooltip": "Old password",
			"password.newPassword.placeholder": "New password",
			"password.newPassword.tooltip": "New password",
			"password.confirmPassword.placeholder": "Repeat password",
			"password.confirmPassword.tooltip": "Repeat password",
			"password.error.match": "New passwords must match",
			"recovery.sms.hint": "SMS can only be used if a mobile phone number has been configured.",
			"recovery.mobile.hint": "{0} can only be used if a mobile phone number has been configured.",
			"recovery.sms": "SMS",
			"recovery.call": "Voice Call",
			"recovery.smsOrCall": "SMS or Voice Call",
			"enroll.choices.title": "Set up multifactor authentication",
			"enroll.choices.description": "Your company requires multifactor authentication to add an additional layer of security when signing into your Okta account",
			"enroll.choices.optional": "You can configure any additional optional factor or click finish",
			"enroll.choices.list.setup": "Setup required",
			"enroll.choices.list.enrolled": "Enrolled factors",
			"enroll.choices.list.optional": "Additional optional factors",
			"enroll.choices.step": "{0} of {1}",
			"enroll.choices.setup": "Setup",
			"enroll.choices.submit.finish": "Finish",
			"enroll.choices.submit.configure": "Configure factor",
			"enroll.choices.submit.next": "Configure next factor",
			"enroll.securityQuestion.setup": "Setup secret question authentication",
			"security.disliked_food": "What is the food you least liked as a child?",
			"security.name_of_first_plush_toy": "What is the name of your first stuffed animal?",
			"security.first_award": "What did you earn your first medal or award for?",
			"security.favorite_security_question": "What is your favorite security question?",
			"security.favorite_toy": "What is the toy/stuffed animal you liked the most as a kid?",
			"security.first_computer_game": "What was the first computer game you played?",
			"security.favorite_movie_quote": "What is your favorite movie quote?",
			"security.first_sports_team_mascot": "What was the mascot of the first sports team you played on?",
			"security.first_music_purchase": "What music album or song did you first purchase?",
			"security.favorite_art_piece": "What is your favorite piece of art?",
			"security.grandmother_favorite_desert": "What was your grandmother's favorite dessert?",
			"security.first_thing_cooked": "What was the first thing you learned to cook?",
			"security.childhood_dream_job": "What was your dream job as a child?",
			"security.first_kiss_location": "Where did you have your first kiss?",
			"security.place_where_significant_other_was_met": "Where did you meet your spouse/significant other?",
			"security.favorite_vacation_location": "Where did you go for your favorite vacation?",
			"security.new_years_two_thousand": "Where were you on New Year's Eve in the year 2000?",
			"security.favorite_speaker_actor": "Who is your favorite speaker/orator?",
			"security.favorite_book_movie_character": "Who is your favorite book/movie character?",
			"security.favorite_sports_player": "Who is your favorite sports player?",
			"enroll.sms.setup": "Receive a code via SMS to authenticate",
			"enroll.call.setup": "Follow phone call instructions to authenticate",
			"enroll.onprem.username.placeholder": "Enter {0} username",
			"enroll.onprem.username.tooltip": "Enter {0} username",
			"enroll.onprem.passcode.placeholder": "Enter {0} passcode",
			"enroll.onprem.passcode.tooltip": "Enter {0} passcode",
			"enroll.symantecVip.subtitle": "Enter Credential ID and two consecutive generated codes",
			"enroll.symantecVip.credentialId.placeholder": "Enter credential ID",
			"enroll.symantecVip.credentialId.tooltip": "Enter credential ID",
			"enroll.symantecVip.passcode1.placeholder": "Security code 1",
			"enroll.symantecVip.passcode1.tooltip": "Security code 1",
			"enroll.symantecVip.passcode2.placeholder": "Security code 2",
			"enroll.symantecVip.passcode2.tooltip": "Security code 2",
			"enroll.yubikey.title": "Setup Yubikey",
			"enroll.yubikey.subtitle": "Insert your Yubikey into a USB port and tap it to generate a verification code",
			"enroll.totp.title": "Setup {0}",
			"enroll.totp.selectDevice": "Select your device type",
			"enroll.totp.downloadApp": "Download <a href=\"{0}\" class=\"inline-link\">{1} from the {2}</a> onto your mobile device.",
			"enroll.totp.installApp": "Install {0}",
			"enroll.duo.title": "Setup Duo Security",
			"enroll.windowsHello.title": "Enroll Windows Hello",
			"enroll.windowsHello.subtitle": "Click below to enroll Windows Hello as a second form of authentication",
			"enroll.windowsHello.subtitle.loading": "Please wait while Windows Hello is loading...",
			"enroll.windowsHello.save": "Enroll Windows Hello",
			"enroll.windowsHello.error.notWindows": "Windows Hello can only be used on Windows Edge with Windows 10. Contact your admin for assistance.",
			"enroll.windowsHello.error.notConfiguredHtml": "Windows Hello is not configured. Select the <b>Start</b> button, then select <b>Settings</b> &gt; <b>Accounts</b> &gt; <b>Sign-in</b> to configure Windows Hello.",
			"verify.windowsHello.subtitle": "Verify your identity with Windows Hello",
			"verify.windowsHello.subtitle.loading": "Please wait while Windows Hello is loading...",
			"verify.windowsHello.subtitle.signingIn": "Signing into Okta...",
			"verify.windowsHello.save": "Verify with Windows Hello",
			"verify.windowsHello.error.notFound": "Your Windows Hello enrollment does not match our records. Contact your administrator for assistance.",
			"verify.windowsHello.error.notFound.selectAnother": "Your Windows Hello enrollment does not match our records. Select another factor or contact your administrator for assistance.",
			"enroll.u2f.title": "Setup Security Key (U2F)",
			"enroll.u2f.save": "Register Security Key",
			"enroll.u2f.general1": "If using Firefox download and install the U2F browser extension.",
			"enroll.u2f.general2": "Make sure you have a Security Key. If already inserted, remove it now.<br>If you have a Bluetooth Security Key, turn on your computer's Bluetooth.",
			"enroll.u2f.general3": "Click the button below to register",
			"enroll.u2f.instructions": "Insert your Security Key into a USB port on this computer. If it has a button or gold disk, tap it.",
			"enroll.u2f.instructionsBluetooth": "If you are using a Bluetooth Security Key, press the button.",
			"u2f.error.notSupportedBrowser": "The Security Key is only supported for Chrome or Firefox browsers. Select another factor or contact your admin for assistance.",
			"u2f.error.notSupportedBrowser.oneFactor": "The Security Key is only supported for Chrome or Firefox browsers. Contact your admin for assistance.",
			"u2f.error.noFirefoxExtension": "<a target=\"_blank\" href=\"https://addons.mozilla.org/en-US/firefox/addon/u2f-support-add-on/\">Download</a> and install the Firefox U2F browser extension before proceeding. You may be required to restart your browser after installation.",
			"u2f.error.other": "An unknown error has occured. Try again or select another factor.",
			"u2f.error.other.oneFactor": "An unknown error has occured. Try again or contact your admin for assistance.",
			"u2f.error.badRequest": "There was an error with the U2F request. Try again or select another factor.",
			"u2f.error.badRequest.oneFactor": "There was an error with the U2F request. Try again or contact your admin for assistance.",
			"u2f.error.unsupported": "The security key is unsupported. Select another factor.",
			"u2f.error.unsupported.oneFactor": "The security key is unsupported. Contact your admin for assistance.",
			"u2f.error.timeout": "You have timed out of the authentication period. Please try again.",
			"verify.u2f.instructions": "Insert your Security Key. If it has a button or gold disk, tap it.",
			"verify.u2f.instructionsBluetooth": "If you are using a Bluetooth Security Key, turn on your computer's Bluetooth and press the button.",
			"verify.u2f.retry": "Retry",
			"enroll.totp.enterCode": "Enter code displayed from the application",
			"enroll.totp.setupApp": "Launch {0} application on your mobile device and select Add an account.",
			"enroll.totp.setupGoogleAuthApp": "Launch {0}, tap the \"+\" icon, then select \"Scan barcode\".",
			"enroll.totp.cannotScan": "Can't scan?",
			"enroll.totp.refreshBarcode": "Refresh code",
			"enroll.totp.cannotScanBarcode": "Can't scan barcode?",
			"enroll.totp.manualSetupInstructions": "To set up manually enter your Okta Account username and then input the following in the Secret Key Field",
			"enroll.totp.sharedSecretInstructions": "Enter your Okta Account username and enter the following in the Secret Key Field",
			"enroll.totp.sendSms": "Send activation link via SMS",
			"enroll.totp.sendEmail": "Send activation link via email",
			"enroll.totp.setupManually": "Setup manually without push notification",
			"enroll.totp.enrollViaEmail.title": "Activation email sent!",
			"enroll.totp.enrollViaEmail.msg": "Open the email from your mobile device.",
			"enroll.totp.enrollViaSms.title": "SMS sent!",
			"enroll.totp.enrollViaSms.msg": "View the SMS on your mobile device.",
			"recoveryChallenge.sms.title": "Enter verification code sent via SMS",
			"recoveryChallenge.call.title": "Enter verification code received via Voice Call",
			"mfa.factors.dropdown.title": "Select an authentication factor",
			"mfa.duoSecurity.push": "Push — {0}",
			"mfa.duoSecurity.sms": "SMS — {0}",
			"mfa.duoSecurity.call": "Call — {0}",
			"mfa.challenge.title": "Enter your {0} passcode",
			"mfa.challenge.orEnterCode": "Or enter code",
			"oktaverify.send": "Send Push",
			"oktaverify.sent": "Push sent!",
			"oktaverify.rejected": "You have chosen to reject this login.",
			"oktaverify.timeout": "Your push notification has expired.",
			"primaryauth.title": "Sign In",
			"primaryauth.username.placeholder": "Username",
			"primaryauth.username.tooltip": "Username",
			"primaryauth.password.placeholder": "Password",
			"primaryauth.password.tooltip": "Password",
			"primaryauth.submit": "Sign In",
			"primaryauth.newUser.tooltip": "This is the first time you are connecting to {0} from this browser",
			"primaryauth.newUser.tooltip.close": "Close",
			"password.forgot.email.or.username.placeholder": "Email or Username",
			"password.forgot.email.or.username.tooltip": "Email or Username",
			"password.forgot.sendText": "Reset via SMS",
			"password.forgot.sendEmail": "Reset via Email",
			"password.forgot.call": "Reset via Voice Call",
			"password.forgot.emailSent.title": "Email sent!",
			"password.forgot.emailSent.desc": "Email has been sent to {0} with instructions on resetting your password.",
			"password.forgot.question.title": "Answer Forgotten Password Challenge",
			"password.forgot.question.submit": "Reset Password",
			"password.forgot.sms.notReceived": "Didn't receive an SMS? Reset via email",
			"password.forgot.code.notReceived": "Didn't receive a code? Reset via email",
			"password.reset.title": "Reset your Okta password",
			"password.complexity.description": "Your password must have {0}.",
			"password.complexity.length": "at least {0} characters",
			"password.complexity.list.element": ", {0}",
			"password.complexity.lowercase": "a lowercase letter",
			"password.complexity.uppercase": "an uppercase letter",
			"password.complexity.number": "a number",
			"password.complexity.symbol": "a symbol",
			"password.complexity.no_username": "no parts of your username",
			"password.expired.submit": "Change Password",
			"password.expired.title": "Your Okta password has expired",
			"password.expiring.later": "Remind me later",
			"password.expiring.title": "Your password will expire in {0} days",
			"password.expiring.today": "Your password will expire later today",
			"password.expiring.subtitle": "When password expires you may be locked out of Okta Mobile, mobile email, and other services.",
			"account.unlock.title": "Unlock account",
			"account.unlock.email.or.username.placeholder": "Email or username",
			"account.unlock.email.or.username.tooltip": "Email or username",
			"account.unlock.sendText": "Send SMS",
			"account.unlock.sendEmail": "Send Email",
			"account.unlock.emailSent.title": "Email sent!",
			"account.unlock.emailSent.desc": "Email has been sent to {0} with instructions on unlocking your account.",
			"account.unlock.question.title": "Answer Unlock Account Challenge",
			"account.unlock.question.submit": "Unlock Account",
			"account.unlock.unlocked.title": "Account successfully unlocked!",
			"account.unlock.unlocked.desc": "You can log in using your existing username and password.",
			"account.unlock.sms.notReceived": "Didn't receive an SMS? Unlock via email",
			"contact.support": "If you didn't provide a secondary email address or don't have access to email, please contact your administrator at {0}",
			"socialauth.divider.text": "OR",
			"socialauth.facebook.label": "Sign in with Facebook",
			"socialauth.google.label": "Sign in with Google",
			"socialauth.linkedin.label": "Sign in with LinkedIn",
			"socialauth.microsoft.label": "Sign in with Microsoft",
			"socialauth.popup.title": "External Identity Provider User Authentication",
			"unsupported.oneDrive.title": "Your OneDrive version is not supported",
			"unsupported.oneDrive.desc": "Upgrade now by installing the OneDrive for Business Next Generation Sync Client to login to Okta",
			"unsupported.oneDrive.action": "Learn how to upgrade",
			"factor.windowsHello.description": "Use Windows Hello to sign on to Okta",
			"enroll.windowsHello.error.notConfigured": "Windows Hello not configured. Select the Start button, then select Settings - Accounts - Sign-in to configure Windows Hello."
		};
	
	/***/ },
	/* 11 */
	/***/ function(module, exports) {
	
		module.exports = {
			"AF": "Afghanistan",
			"AX": "Åland Islands",
			"AL": "Albania",
			"DZ": "Algeria",
			"AS": "American Samoa",
			"AD": "Andorra",
			"AO": "Angola",
			"AI": "Anguilla",
			"AQ": "Antarctica",
			"AG": "Antigua and Barbuda",
			"AR": "Argentina",
			"AM": "Armenia",
			"AW": "Aruba",
			"AU": "Australia",
			"AT": "Austria",
			"AZ": "Azerbaijan",
			"BS": "Bahamas",
			"BH": "Bahrain",
			"BD": "Bangladesh",
			"BB": "Barbados",
			"BY": "Belarus",
			"BE": "Belgium",
			"BZ": "Belize",
			"BJ": "Benin",
			"BM": "Bermuda",
			"BT": "Bhutan",
			"BO": "Bolivia, Plurinational State of",
			"BA": "Bosnia and Herzegovina",
			"BW": "Botswana",
			"BV": "Bouvet Island",
			"BR": "Brazil",
			"IO": "British Indian Ocean Territory",
			"VG": "Virgin Islands, British",
			"BN": "Brunei Darussalam",
			"BG": "Bulgaria",
			"BF": "Burkina Faso",
			"BI": "Burundi",
			"KH": "Cambodia",
			"CM": "Cameroon",
			"CA": "Canada",
			"CV": "Cape Verde",
			"KY": "Cayman Islands",
			"CF": "Central African Republic",
			"TD": "Chad",
			"CL": "Chile",
			"CN": "China",
			"CX": "Christmas Island",
			"CO": "Colombia",
			"KM": "Comoros",
			"CG": "Congo",
			"CK": "Cook Islands",
			"CR": "Costa Rica",
			"CI": "Côte d'Ivoire",
			"HR": "Croatia",
			"CU": "Cuba",
			"CY": "Cyprus",
			"CZ": "Czech Republic",
			"CD": "Congo, the Democratic Republic of the",
			"DK": "Denmark",
			"DJ": "Djibouti",
			"DM": "Dominica",
			"DO": "Dominican Republic",
			"TL": "Timor-Leste",
			"EC": "Ecuador",
			"EG": "Egypt",
			"SV": "El Salvador",
			"GQ": "Equatorial Guinea",
			"ER": "Eritrea",
			"EE": "Estonia",
			"ET": "Ethiopia",
			"FK": "Falkland Islands (Malvinas)",
			"FO": "Faroe Islands",
			"FJ": "Fiji",
			"FI": "Finland",
			"FR": "France",
			"GF": "French Guiana",
			"PF": "French Polynesia",
			"TF": "French Southern Territories",
			"GA": "Gabon",
			"GM": "Gambia",
			"GE": "Georgia",
			"DE": "Germany",
			"GH": "Ghana",
			"GI": "Gibraltar",
			"GR": "Greece",
			"GL": "Greenland",
			"GD": "Grenada",
			"GP": "Guadeloupe",
			"GU": "Guam",
			"GT": "Guatemala",
			"GG": "Guernsey",
			"GN": "Guinea",
			"GW": "Guinea-Bissau",
			"GY": "Guyana",
			"HT": "Haiti",
			"HM": "Heard Island and McDonald Islands",
			"HN": "Honduras",
			"HK": "Hong Kong",
			"HU": "Hungary",
			"IS": "Iceland",
			"IN": "India",
			"ID": "Indonesia",
			"IR": "Iran, Islamic Republic of",
			"IQ": "Iraq",
			"IE": "Ireland",
			"IL": "Israel",
			"IT": "Italy",
			"JM": "Jamaica",
			"JP": "Japan",
			"JE": "Jersey",
			"JO": "Jordan",
			"KZ": "Kazakhstan",
			"KE": "Kenya",
			"KI": "Kiribati",
			"KR": "Korea, Republic of",
			"KW": "Kuwait",
			"KG": "Kyrgyzstan",
			"LA": "Lao People's Democratic Republic",
			"LV": "Latvia",
			"LB": "Lebanon",
			"LS": "Lesotho",
			"LR": "Liberia",
			"LY": "Libya",
			"LI": "Liechtenstein",
			"LT": "Lithuania",
			"LU": "Luxembourg",
			"MO": "Macao",
			"MK": "Macedonia, the former Yugoslav Republic of",
			"MG": "Madagascar",
			"MW": "Malawi",
			"MY": "Malaysia",
			"MV": "Maldives",
			"ML": "Mali",
			"MT": "Malta",
			"MH": "Marshall Islands",
			"MQ": "Martinique",
			"MR": "Mauritania",
			"MU": "Mauritius",
			"YT": "Mayotte",
			"MX": "Mexico",
			"FM": "Micronesia, Federated States of",
			"MD": "Moldova, Republic of",
			"MC": "Monaco",
			"MN": "Mongolia",
			"ME": "Montenegro",
			"MS": "Montserrat",
			"MA": "Morocco",
			"MZ": "Mozambique",
			"MM": "Myanmar",
			"NA": "Namibia",
			"NR": "Nauru",
			"NP": "Nepal",
			"NL": "Netherlands",
			"AN": "Netherlands Antilles",
			"NC": "New Caledonia",
			"NZ": "New Zealand",
			"NI": "Nicaragua",
			"NE": "Niger",
			"NG": "Nigeria",
			"NU": "Niue",
			"NF": "Norfolk Island",
			"KP": "Korea, Democratic People's Republic of",
			"MP": "Northern Mariana Islands",
			"NO": "Norway",
			"OM": "Oman",
			"PK": "Pakistan",
			"PW": "Palau",
			"PS": "Palestine, State of",
			"PA": "Panama",
			"PG": "Papua New Guinea",
			"PY": "Paraguay",
			"PE": "Peru",
			"PH": "Philippines",
			"PN": "Pitcairn",
			"PL": "Poland",
			"PT": "Portugal",
			"PR": "Puerto Rico",
			"QA": "Qatar",
			"RE": "Réunion",
			"RO": "Romania",
			"RU": "Russian Federation",
			"RW": "Rwanda",
			"SH": "Saint Helena, Ascension and Tristan da Cunha",
			"KN": "Saint Kitts and Nevis",
			"LC": "Saint Lucia",
			"PM": "Saint Pierre and Miquelon",
			"VC": "Saint Vincent and the Grenadines",
			"WS": "Samoa",
			"SM": "San Marino",
			"ST": "São Tomé and Príncipe",
			"SA": "Saudi Arabia",
			"SN": "Senegal",
			"RS": "Serbia",
			"SC": "Seychelles",
			"SL": "Sierra Leone",
			"SG": "Singapore",
			"SK": "Slovakia",
			"SI": "Slovenia",
			"SB": "Solomon Islands",
			"SO": "Somalia",
			"ZA": "South Africa",
			"GS": "South Georgia and the South Sandwich Islands",
			"SS": "South Sudan",
			"ES": "Spain",
			"LK": "Sri Lanka",
			"SD": "Sudan",
			"SR": "Suriname",
			"SJ": "Svalbard and Jan Mayen",
			"SZ": "Swaziland",
			"SE": "Sweden",
			"CH": "Switzerland",
			"SY": "Syrian Arab Republic",
			"TW": "Taiwan",
			"TJ": "Tajikistan",
			"TZ": "Tanzania, United Republic of",
			"TH": "Thailand",
			"TG": "Togo",
			"TK": "Tokelau",
			"TO": "Tonga",
			"TT": "Trinidad and Tobago",
			"TN": "Tunisia",
			"TR": "Turkey",
			"TM": "Turkmenistan",
			"TC": "Turks and Caicos Islands",
			"TV": "Tuvalu",
			"VI": "Virgin Islands, U.S.",
			"UG": "Uganda",
			"UA": "Ukraine",
			"AE": "United Arab Emirates",
			"GB": "United Kingdom",
			"US": "United States",
			"UM": "United States Minor Outlying Islands",
			"UY": "Uruguay",
			"UZ": "Uzbekistan",
			"VU": "Vanuatu",
			"VA": "Holy See (Vatican City State)",
			"VE": "Venezuela, Bolivarian Republic of",
			"VN": "Viet Nam",
			"WF": "Wallis and Futuna",
			"EH": "Western Sahara",
			"YE": "Yemen",
			"ZM": "Zambia",
			"ZW": "Zimbabwe"
		};
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		// Note: The reason to create a separate logger (instead of placing these
		// functions in util/Util) is because this is used in places like Bundles that
		// need to be loaded before Okta is defined.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Logger) {
	
		  return _.extend(Logger, {
	
		    deprecate: function (msg) {
		      Logger.warn('[okta-signin-widget] DEPRECATED:', msg);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
		  function log(level, args) {
		    if (window.console) {
		      window.console[level].apply(window.console, args);
		    }
		  }
	
		  /**
		   * @class Okta.Logger
		   * See [window.console](https://developer.mozilla.org/en-US/docs/Web/API/Console)
		   */
		  return {
		    /**
		     * @static
		     * See: [console.trace](https://developer.mozilla.org/en-US/docs/Web/API/Console.trace)
		     */
		    trace: function () {
		      return log('trace', arguments);
		    },
		    /**
		     * @static
		     * See: [console.dir](https://developer.mozilla.org/en-US/docs/Web/API/Console.dir)
		     */
		    dir: function () {
		      return log('dir', arguments);
		    },
		    /**
		     * @static
		     * See: [console.time](https://developer.mozilla.org/en-US/docs/Web/API/Console.time)
		     */
		    time: function () {
		      return log('time', arguments);
		    },
		    /**
		     * @static
		     * See: [console.timeEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.timeEnd)
		     */
		    timeEnd: function () {
		      return log('timeEnd', arguments);
		    },
		    /**
		     * @static
		     * See: [console.group](https://developer.mozilla.org/en-US/docs/Web/API/Console.group)
		     */
		    group: function () {
		      return log('group', arguments);
		    },
		    /**
		     * @static
		     * See: [console.groupEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.groupEnd)
		     */
		    groupEnd: function () {
		      return log('groupEnd', arguments);
		    },
		    /**
		     * @static
		     * See: [console.assert](https://developer.mozilla.org/en-US/docs/Web/API/Console.assert)
		     */
		    assert: function () {
		      return log('assert', arguments);
		    },
		    /**
		     * @static
		     * See: [console.log](https://developer.mozilla.org/en-US/docs/Web/API/Console.log)
		     */
		    log: function () {
		      return log('log', arguments);
		    },
		    /**
		     * @static
		     * See: [console.info](https://developer.mozilla.org/en-US/docs/Web/API/Console.info)
		     */
		    info: function () {
		      return log('info', arguments);
		    },
		    /**
		     * @static
		     * See: [console.warn](https://developer.mozilla.org/en-US/docs/Web/API/Console.warn)
		     */
		    warn: function () {
		      return log('warn', arguments);
		    },
		    /**
		     * @static
		     * See: [console.error](https://developer.mozilla.org/en-US/docs/Web/API/Console.error)
		     */
		    error: function () {
		      return log('error', arguments);
		    }
		  };
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		/*
		    json2.js
		    2012-10-08
	
		    Public Domain.
	
		    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	
		    See http://www.JSON.org/js.html
	
	
		    This code should be minified before deployment.
		    See http://javascript.crockford.com/jsmin.html
	
		    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
		    NOT CONTROL.
	
	
		    This file creates a global JSON object containing two methods: stringify
		    and parse.
	
		        JSON.stringify(value, replacer, space)
		            value       any JavaScript value, usually an object or array.
	
		            replacer    an optional parameter that determines how object
		                        values are stringified for objects. It can be a
		                        function or an array of strings.
	
		            space       an optional parameter that specifies the indentation
		                        of nested structures. If it is omitted, the text will
		                        be packed without extra whitespace. If it is a number,
		                        it will specify the number of spaces to indent at each
		                        level. If it is a string (such as '\t' or '&nbsp;'),
		                        it contains the characters used to indent at each level.
	
		            This method produces a JSON text from a JavaScript value.
	
		            When an object value is found, if the object contains a toJSON
		            method, its toJSON method will be called and the result will be
		            stringified. A toJSON method does not serialize: it returns the
		            value represented by the name/value pair that should be serialized,
		            or undefined if nothing should be serialized. The toJSON method
		            will be passed the key associated with the value, and this will be
		            bound to the value
	
		            For example, this would serialize Dates as ISO strings.
	
		                Date.prototype.toJSON = function (key) {
		                    function f(n) {
		                        // Format integers to have at least two digits.
		                        return n < 10 ? '0' + n : n;
		                    }
	
		                    return this.getUTCFullYear()   + '-' +
		                         f(this.getUTCMonth() + 1) + '-' +
		                         f(this.getUTCDate())      + 'T' +
		                         f(this.getUTCHours())     + ':' +
		                         f(this.getUTCMinutes())   + ':' +
		                         f(this.getUTCSeconds())   + 'Z';
		                };
	
		            You can provide an optional replacer method. It will be passed the
		            key and value of each member, with this bound to the containing
		            object. The value that is returned from your method will be
		            serialized. If your method returns undefined, then the member will
		            be excluded from the serialization.
	
		            If the replacer parameter is an array of strings, then it will be
		            used to select the members to be serialized. It filters the results
		            such that only members with keys listed in the replacer array are
		            stringified.
	
		            Values that do not have JSON representations, such as undefined or
		            functions, will not be serialized. Such values in objects will be
		            dropped; in arrays they will be replaced with null. You can use
		            a replacer function to replace those with JSON values.
		            JSON.stringify(undefined) returns undefined.
	
		            The optional space parameter produces a stringification of the
		            value that is filled with line breaks and indentation to make it
		            easier to read.
	
		            If the space parameter is a non-empty string, then that string will
		            be used for indentation. If the space parameter is a number, then
		            the indentation will be that many spaces.
	
		            Example:
	
		            text = JSON.stringify(['e', {pluribus: 'unum'}]);
		            // text is '["e",{"pluribus":"unum"}]'
	
	
		            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
		            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
	
		            text = JSON.stringify([new Date()], function (key, value) {
		                return this[key] instanceof Date ?
		                    'Date(' + this[key] + ')' : value;
		            });
		            // text is '["Date(---current time---)"]'
	
	
		        JSON.parse(text, reviver)
		            This method parses a JSON text to produce an object or array.
		            It can throw a SyntaxError exception.
	
		            The optional reviver parameter is a function that can filter and
		            transform the results. It receives each of the keys and values,
		            and its return value is used instead of the original value.
		            If it returns what it received, then the structure is not modified.
		            If it returns undefined then the member is deleted.
	
		            Example:
	
		            // Parse the text. Values that look like ISO date strings will
		            // be converted to Date objects.
	
		            myData = JSON.parse(text, function (key, value) {
		                var a;
		                if (typeof value === 'string') {
		                    a =
		/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
		                    if (a) {
		                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
		                            +a[5], +a[6]));
		                    }
		                }
		                return value;
		            });
	
		            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
		                var d;
		                if (typeof value === 'string' &&
		                        value.slice(0, 5) === 'Date(' &&
		                        value.slice(-1) === ')') {
		                    d = new Date(value.slice(5, -1));
		                    if (d) {
		                        return d;
		                    }
		                }
		                return value;
		            });
	
	
		    This is a reference implementation. You are free to copy, modify, or
		    redistribute.
		*/
	
		/*jslint evil: true, regexp: true */
	
		/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
		    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
		    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
		    lastIndex, length, parse, prototype, push, replace, slice, stringify,
		    test, toJSON, toString, valueOf
		*/
	
	
		// Create a JSON object only if one does not already exist. We create the
		// methods in a closure to avoid creating global variables.
	
		if (typeof JSON !== 'object') {
		    JSON = {};
		}
	
		(function () {
		    'use strict';
	
		    function f(n) {
		        // Format integers to have at least two digits.
		        return n < 10 ? '0' + n : n;
		    }
	
		    if (typeof Date.prototype.toJSON !== 'function') {
	
		        Date.prototype.toJSON = function (key) {
	
		            return isFinite(this.valueOf())
		                ? this.getUTCFullYear()     + '-' +
		                    f(this.getUTCMonth() + 1) + '-' +
		                    f(this.getUTCDate())      + 'T' +
		                    f(this.getUTCHours())     + ':' +
		                    f(this.getUTCMinutes())   + ':' +
		                    f(this.getUTCSeconds())   + 'Z'
		                : null;
		        };
	
		        String.prototype.toJSON      =
		            Number.prototype.toJSON  =
		            Boolean.prototype.toJSON = function (key) {
		                return this.valueOf();
		            };
		    }
	
		    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		        gap,
		        indent,
		        meta = {    // table of character substitutions
		            '\b': '\\b',
		            '\t': '\\t',
		            '\n': '\\n',
		            '\f': '\\f',
		            '\r': '\\r',
		            '"' : '\\"',
		            '\\': '\\\\'
		        },
		        rep;
	
	
		    function quote(string) {
	
		// If the string contains no control characters, no quote characters, and no
		// backslash characters, then we can safely slap some quotes around it.
		// Otherwise we must also replace the offending characters with safe escape
		// sequences.
	
		        escapable.lastIndex = 0;
		        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
		            var c = meta[a];
		            return typeof c === 'string'
		                ? c
		                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
		        }) + '"' : '"' + string + '"';
		    }
	
	
		    function str(key, holder) {
	
		// Produce a string from holder[key].
	
		        var i,          // The loop counter.
		            k,          // The member key.
		            v,          // The member value.
		            length,
		            mind = gap,
		            partial,
		            value = holder[key];
	
		// If the value has a toJSON method, call it to obtain a replacement value.
	
		        if (value && typeof value === 'object' &&
		                typeof value.toJSON === 'function') {
		            value = value.toJSON(key);
		        }
	
		// If we were called with a replacer function, then call the replacer to
		// obtain a replacement value.
	
		        if (typeof rep === 'function') {
		            value = rep.call(holder, key, value);
		        }
	
		// What happens next depends on the value's type.
	
		        switch (typeof value) {
		        case 'string':
		            return quote(value);
	
		        case 'number':
	
		// JSON numbers must be finite. Encode non-finite numbers as null.
	
		            return isFinite(value) ? String(value) : 'null';
	
		        case 'boolean':
		        case 'null':
	
		// If the value is a boolean or null, convert it to a string. Note:
		// typeof null does not produce 'null'. The case is included here in
		// the remote chance that this gets fixed someday.
	
		            return String(value);
	
		// If the type is 'object', we might be dealing with an object or an array or
		// null.
	
		        case 'object':
	
		// Due to a specification blunder in ECMAScript, typeof null is 'object',
		// so watch out for that case.
	
		            if (!value) {
		                return 'null';
		            }
	
		// Make an array to hold the partial results of stringifying this object value.
	
		            gap += indent;
		            partial = [];
	
		// Is the value an array?
	
		            if (Object.prototype.toString.apply(value) === '[object Array]') {
	
		// The value is an array. Stringify every element. Use null as a placeholder
		// for non-JSON values.
	
		                length = value.length;
		                for (i = 0; i < length; i += 1) {
		                    partial[i] = str(i, value) || 'null';
		                }
	
		// Join all of the elements together, separated with commas, and wrap them in
		// brackets.
	
		                v = partial.length === 0
		                    ? '[]'
		                    : gap
		                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
		                    : '[' + partial.join(',') + ']';
		                gap = mind;
		                return v;
		            }
	
		// If the replacer is an array, use it to select the members to be stringified.
	
		            if (rep && typeof rep === 'object') {
		                length = rep.length;
		                for (i = 0; i < length; i += 1) {
		                    if (typeof rep[i] === 'string') {
		                        k = rep[i];
		                        v = str(k, value);
		                        if (v) {
		                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
		                        }
		                    }
		                }
		            } else {
	
		// Otherwise, iterate through all of the keys in the object.
	
		                for (k in value) {
		                    if (Object.prototype.hasOwnProperty.call(value, k)) {
		                        v = str(k, value);
		                        if (v) {
		                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
		                        }
		                    }
		                }
		            }
	
		// Join all of the member texts together, separated with commas,
		// and wrap them in braces.
	
		            v = partial.length === 0
		                ? '{}'
		                : gap
		                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
		                : '{' + partial.join(',') + '}';
		            gap = mind;
		            return v;
		        }
		    }
	
		// If the JSON object does not yet have a stringify method, give it one.
	
		    if (typeof JSON.stringify !== 'function') {
		        JSON.stringify = function (value, replacer, space) {
	
		// The stringify method takes a value and an optional replacer, and an optional
		// space parameter, and returns a JSON text. The replacer can be a function
		// that can replace values, or an array of strings that will select the keys.
		// A default replacer method can be provided. Use of the space parameter can
		// produce text that is more easily readable.
	
		            var i;
		            gap = '';
		            indent = '';
	
		// If the space parameter is a number, make an indent string containing that
		// many spaces.
	
		            if (typeof space === 'number') {
		                for (i = 0; i < space; i += 1) {
		                    indent += ' ';
		                }
	
		// If the space parameter is a string, it will be used as the indent string.
	
		            } else if (typeof space === 'string') {
		                indent = space;
		            }
	
		// If there is a replacer, it must be a function or an array.
		// Otherwise, throw an error.
	
		            rep = replacer;
		            if (replacer && typeof replacer !== 'function' &&
		                    (typeof replacer !== 'object' ||
		                    typeof replacer.length !== 'number')) {
		                throw new Error('JSON.stringify');
		            }
	
		// Make a fake root object containing our value under the key of ''.
		// Return the result of stringifying the value.
	
		            return str('', {'': value});
		        };
		    }
	
	
		// If the JSON object does not yet have a parse method, give it one.
	
		    if (typeof JSON.parse !== 'function') {
		        JSON.parse = function (text, reviver) {
	
		// The parse method takes a text and an optional reviver function, and returns
		// a JavaScript value if the text is a valid JSON text.
	
		            var j;
	
		            function walk(holder, key) {
	
		// The walk method is used to recursively walk the resulting structure so
		// that modifications can be made.
	
		                var k, v, value = holder[key];
		                if (value && typeof value === 'object') {
		                    for (k in value) {
		                        if (Object.prototype.hasOwnProperty.call(value, k)) {
		                            v = walk(value, k);
		                            if (v !== undefined) {
		                                value[k] = v;
		                            } else {
		                                delete value[k];
		                            }
		                        }
		                    }
		                }
		                return reviver.call(holder, key, value);
		            }
	
	
		// Parsing happens in four stages. In the first stage, we replace certain
		// Unicode characters with escape sequences. JavaScript handles many characters
		// incorrectly, either silently deleting them, or treating them as line endings.
	
		            text = String(text);
		            cx.lastIndex = 0;
		            if (cx.test(text)) {
		                text = text.replace(cx, function (a) {
		                    return '\\u' +
		                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
		                });
		            }
	
		// In the second stage, we run the text against regular expressions that look
		// for non-JSON patterns. We are especially concerned with '()' and 'new'
		// because they can cause invocation, and '=' because it can cause mutation.
		// But just to be safe, we want to reject all unexpected forms.
	
		// We split the second stage into 4 regexp operations in order to work around
		// crippling inefficiencies in IE's and Safari's regexp engines. First we
		// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
		// replace all simple value tokens with ']' characters. Third, we delete all
		// open brackets that follow a colon or comma or that begin the text. Finally,
		// we look to see that the remaining characters are only whitespace or ']' or
		// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.
	
		            if (/^[\],:{}\s]*$/
		                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
		                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
		                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
	
		// In the third stage we use the eval function to compile the text into a
		// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
		// in JavaScript: it can begin a block or an object literal. We wrap the text
		// in parens to eliminate the ambiguity.
	
		                j = eval('(' + text + ')');
	
		// In the optional fourth stage, we recursively walk the new structure, passing
		// each name/value pair to a reviver function for possible transformation.
	
		                return typeof reviver === 'function'
		                    ? walk({'': j}, '')
		                    : j;
		            }
	
		// If the text is not JSON parseable, then a SyntaxError is thrown.
	
		            throw new SyntaxError('JSON.parse');
		        };
		    }
		}());
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
		  $(function () {
		    $.ajaxSetup({
		      headers: {
		        'X-Okta-XsrfToken': $('#_xsrfToken').text()
		      },
		      converters : {
		        'text secureJSON' : function (str) {
		          if (str.substring(0, 11) === 'while(1){};') {
		            str = str.substring(11);
		          }
		          return JSON.parse(str);
		        }
		      }
		    });
		  });
		  // Selenium Hook
		  // Widget such as autocomplete and autosuggest needs to be triggered from the running version of jQuery.
		  // We have 2 versions of jQuery running in parallel and they don't share the same events bus
		  window.jQueryCourage = $;
		  return $;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_17__;
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*global JSON */
		/*jshint maxcomplexity:8 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  var Util = {};
		  var _ = Okta._;
	
		  Util.hasTokensInHash = function (hash) {
		    return /((id|access)_token=)/i.test(hash);
		  };
	
		  Util.transformErrorXHR = function (xhr) {
		    // Handle network connection error
		    if (xhr.status === 0 && _.isEmpty(xhr.responseJSON)) {
		      xhr.responseJSON = { errorSummary: Okta.loc('error.network.connection', 'login') };
		      return xhr;
		    }
		    if (!xhr.responseJSON) {
		      try {
		        xhr.responseJSON = JSON.parse(xhr.responseText);
		      } catch (parseException) {
		        xhr.responseJSON = { errorSummary: Okta.loc('oform.error.unexpected', 'login') };
		        return xhr;
		      }
		    }
		    // Temporary solution to display field errors
		    // Assuming there is only one field error in a response
		    if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {
		      xhr.responseJSON.errorSummary = xhr.responseJSON.errorCauses[0].errorSummary;
		    }
		    // Replace error messages
		    if (!_.isEmpty(xhr.responseJSON)) {
		      var errorMsg = Okta.loc('errors.' + xhr.responseJSON.errorCode, 'login');
		      if (errorMsg.indexOf('L10N_ERROR[') === -1) {
		        xhr.responseJSON.errorSummary = errorMsg;
		      }
		    }
		    return xhr;
		  };
	
		  // Simple helper function to lowercase all strings in the given array
		  Util.toLower = function (strings) {
		    return _.map(strings, function (str) {
		      return str.toLowerCase();
		    });
		  };
	
		  // A languageCode can be composed of multiple parts, i.e:
		  // {{langage}}-{{region}}-{{dialect}}
		  //
		  // In these cases, it's necessary to generate a list of other possible
		  // combinations that we might support (in preferred order).
		  //
		  // For example:
		  // en-US -> [en-US, en]
		  // de-DE-bavarian -> [de-DE-bavarian, de-DE, de]
		  function expandLanguage(language) {
		    var expanded = [language],
		        parts = language.split('-');
		    while (parts.pop() && parts.length > 0) {
		      expanded.push(parts.join('-'));
		    }
		    return expanded;
		  }
	
		  // Following the rules of expanding one language, this will generate
		  // all potential languages in the given order (where higher priority is
		  // given to expanded languages over other downstream languages).
		  Util.expandLanguages = function (languages) {
		    return _.chain(languages)
		      .map(expandLanguage)
		      .flatten()
		      .uniq()
		      .value();
		  };
	
		  return Util;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-params: 0 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(6),
		  __webpack_require__(2),
		  __webpack_require__(4),
		  __webpack_require__(20),
		  __webpack_require__(23),
		  __webpack_require__(24),
		  __webpack_require__(26),
		  __webpack_require__(29),
		  __webpack_require__(15),
		  __webpack_require__(31),
		  __webpack_require__(15),
		  __webpack_require__(34),
		  __webpack_require__(15),
		  __webpack_require__(15),
		  __webpack_require__(36),
		  __webpack_require__(15),
		  __webpack_require__(15),
		  __webpack_require__(15),
		  __webpack_require__(73),
		  __webpack_require__(15),
		  __webpack_require__(15),
		  __webpack_require__(7),
		  __webpack_require__(27),
		  __webpack_require__(61),
		  __webpack_require__(13),
		  __webpack_require__(15)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Handlebars, Model, BaseModel, BaseCollection, BaseView, ListView, TableView, BaseRouter,
		          TabbedRouter, BaseController, DataListController, DeadSimpleDataList, BaseForm, BaseFormDialog,
		          BaseModalDialog, MultiViewModalDialog, Callout, DropDown, BaseWizard, StringUtil, TemplateUtil,
		          ButtonFactory, Logger, Metrics) {
	
		  /**
		   * @class Okta
		   * @singleton
		   *
		   * #### The Okta module holds reference to many frequently used objects and functions
		   *
		   * A quick example:
		   *
		   * ```javascript
		   * define(['okta'], function (Okta) {
		   *
		   *   var Form = Okta.FormDialog.extend({
		   *     title: Okta.loc('my.i18n.key'),
		   *     inputs: [
		   *       {
		   *         type: 'text',
		   *         name: 'name'
		   *       }
		   *     ]
		   *   });
		   *
		   *   var View = Okta.View.extend({
		   *     children: [
		   *       Okta.createButton({
		   *         title: 'Click Me',
		   *         click: function () {
		   *           new Form({model: new Okta.Model()}).render();
		   *         }
		   *       })
		   *     ]
		   *   });
		   *
		   * });
		   *
		   * ```
		   */
	
		  return {
	
		    /**
		     * A reference to jQuery
		     * @type {jQuery}
		     */
		    $: $,
	
		    /**
		     * A reference to underscore
		     * @type {underscore}
		     */
		    _: _,
	
		    /**
		     * A reference to Handlebars
		     * @type {Handlebars}
		     */
		    Handlebars: Handlebars,
	
		    /**
		     * @method
		     * @inheritdoc StringUtil#static-method-localize
		     */
		    loc: StringUtil.localize,
	
		    /**
		     * @method
		     * @inheritdoc ButtonFactory#create
		     */
		    createButton: ButtonFactory.create,
	
		    /**
		     * @method
		     * @inheritdoc Callout#static-method-create
		     */
		    createCallout: Callout.create,
	
		    /**
		     * @method
		     * @inheritdoc TemplateUtil#tpl
		     */
		    tpl: TemplateUtil.tpl,
	
	
		    Model: Model,
		    BaseModel: BaseModel,
		    Collection: BaseCollection,
	
		    View: BaseView,
		    ListView: ListView,
		    TableView: TableView,
	
		    Router: BaseRouter,
		    TabbedRouter: TabbedRouter,
	
		    Controller: BaseController,
		    DataListController: DataListController,
	
		    DataList: DeadSimpleDataList,
	
		    ModalDialog: BaseModalDialog,
		    MultiViewModalDialog: MultiViewModalDialog,
	
		    Form: BaseForm,
		    FormDialog: BaseFormDialog,
	
		    DropDown: DropDown,
	
		    Wizard: BaseWizard,
	
		    Logger: Logger,
	
		    Metrics: Metrics
	
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(21)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
		  /**
		  * @class Okta.Model
		  * @extends Archer.Model
		  * @inheritDoc Archer.Model
		  */
		  return Model.extend({
	
		    /**
		     * Is the end point using the legacy "secureJSON" format
		     * @type {Function|Boolean}
		     */
		    secureJSON: false,
	
		    _builtInLocalProps: {
		      '__edit__': 'boolean'
		    },
	
		    constructor: function () {
		      this.local = _.defaults({}, _.result(this, 'local'), this._builtInLocalProps);
	
		      if (_.result(this, 'secureJSON')) {
		        this.sync = _.wrap(this.sync, function (sync, method, model, options) {
		          return sync.call(this, method, model, _.extend({dataType: 'secureJSON'}, options));
		        });
		      }
	
		      Model.apply(this, arguments);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		  /* global module, exports */
		  else if (typeof require === 'function' && typeof exports === 'object') {
		    module.exports = factory(require('underscore'), require('backbone'));
		  }
		  else {
		    root.Archer || (root.Archer = {});
		    root.Archer.Model = factory(root._, root.Backbone);
		  }
		}(this, function (_, Backbone) {
		  var Model;
	
		  /**
		  * @class Archer.Model
		  * @extend Backbone.Model
		  *
		  * Archer.Model is a standard [Backbone.Model](http://backbonejs.org/#Model) with a few additions:
		  *
		  * - {@link #derived Derived properties}
		  * - {@link #props Built in schema validation}
		  * - {@link #local Private properties (with schema validation)}
		  * - {@link #flat Flattening of nested objects}
		  *
		  * Both derived and private properties are filtered out when sending the data to the server.
		  *
		  * Example:
		  *
		  * ```javascript
		  * var Person = Archer.Model.extend({
		  *   props: {
		  *     'fname': 'string',
		  *     'lname': 'string'
		  *   },
		  *   local: {
		  *     isLoggedIn: 'boolean'
		  *   },
		  *   derived: {
		  *     name: {
		  *       deps: ['fname', 'lname'],
		  *       fn: function (fname, lname) {
		  *         return fname + ' ' + lname;
		  *       }
		  *     }
		  *   }
		  * });
		  * var model = new Person({fname: 'Joe', lname: 'Doe'});
		  * model.get('name'); //=> "Joe Doe"
		  * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
		  *
		  * model.set('isLoggedIn', true);
		  * model.get('isLoggedIn'); //=> true
		  * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
		  * ```
		  * See: [Backbone.Model](http://backbonejs.org/#Model-constructor)
		  */
	
		  function flatten(value, objectTypeFields, key, target) {
		    var filter =  _.contains(objectTypeFields, key);
		    target || (target = {});
		    if (!filter && _.isObject(value) && !_.isArray(value) && !_.isFunction(value)) {
		      _.each(value, function (val, i) {
		        flatten(val, objectTypeFields, key ? (key + '.' + i) : i, target);
		      });
		    }
		    // Case where target is an empty object. Guard against returning {undefined: undefined}.
		    else if (key !== undefined) {
		      target[key] = value;
		    }
		    return target;
		  }
	
		  function unflatten(data) {
		    _.each(data, function (value, key, data) {
		      if (key.indexOf('.') == -1) {
		        return;
		      }
		      var part,
		          ref = data,
		          parts = key.split('.');
		      while ((part = parts.shift()) !== undefined) {
		        if (!ref[part]) {
		          ref[part] = parts.length ? {} : value;
		        }
		        ref = ref[part];
		      }
		      delete data[key];
		    });
		    return data;
		  }
	
		  function createMessage(field, msg) {
		    var obj = {};
		    obj[field.name] = msg;
		    return obj;
		  }
	
		  function normalizeSchemaDef(field, name) {
		    var target;
		    if (_.isString(field)) {
		      target = {
		        type: field
		      };
		    }
		    else if (_.isArray(field)) {
		      target = {
		        type: field[0],
		        required: field[1],
		        value: field[2]
		      };
		    }
		    else {
		      target = _.clone(field);
		    }
		    _.defaults(target, {required: false, name: name});
		    return target;
		  }
	
		  function capitalize(string) {
		    return string.toLowerCase().replace(/\b[a-z]/g, function (letter) {
		      return letter.toUpperCase();
		    });
		  }
	
		  function allowExtraProperties(rule, key) {
		    if (_.isBoolean(rule)) {
		      return rule;
		    }
		    else if (_.isRegExp(rule)) {
		      return rule.test(key);
		    }
		    else if (_.isFunction(rule)) {
		      return rule.call(this, key);
		    }
		    return false;
		  }
	
		  function validateField(field, value) {
		    /* eslint complexity: [2, 9], max-statements: [2, 12]*/
		    var createMessageWith = _.partial(createMessage, field),
		        isDefined = !_.isUndefined(value) && !_.isNull(value),
		        checkType,
		        errorMessage;
	
		    // check required fields
		    if (field.required && (!isDefined || _.isNull(value) || value === '')) {
		      return createMessageWith(Model.ERROR_BLANK);
		    }
		    // check type
		    checkType = _['is' + capitalize(field.type)];
		    if (isDefined && field.type != 'any' && (!_.isFunction(checkType) || !checkType(value))) {
		      return createMessageWith(Model.ERROR_WRONG_TYPE);
		    }
		    // check pre set values (enum)
		    if (isDefined && field.values && !_.contains(field.values, value)) {
		      return createMessageWith(Model.ERROR_NOT_ALLOWED);
		    }
		    // check validate method
		    if (_.isFunction(field.validate) && !field.validate(value)) {
		      return createMessageWith(Model.ERROR_INVALID);
		    }
		     // check array items
		    if (isDefined && field.type == 'array' && (errorMessage = validateArrayField(field, value))) {
		      return createMessageWith(errorMessage);
		    }
	
		  }
	
		  function validateArrayField(field, arr) {
		    if (field.minItems && arr.length < field.minItems) {
		      return 'model.validation.field.array.minItems';
		    }
		    else if (field.maxItems && arr.length > field.maxItems) {
		      return 'model.validation.field.array.maxItems';
		    }
		    else if (field.uniqueItems && arr.length > _.uniq(arr).length) {
		      return Model.ERROR_IARRAY_UNIQUE;
		    }
		    else if (field.items) {
		      /* eslint max-depth: [2, 3] */
		      var arrayField = normalizeSchemaDef(field.items, 'placeholder');
		      for (var i = 0; i < arr.length; i++) {
		        var value = arr[i];
		        var error = validateField(arrayField, value);
		        if (error) {
		          return error['placeholder'];
		        }
		      }
		    }
		  }
	
		  Model = Backbone.Model.extend({
	
		    /**
		     * Pass props as an object to extend, describing the observable properties of your model. The props
		     * properties should not be set on an instance, as this won't define new properties, they should only be passed to
		     * extend.
		     * Properties can be defined in three different ways:
		     *
		     * - As a string with the expected dataType. One of string, number, boolean, array, object, date, or any.
		     * Eg: `name: 'string'`.
		     * - An array of `[dataType, required, default]`
		     * - An object `{type: 'string', required: true, value: '', values: [], validate: function() {}`
		     *   - `value` will be the value that the property will be set to if it is undefined, either by not being set during
		     *   initialization, or by being explicitly set to undefined.
		     *   - If `required` is true, one of two things will happen. If a default is set for the property, the property will
		     *   start with that value. If a default is not set for the property, validation will fail
		     *   - If `values` array is passed, then you'll be able to change a property to one of those values only.
		     *   - If `validate` is passed, then you'll be able to change a property to a string that returns true when passed,
		     *   - If the type is defined as `array`, the array elements could be defined by `minItems` (Number),
		     *   `uniqueItems` (Boolean) and `items` (a field definition such as this one that will validate each array member)
		     *   To the `validate` method
		     *   - Trying to set a property to an invalid type will raise an exception.
		     *
		     * ```javascript
		     * var Person = Model.extend({
		     *   props: {
		     *     name: 'string',
		     *     age: 'number',
		     *     paying: ['boolean', true, false], //required attribute, defaulted to false
		     *     type: {
		     *       type: 'string',
		     *       values: ['regular-hero', 'super-hero', 'mega-hero']
		     *     },
		     *     likes: {
		     *       type: 'string',
		     *       validate: function (value) {
		     *         return /^[\w]+ing$/.test(value)
		     *       }
		     *     }
		     *   }
		     * });
		     * ```
		     *
		     * @type {Mixed}
		     */
		    props: {},
	
		    /**
		     * Derived properties (also known as computed properties) are properties of the model that depend on the
		     * other (props, local or even derived properties to determine their value. Best demonstrated with an example:
		     *
		     * ```javascript
		     * var Person = Model.extend({
		     *   props: {
		     *     firstName: 'string',
		     *     lastName: 'string'
		     *   },
		     *   derived: {
		     *     fullName: {
		     *       deps: ['firstName', 'lastName'],
		     *       fn: function (firstName, lastName) {
		     *         return firstName + ' ' + lastName;
		     *       }
		     *     }
		     *   }
		     * });
		     *
		     * var person = new Person({ firstName: 'Phil', lastName: 'Roberts' })
		     * console.log(person.get('fullName')) //=> "Phil Roberts"
		     *
		     * person.set('firstName', 'Bob');
		     * console.log(person.get('fullName')) //=> "Bob Roberts"
		     * ```
		     *
		     * Each derived property, is defined as an object with the current properties:
		     *
		     * - `deps` {Array} - An array of property names which the derived property depends on.
		     * - `fn` {Function} - A function which returns the value of the computed property. It is called in the context of
		     * the current object, so that this is set correctly.
		     * - `cache` {Boolean} -  - Whether to cache the property. Uncached properties are computed every time they are
		     * accessed. Useful if it depends on the current time for example. Defaults to `true`.
		     *
		     * Derived properties are retrieved and fire change events just like any other property. They cannot be set
		     * directly.
		     * @type {Object}
		     */
		    derived: {},
	
		    /**
		     * local properties are defined and work in exactly the same way as {@link #props}, but generally only exist for
		     * the lifetime of the page.
		     * They would not typically be persisted to the server, and are not returned by calls to {@link #toJSON}.
		     *
		     * ```javascript
		     * var Person = Model.extend({
		     *   props: {
		     *     name: 'string',
		     *   },
		     *   local: {
		     *     isLoggedIn: 'boolean'
		     *   }
		     * );
		     * ```
		     * @type {Object}
		     */
		    local: {},
	
		    /**
		     * A boolean, a regexp or a predicate function to sanitize arbitrary extra model properties.
		     *
		     * Useful for embedded values such as [HAL](http://stateless.co/hal_specification.html) `_links` and `_embedded`.
		     *
		     * ```javascript
		     * var Person = Model.extend({
		     *   flat: true, //defaults to true, emphasizing for this example
		     *   extraProperties: /^_(links|embedded)\./
		     * );
		     * model.set('_links', '/orders'); // => throws an error
		     * model.set('links.self.href', '/orders'); // => throws an error
		     * model.set('_links.self.href', '/orders'); //=> no error
		     * ```
		     * @type {Boolean|RegExp|Function}
		     */
		    extraProperties: false,
	
	
		    /**
		    * Flatten the payload into dot notation string keys:
		    *
		    * ```javascript
		    * var Person = Model.extend({
		    *   props: {
		    *     'profile.fname': 'string',
		    *     'profile.lname': 'string',
		    *     'profile.languages': 'object'
		    *   },
		    *   flat: true
		    * });
		    * var person = new Person({'profile': {
		    *                            'fname': 'John',
		    *                            'lname': 'Doe',
		    *                            'languages': {name: "English", value: "EN"}
		    *                         }}, {parse: true});
		    * person.get('profile'); //=> undefined
		    * person.get('profile.fname'); //=> 'John'
		    * person.get('profile.lname'); //=> 'Doe'
		    * person.get('profile.languages'); //=> {name: "English", value: "EN"}
		    * person.get('profile.languages.name'); //=> undefined
		    * person.toJSON(); //=> {'profile': {'fname': 'John'} }
		    * ```
		     * @type {Boolean}
		     */
		    flat: true,
	
		    /**
		     * @deprecated
		     * @alias Backbone.Model#defaults
		     */
		    defaults: {},
	
		    /**
		    * @constructor
		    * @param {Object} [attributes] - Initial model attributes (data)
		    * @param {Object} [options] - Options hash
		    */
		    constructor: function (options) {
		      /* eslint max-statements: [2, 18] */
		      this.options = options || {};
	
		      var schema = this['__schema__'] = {},
		          objectTypeFields = [];
	
		      schema.computedProperties = {};
	
		      schema.extraProperties = this.extraProperties;
		      schema.props = _.clone(_.result(this, 'props') || {});
		      schema.derived = _.clone(_.result(this, 'derived') || {});
		      schema.local = _.clone(_.result(this, 'local') || {});
	
		      var defaults = {};
		      _.each(_.extend({}, schema.props, schema.local), function (options, name) {
		        var schemaDef = normalizeSchemaDef(options, name);
		        if (!_.isUndefined(schemaDef.value)) {
		          defaults[name] = schemaDef.value;
		        }
		        if (schemaDef.type === 'object') {
		          objectTypeFields.push(name);
		        }
		      }, this);
		      if (_.size(defaults)) {
		        var localDefaults = _.result(this, 'defaults');
		        this.defaults = function () {
		          return _.defaults({}, defaults, localDefaults);
		        };
		      }
	
		      // override `validate`
		      this.validate = _.wrap(this.validate, function (validate) {
		        var args = _.rest(arguments),
		            res = _.extend(this._validateSchema.apply(this, args), validate.apply(this, args));
		        return _.size(res) && res || undefined;
		      });
	
		      // override `parse`
		      this.parse = _.wrap(this.parse, function (parse) {
		        var target = parse.apply(this, _.rest(arguments));
		        if (this.flat) {
		          target = flatten(target, objectTypeFields);
		        }
		        return target;
		      });
	
		      Backbone.Model.apply(this, arguments);
	
		      _.each(schema.derived, function (options, name) {
		        schema.computedProperties[name] = this.__getDerivedValue(name); // set initial value;
		        var deps = options.deps || [];
		        if (deps.length) {
		          this.on('cache:clear change:' + deps.join(' change:'), function () {
		            var value = this.__getDerivedValue(name);
		            if (value !== schema.computedProperties[name]) {
		              schema.computedProperties[name] = value;
		              this.trigger('change:' + name, this, value);
		            }
		          }, this);
		        }
		      }, this);
	
		      this.on('sync', function () {
		        this.__syncedData = this.toJSON();
		      }, this);
		    },
	
		    validate: function () {},
	
		    /**
		     * Check if the schema settings allow this field to exist in the model
		     * @param  {String} key
		     * @return {Boolean}
		     */
		    allows: function (key) {
		      var schema = this['__schema__'],
		          all = _.extend({}, schema.props, schema.local);
		      if (_.has(all, key)) {
		        return true;
		      }
		      else if (allowExtraProperties.call(this, schema.extraProperties, key)) {
		        return true;
		      }
		      else {
		        return false;
		      }
		    },
	
		    /**
		     * Returns the schema for the specific property
		     *
		     * @param propName - The name of the property
		     * @returns {*} | null
		     */
		    getPropertySchema: function (propName) {
		      var schema = this['__schema__'];
		      return _.reduce([schema.props, schema.local], function (result, options) {
		        return result || normalizeSchemaDef(options[propName], propName);
		      }, null);
		    },
	
		    set: function (key, val) {
		      var attrs;
		      if (typeof key === 'object') {
		        attrs = key;
		      } else {
		        (attrs = {})[key] = val;
		      }
	
		       // Don't override a computed properties
		      _.each(attrs, function (value, key) {
		        if (_.has(this['__schema__'].derived, key)) {
		          throw 'overriding derived properties is not supported: ' + key;
		        }
		      }, this);
	
		      // Schema validation
		      var errorFields = [];
		      _.each(attrs, function (value, key) {
		        this.allows(key) || errorFields.push(key);
		      }, this);
		      if (errorFields.length) {
		        throw 'field not allowed: ' + errorFields.join(', ');
		      }
	
		      return Backbone.Model.prototype.set.apply(this, arguments);
		    },
	
		    get: function (attr) {
		      var schema = this['__schema__'];
		      if (_.has(schema.derived, attr)) {
		        if (schema.derived[attr].cache !== false) {
		          return schema.computedProperties[attr];
		        }
		        else {
		          return this.__getDerivedValue(attr);
		        }
		      }
		      return Backbone.Model.prototype.get.apply(this, arguments);
		    },
	
		    /**
		     * Return a shallow copy of the model's attributes for JSON stringification.
		     * This can be used for persistence, serialization, or for augmentation before being sent to the server.
		     * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
		     *  but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
		     *
		     * ```javascript
		     * var artist = new Model({
		     *   firstName: 'Wassily',
		     *   lastName: 'Kandinsky'
		     * });
		     *
		     * artist.set({birthday: 'December 16, 1866'});
		     * JSON.stringify(artist); //=> {'firstName':'Wassily','lastName':'Kandinsky','birthday':'December 16, 1866'}
		     * ```
		     * See [Backbone.Model.toJSON](http://backbonejs.org/#Model-toJSON)
		     * @param  {Object} options
		     * @return {Object}
		     */
		    toJSON: function (options) {
		      options || (options = {});
		      var res = _.clone(Backbone.Model.prototype.toJSON.apply(this, arguments)),
		          schema = this['__schema__'];
	
		      // cleanup local properties
		      if (!options.verbose) {
		        res = _.omit(res, _.keys(schema.local));
		      }
		      else { // add derived properties
		        _.each(schema.derived, function (options, name) {
		          res[name] = this.get(name);
		        }, this);
		      }
	
		      if (this.flat) {
		        res = unflatten(res);
		      }
	
		      return res;
		    },
	
		    /**
		     * Removes all attributes from the model, including the id attribute.
		     * Fires a `"change"` event unless `silent` is passed as an option.
		     * Sets the default values to the model
		     * @param {Object} [options]
		     */
		    reset: function (options) {
		      this.clear(options);
		      this.set(_.result(this, 'defaults'), options);
		    },
	
		    /**
		     * Is the data on the model has local modifications since the last sync event?
		     * @return {Boolean} is the model in sync with the server
		     */
		    isSynced: function () {
		      return _.isEqual(this.__syncedData, this.toJSON());
		    },
	
		    /**
		     * Runs local schema validation. Invoked internally by {@link #validate}.
		     * @return {Object}
		     * @protected
		     */
		    _validateSchema: function () {
		      var errors = {},
		          schema = this['__schema__'];
	
		      // validate each field
		      _.each(_.extend({}, schema.props, schema.local), function (options, name) {
		        var field = normalizeSchemaDef(options, name);
		        var fieldErrors = validateField(field, this.get(name));
		        _.extend(errors, fieldErrors || {});
		      }, this);
	
		      return errors;
		    },
	
		    __getDerivedValue: function (name) {
		      var options = this['__schema__'].derived[name];
		      if (_.isString(options)) {
		        var key = options;
		        options = {
		          deps: [key],
		          fn: function () {
		            return this.get(key);
		          }
		        };
		      }
		      var deps = options.deps || [];
		      return options.fn.apply(this, _.map(deps, this.get, this));
		    }
	
		  },
		    {
		      ERROR_BLANK: 'model.validation.field.blank',
		      ERROR_WRONG_TYPE: 'model.validation.field.wrong.type',
		      ERROR_NOT_ALLOWED: 'model.validation.field.value.not.allowed',
		      ERROR_INVALID: 'model.validation.field.invalid',
		      ERROR_IARRAY_UNIQUE: 'model.validation.field.array.unique'
		    }
		  );
	
		  return Model;
	
	
	
		}));
	
	
	/***/ },
	/* 22 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_22__;
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(20)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
		  /**
		   * @class Okta.BaseModel
		   * @extends {Okta.Model}
		   * @deprecated Use `{@link Okta.Model}` instead
		   *
		   * ```javascript
		   * var Model = BaseModel.extend({
		   *   defaults: {
		   *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
		   *       return fname + ' ' + lname;
		   *     })
		   *   }
		   * });
		   * var model = new Model({fname: 'Joe', lname: 'Doe'});
		   * model.get('name'); //=> "Joe Doe"
		   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
		   *
		   * model.set('__private__', 'private property');
		   * model.get('__private__'); //=> "private property"
		   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
		   * ```
		   */
	
		  var hasProps = function (model) {
		    var local = _.omit(model.local, _.keys(model._builtInLocalProps));
		    return _.size(model.props) + _.size(local) > 0;
		  };
	
		  var BaseModel = Model.extend({
		    /**
		     * @inheritdoc Okta.Model#flat
		     * @type {Boolean}
		     */
		    flat: false,
	
		    constructor: function () {
		      Model.apply(this, arguments);
		      this.on('sync', this._setSynced);
		    },
	
		    allows: function () {
		      if (hasProps(this)) {
		        return Model.prototype.allows.apply(this, arguments);
		      }
		      else {
		        return true;
		      }
		    },
	
		    // bw compatibility support for old computed properties
		    set: function (key, val) {
		      var attrs;
		      if (typeof key === 'object') {
		        attrs = key;
		      } else {
		        (attrs = {})[key] = val;
		      }
	
		      // computed properties
		      _(attrs).each(function (fn, attr) {
		        if (!fn || !_.isArray(fn.__attributes)) { return; }
		        this.on('change:' + fn.__attributes.join(' change:'), function () {
		          var val = this.get(attr);
		          if (val !== this['__schema__'].computedProperties[attr]) {
		            this['__schema__'].computedProperties[attr] = val;
		            this.trigger('change:' + attr, val);
		          }
		        }, this);
		      }, this);
	
		      return Model.prototype.set.apply(this, arguments);
		    },
	
		    /**
		     * Get the current value of an attribute from the model. For example: `note.get("title")`
		     *
		     * See [Model.get](http://backbonejs.org/#Model-get)
		     * @param {String} attribute
		     * @return {Mixed} The value of the model attribute
		     */
		    get: function () {
		      var value = Model.prototype.get.apply(this, arguments);
		      if (_.isFunction(value)) {
		        return value.apply(this, _.map(value.__attributes || [], this.get, this));
		      }
		      return value;
		    },
	
		    /**
		     * Return a shallow copy of the model's attributes for JSON stringification.
		     * This can be used for persistence, serialization, or for augmentation before being sent to the server.
		     * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
		     *  but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
		     *
		     * ```javascript
		     * var artist = new Model({
		     *   firstName: "Wassily",
		     *   lastName: "Kandinsky"
		     * });
		     *
		     * artist.set({birthday: "December 16, 1866"});
		     * alert(JSON.stringify(artist)); // {"firstName":"Wassily","lastName":"Kandinsky","birthday":"December 16, 1866"}
		     * ```
		     * See [Model.toJSON](http://backbonejs.org/#Model-toJSON)
		     * @param  {Object} options
		     * @return {Object}
		     */
		    toJSON: function (options) {
		      options || (options = {});
		      var res = Model.prototype.toJSON.apply(this, arguments);
	
		      // cleanup computed properties
		      _(res).each(function (value, key) {
		        if (typeof value == 'function') {
		          if (options.verbose) {
		            res[key] = this.get(key);
		          } else {
		            delete res[key];
		          }
		        }
		      }, this);
	
		      // cleanup private properties
		      if (!options.verbose) {
		        _(res).each(function (value, key) {
		          if (/^__\w+__$/.test(key)) {
		            delete res[key];
		          }
		        });
		      }
	
		      return res;
		    },
	
		    sanitizeAttributes: function (attributes) {
		      var attrs = {};
		      _.each(attributes, function (value, key) {
		        if (!_.isFunction(value)) {
		          attrs[key] = value;
		        }
		      });
		      return attrs;
		    },
	
		    reset: function (options) {
		      this.clear(options);
		      this.set(this.sanitizeAttributes(this.defaults), options);
		    },
	
		    clear: function (options) {
		      var attrs = {};
		      _.each(this.sanitizeAttributes(this.attributes), function (value, key) {
		        attrs[key] = void 0;
		      });
		      return this.set(attrs, _.extend({}, options, {unset: true}));
		    },
	
		    /**
		     * @private
		     */
		    _setSynced: function (newModel) {
		      this._syncedData = newModel && _.isFunction(newModel.toJSON) ? newModel.toJSON() : {};
		    },
	
		    /**
		     * @private
		     */
		    _getSynced: function () {
		      return this._syncedData;
		    },
	
		    isSynced: function () {
		      return _.isEqual(this._getSynced(), this.toJSON());
		    }
		  }, {
		    /**
		     * @static
		     *
		     * Example:
		     *
		     * ```javascript
		     * var Model = BaseModel.extend({
		     *   defaults: {
		     *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
		     *       return fname + ' ' + lname;
		     *     })
		     *   }
		     * });
		     * var model = new Model({fname: 'Joe', lname: 'Doe'});
		     * model.get('name'); // Joe Doe
		     * model.toJSON(); // {fname: 'Joe', lname: 'Doe'}
		     * ```
		     *
		     * @param {Array} attributes - an array of the attribute names this method depends on
		     * @param {Function} callback the function that computes the value of the property
		     *
		     * @deprecated Use {@link #derived} instead
		     */
		    ComputedProperty: function () {
		      var args = _.toArray(arguments);
		      var fn = args.pop();
		      fn.__attributes = args.pop();
		      return fn;
		    }
		  });
	
		  return BaseModel;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(25)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Collection) {
		  /**
		  * @class Okta.Collection
		  * @extend Archer.Collection
		  * @inheritDoc Archer.Collection
		  */
		  return Collection.extend({
	
		    /**
		     * Is the end point using the legacy "secureJSON" format
		     * @type {Function|Boolean}
		     */
		    secureJSON: false,
	
		    constructor: function () {
		      if (_.result(this, 'secureJSON')) {
		        this.sync = _.wrap(this.sync, function (sync, method, collection, options) {
		          return sync.call(this, method, collection, _.extend({dataType: 'secureJSON'}, options));
		        });
		      }
		      Collection.apply(this, arguments);
		    }
	
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		  /* global module, exports */
		  else if (typeof require == 'function' && typeof exports == 'object') {
		    module.exports = factory(require('underscore'), require('backbone'));
		  }
		  else {
		    root.Archer || (root.Archer = {});
		    root.Archer.Collection = factory(root._, root.Backbone);
		  }
		}(this, function (_, Backbone) {
		  var STATE = '__STATE__',
		      FETCH_DATA = 'FETCH_DATA',
		      PAGINATION_DATA = 'PAGINATION_DATA',
		      DEFAULT_PARAMS = 'DEFAULT_PARAMS',
		      LINK_BY_HEADER = 'LINK_BY_HEADER',
		      XHR = 'XHR';
	
		  /*
		   * Sets the next page URL on the collection from link headers
		   * See: http://www.rfc-editor.org/rfc/rfc5988.txt
		   *
		   * This method is looking for a link header with `rel="next"`
		   * An set's it as the next page's URL.
		   *
		   * If it doesn't find a next page, and current page is set by a link header
		   * it assumes we are at the last page and deletes the current `next`
		   */
		  function setLinkHeadersPagination(collection, xhr) {
		    try {
		      var links = parseLinkHeader(xhr.getResponseHeader('link'));
		      collection[STATE].set(LINK_BY_HEADER, true);
		      collection.setPagination(links['next'].href);
		    }
		    catch (e) {
		      if (collection[STATE].get(LINK_BY_HEADER)) {
		        collection.setPagination(null);
		      }
		    }
		  }
	
		  function parseQuery(url) {
		    var params = {},
		        rawQueryStr = url && url.split('?')[1],
		        queryString = rawQueryStr && decodeURIComponent(rawQueryStr.split('#')[0]).replace(/\+/g, ' '),
		        props = queryString ? queryString.split('&') : [];
		    for (var i = 0; i < props.length; i++) {
		      var parts = props[i].split('=');
		      params[parts.shift()] = parts.join('=');
		    }
		    return params;
		  }
	
		  // ################################################
		  // # Source: https://gist.github.com/deiu/9335803
		  // ################################################
	
		  // unquote string (utility)
		  function unquote(value) {
		    if (value.charAt(0) == '"' && value.charAt(value.length - 1) == '"') {
		      return value.substring(1, value.length - 1);
		    }
		    return value;
		  }
		  /*
		  parse a Link header
		  Link:<https://example.org/.meta>; rel=meta
		  var r = parseLinkHeader(xhr.getResponseHeader('Link');
		  r['meta']['href'] outputs https://example.org/.meta
		  */
		  function parseLinkHeader(header) {
		    /* eslint max-statements: 0 */
		    var linkexp = /<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g,
		        paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g;
	
		    var matches = header.match(linkexp);
		    var rels = {};
		    for (var i = 0; i < matches.length; i++) {
		      var split = matches[i].split('>');
		      var href = split[0].substring(1);
		      var link = {};
		      link.href = href;
		      var s = split[1].match(paramexp);
		      for (var j = 0; j < s.length; j++) {
		        var paramsplit = s[j].split('=');
		        var name = paramsplit[0];
		        link[name] = unquote(paramsplit[1]);
		      }
	
		      if (link.rel !== undefined) {
		        rels[link.rel] = link;
		      }
		    }
	
		    return rels;
		  }
	
		  // ################################################
		  // # /Source
		  // ################################################
		  //
	
		  /**
		  * @class Archer.Collection
		  * @extend Backbone.Collection
		  *
		  * Archer.Collection is a standard [Backbone.Collection](http://backbonejs.org/#Collection) with pre-set `data`
		  * parameters and built in pagination - works with [http link headers](https://tools.ietf.org/html/rfc5988)
		  * out of the box:
		  *
		  * ```javascript
		  * var Users = Archer.Collection.extend({
		  *   url: '/api/v1/users'
		  *   params: {expand: true}
		  * });
		  * var users = new Users(null, {params: {type: 'new'}}),
		  *     $button = this.$('a.fetch-more');
		  *
		  * $button.click(function () {
		  *   users.fetchMore();
		  * });
		  *
		  * this.listenTo(users, 'sync', function () {
		  *   $button.toggle(users.hasMore());
		  * });
		  *
		  * collection.fetch(); //=> '/api/v1/users?expand=true&type=new'
		  *
		  * ```
		  */
		  return Backbone.Collection.extend({
	
		    /**
		     * Default fetch parametrers
		     * @type {Object}
		     */
		    params: {},
	
		    constructor: function (models, options) {
		      var state = this[STATE] = new Backbone.Model();
		      state.set(DEFAULT_PARAMS, _.defaults(options && options.params || {}, this.params || {}));
		      Backbone.Collection.apply(this, arguments);
		    },
	
		    sync: function (method, collection, options) {
		      var self = this,
		          success = options.success;
		      options.success = function (resp, status, xhr) {
		        // its important to set the pagination data *before* we call the success callback
		        // because we want the pagination data to be ready when the collection triggers the `sync` event
		        setLinkHeadersPagination(self, xhr);
		        success.apply(null, arguments);
		      };
		      return Backbone.Collection.prototype.sync.call(this, method, collection, options);
		    },
	
		    fetch: function (options) {
		      options || (options = {});
		      var state = this[STATE],
		          xhr = state.get(XHR);
	
		      options.data = _.extend({}, state.get(DEFAULT_PARAMS), options.data || {});
		      options.fromFetch = true;
	
		      state.set(FETCH_DATA, options.data);
		      if (xhr && xhr.abort && options.abort !== false) {
		        xhr.abort();
		      }
		      xhr = Backbone.Collection.prototype.fetch.call(this, options);
		      state.set(XHR, xhr);
		      return xhr;
		    },
	
		    /**
		     * Set pagination data to get to the next page
		     *
		     * ```javascript
		     * collection.setPagination({q: 'foo', page: '2'}); //=> {q: 'foo', page: '2'}
		     *
		     * collection.setPagination('/path/to/resource?q=baz&page=4'); //=> {q: 'baz', page: '4'}
		     *
		     * collection.setPagination('/path/to/resource'); //=> {}
		     *
		     * collection.fetch({data: {q: 'foo'}});
		     * collection.setPagination({page: 2}, {fromFetch: true}); //=> {q: 'foo', page: 2}
		     *
		     * any "falsy" value resets pagination
		     * collection.setPagination(); //=> {}
		     * collection.setPagination(null); //=> {}
		     * collection.setPagination(false); //=> {}
		     * collection.setPagination(''); //=> {}
		     * collection.setPagination(0); //=> {}
		     * ```
		     *
		     * @param {Mixed} params
		     * @param {Object} [options]
		     * @param {Boolean} [options.fromFetch] should we include data from the previous fetch call in this object
		     * @protected
		     *
		     */
		    setPagination: function (params, options) {
		      if (_.isString(params) && params) {
		        params = parseQuery(params);
		      }
		      if (!_.isObject(params) || _.isArray(params) || !_.size(params)) {
		        params = null;
		      }
		      else if (options && options.fromFetch) {
		        params = _.extend({}, this.getFetchData(), params);
		      }
		      this[STATE].set(PAGINATION_DATA, params);
		    },
	
		    /**
		     * Returns the `data` parameters applied in th most recent `fetch` call
		     * It will include parameters set by {@link #params} and optios.params passed to the constructor
		     * @return {Object}
		     * @protected
		     */
		    getFetchData: function () {
		      return this[STATE].get(FETCH_DATA) || {};
		    },
	
		    /**
		     * Data object for constructing a request to fetch the next page
		     * @return {Object}
		     * @protected
		     */
		    getPaginationData: function () {
		      return this[STATE].get(PAGINATION_DATA) || {};
		    },
	
		    /**
		     * Does this collection have more data on the server (e.g is there a next "page")
		     * @return {Boolean}
		     */
		    hasMore: function () {
		      return _.size(this.getPaginationData()) > 0;
		    },
	
		    /**
		     * Get the next page from the server
		     * @return {Object} xhr returned by {@link #fetch}
		     */
		    fetchMore: function () {
		      if (!this.hasMore()) {
		        throw new Error('Invalid Request');
		      }
		      return this.fetch({data: this.getPaginationData(), add: true, remove: false, update: true});
		    },
	
		    reset: function (models, options) {
		      options || (options = {});
		      // only reset the pagination when reset is being called explicitly.
		      // this is to avoid link headers pagination being overriden and reset when
		      // fetching the collection using `collection.fetch({reset: true})`
		      if (!options.fromFetch) {
		        this.setPagination(null);
		      }
		      return Backbone.Collection.prototype.reset.apply(this, arguments);
		    },
	
		    // we want "where" to be able to search through derived properties as well
		    where: function (attrs, first) {
		      if (_.isEmpty(attrs)) {
		        return first ? void 0 : [];
		      }
		      return this[first ? 'find' : 'filter'](function (model) {
		        for (var key in attrs) {
		          if (attrs[key] !== model.get(key)) {
		            return false;
		          }
		        }
		        return true;
		      });
		    },
	
		    create: function (model, options) {
		      options || (options = {});
		      if (!_.result(model, 'urlRoot')) {
		        options.url = _.result(this, 'url');
		      }
		      return Backbone.Collection.prototype.create.call(this, model, options);
		    }
	
		  });
	
		}));
	
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(22),
		  __webpack_require__(27),
		  __webpack_require__(28)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone, TemplateUtil, View) {
	
		  // add `broadcast` and `listen` functionality to all views
		  // We use one event emitter per all views
		  // This means we need to be very careful with event names
	
		  var eventBus = _.clone(Backbone.Events);
	
		  var proto = {
	
		    /**
		    * @class Okta.View
		    * @extend Archer.View
		    * @inheritdoc Archer.View
		    */
	
		    constructor: function () {
		      View.apply(this, arguments);
		      this.module && this.$el.attr('data-view', this.module.id);
		    },
	
		    /**
		     * @deprecated Use {@link #removeChildren}
		     */
		    empty: function () {
		      return this.removeChildren();
		    },
	
		    compileTemplate: TemplateUtil.tpl,
	
		    /**
		    * Broadcasts a global event that all views and controllers can subscribe to
		    * for framework use only - prefer using a shared model
		    *
		    * @param {String} eventName A unique identifier for the event
		    * @param {...String} param Parameter to pass with the event (can pass more than one parameter)
		    * @deprecated For internal use only
		    * @private
		    */
		    broadcast: function () {
		      eventBus.trigger.apply(eventBus, arguments);
		      return this;
		    },
	
		    /**
		    * Subscribe to broadcast events
		    * for framework use only - prefer using a shared model
		    *
		    * @param {String} eventName The event identifier to subscribe
		    * @param {Function} fn The callback function to invoke
		    * @deprecated For internal use only
		    * @private
		    */
		    listen: function (name, fn) {
		      this.listenTo(eventBus, name, fn);
		      return this;
		    },
	
		    /**
		    * Shows a notification box
		    *
		    * Examples:
		    *
		    * ```javascript
		    * view.notify('success', 'Group created successfully');
		    * ```
		    *
		    * @param {String} level success / warning / error
		    * @param {String} message The message to display
		    * @param {Object} [options]
		    * @param {Number} [options.width] Set a custom width
		    * @param {String} [options.title] Set a custom title
		    * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?
		    * @param {Boolean} [options.dismissable] Show a dismiss button
		    */
		    notify: function (level, message, options) {
		      this.broadcast('notification', _.defaults({message: message, level: level}, options));
		      return this;
		    },
	
		    /**
		    * Shows a confirmation dialog
		    *
		    * The main difference between this and the native javascript `confirm` method
		    * Is this method is non blocking (note the callback pattern).
		    *
		    * The callback function will run in the context (`this`) of the invoking view.
		    *
		    * Examples:
		    *
		    * ```javascript
		    * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {
		    *   model.destroy();
		    * });
		    *
		    * // title will be auto-set to "Okta"
		    * view.confirm('Are you sure you want to delete the selected group?', function () {
		    *   model.destroy();
		    * });
		    *
		    * view.confirm({
		    *   title: 'Delete Group', //=> Modal title
		    *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle
		    *   content: '<h3 color="red">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal
		    *   save: 'Delete Group', //=> Button label
		    *   ok: _.bind(model.save, model) // Callback function on hitting "ok" button
		    *   cancel: 'Cancel', //=> Button label
		    *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting "cancel" button
		    * });
		    *
		    * ```
		    *
		    * @param {String} [title] The title of the confirmation dialog
		    * @param {String} [message] The message of the confirmation dialog
		    * @param {Function} [okfn] The callback to run when the user hits "OK" (runs in the context of the invoking view)
		    * @param {Function} [cancelfn] The callback to run when the user hits "Cancel"
		    *        (runs in the context of the invoking view)
		    */
		    confirm: function (title, message, okfn, cancelfn) {
		      /* eslint max-statements: [2, 12] */
	
		      var options;
		      if (typeof title == 'object') {
		        options = title;
		      }
		      else {
		        if (arguments.length == 2 && _.isFunction(message)) {
		          options = {
		            title: 'Okta',
		            subtitle: title,
		            ok: message
		          };
		        }
		        else {
		          options = {
		            title: title,
		            subtitle: message,
		            ok: okfn,
		            cancelFn: cancelfn
		          };
		        }
		      }
		      if (_.isFunction(options.ok)) {
		        options.ok = _.bind(options.ok, this);
		      }
		      if (_.isFunction(options.cancelFn)) {
		        options.cancelFn = _.bind(options.cancelFn, this);
		      }
		      this.broadcast('confirmation', options);
		      return this;
		    },
	
		    /**
		    * Shows a alert box
		    *
		    * The main difference between this and the native javascript `alert` method
		    * Is this method is non blocking.
		    *
		    * Examples:
		    *
		    * ```javascript
		    * view.alert('Mission complete');
		    * ```
		    *
		    * @param {String} message The message
		    */
		    alert: function (params) {
		      if (_.isString(params)) {
		        params = {
		          subtitle: params
		        };
		      }
		      this.confirm(_.extend({}, params, {
		        noCancelButton: true
		      }));
		      return this;
		    }
		  };
	
		  return View.extend(proto, {
		    decorate: function (TargetView) {
		      var View = TargetView.extend({});
		      _.defaults(View.prototype, proto);
		      return View;
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Handlebars) {
	
		  /**
		   * @class TemplateUtil
		   * @private
		   */
	
		  return {
	
		    /**
		     * @method
		     * Compiles a Handlebars template
		     */
		    tpl: _.memoize(function (tpl) {
		      /* eslint okta/no-specific-methods: 0 */
		      return Handlebars.compile(tpl);
		    })
	
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		  /* global module, exports */
		  else if (typeof require === 'function' && typeof exports === 'object') {
		    module.exports = factory(require('underscore'), require('backbone'));
		  }
		  else {
		    root.Archer || (root.Archer = {});
		    root.Archer.View = factory(root._, root.Backbone);
		  }
		}(this, function (_, Backbone) {
	
		  var CHILDREN = '__children__',
		      RENDERED = '__rendered__',
		      PARENT = '__parent__',
		      CHILD_DEFINITIONS = '__children_definitions__',
		      ADD_TO_CONTAINER = '__add_to_container__';
	
		  function getIndex(container, view) {
		    for (var i = 0; i < container[CHILDREN].length; i++) {
		      if (view.cid === container[CHILDREN][i].cid) {
		        return i;
		      }
		    }
		  }
	
		  function noop() {}
	
		  function doRender(view) {
		    view[RENDERED] = true;
	
		    var html = view.renderTemplate(view.template);
		    if (html) {
		      view.$el.html(html);
		    }
		    else if (view.length) {
		      view.$el.empty();
		    }
	
		    view.each(function (view) {
		      view[ADD_TO_CONTAINER]();
		    });
		  }
	
		  function subscribeEvents(view) {
		    var isEventPropertyRe = /^(?!(?:delegate|undelegate|_))([a-zA-Z0-9]+)(?:Events)$/;
		    _.each(_.allKeys(view), function (key) {
		      var matchKeys = key.match(isEventPropertyRe);
		      if (!matchKeys) {
		        return;
		      }
		      var bindings = _.result(view, key),
		          entity = view.options[matchKeys[1]] || view[matchKeys[1]];
		      if (!entity || !_.isObject(bindings) || !_.isFunction(entity.trigger)) {
		        return;
		      }
		      _.each(bindings, function (callback, event) {
		        var callbacks = _.isFunction(callback) ? [callback] : _.reduce(callback.split(/\s+/), function (arr, name) {
		          if (_.isFunction(view[name])) {
		            arr.push(view[name]);
		          }
		          return arr;
		        }, []);
		        _.each(callbacks, function (cb) {
		          view.listenTo(entity, event, cb);
		        });
		      });
		    });
		  }
	
		  var View = Backbone.View.extend({
	
		    /**
		    * @class Archer.View
		    * @extend Backbone.View
		    *
		    * A View operates on a string template, an token based template, or a model based template, with a few added hooks.
		    * It provides a collection of child views, when a child view could be a View or another View.
		    * Conceptually, if we were in a file system, the View is a folder, when the concrete child views are files,
		    * and the child Views are sub folders.
		    *
		    * *Technically, when using a View as a container, it could have its own concrete logic,
		    * but conceptually we like to keep it separated so a view is either a concrete view or a collection of child views.*
		    *
		    * ```javascript
		    * var DocumentView = Archer.View.extend({
		    *   template: [
		    *     '<header></header>',
		    *     '<article></article>',
		    *     '<footer></footer>'
		    *   ].join(''),
		    *   children: [[HeaderView, 'header'], [ContentView, 'article'], [FooterView, 'footer']]
		    * });
		    * ```
		    * @constructor
		    *
		    * In addition to the standard backbone options, we added `settings` and `state` as first class options.
		    * it will automatically assign `options` to `this.options` as an instance member.
		    * @param {Object} [options] options hash
		    */
	
		    /**
		     * @property {Object|Function} [entityEvents] an object listing events and callback bind to this.{entity}
		     *
		     * ```javascript
		     * var FooView = View.extend({
		     *   modelEvents: {
		     *     'change:name': 'render'
		     *   }
		     * })
		     * //equivalent to ==>
		     * var FooView = View.extend({
		     *   initialize: function() {
		     *     this.listenTo(this.model, 'change:name', this.render);
		     *   }
		     * });
		     *
		     *
		     * //Multiple callbacks:
		     * var FooView = View.extend({
		     *   modelEvents: {
		     *     'change:name': 'render foo'
		     *   },
		     *   foo: function() {}
		     * });
		     *
		     * //Callbacks As Function:
		     * var FooView = View.extend({
		     *   stateEvents: {
		     *     'change': function() {
		     *   }
		     * });
		     *
		     * //Event Configuration As Function
		     * var FooView = View.extend({
		     *   collectionEvents: function() {
		     *     var events = { 'change:name deleteItem': 'render' };
		     *     events['changeItem'] = 'spin';
		     *     events['addItem'] = function() {};
		     *     return events;
		     *   }
		     * });
		     * ```
		     */
		    constructor: function (options) {
		      /* eslint max-statements: [2, 17] */
		      this.options = options || {};
		      _.extend(this, _.pick(this.options, 'state', 'settings'));
	
		      // init per-instance children collection
		      this[CHILDREN] = [];
		      this[RENDERED] = false;
		      this[PARENT] = null;
		      this[CHILD_DEFINITIONS] = this.children;
	
		      // we want to make sure initialize is triggered *after* we append the views from the `this.views` array
		      var initialize = this.initialize;
		      this.initialize = noop;
	
		      Backbone.View.apply(this, arguments);
	
		      _.each(_.result(this, CHILD_DEFINITIONS), function (childDefinition) {
		        this.add.apply(this, _.isArray(childDefinition) ? childDefinition : [childDefinition]);
		      }, this);
		      delete this[CHILD_DEFINITIONS];
	
		      if (this.autoRender && this.model) {
		        var event = _.isArray(this.autoRender) ? _.map(this.autoRender, function (field) {
		          return 'change:' + field;
		        }).join(' ') : 'change';
		        this.listenTo(this.model, event, function () {
		          this.render();
		        });
		      }
	
		      this.initialize = initialize;
		      this.initialize.apply(this, arguments);
		      subscribeEvents(this);
		    },
	
		    /**
		    * Unregister view from container
		    * Note: this will not remove the view from the dom
		    * and will not call the `remove` method on the view
		    *
		    * @param {Archer.View} view the view to unregister
		    * @private
		    */
		    unregister: function (view) {
	
		      this.stopListening(view);
		      var viewIndex = getIndex(this, view);
		      // viewIndex is undefined when the view is not found (may have been removed)
		      // check if it is undefined to prevent unexpected thing to happen
		      // array.splice(undefined, x) removes the first x element(s) from the array
		      // this protects us against issues when calling `remove` on a child view multiple times
		      if (_.isNumber(viewIndex)) {
		        this[CHILDREN].splice(viewIndex, 1);
		      }
		    },
	
		    /**
		     * Should we auto render the view upon model change. Boolean or array of field names to listen to.
		     * @type {Boolean|Array}
		     * @deprecated Instead, please use modelEvents
		     * modelEvents: {
		     *   change:name: 'render'
		     * }
		     */
		    autoRender: false,
	
		    /**
		    * @type {(String|Function)}
		    * @alias Backbone.View#template
		    *
		    * When the template is an underscore template, the render method will pass the options has to the template
		    * And the associated model, if exists, when it will prefer the model over the options in case of a conflict.
		    * {@link #render View.render}
		    *
		    * Example:
		    *
		    * ```javascript
		    * var View = View.extend({
		    *   template: '<p class="name">{{name}}</p>'
		    * };
		    * ```
		    */
		    template: null,
	
		    /**
		     * A list of child view definitions to be passed to {@link #add this.add()}
		     *
		     * ```javascript
		     * var Container = View.extend({
		     *    template: '<p class="content"></p>',
		     *    children: [
		     *      [ContentView, '.content'],
		     *      [OtherContentView, '.content'],
		     *      OtherView
		     *    ]
		     *  })
		     *
		     * var Container = View.extend({
		     *    template: '<dov class="form-wrap"></div>',
		     *    children: function () {
		     *      return [
		     *        [FormView, '.form-wrap', {options: {model: this.optiosn.otherModel}}]
		     *      ]
		     *    }
		     *  })
		     * ```
		     * Note: these definitions will be added **before** the {@link #constructor initiliaze} method invokes.
		     * @type {Array|Function}
		     */
		    children: [],
	
		    /**
		    * Add a child view to the container.
		    * If the container is already rendered, will also render the view  and append it to the DOM.
		    * Otherwise will render and append once the container is rendered.
		    *
		    * Examples:
		    *
		    * ```javascript
		    * var Container = View.extend({
		    *
		    *   template: [
		    *     '<h1></h1>',
		    *     '<section></section>',
		    *   ].join(''),
		    *
		    *   initalize: function () {
		    *
		    *     this.add(TitleView, 'h1'); // will be added to <h1>
		    *
		    *     this.add(ContentView1, 'section'); // will be added to <section>
		    *
		    *     this.add(ContentView2, 'section', {prepend: true}); // will be add into <section> **before** ContentView1
		    *
		    *     this.add(OtherView, {
		    *       options: {
		    *         model: new Model()
		    *       }
		    *     }); // will be added **after** the <section> element
		    *
		    *     this.add('<p class="name">some html</p>'); //=> "<p class="name">some html</p>"
		    *     this.add('<p class="name">{{name}}</p>'); //=> "<p class="name">John Doe</p>"
		    *     this.add('{{name}}') //=> "<div>John Doe</div>"
		    *     this.add('<span>{{name}}</span> w00t') //=> "<div><span>John Doe</span> w00t</div>"
		    *   }
		    *
		    * });
		    *
		    * var container - new View({name: 'John Doe'});
		    *
		    * ```
		    * *We believe that for the sake of encapsulation, a view should control its own chilren, so we treat this method as
		    * protected and even though technically you can call `view.add` externally we strongly discourage it.*
		    *
		    * @param {(Archer.View|String)} view A class (or an instance which is discouraged) of a View - or an HTML
		    * string/template
		    * @param {String} [selector] selector in the view's template on which the view will be added to
		    * @param {Object} [options]
		    * @param {Boolean} [options.bubble=false] Bubble (proxy) events from this view up the chain
		    * @param {Boolean} [options.prepend=false] Prepend the view instend of appending
		    * @param {String} [options.selector] Selector in the view's template on which the view will be added to
		    * @param {Object} [options.options] Extra options to pass to the child constructor
		    * @protected
		    * @returns {Archer.View} - The instance of itself for the sake of chaining
		    */
		    add: function (view, selector, bubble, prepend, extraOptions) {
		      /* eslint max-statements: [2, 28], complexity: [2, 8] */
	
		      var options = {},
		          args = _.toArray(arguments);
	
		      if (_.isObject(selector)) {
		        options = selector;
		        selector = options.selector;
		        bubble = options.bubble;
		        prepend = options.prepend;
		        extraOptions = options.options;
		      }
		      else if (_.isObject(bubble)) {
		        options = bubble;
		        bubble = options.bubble;
		        prepend = options.prepend;
		        extraOptions = options.options;
		      }
	
		      if (_.isString(view)) {
		        view = (function (template) {
		          return View.extend({
		            constructor: function () {
		              try {
		                var $el = Backbone.$(template);
		                if ($el.length != 1) { throw 'invalid Element'; }
		                this.template = $el.html();
		                this.el = $el.empty()[0];
		              }
		              catch (e) { // not a valid html tag.
		                this.template = template;
		              }
		              View.apply(this, arguments);
		            }
		          });
		        }(view));
		      }
	
		      if (view.prototype && view.prototype instanceof View) {
		        /* eslint new-cap: 0 */
		        var viewOptions = _.omit(_.extend({}, this.options, extraOptions), 'el');
		        args[0] = new view(viewOptions);
		        return this.add.apply(this, args);
		      }
	
		      // prevent dups
		      if (_.isNumber(getIndex(this, view))) {
		        throw new Error('Duplicate child');
		      }
	
		      view[PARENT] = this;
	
		      // make the view responsible for adding itself to the parent:
		      // * register the selector in the closure
		      // * register a reference the parent in the closure
		      view[ADD_TO_CONTAINER] = (function (selector) {
		        return function () {
		          if (selector && view[PARENT].$(selector).length != 1) {
		            throw new Error('Invalid selector: ' + selector);
		          }
		          var $el = selector ? this[PARENT].$(selector) : this[PARENT].$el;
		          this.render();
		          // we need to delegate events in case
		          // the view was added and removed before
		          this.delegateEvents();
	
		          // this[PARENT].at(index).$el.before(this.el);
		          prepend ? $el.prepend(this.el) : $el.append(this.el);
		        };
		      }).call(view, selector);
	
		      // if flag to bubble events is set
		      // proxy all child view events
		      if (bubble) {
		        this.listenTo(view, 'all', function () {
		          this.trigger.apply(this, arguments);
		        });
		      }
	
		      // add to the dom if `render` has been called
		      if (this.rendered()) {
		        view[ADD_TO_CONTAINER]();
		      }
	
		      // add view to child views collection
		      this[CHILDREN].push(view);
	
		      return this;
	
		    },
	
		    /**
		    * Remove all children from container
		    */
		    removeChildren: function () {
		      this.each(function (view) {
		        view.remove();
		      });
		      return this;
		    },
	
		    /**
		    *  Removes a view from the DOM, and calls stopListening to remove any bound events that the view has listenTo'd.
		    *  Also removes all childern of the view if any, and removes itself from its parent view(s)
		    */
		    remove: function () {
		      this.removeChildren();
		      if (this[PARENT]) {
		        this[PARENT].unregister(this);
		      }
		      return Backbone.View.prototype.remove.apply(this, arguments);
		    },
	
		    /**
		     * Compile the template to function you can apply tokens on on render time.
		     * Uses the underscore tempalting engine by default
		     * @protected
		     * @param  {String} template
		     * @return {Function} a compiled template
		     */
		    compileTemplate: function (template) {
		      /* eslint  okta/no-specific-methods: 0*/
		      return _.template(template);
		    },
	
		    /**
		     * Render a template with `this.model` and `this.options` as parameters
		     * preferring the model over the options.
		     *
		     * @param  {(String|Function)} template The template to build
		     * @return {String} An HTML string
		     * @protected
		     */
		    renderTemplate: function (template) {
		      if (_.isString(template)) {
		        template = this.compileTemplate(template);
		      }
		      if (_.isFunction(template)) {
		        return template(this.getTemplateData());
		      }
		    },
	
		    /**
		     * The data hash passed to the compiled tempalte
		     * @return {Object}
		     * @protected
		     */
		    getTemplateData: function () {
		      var modelData = this.model && this.model.toJSON({verbose: true}) || {};
		      var options = _.omit(this.options, ['state', 'settings', 'model', 'collection']);
		      return _.defaults({}, modelData, options);
		    },
	
		    /**
		    * Renders the template to `$el` and append all children in order
		    * {@link #template View.template}
		    */
		    render: function () {
		      this.preRender();
		      doRender(this);
		      this.postRender();
		      return this;
		    },
	
		    /**
		     * Pre render routine. Will be called right *before* the logic in {@link #render} is executed
		     * @method
		     */
		    preRender: noop,
	
		    /**
		     * Post render routine. Will be called right *after* the logic in {@link #render} is executed
		     * @method
		     */
		    postRender: noop,
	
		    /**
		     * Was this instance rendered
		     */
		    rendered: function () {
		      return this[RENDERED];
		    },
	
		    /**
		     * get all direct child views.
		     *
		     * ```javascript
		     * var container = View.extend({
		     *   children: [View1, View2]
		     * }).render();
		     * container.getChildren() //=> [view1, view2];
		     * ```
		     *
		     * @return {Archer.View[]}
		     */
		    getChildren: function () {
		      return this.toArray();
		    },
	
		    /**
		    * Get a child by index
		    * @param {number} index
		    * @returns {Archer.View} The child view
		    */
		    at: function (index) {
		      return this.getChildren()[index];
		    },
	
		    /**
		    * Invokes a method on all children down the tree
		    *
		    * @param {String} method The method to invoke
		    */
		    invoke: function (methodName) {
		      var args = _.toArray(arguments);
		      this.each(function (child) {
		        // if child has children, bubble down the tree
		        if (child.size()) {
		          child.invoke.apply(child, args);
		        }
		        // run the function on the child
		        if (_.isFunction(child[methodName])) {
		          child[methodName].apply(child, args.slice(1));
		        }
		      });
		      return this;
		    }
		  });
	
		  // Code borrowed from Backbone.js source
		  // Underscore methods that we want to implement on the Container.
		  var methods = ['each', 'map', 'reduce', 'reduceRight', 'find', 'filter', 'reject', 'every',
		    'some', 'contains', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without',
		    'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain', 'where', 'findWhere'];
	
		  _.each(methods, function (method) {
		    View.prototype[method] = function () {
		      var args = _.toArray(arguments);
		      args.unshift(_.toArray(this[CHILDREN]));
		      return _[method].apply(_, args);
		    };
		  }, this);
	
		  return View;
	
	
		  /**
		   * @method each
		   * @param {Function} iterator
		   * @param {Object} [context]
		   * See [_.each](http://underscorejs.org/#each)
		   */
		  /**
		   * @method map
		   * @param {Function} iterator
		   * @param {Object} [context]
		   * See [_.map](http://underscorejs.org/#map)
		   */
		  /**
		   * @method reduce
		   * @param {Function} iterator
		   * @param {Mixed} memo
		   * @param {Object} [context]
		   * See [_.reduce](http://underscorejs.org/#reduce)
		   */
		  /**
		   * @method reduceRight
		   * @param {Function} iterator
		   * @param {Mixed} memo
		   * @param {Object} [context]
		   * See [_.reduceRight](http://underscorejs.org/#reduceRight)
		   */
		  /**
		   * @method find
		   * @param {Function} predicate
		   * @param {Object} [context]
		   * See [_.find](http://underscorejs.org/#find)
		   */
		  /**
		   * @method filter
		   * @param {Function} predicate
		   * @param {Object} [context]
		   * See [_.filter](http://underscorejs.org/#filter)
		   */
		  /**
		   * @method reject
		   * @param {Function} predicate
		   * @param {Object} [context]
		   * See [_.reject](http://underscorejs.org/#reject)
		   */
		  /**
		   * @method every
		   * @param {Function} [predicate]
		   * @param {Object} [context]
		   * See [_.every](http://underscorejs.org/#every)
		   */
		  /**
		   * @method some
		   * @param {Function} [predicate]
		   * @param {Object} [context]
		   * See [_.some](http://underscorejs.org/#some)
		   */
		  /**
		   * @method contains
		   * @param {Mixed} value
		   * See [_.contains](http://underscorejs.org/#contains)
		   */
		  /**
		   * @method toArray
		   * See [_.toArray](http://underscorejs.org/#toArray)
		   */
		  /**
		   * @method size
		   * See [_.size](http://underscorejs.org/#size)
		   */
		  /**
		   * @method first
		   * @param {Number} [n]
		   * See [_.first](http://underscorejs.org/#first)
		   */
		  /**
		   * @method initial
		   * @param {Number} [n]
		   * See [_.initial](http://underscorejs.org/#initial)
		   */
		  /**
		   * @method last
		   * @param {Number} [n]
		   * See [_.last](http://underscorejs.org/#last)
		   */
		  /**
		   * @method rest
		   * @param {Number} [index]
		   * See [_.rest](http://underscorejs.org/#rest)
		   */
		  /**
		   * @method without
		   * See [_.without](http://underscorejs.org/#without)
		   */
		  /**
		   * @method indexOf
		   * @param {Mixed} value
		   * @param {Boolean} [isSorted]
		   * See [_.indexOf](http://underscorejs.org/#indexOf)
		   */
		  /**
		   * @method shuffle
		   * See [_.shuffle](http://underscorejs.org/#shuffle)
		   */
		  /**
		   * @method lastIndexOf
		   * @param {Mixed} value
		   * @param {Number} [fromIndex]
		   * See [_.shuffle](http://underscorejs.org/#lastIndexOf)
		   */
		  /**
		   * @method isEmpty
		   * See [_.isEmpty](http://underscorejs.org/#isEmpty)
		   */
		  /**
		   * @method chain
		   * See [_.chain](http://underscorejs.org/#chain)
		   */
		  /**
		   * @method where
		   * @param {Object} properties
		   * See [_.where](http://underscorejs.org/#where)
		   */
		  /**
		   * @method findWhere
		   * @param {Object} properties
		   * See [_.findWhere](http://underscorejs.org/#findWhere)
		   */
	
	
		}));
	
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(26),
		  __webpack_require__(30)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView, ListView) {
		   /**
		   * @class Okta.ListView
		   * @extends Archer.ListView
		   * @inheritdoc Archer.ListView
		   */
		  return BaseView.decorate(ListView);
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		  /* global module, exports */
		  else if (typeof require == 'function' && typeof exports == 'object') {
		    module.exports = factory(require('underscore'), require('./View'));
		  }
		  else {
		    root.Archer || (root.Archer = {});
		    root.Archer.ListView = factory(root._, root.Archer.View);
		  }
		}(this, function (_, View) {
	
		  return View.extend({
	
		    /**
		    * @class Archer.ListView
		    * @extends Archer.View
		    * Archer.ListView is a {@link Archer.View} that operates on a collection and builds a list of "things" of the
		    * same type.
		    *
		    * Automagically adds, removes and sorts upon standard collection events.
		    *
		    * Example:
		    *
		    * ```javascript
		    * var UserList = Archer.ListView.extend({
		    *   tagName: 'ul',
		    *   item: '<li>{{fname}} {{lname}}</li>'
		    * });
		    *
		    * var users = new Archer.Collection([
		    *   {fname: 'John', lname: 'Doe'},
		    *   {fname: 'Jane', lname: 'Doe'}
		    * ]);
		    *
		    * var userList = new UserList({collection: users}).render();
		    * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li></ul>"
		    *
		    * users.push({fname: 'Jim', lname: 'Doe'});
		    * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li><li>Jim Doe</li></ul>"
		    *
		    * users.first().destroy();
		    * userList.el; //=> "<ul><li>Jane Doe</li><li>Jim Doe</li></ul>"
		    * ```
		    *
		    * @constructor
		    * @param {Object} options options hash
		    * @param {Object} options.collection The collection which this view operates on
		    *
		    * Listen to collection events so the ListView will do the right thing when a model is added or the collection
		    * is reset or sorted
		    *
		    */
		    constructor: function () {
		      View.apply(this, arguments);
		      if (!this.collection) {
		        throw new Error('Missing collection');
		      }
		      this.listenTo(this.collection, 'reset sort', this.reset);
		      this.listenTo(this.collection, 'add', this.addItem);
		      this.collection.each(this.addItem, this);
		    },
	
		   /**
		    * The view/template we will use to render each model in the collection.
		    * @type {String|Archer.View}
		    */
		    item: null,
	
		    /**
		     * A selector in the local template where to append each item
		     * @type {String}
		     */
		    itemSelector: null,
	
	
		    /**
		    * Empty the list and re-add everything from the collection.
		    * Usefull for handling `collection.reset()` or for handling the initial load
		    * @protected
		    */
		    reset: function () {
		      this.removeChildren();
		      this.collection.each(this.addItem, this);
		      return this;
		    },
	
		    /**
		    * Add an item view to the list that will represent one model from the collection
		    *
		    * Listen to the model so when it is destoyed or removed from the collection
		    * this item will remove itself from the list
		    *
		    * @param {Backbone.Model} model The model this row operates on
		    * @protected
		    */
		    addItem: function (model) {
		      var view = this.add(this.item, this.itemSelector, {options: {model: model}}).last();
		      view.listenTo(model, 'destroy remove', view.remove);
		      return this;
		    }
	
		  });
	
		}));
	
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-len: [2, 150], max-params: [2, 6] */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(6),
		  __webpack_require__(2),
		  __webpack_require__(22),
		  __webpack_require__(32),
		  __webpack_require__(33),
		  __webpack_require__(15)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, SettingsModel, Notification, ConfirmationDialog) {
	
		  return Backbone.Router.extend({
	
		    listen: Notification.prototype.listen,
	
		    /**
		    * @class Okta.Router
		    * A simple state machine that maps a route to a controller
		    *
		    *  Typically it will:
		    *
		    * - define which routes/modules the application has
		    * - Map a route to a controller
		    *
		    * See:
		    * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),
		    * [Jasmine Spec](https://github.com/okta/okta-core/blob/master/WebContent/js/test/unit/spec/shared/util/BaseRouter_spec.js),
		    * [Backbone.Router](http://backbonejs.org/#Router)
		    *
		    * @constructor
		    *
		    * Creates the application settings object
		    *
		    * @param {Object} options options hash
		    * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
		    *
		    * @extends {Backbone.Router}
		    *
		    */
		    constructor: function (options) {
		      options || (options = {});
		      this.el = options.el;
		      this.settings = new SettingsModel(_.omit(options, 'el'));
	
		      Backbone.Router.apply(this, arguments);
	
		      this.listen('notification', this._notify);
		      this.listen('confirmation', this._confirm);
		    },
	
		    /**
		     * Fires up a confirmation dialog
		     *
		     * @param  {Object} options Options Hash
		     * @param  {String} options.title The title
		     * @param  {String} options.subtitle The explain text
		     * @param  {String} options.save The text for the save button
		     * @param  {Function} options.ok The callback function to run when hitting "OK"
		     * @param  {String} options.cancel The text for the cancel button
		     * @param  {Function} options.cancelFn The callback function to run when hitting "Cancel"
		     * @param  {Boolean} options.noCancelButton Don't render the cancel button (useful for alert dialogs)
		     *
		     * @private
		     *
		     * @return {Okta.View} the dialog view
		     */
		    _confirm: function (options) {
		      options || (options = {});
		      var Dialog = ConfirmationDialog.extend(_.pick(options, 'title', 'subtitle', 'save', 'ok', 'cancel', 'cancelFn', 'noCancelButton', 'content'));
		      // The model is here because itsa part of the BaseForm paradigm.
		      // It will be ignored in the context of a confirmation dialog.
		      var dialog = new Dialog({model: this.settings});
		      dialog.render();
		      return dialog; // test hook
		    },
	
		    /**
		     * Fires up a notification banner
		     *
		     * @param  {Object} options Options Hash
		     * @return {Okta.View} the notification view
		     * @private
		     */
		    _notify: function (options) {
		      var notification = new Notification(options);
		      $('#content').prepend(notification.render().el);
		      return notification; // test hook
		    },
	
		    /**
		     * Renders a Controller
		     * This will initialize new instance of a controller and call render on it
		     *
		     * @param  {Okta.Controller} Controller The controller Class we which to render
		     * @param  {Object} [options] Extra options to the controller constructor
		     */
		    render: function (Controller, options) {
		      if (this.controller) {
		        this.stopListening(this.controller);
		        this.stopListening(this.controller.state);
		        this.controller.remove();
		      }
		      options = _.extend(_.pick(this, 'settings', 'el'), options || {});
		      this.controller = new Controller(options);
		      this.controller.render();
		    },
	
		    /**
		    * Starts the backbone history object
		    *
		    * Waits for the dom to be ready before calling `Backbone.history.start()` (IE issue)
		    *
		    * See: [Backbone History](http://backbonejs.org/#History)
		    */
		    start: function () {
		      var args = arguments;
		      $(function () {
		        Backbone.history.start.apply(Backbone.history, args);
		      });
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
		  /**
		   * @class SettingsModel
		   * @extends {Okta.Model}
		   * @private
		   */
	
		  return Model.extend({
		    local: function () {
		      var settings = (window.okta && window.okta.settings) || {};
		      return {
		        orgId: ['string', false, settings.orgId],
		        orgName: ['string', false, settings.orgName],
		        isPreview: ['boolean', false, settings.isPreview],
		        serverStatus: ['string', false, settings.serverStatus],
		        permissions: ['array', true, settings.permissions || []]
		      };
		    },
	
		    extraProperties: true,
	
		    constructor: function () {
		      this.features = window._features || [];
		      Model.apply(this, arguments);
		    },
	
		    /**
		     * Checks if the user have a feature flag enabled (Based of the org level feature flag)
		     * @param  {String}  feature Fearure name
		     * @return {Boolean}
		     */
		    hasFeature: function (feature) {
		      return _.contains(this.features, feature);
		    },
	
		    /**
		     * Checks if the user have a specific permission (based on data passed from JSP)
		     * @param  {String}  permission Permission name
		     * @return {Boolean}
		     */
		    hasPermission: function (permission) {
		      return _.contains(this.get('permissions'), permission);
		    }
		    
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(2),  __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseView) {
	
		  var defaults = {
		    level: 'success',
		    message: 'Great Success!',
		    hide: true,
		    fade: 400,
		    delay: 3000,
		    width: 0,
		    dismissable: false
		  };
	
		  return BaseView.extend({
	
		    className: 'infobox infobox-confirm infobox-confirm-fixed',
	
		    events: {
		      'click .infobox-dismiss-link': 'fadeOut'
		    },
	
		    template: '\
		      {{#if dismissable}}\
		      <a class="infobox-dismiss-link" title="Dismiss" href="#">\
		        <span class="dismiss-icon"></span>\
		      </a>\
		      {{/if}}\
		      <span class="icon {{level}}-16"></span>\
		      {{#if title}}<h3>{{title}}</h3>{{/if}}\
		      <p>{{message}}</p>\
		    ',
	
		    initialize: function () {
		      this.options = _.defaults({}, this.options, defaults);
		      this.$el.addClass('infobox-' + this.options.level);
		      if (this.options.width) {
		        this.$el.width(this.options.width).css({
		          'margin-left': '0px',
		          'left': Math.round(($(window).width() - this.options.width) / 2)
		        });
		      }
		    },
	
		    getTemplateData: function () {
		      return _.extend(_.pick(this.options, 'level', 'message', 'title'), {
		        dismissable: this.options.hide === false || this.options.dismissable === true
		      });
		    },
	
		    postRender: function () {
		      if (this.options.hide) {
		        _.delay(_.bind(this.fadeOut, this), this.options.delay);
		      }
		    },
	
		    fadeOut: function () {
		      this.$el.fadeOut(this.options.fade, _.bind(this.remove, this));
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-params: [2, 6], max-len: [2, 150] */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(6),
		  __webpack_require__(2),
		  __webpack_require__(26),
		  __webpack_require__(35),
		  __webpack_require__(32),
		  __webpack_require__(31)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseView, StateMachine, SettingsModel, BaseRouter) {
	
		  function clean(obj) {
		    var res = {};
		    _.each(obj, function (value, key) {
		      if (!_.isNull(value)) {
		        res[key] = value;
		      }
		    });
		    return res;
		  }
	
		  return BaseView.extend({
	
		    /**
		    * @class Okta.Controller
		    * A Controller is our application control flow component.
		    *
		    *  Typically it will:
		    *
		    * - Initialize the models, controller and main views
		    * - Listen to events
		    * - Create, read, update and delete models
		    * - Create modal dialogs, confirmation dialogs and alert dialogs
		    * - Control the application flow
		    *
		    * See:
		    * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),
		    * [Jasmine Spec](https://github.com/okta/okta-core/blob/master/WebContent/js/test/unit/spec/shared/util/BaseController_spec.js)
		    *
		    * @constructor
		    *
		    * The constructor is responsible for:
		    *
		    * - Create the application state object
		    * - Assign or creates the application settings object
		    * - Create an instance of the main view with the relevant parameters
		    *
		    * @param {Object} options Options Hash
		    * @param {SettingsModel} [options.settings] Application Settings Model
		    * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
		    *
		    */
		    constructor: function (options) {
		      /* eslint max-statements: [2, 13], complexity: [2, 7]*/
		      options || (options = {});
	
		      var stateData = _.defaults(clean(options.state), this.state || {});
		      this.state = new StateMachine(stateData);
		      delete options.state;
	
		      if (options.settings) {
		        this.settings = options.settings;
		      }
		      else { // allow the controller to live without a router
		        this.settings = new SettingsModel(_.omit(options || {}, 'el'));
		        this.listen('notification', BaseRouter.prototype._notify);
		        this.listen('confirmation', BaseRouter.prototype._confirm);
		      }
	
		      BaseView.call(this, options);
	
		      this.listenTo(this.state, '__invoke__', function () {
		        var args = _.toArray(arguments),
		            method = args.shift();
		        if (_.isFunction(this[method])) {
		          this[method].apply(this, args);
		        }
		      });
	
	
		      if (this.View) {
		        this.add(new this.View(this.toJSON()));
		      }
		    },
	
		    /**
		     * @property {Object} [state={}]
		     * The default values of our application state
		     */
		    state: {},
	
	
		    /**
		     * @property {Okta.View} [View=null]
		     * The main view this controller operate on
		     */
		    View: null,
	
		    /**
		     * Renders the {@link Okta.Controller#View main view} after the DOM is ready
		     * in case the controller is the root component of the page (e.g there's no router)
		     */
		    render: function () {
		      var args =  arguments,
		          self = this;
		      $(function () {
		        BaseView.prototype.render.apply(self, args);
		      });
		      return this;
		    },
	
		    /**
		     * Creates the view constructor options
		     * @param {Object} [options] Extra options
		     * @return {Object} The view constructor options
		     */
		    toJSON: function (options) {
		      return _.extend(_.pick(this, 'state', 'settings', 'collection', 'model'), options || {});
		    },
	
		    /**
		     * Removes the child views, empty the DOM element and stop listening to events
		     */
		    remove: function () {
		      this.removeChildren();
		      this.stopListening();
		      this.$el.empty();
		      return this;
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
		  /**
		   * @class StateMachine
		   * @extends Okta.Model
		   * @private
		   *
		   * A state object that holds the applciation state
		   */
	
		  return Model.extend({
		    extraProperties: true,
		    /**
		     * Invokes a method on the applicable {@link Okta.Controller}
		     *
		     * ```javascript
		     * state.invoke('methodName', 'param1', 'param2')
		     * // Will call
		     * contoller.methodName('param1', 'param2')
		     * ```
		     * @param {String} methodName the name of the controller method to invoke on the controller
		     */
		    invoke: function () {
		      var args = _.toArray(arguments);
		      args.unshift('__invoke__');
		      this.trigger.apply(this, args);
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-params: [2, 14], max-statements: [2, 11] */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(6),
		  __webpack_require__(27),
		  __webpack_require__(7),
		  __webpack_require__(26),
		  __webpack_require__(38),
		  __webpack_require__(64),
		  __webpack_require__(37),
		  __webpack_require__(66),
		  __webpack_require__(69),
		  __webpack_require__(70),
		  __webpack_require__(67),
		  __webpack_require__(71),
		  __webpack_require__(72)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, TemplateUtil, StringUtil, BaseView,
		          InputFactory, InputLabel, InputContainer, InputWrapper,
		          ErrorBanner, ErrorParser, FormUtil, ReadModeBar, Toolbar) {
	
		  var template = '\
		    {{#if hasReadMode}}\
		      <h2 class="o-form-title-bar" data-se="o-form-title-bar">\
		        {{title}}\
		      </h2>\
		    {{/if}}\
		    <div data-se="o-form-content" class="o-form-content {{layout}} clearfix">\
		      {{#unless hasReadMode}}\
		        {{#if title}}\
		          <h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>\
		        {{/if}}\
		      {{/unless}}\
		      {{#if subtitle}}\
		        <p class="okta-form-subtitle o-form-explain" data-se="o-form-explain">{{subtitle}}</p>\
		      {{/if}}\
		      <div class="o-form-error-container" data-se="o-form-error-container"></div>\
		      <div class="o-form-fieldset-container" data-se="o-form-fieldset-container"></div>\
		    </div>\
		  ';
	
		  // polyfill for `pointer-events: none;` in IE < 11
		  // Logic borrowed from https://github.com/kmewhort/pointer_events_polyfill (BSD)
		  var pointerEventsSupported = ($('<div>').css({'pointer-events': 'auto'})[0].style.pointerEvents === 'auto');
		  function pointerEventsPolyfill(e) {
		    if (!pointerEventsSupported && this.$el.hasClass('o-form-saving')) {
		      var $el = $(e.currentTarget);
	
		      $el.css('display', 'none');
		      var underneathElem = document.elementFromPoint(e.clientX, e.clientY);
		      $el.css('display', 'block');
	
		      e.target = underneathElem;
		      $(underneathElem).trigger(e);
	
		      return false;
		    }
		  }
	
	
		  var events = {
		    submit: function (e) {
		      e.preventDefault();
		      this.__save();
		    }
		  };
	
		  _.each(['click', 'dblclick', 'mousedown', 'mouseup'], function (event) {
		    events[event + ' .o-form-input'] = pointerEventsPolyfill;
		  });
	
		  var attributes = function (model) {
		    model || (model = {});
		    var collection = model && model.collection || {};
		    return {
		      method: 'POST',
		      action: _.result(model, 'urlRoot') || _.result(collection, 'url') || window.location.pathname,
		      'data-se': 'o-form'
		    };
		  };
	
		  var convertSavingState = function (rawSavingStateEvent, defaultEvent) {
		    rawSavingStateEvent || (rawSavingStateEvent = '');
		    var savingStateEvent = [];
		    if (_.isString(rawSavingStateEvent)) {
		      savingStateEvent = rawSavingStateEvent.split(' ');
		    }
		    savingStateEvent = _.union(savingStateEvent, defaultEvent);
		    return savingStateEvent.join(' ');
		  };
	
		  /**
		  * @class Okta.Form
		  *
		  * A Form utility framework
		  *
		  * Okta.Form is a form that operates on one flat model
		  * It expose one main factory method, {@link #addInput}, which add inputs to the form,
		  * and each inputs operates on one field in the model, identified by the `name` field.
		  *
		  * See:
		  * [Basic O-Form Tutorial](https://github.com/okta/courage/wiki/Basic-O-Form)
		  *
		  * @extends Okta.View
		  */
	
		  /**
		  * @event save
		  * Fired when the "Save" button is clicked
		  * @param {Okta.BaseModel} model Model used in the form
		  */
		  /**
		  * @event saved
		  * Fired after the model is successfully saved - applies when {@link Okta.Form#autoSave} is set to true
		  * @param {Okta.BaseModel} model Model used in the form
		  */
		  /**
		  * @event resize
		  * Fired when the form layout is likely to be resized
		  * @param {Okta.BaseModel} model Model used in the form
		  */
		  /**
		  * @event cancel
		  * Fired when the "Cancel" button is clicked
		  */
	
		  return BaseView.extend({
	
		    /**
		    * @constructor
		    * @param {Object} options options hash (See {@link Okta.View})
		    * @param {Object} options.model the model this form operates on
		    * @param {Boolean} [options.label-top=false] position label on top of inputs
		    * @param {Boolean} [options.wide=false] Use a wide input layout for all input
		    */
	
		    constructor: function (options) {
		      /* eslint max-statements: 0, complexity: 0 */
		      options || (options = {});
		      this.options = options;
	
		      this.id = _.uniqueId('form');
		      this.tagName = 'form';
	
		      _.defaults(this.events, events);
		      _.defaults(this.attributes, attributes(options.model));
	
		      this.__buttons = [];
		      this.__errorFields = {};
	
		      this.__saveModelState(options.model);
	
		      if (this.step) {
		        if (!this.save) {
		          this.save = (!this.totalSteps || this.step === this.totalSteps) ? 'Finish' : 'Next';
		        }
		        this.className += ' wizard';
		      }
		      this.className += ' o-form';
	
		      this.__toolbar = this.__createToolbar(options);
	
		      BaseView.call(this, options);
	
		      _.each(_.result(this, 'inputs') || [], function (input) {
		        // to ingore extra argumests from `each` iteratee function
		        // http://underscorejs.org/#each
		        this.__addLayoutItem(input);
		      }, this);
	
		      this.add(this.__toolbar, '');
	
		      this.listenTo(this.model, 'change:__edit__', this.__applyMode);
	
		      this.listenTo(this.model, 'invalid error', _.throttle(this.__showErrors, 100, {trailing: false}));
	
		      this.listenTo(this.model, 'form:resize', function () {
		        this.trigger('resize');
		      });
	
		      this.listenTo(this.model, 'form:cancel', _.throttle(this.__cancel, 100, {trailing: false}));
		      this.listenTo(this.model, 'form:previous', _.throttle(this.__previous, 100, {trailing: false}));
	
		      this.__save = _.throttle(this.__save,  200, {trailing: false});
		      this.listenTo(this.model, 'form:save', function () {
		        this.$el.submit().trigger('submit');
		      });
	
		      this.listenTo(this.model, 'sync', function () {
		        if (this.model.get('__edit__')) {
		          this.model.set('__edit__', false, {silent: true});
		        }
		        this.__saveModelState(this.model);
		        this.render();
		      });
	
		      var hasSavingState = this.getAttribute('hasSavingState');
	
		      if (this.getAttribute('autoSave')) {
		        this.listenTo(this, 'save', function (model) {
		          var xhr = model.save();
		          if (xhr && xhr.done) {
		            xhr.done(_.bind(function () {
		              this.trigger('saved', model);
		            }, this));
		          }
		        });
		        if (_.isUndefined(hasSavingState)) {
		          hasSavingState = true;
		        }
		      }
	
		      /**
		       * Attach model event listeners
		       * by default, model's request event starts the form saving state,
		       * error and sync event stops it
		       * you can define customized saving start and stop state, like
		       * customSavingState: {start: 'requestingAdditionalInfo', stop: 'retrievedAdditionalInfo'}
		       * doing this does not override the default events
		       */
		      if (hasSavingState) {
		        var customSavingState = this.getAttribute('customSavingState', {});
		        this.listenTo(
		          this.model,
		          convertSavingState(customSavingState.start || '', ['request']),
		          this.__setSavingState
		        );
		        this.listenTo(
		          this.model,
		          convertSavingState(customSavingState.stop || '', ['error', 'sync']),
		          this.__clearSavingState
		        );
		      }
		    },
	
		    /**
		     * Create the bottom button bar
		     * @param  {Object} options options h
		     * @return {Okta.View} The toolbar
		     * @private
		     */
		    __createToolbar: function (options) {
	
		      var danger = this.getAttribute('danger'),
		          saveBtnClassName = danger === true ? 'button-error' : 'button-primary';
	
		      var toolbar = new Toolbar(_.extend({
		        save: this.save || StringUtil.localize('oform.save'),
		        saveClassName: saveBtnClassName,
		        cancel: this.cancel || StringUtil.localize('oform.cancel'),
		        noCancelButton:  this.noCancelButton || false,
		        hasPrevStep: this.step && this.step > 1
		      }, options || this.options));
	
		      _.each(this.__buttons, function (args) {
		        toolbar.addButton.apply(toolbar, args);
		      });
	
		      return toolbar;
		    },
	
		    className: '',
	
		    attributes: {},
	
		    events: {},
	
		    /**
		    * @property {Array} [inputs] An array of input configurations to render in the form
		    */
		    inputs: [],
	
		    /**
		     * @private
		     */
		    template: null,
	
		    /**
		     * @property {Boolean|Function} [read=false] does the form support read/edit toggle.
		     */
		    read: false,
	
		    /**
		     * @property {Boolean|Function} [readOnly=false] Is the form in readOnly mode.
		     */
		    readOnly: false,
	
		    /**
		     * @property {Boolean|Function} [noButtonBar=false] Should we not render the button bar
		     */
		    noButtonBar: false,
	
		    /**
		     * @property {Boolean|Function} [noCancelButton=false] Should we not render a cancel button
		     */
		    noCancelButton: false,
	
		    /**
		     * @property {String} [save="Save"] The text on the save button
		     */
		    save: null,
	
		    /**
		     * @property {String} [cancel="Cancel"] The text on the cancel button
		     */
		    cancel: null,
	
		    /**
		     * @property {Boolean|Function} [danger=false] To use button-error to stylish the submit button
		     * instead of button-primary.
		     */
		    danger: false,
	
		    /**
		     * @property {String|Function} [layout=""] A layout CSS class to add to the form
		     */
		    layout: '',
	
		    /**
		     * @property {Number} [step] The step this form is in the context of a wizard
		     */
		    step: undefined,
	
		    /**
		     * @property {Number} [totalSteps] The total numbers of steps the wizard this form is a part of has
		     */
		    totalSteps: undefined,
	
		    /**
		     * @property {String|Function} [title] The form's title
		     */
		    title: null,
	
		    /**
		     * @property {String|Function} [subtitle] The form's subtitle
		     */
		    subtitle: null,
	
		    /**
		     * @property {Boolean} [autoSave=false]
		     * auto-save the model when hitting save.
		     * Trigger a `saved` event when done
		     */
		    autoSave: false,
	
		    /**
		     * @property {Boolean|Function} [scrollOnError=true] Scroll to the top of the form on error
		     */
		    scrollOnError: true,
	
		    /**
		     * @property {Boolean|Function} [showErrors=true] Show the error banner upon error
		     */
		    showErrors: true,
	
		    /**
		     * @property {String} [resizeSelector='.o-form-content'] The form's scrollable area
		     */
		    resizeSelector: '.o-form-content',
	
		    /**
		     * @property {Boolean} [hasSavingState=false] Sets whether or not the form shows the saving state when
		     * the model is saved.  Has no effect on setSavingState and clearSavingState as those are manual calls
		     * to trigger/clear the saving state.
		     */
	
		    /**
		     * Get an attribute value from options or instance
		     * Prefer options value over instance value
		     * @param  {String} name Name of the attribute
		     * @param  {Object} defaultValue the default value to return if the attribute is not found
		     * @return {Object} The value
		     */
		    getAttribute: function (name, defaultValue) {
		      var value = _.resultCtx(this.options, name, this);
		      if (_.isUndefined(value)) {
		        value = _.result(this, name);
		      }
		      return !_.isUndefined(value) ? value : defaultValue;
		    },
	
		    /**
		     * Does this form has a "read" mode
		     * @return {Boolean}
		     */
		    hasReadMode: function () {
		      return !!this.getAttribute('read');
		    },
	
		    /**
		     * Is this form in "read only" mode
		     * @return {Boolean}
		     */
		    isReadOnly: function () {
		      return !!this.getAttribute('readOnly');
		    },
	
		    /**
		     * Does this form have a button bar
		     * @return {Boolean}
		     */
		    hasButtonBar: function () {
		      return !(this.getAttribute('noButtonBar') || this.isReadOnly());
		    },
	
		    render: function () {
	
		      this.__readModeBar && this.__readModeBar.remove();
		      if (this.hasReadMode() && !this.isReadOnly()) {
		        this.__readModeBar = this.add(ReadModeBar, '.o-form-title-bar').last();
		      }
	
		      var html = TemplateUtil.tpl(template)({
		        layout: this.getAttribute('layout', ''),
		        title: this.getAttribute('title', '', true),
		        subtitle: this.getAttribute('subtitle', '', true),
		        hasReadMode: this.hasReadMode()
		      });
	
		      this.$el.html(html);
		      delete this.template;
	
		      BaseView.prototype.render.apply(this, arguments);
	
		      this.__applyMode();
	
		      return this;
		    },
	
		    /**
		     * Changes form UI to indicate saving.  Disables all inputs and buttons.  Use this function if you have set
		     * hasSavingState to false on the the form
		     * @private
		     */
		    __setSavingState: function () {
		      this.model.trigger('form:set-saving-state');
		      this.$el.addClass('o-form-saving');
		    },
	
		    /**
		     * Changes form UI back to normal from the saving state.  Use this function if you are have set hasSavingState
		     * to false on the form
		     * @private
		     */
		    __clearSavingState: function () {
		      this.model.trigger('form:clear-saving-state');
		      this.$el.removeClass('o-form-saving');
		    },
	
		    /**
		     * Toggles the visibility of the bottom button bar
		     * @private
		     */
		    __toggleToolbar: function () {
		      this.__toolbar && this.__toolbar.remove();
		      if (this.hasButtonBar() && this._editMode()) {
		        this.__toolbar = this.__createToolbar();
		        this.add(this.__toolbar, '');
		      }
		      this.trigger('resize');
		    },
	
		    /**
		     * Cancels this form
		     * - Reset the model to the previous state
		     * - Clears all errors
		     * - Triggers a `cancel` event
		     * - Sets the model to read mode (if applicable)
		     * @private
		     * @fires cancel
		     */
		    __cancel: function () {
		      /* eslint max-statements: [2, 12] */
		      var edit = this.model.get('__edit__');
		      this.model.clear({silent: true});
		      var data;
		      if (this.model.sanitizeAttributes) {
		        data = this.model.sanitizeAttributes(this.__originalModel);
		      }
		      else {
		        data = _.clone(this.__originalModel);
		      }
		      this.model.set(data, {silent: true});
		      this.trigger('cancel', this.model);
		      this.model.trigger('cache:clear');
		      if (edit) {
		        this.model.set('__edit__', false, {silent: true});
		        this.model.trigger('change:__edit__', this.model, false);
		      }
		      this.clearErrors();
		    },
	
		    /**
		     * A throttled function that saves the form not more than once every 100 ms
		     * Basically all this method does is trigger a `save` event
		     * @fires save
		     * @private
		     */
		    __save: function () {
		      this.clearErrors();
		      if (this.model.isValid()) {
		        this.trigger('save', this.model);
		      }
		    },
	
		    /**
		     * In the context of a wizard, go to previous state
		     * Technically all this method does is trigger a `previous` event
		     * @param  {Event} e
		     * @private
		     */
		    __previous: function () {
		      this.trigger('previous', this.model);
		    },
	
		    /**
		     * Renders the form in the correct mode based on the model.
		     * @private
		     */
		    __applyMode: function () {
		      this.clearErrors();
		      this.__toggleToolbar();
	
		      if (this._editMode()) {
		        this.$el.addClass('o-form-edit-mode');
		        this.$el.removeClass('o-form-read-mode');
		        this.$('.o-form-content').removeClass('rounded-btm-4');
		        this.focus();
		      }
		      else {
		        this.$el.removeClass('o-form-edit-mode');
		        this.$el.addClass('o-form-read-mode');
		        this.$('.o-form-content').addClass('rounded-btm-4');
		      }
		    },
	
		    /**
		     * Is the form in edit mode
		     * @return {Boolean}
		     * @private
		     */
		    _editMode: function () {
		      return this.model.get('__edit__') || !this.hasReadMode();
		    },
	
		    /**
		     * Function can be overridden to alter error summary
		     * @param {Object} responseJSON
		     */
		    parseErrorMessage: _.identity,
	
		    /**
		     * Show an error message based on an XHR error
		     * @param  {Okta.BaseModel} model the model
		     * @param  {jqXHR} xhr The jQuery XmlHttpRequest Object
		     * @private
		     */
		    __showErrors: function (model, resp) {
		      /* eslint max-statements: 0 */
		      if (this.getAttribute('showErrors')) {
	
		        var errorSummary;
	
		        // trigger events for field validation errors
		        var validationErrors = ErrorParser.parseFieldErrors(resp);
		        if (_.size(validationErrors)) {
		          _.each(validationErrors, function (errors, field) {
		            this.model.trigger('form:field-error', this.__errorFields[field] || field, _.map(errors, function (error) {
		              return (/^model\.validation/).test(error) ? StringUtil.localize(error) : error;
		            }));
		          }, this);
		        }
		        else {
		          var responseJSON = ErrorParser.getResponseJSON(resp);
		          responseJSON = this.parseErrorMessage(responseJSON);
		          errorSummary = responseJSON && responseJSON.errorSummary;
		        }
	
		        // show the error message
		        this.$('.o-form-error-container').addClass('o-form-has-errors');
		        this.add(ErrorBanner, '.o-form-error-container', {options: {errorSummary: errorSummary}});
	
		        // slide to and focus on the error message
		        if (this.getAttribute('scrollOnError')) {
		          var $el = $('#' + this.id + ' .o-form-error-container');
		          $el.length && $('html, body').animate({scrollTop: $el.offset().top}, 400);
		        }
	
		        this.model.trigger('form:resize');
	
		      }
		    },
	
		    /**
		     * Clears the error banner
		     * @private
		     */
		    clearErrors: function () {
		      this.$('.o-form-error-container').removeClass('o-form-has-errors');
		      this.model.trigger('form:clear-errors');
		      this.model.trigger('form:resize');
		    },
	
	
		    /**
		     * Toggles between edit and read mode
		     */
		    toggle: function () {
		      this.model.set('__edit__', !this.hasReadMode() || !this.model.get('__edit__'));
		      return this;
		    },
	
		    __addLayoutItem: function (input) {
		      if (InputFactory.supports(input)) {
		        this.addInput(input);
		      }
		      else {
		        this.__addNonInputLayoutItem(input);
		      }
		    },
	
		    __addNonInputLayoutItem: function (item) {
		      var itemOptions = _.omit(item, 'type');
		      switch(item.type) {
		      case 'sectionTitle':
		        this.addSectionTitle(item.title, _.omit(itemOptions, 'title'));
		        break;
		      case 'divider':
		        this.addDivider(itemOptions);
		        break;
		      default:
		        throw new Error('unknown input: ' + item.type);
		      }
		    },
	
		    /**
		     * Adds a view to the buttons tool bar
		     * @param {Object} params parameterized button options
		     * @param {Object} options options to send to {@link Okta.View#add}
		     */
		    addButton: function (params, options) {
		      this.__toolbar && this.__toolbar.addButton(params, options);
		      this.__buttons.push([params, options]);
		    },
	
		    /**
		     * Adds a divider
		     */
		    addDivider: function (options) {
		      this.add('<div class="okta-form-divider form-divider"></div>');
		      FormUtil.applyShowWhen(this.last(), options && options.showWhen);
		      return this;
		    },
	
		    /**
		     * Adds section header
		     * @param {String} title
		     */
		    addSectionTitle: function (title, options) {
		      this.add(TemplateUtil.tpl('<h2 class="o-form-head">{{title}}</h2>')({title: title}));
		      FormUtil.applyShowWhen(this.last(), options && options.showWhen);
		      return this;
		    },
	
		    /**
		     * Add a form input
		     * @param {Object} options Options to describe the input
		     * @param {String} options.type The input type.
		     * The options are: `text`, `textarea`, `select`, `checkbox`, `radio`,
		     * `password`, `number`, `textselect`, `date`, `grouppicker`, `su-orgspicker`
		     * @param {String} options.name The name of the model field this input mutates
		     * @param {String|Function} [options.label]
		     * The input label text.
		     * When passed as a function, will invoke the function (in the context of the {@link InputLabel})
		     * on render time, and use the returned value.
		     * @param {String} [options.sublabel] The input sub label text
		     * @param {String} [options.tooltip] A popover tooltip to be displayed next to the label
		     * @param {String} [options.placeholder] Placeholder text.
		     * @param {String} [options.explain] Explanation text to render below the input
		     * @param {Okta.View} [options.customExplain] A custom view to render below the input (deprecated)
		     * @param {Boolean} [options.disabled=false] Make this input disabled
		     * @param {Boolean} [options.wide=false] Use a wide input layout
		     * @param {Boolean} [options.label-top=false] position label on top of an input
		     * @param {Number} [options.multi] have multiple in-line inputs. useful when `input` is passed as an array of inputs
		     * @param {String} [options.errorField] The API error field here that maps to this input
		     *
		     * @param {Object} [options.options]
		     * In the context of `radio` and `select`, a key/value set of options
		     *
		     * @param {Object} [options.params]
		     * Widget specific parameters. Varies per input.
		     *
		     * @param {BaseInput|Object[]} [options.input]
		     * - A custom input "class" or instance - preferably a **class**, so we can automagically assign the right
		     * parameters when initializing it
		     * - An array of input definition object literals (such as this one)
		     *
		     * @param {Object} [options.showWhen]
		     * Setting to define when to show (or hide) the input
		     * In the following example the field will be visible when `advanced` is set to `true`
		     * and `mode` is set to `"ON"`:
		     *
		     * ```javascript
		     * showWhen: {
		     *   'advanced': true,
		     *   'mode': function (value) {
		     *     return value == 'ON' // this is identical to this.model.get('mode') == 'ON'
		     *   }
		     * }
		     * ```
		     * The input is visible by default
		     *
		     * @param {Object} [options.bindings]
		     * Bind a certain model attribute to a callback function, so the function is being called on render,
		     * and any time this model field changes.
		     * This is similar to `showWhen` but is not limited to toggling.
		     *
		     * ```javascript
		     * bindings: {
		     *   'status mode': function (status, mode) {
		     *      var labelView = this.getLabel();
		     *      if (status == 1) {
		     *        labelView.options.label = 'Something';
		     *      }
		     *      else {
		     *        labelView.options.label = mode;
		     *      }
		     *      labelView.render();
		     *   }
		     * }
		     * ```
		     *
		     * @param {Function} [options.render]
		     * A post-render hook that will run upon render on InputWrapper
		     *
		     * @param {String|Function} className   A className to apply on the {@link InputWrapper}
		     *
		     * @param {Function} [options.initialize]
		     * An `initialize` function to run when initializing the {@link InputWrapper}
		     * Useful for state mutation on start time, and complex state logic
		     */
		    addInput: function (_options) {
	
		      _options = _.clone(_options);
	
		      FormUtil.validateInput(_options, this.model);
	
		      var inputsOptions = FormUtil.generateInputOptions(_options, this, this.__createInput).reverse(),
		          inputs = _.map(inputsOptions, this.__createInput, this);
	
		      _.each(inputsOptions, function (input) {
		        if (input.errorField) {
		          this.__errorFields[input.errorField] = input.name;
		        }
		      }, this);
	
		      var options = {
		        inputId: _.last(inputs).options.inputId,
		        input: inputs,
		        multi: inputsOptions.length > 1 ? inputsOptions.length : undefined
		      };
		      _.extend(options, _.omit(this.options, 'input'), _.omit(_options, 'input'));
	
		      var inputWrapper = this.__createWrapper(options);
		      if (options.label !== false) {
		        inputWrapper.add(this.__createLabel(options));
		      }
		      inputWrapper.add(this._createContainer(options));
		      inputWrapper.type = options.type || options.input.type || 'custom';
	
		      var args = [inputWrapper].concat(_.drop(arguments, 1));
		      return this.add.apply(this, args);
		    },
	
		    /**
		     * @private
		     */
		    __createInput: function (options) {
		      options = _.pick(options, FormUtil.INPUT_OPTIONS);
		      return InputFactory.create(options);
		    },
	
		    /**
		     * @private
		     */
		    __createWrapper: function (options) {
		      options = _.pick(options, FormUtil.WRAPPER_OPTIONS);
		      return new InputWrapper(options);
		    },
	
		    /**
		     * @private
		     */
		    __createLabel: function (options) {
		      options = _.pick(options, FormUtil.LABEL_OPTIONS);
		      return new InputLabel(options);
		    },
	
		    /**
		     * @private
		     */
		    _createContainer: function (options) {
		      options = _.pick(options, FormUtil.CONTAINER_OPTIONS);
		      return new InputContainer(options);
		    },
	
		    /**
		     * Stores the current attributes of the model to a private property
		     * @param  {Okta.BaseModel} model The model
		     * @private
		     */
		    __saveModelState: function (model) {
		      this.__originalModel = model.clone().attributes;
		    },
	
		    /**
		     * @override
		     * @ignore
		     */
		    add: function () {
		      var args = _.toArray(arguments);
		      typeof args[1] === 'undefined' && (args[1] = '> div.o-form-content > .o-form-fieldset-container');
		      return BaseView.prototype.add.apply(this, args);
		    },
	
		    /**
		     * Set the focus on the first input in the form
		     */
		    focus: function () {
		      var first = this.getInputs().first();
		      if (first && first.focus) {
		        first.focus();
		      }
		      return this;
		    },
	
		    /**
		     * Disable all inputs in the form
		     * @deprecated not currently in use
		     */
		    disable: function () {
		      this.invoke('disable');
		      return this;
		    },
	
		    /**
		     * Enable all inputs in the form
		     * @deprecated not currently in use
		     */
		    enable: function () {
		      this.invoke('enable');
		    },
	
		    /**
		     * Set the max-height for o-form-content class container within the form if a height is provided,
		     * otherwise, get its computed inner height
		     * @param {Number} the height in pixel to set for class o-form-content
		     * @return {Number}
		     */
		    contentHeight: function (height) {
		      var content = this.$('.o-form-content');
		      if (_.isNumber(height)) {
		        content.css('max-height', height);
		      } else {
		        return content.height();
		      }
		    },
	
		    /**
		     * Get only the input children
		     * @return {InputWrapper[]} An underscore wrapped array of {@link InputWrapper} instances
		     */
		    getInputs: function () {
		      return _(this.filter(function (view) {
		        return view instanceof InputWrapper;
		      }));
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(27),
		  __webpack_require__(26)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, TemplateUtil, BaseView) {
	
		  /**
		   * @class InputContainer
		   * @private
		   *
		   * TODO: OKTA-80796
		   * Attention: Please change with caution since this is used in other places
		   */
		  return BaseView.extend({
	
		    attributes: function () {
		      return  {
		        'data-se': 'o-form-input-container'
		      };
		    },
	
		    className: function () {
		      var className = 'o-form-input';
		      if (this.options.wide) {
		        className += ' o-form-wide';
		      }
		      if (_.contains([1, 2, 3, 4], this.options.multi)) {
		        className += ' o-form-multi-input-' + this.options.multi;
		        if (_.isArray(this.options.input)) {
		          var inputGroup = _.find(this.options.input, function (input) {
		            return _.contains(['text+select', 'select+text'], input.options.type);
		          });
		          inputGroup && (className += ' o-form-multi-input-group-' + this.options.multi);
		        }
		      }
		      return className;
		    },
	
		    _getNames: function () {
		      /*eslint complexity: 0 */
		      var names = _.isArray(this.options.name) ? this.options.name : [this.options.name];
		      if (this.options.type == 'group') {
		        names.push.apply(names, _.pluck(this.options.input[0].options.params.inputs, 'name'));
		      }
		      else if (_.isArray(this.options.name)) {
		        if (this.options.input && this.options.input.options && this.options.input.options.name) {
		          names.push(this.options.input.options.name);
		        }
		      }
		      else if (this.options.input) {
		        if (_.isArray(this.options.input)) {
		          _.each(this.options.input, function (inputItem) {
		            names.push(inputItem.options.name);
		          });
		        }
		        else {
		          names.push(this.options.input.options.name);
		        }
		      }
		      return _.uniq(_.compact(names));
		    },
	
		    constructor: function () {
		      /* eslint max-statements: [2, 18] */
		      BaseView.apply(this, arguments);
	
		      // we want to append the input *before* the explain text
		      if (this.options.input) {
		        if (_.isArray(this.options.input)) {
		          _.each(this.options.input, function (inputItem) {
		            this.add(inputItem, {prepend: true});
		          }, this);
		        } else {
		          this.add(this.options.input, {prepend: true});
		        }
		      }
	
		      var explain = _.resultCtx(this.options, 'explain', this);
	
		      if (explain) {
		        if (explain instanceof BaseView) {
		          this.add(explain);
		        } else {
		          this.template = '<p class="o-form-explain">{{explain}}</p>';
		        }
		      }
	
		      if (this.options.customExplain) {
		        this.add(this.options.customExplain);
		      }
	
		      var names = this._getNames();
	
		      this.listenTo(this.model, 'form:field-error', function (name, errors) {
		        if (_.contains(names, name)) {
		          this.__setError(errors);
		        }
		      });
	
		      this.listenTo(this.model, 'form:clear-errors change:' + names.join(' change:'), this.__clearError);
	
		      if (_.resultCtx(this.options, 'autoRender', this)) {
		        this.listenTo(this.model, 'change:' + this.options.name, this.render);
		      }
	
		      this.__errorState = false;
	
		    },
	
		    /**
		     * Highlight the input as invalid (validation failed)
		     * Adds an explaination message of the error
		     * @private
		     */
		    __setError: function (errors) {
	
		      this.__errorState = true;
		      this.$el.addClass('o-form-has-errors');
	
		      var tmpl = [
		        '<p class="okta-form-input-error o-form-input-error o-form-explain">',
		        '<span class="icon icon-16 error-16-small"></span>',
		        '{{text}}',
		        '</p>'
		      ].join('');
	
		      var html = TemplateUtil.tpl(tmpl)({text: errors.join(', ')});
		      var $elExplain = this.$('.o-form-explain').not('.o-form-input-error');
	
		      if ($elExplain.length) {
		        $elExplain.before(html);
		      }
		      else {
		        this.$el.append(html);
		      }
	
	
		    },
	
		    /**
		     * Un-highlight the input and remove explaination text
		     * @private
		     */
		    __clearError: function () {
		      if (this.__errorState) {
		        this.$('.o-form-input-error').remove();
		        this.$el.removeClass('o-form-has-errors');
		        this.__errorState = false;
		        _.defer(_.bind(function () {
		          this.model.trigger('form:resize');
		        }, this));
		      }
		    },
	
	
		    focus: function () {
		      this.each(function (view) {
		        if (view.focus) {
		          return view.focus();
		        }
		      });
	
		      return this;
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-params: 0 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(41),
		  __webpack_require__(40),
		  __webpack_require__(44),
		  __webpack_require__(45),
		  __webpack_require__(47),
		  __webpack_require__(49),
		  __webpack_require__(50),
		  __webpack_require__(51),
		  __webpack_require__(52),
		  __webpack_require__(39),
		  __webpack_require__(53),
		  __webpack_require__(54),
		  __webpack_require__(55),
		  __webpack_require__(56),
		  __webpack_require__(57),
		  __webpack_require__(58),
		  __webpack_require__(59),
		  __webpack_require__(60),
		  __webpack_require__(63)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseInput, TextBox, TextArea, Select, Radio, CheckBox, TextSelect, TextPlusSelect, DateBox, NumberBox,
		          GroupPicker, UserPicker, AppPicker, AppInstancePicker, SUOrgsPicker, ZonePicker, ListInput, InputGroup, 
		          SimpleCheckBoxSet) {
	
		  var inputTypesMap = {
		    'select': Select,
		    'textarea': TextArea,
		    'radio': Radio,
		    'checkbox': CheckBox,
		    'text': TextBox,
		    'password': TextBox,
		    'number': NumberBox,
		    'textselect': TextSelect,
		    'text+select': TextPlusSelect,
		    'select+text': TextPlusSelect,
		    'date': DateBox,
		    'grouppicker': GroupPicker,
		    'userpicker': UserPicker,
		    'apppicker': AppPicker,
		    'appinstancepicker': AppInstancePicker,
		    'su-orgspicker': SUOrgsPicker,
		    'zonepicker': ZonePicker,
		    'list': ListInput,
		    'group': InputGroup,
		    'checkboxset': SimpleCheckBoxSet
		  };
	
		  function createInput(Input, options) {
		    if (Input.prototype instanceof BaseInput) {
		      return new Input(_.omit(options, 'input'));
		    }
		    else {
		      return Input;
		    }
		  }
	
		  function create(options) {
		    /* eslint complexity: 0 */
		    options = _.clone(options);
	
		    if (options.input) {
		      return createInput(options.input, options);
		    }
	
		    var Input;
		    if (inputTypesMap[options.type]) {
		      Input = inputTypesMap[options.type];
		    }
		    else {
		      throw new Error('unknown input: ' + options.type);
		    }
		    return createInput(Input, options);
		  }
	
		  function supports(input) {
		    if (input.input || input.type in inputTypesMap) {
		      return true;
		    }
		    return false;
		  }
	
		  return {
		    create: create,
		    supports: supports
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 39 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(27),
		  __webpack_require__(41),
		  __webpack_require__(42),
		  __webpack_require__(43)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (TemplateUtil, BaseInput, Keys) {
	
		  var className = 'okta-form-input-field input-fix';
	
		  return BaseInput.extend({
	
		    template: TemplateUtil.tpl('<input type="{{type}}" placeholder="{{placeholder}}"\
		      name="{{name}}" id="{{inputId}}" value="{{value}}"/>'),
	
		    /**
		    * @Override
		    */
		    events: {
		      'input input': 'update',
		      'change input': 'update',
		      'keydown input': 'update',
		      'keyup input': function (e) {
		        if (Keys.isEnter(e)) {
		          this.model.trigger('form:save');
		        }
		        else if (Keys.isEsc(e)) {
		          this.model.trigger('form:cancel');
		        }
		      }
		    },
	
		    constructor: function () {
		      BaseInput.apply(this, arguments);
		      this.$el.addClass('o-form-control');
		    },
	
		    /**
		    * @Override
		    */
		    editMode: function () {
		      this.$el.addClass(className);
		      BaseInput.prototype.editMode.apply(this, arguments);
		      this.$('input').placeholder();
		    },
	
		    /**
		    * @Override
		    */
		    readMode: function () {
		      BaseInput.prototype.readMode.apply(this, arguments);
		      if (this.options.type == 'password') {
		        this.$el.text('********');
		      }
		      this.$el.removeClass(className);
		    },
	
		    /**
		    * @Override
		    */
		    val: function () {
		      //IE will only read clear text pw if type="password" is explicitly in selector
		      return this.$('input[type="' + this.options.type + '"]').val();
		    },
	
		    /**
		    * @Override
		    */
		    focus: function () {
		      return this.$('input').focus();
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-statements: [2, 12] */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView) {
	
		  /**
		   * @class BaseInput
		   * @private
		   * An abstract object that defines an input for {@link Okta.Form}
		   *
		   * BaseInputs are typically not created directly, but being passed to {@link Okta.Form#addInput}
		   * @extends Okta.View
		   */
	
		  return BaseView.extend({
	
		    tagName: 'span',
	
		    attributes: function () {
		      return {
		        'data-se': 'o-form-input-' + this.getNameString()
		      };
		    },
	
		    /**
		    * default placeholder text when options.placeholder is not defined
		    */
		    defaultPlaceholder: '',
	
		    constructor: function (options) {
		      options = _.defaults(
		        options || {},
		        {
		          inputId: options.id || _.uniqueId('input'),
		          placeholder: this.defaultPlaceholder
		        }
		      );
	
		      delete options.id;
	
		      // decorate the `enable` and `disable` and toggle the `o-form-disabled` class.
		      // so we wont need to worry about this when overriding the methods
		      var self = this;
		      _.each({enable: 'removeClass', disable: 'addClass'}, function (method, action) {
		        self[action] = _.wrap(self[action], function (fn) {
		          fn.apply(self, arguments);
		          self.$el[method]('o-form-disabled');
		        });
		      });
	
		      BaseView.call(this, options);
	
		      if (_.result(options, 'readOnly') !== true && _.result(options, 'read') === true) {
		        this.listenTo(this.model, 'change:__edit__', this.render);
		      }
	
		      if (_.isFunction(this.focus)) {
		        this.focus = _.debounce(_.bind(this.focus, this), 50);
		      }
	
		      this.addModelListeners();
		      this.$el.addClass('o-form-input-name-' + this.getNameString());
		    },
	
		    toModelValue: function () {
		      var value = this.val();
		      if (_.isFunction(this.to)) {
		        value = this.to.call(this, value);
		      }
		      if (_.isFunction(this.options.to)) {
		        value = this.options.to.call(this, value);
		      }
		      return value;
		    },
	
		    /**
		     * updates the model with the input's value
		     */
		    update: function () {
		      this.model.set(this.options.name, this.toModelValue());
		    },
	
		    /**
		     * Is the input in edit mode
		     * @return {Boolean}
		     */
		    isEditMode: function () {
		      var ret = !_.result(this.options, 'readOnly') &&
		        (_.result(this.options, 'read') !== true || this.model.get('__edit__') === true);
		      return ret;
		    },
	
		    /**
		     * Renders the input
		     * @readonly
		     */
		    render: function () {
		      this.preRender();
		      var params = this.options.params;
		      this.options.params = _.resultCtx(this.options, 'params', this);
	
		      if (this.isEditMode()) {
		        this.editMode();
		        if (_.resultCtx(this.options, 'disabled', this)) {
		          this.disable();
		        }
		      }
		      else {
		        this.readMode();
		      }
	
		      this.options.params = params;
		      this.postRender();
	
		      return this;
		    },
	
		    /**
		    * Add model event listeners
		    */
		    addModelListeners: function () {
		      this.listenTo(this.model, 'form:field-error', function (name) {
		        if (this.options.name === name) {
		          this.__markError();
		        }
		      });
		      this.listenTo(this.model, 'form:clear-errors change:' + this.options.name, this.__clearError);
		    },
	
		    /**
		    * The value of the input
		    * @return {Mixed}
		    */
		    val: function () {
		      throw new Error('val() is an abstract method');
		    },
	
		    /**
		    * Set focus on the input
		    */
		    focus: function () {
		      throw new Error('focus() is an abstract method');
		    },
	
		    /**
		    * Default value in read mode
		    * When model has no value for the field
		    */
		    defaultValue: function () {
		      return '';
		    },
	
		    /**
		    * Renders the input in edit mode
		    */
		    editMode: function () {
		      var options = _.extend({}, this.options, {
		        value: this.getModelValue()
		      });
		      this.$el.html(this.template(options));
		      this.options.multi && this.$el.removeClass('margin-r');
		      return this;
		    },
	
		    /**
		    * Renders the readable value of the input in read mode
		    */
		    readMode: function () {
		      this.$el.text(this.getReadModeString());
		      this.$el.removeClass('error-field');
		      this.options.multi && this.$el.addClass('margin-r');
		      return this;
		    },
	
		    getReadModeString: function () {
		      var readModeStr = _.resultCtx(this.options, 'readModeString', this);
		      if (readModeStr) {
		        return readModeStr;
		      }
		      return this.toStringValue();
		    },
	
		    /**
		     * The model value off the field associated with the input
		     * @return {Mixed}
		     */
		    getModelValue: function () {
		      var value = this.model.get(this.options.name);
	
		      if (_.isFunction(this.from)) {
		        value = this.from.call(this, value);
		      }
		      if (_.isFunction(this.options.from)) {
		        value = this.options.from.call(this, value);
		      }
		      return value;
		    },
	
		    /*
		    * convenience method to get the textual value from the model
		    * will return the textual label rather than value in case of select/radio
		    * @return {String}
		    */
		    toStringValue: function () {
		      var value = this.getModelValue();
		      if (this.options.options) { // dropdown or radio
		        value = this.options.options[value];
		      }
		      return value || this.defaultValue();
		    },
	
		    /**
		     * Disable the input
		     */
		    disable: function () {
		      this.$(':input').prop('disabled', true);
		    },
	
		    /**
		     * Enable the input
		     */
		    enable: function () {
		      this.$(':input').prop('disabled', false);
		    },
	
		    /**
		     * Change the type of the input field. (e.g., text <--> password)
		     * @param type
		     */
		    changeType: function (type) {
		      this.$(':input').prop('type', type);
		      // Update the options so that it keeps the uptodate state
		      this.options.type = type;
		    },
	
		    getNameString: function () {
		      if (_.isArray(this.options.name)) {
		        return this.options.name.join('-');
		      }
		      return this.options.name;
		    },
	
		    __markError: function () {
		      this.$el.addClass('o-form-has-errors');
		    },
	
		    __clearError: function () {
		      this.$el.removeClass('o-form-has-errors');
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		!(module.exports = {
		  UP: 38,
		  DOWN: 40,
		  DEL: 46,
		  TAB: 9,
		  RETURN: 13,
		  ENTER: 13,
		  ESC: 27,
		  COMMA: 188,
		  PAGEUP: 33,
		  PAGEDOWN: 34,
		  SPACE: 32,
		  BACKSPACE: 8,
		  __isKey: function (e, key) {
		    return (e.which || e.keyCode) == this[key];
		  },
		  isEnter: function (e) {
		    return this.__isKey(e, 'ENTER');
		  },
		  isEsc: function (e) {
		    return this.__isKey(e, 'ESC');
		  },
		  isSpaceBar: function (e) {
		    return this.__isKey(e, 'SPACE');
		  }
		});
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		(function() {
		var jQuery = __webpack_require__(6);
	
		/*! http://mths.be/placeholder v2.0.7 by @mathias */
		;(function(window, document, $) {
	
			var isInputSupported = 'placeholder' in document.createElement('input');
			var isTextareaSupported = 'placeholder' in document.createElement('textarea');
			var prototype = $.fn;
			var valHooks = $.valHooks;
			var propHooks = $.propHooks;
			var hooks;
			var placeholder;
	
			if (isInputSupported && isTextareaSupported) {
	
				placeholder = prototype.placeholder = function() {
					return this;
				};
	
				placeholder.input = placeholder.textarea = true;
	
			} else {
	
				placeholder = prototype.placeholder = function() {
					var $this = this;
					$this
						.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
						.not('.placeholder')
						.bind({
							'focus.placeholder': clearPlaceholder,
							'blur.placeholder': setPlaceholder
						})
						.data('placeholder-enabled', true)
						.trigger('blur.placeholder');
					return $this;
				};
	
				placeholder.input = isInputSupported;
				placeholder.textarea = isTextareaSupported;
	
				hooks = {
					'get': function(element) {
						var $element = $(element);
	
						var $passwordInput = $element.data('placeholder-password');
						if ($passwordInput) {
							return $passwordInput[0].value;
						}
	
						return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
					},
					'set': function(element, value) {
						var $element = $(element);
	
						var $passwordInput = $element.data('placeholder-password');
						if ($passwordInput) {
							return $passwordInput[0].value = value;
						}
	
						if (!$element.data('placeholder-enabled')) {
							return element.value = value;
						}
						if (value == '') {
							element.value = value;
							// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
							if (element != safeActiveElement()) {
								// We can't use `triggerHandler` here because of dummy text/password inputs :(
								setPlaceholder.call(element);
							}
						} else if ($element.hasClass('placeholder')) {
							clearPlaceholder.call(element, true, value) || (element.value = value);
						} else {
							element.value = value;
						}
						// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
						return $element;
					}
				};
	
				if (!isInputSupported) {
					valHooks.input = hooks;
					propHooks.value = hooks;
				}
				if (!isTextareaSupported) {
					valHooks.textarea = hooks;
					propHooks.value = hooks;
				}
	
				$(function() {
					// Look for forms
					$(document).delegate('form', 'submit.placeholder', function() {
						// Clear the placeholder values so they don't get submitted
						var $inputs = $('.placeholder', this).each(clearPlaceholder);
						setTimeout(function() {
							$inputs.each(setPlaceholder);
						}, 10);
					});
				});
	
				// Clear placeholder values upon page reload
				$(window).bind('beforeunload.placeholder', function() {
					$('.placeholder').each(function() {
						this.value = '';
					});
				});
	
			}
	
			function args(elem) {
				// Return an object of element attributes
				var newAttrs = {};
				var rinlinejQuery = /^jQuery\d+$/;
				$.each(elem.attributes, function(i, attr) {
					if (attr.specified && !rinlinejQuery.test(attr.name)) {
						newAttrs[attr.name] = attr.value;
					}
				});
				return newAttrs;
			}
	
			function clearPlaceholder(event, value) {
				var input = this;
				var $input = $(input);
				if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
					if ($input.data('placeholder-password')) {
						$input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
						// If `clearPlaceholder` was called from `$.valHooks.input.set`
						if (event === true) {
							return $input[0].value = value;
						}
						$input.focus();
					} else {
						input.value = '';
						$input.removeClass('placeholder');
						input == safeActiveElement() && input.select();
					}
				}
			}
	
			function setPlaceholder() {
				var $replacement;
				var input = this;
				var $input = $(input);
				var id = this.id;
				if (input.value == '') {
					if (input.type == 'password') {
						if (!$input.data('placeholder-textinput')) {
							try {
								$replacement = $input.clone().attr({ 'type': 'text' });
							} catch(e) {
								$replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
							}
							$replacement
								.removeAttr('name')
								.data({
									'placeholder-password': $input,
									'placeholder-id': id
								})
								.bind('focus.placeholder', clearPlaceholder);
							$input
								.data({
									'placeholder-textinput': $replacement,
									'placeholder-id': id
								})
								.before($replacement);
						}
						$input = $input.removeAttr('id').hide().prev().attr('id', id).show();
						// Note: `$input[0] != input` now!
					}
					$input.addClass('placeholder');
					$input[0].value = $input.attr('placeholder');
				} else {
					$input.removeClass('placeholder');
				}
			}
	
			function safeActiveElement() {
				// Avoid IE9 `document.activeElement` of death
				// https://github.com/mathiasbynens/jquery-placeholder/pull/99
				try {
					return document.activeElement;
				} catch (err) {}
			}
	
		}(this, document, jQuery));
	
		}.call(window));
	
	/***/ },
	/* 44 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(6),
		  __webpack_require__(2),
		  __webpack_require__(42),
		  __webpack_require__(27),
		  __webpack_require__(41),
		  __webpack_require__(46)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Keys, TemplateUtil, BaseInput) {
	
		  var template = TemplateUtil.tpl('<select id="{{inputId}}" name="{{name}}"></select>');
		  var option = TemplateUtil.tpl('<option value="{{key}}">{{value}}</option>');
	
		  // Chosen has known problems when it's at the bottom of a container that has
		  // overflow:hidden set. Because it attaches to the parent container, its
		  // dropdown will be cut off in the UI. Any modal with a chosen select element
		  // at the bottom will manifest this behavior.
		  //
		  // The fix (aside from replacing Chosen) is to change Chosen's behavior -
		  // use the existing styles, but attach it to 'body' and position it correctly
		  // so that it is not affected by a parent overflow.
		  //
		  // More details can be found in OKTA-46489, OKTA-83570
		  var CHOSEN_WINDOW_MARGIN = 20;
		  var CHOSEN_MAX_HEIGHT = 240;
		  var CHOSEN_Z_INDEX = 50000;
	
		  function defer(fn) {
		    if (this.params.autoWidth) {
		      return fn.call(this);
		    }
		    else {
		      return _.defer(_.bind(fn, this));
		    }
		  }
	
		  function findSelectWidth(self) {
		    self.$select.hide();
		    var select = $(self.$select[0]).hide();
		    $('body').append(select);
		    var width = self.params.width = (select.width() * 1.2) + 'px';
		    self.$el.append(select.show());
		    return width;
		  }
	
		  function recalculateChosen($chosen, $results, $clone) {
		    var offset = $clone.offset();
		    $chosen.css({
		      left: offset.left,
		      top: offset.top
		    });
		    // Update the max-height to fit within the constraints of the window. This
		    // is especially important for modals because page scrolling is disabled.
		    var $win = $(window),
		        rHeight = $results.outerHeight(),
		        rBottom = rHeight + $results.offset().top - $win.scrollTop(),
		        wHeight = $win.height() - CHOSEN_WINDOW_MARGIN,
		        maxHeight = Math.min(rHeight + wHeight - rBottom, CHOSEN_MAX_HEIGHT);
		    $results.css('max-height', maxHeight);
		  }
	
		  function fixChosenModal($select) {
		    var $chosen = $select.next('.chzn-container'),
		        $clone = $chosen.clone(),
		        $results = $chosen.find('.chzn-results');
	
		    // Use a hidden clone to maintain layout and calculate offset. This is
		    // necessary for more complex layouts (like adding a group rule) where
		    // the chosen element is floated.
		    $clone.css('visibility', 'hidden');
		    $clone.removeAttr('id');
		    $clone.find('li').removeAttr('id');
	
		    // Save the original styles - we'll revert to them when the select closes
		    var baseStyles = {
		      'left': $chosen.css('left'),
		      'top': $chosen.css('top'),
		      'position': $chosen.css('position'),
		      'float': $chosen.css('float'),
		      'z-index': $chosen.css('z-index')
		    };
		    $results.hide();
	
		    // Handler for any resize events that happen when the results list is open
		    var resizeHandler = _.debounce(function () {
		      recalculateChosen($chosen, $results, $clone);
		    }, 10);
	
		    // When the dropdown opens, attach it to body, with the correct absolute
		    // position coordinates
		    $select.on('liszt:showing_dropdown', function () {
		      $chosen.width($chosen.width());
		      $select.after($clone);
		      $chosen.css({
		        'position': 'absolute',
		        'float': 'none',
		        'z-index': CHOSEN_Z_INDEX
		      });
		      $('body').append($chosen);
		      $results.show();
		      recalculateChosen($chosen, $results, $clone);
		      // Capture scroll events:
		      // - for forms that use fixed positioning (like editing attributes in
		      //   Profile Editor) - window scroll
		      // - for forms that are too long for the modal - o-form-content scroll
		      $select.parents().scroll(resizeHandler);
		      $(window).on('resize scroll', resizeHandler);
		    });
	
		    // When the dropdown closes or the element is removed, revert to the
		    // original styles and reattach it to its original placement in the dom.
		    $select.on('liszt:hiding_dropdown remove', function () {
		      $select.parents().off('scroll', resizeHandler);
		      $(window).off('resize scroll', resizeHandler);
		      $chosen.css(baseStyles);
		      $results.hide();
		      $results.css('max-height', CHOSEN_MAX_HEIGHT);
		      $clone.remove();
		      $select.after($chosen);
		    });
		  }
	
		  return BaseInput.extend({
	
		    className: 'o-form-select',
	
		    /**
		    * @Override
		    */
		    events: {
		      'change select': 'update',
		      'keyup .chzn-search > :text': function (e) {
		        if (Keys.isEsc(e)) {
		          this.$('.chzn-search > :text').val('');
		          e.stopPropagation();
		        }
		      }
		    },
	
		    constructor: function () {
		      BaseInput.apply(this, arguments);
		      this.params = this.options.params || {};
		    },
	
		    /**
		    * @Override
		    */
		    editMode: function () {
		      /* eslint max-statements: [2, 13] */
	
		      this.$el.html(template(this.options));
		      this.$select = this.$('select');
	
	
		      var options = this.getOptions();
		      _.each(options, function (value, key) {
		        this.$select.append(option({key: key, value: value}));
		      }, this);
	
		      // Fix a regression in jQuery 1.x on Firefox
		      // jQuery.val(value) prepends an empty option to the dropdown
		      // if value doesnt exist in the dropdown.
		      // http://bugs.jquery.com/ticket/13514
		      var value = this.getModelValue();
		      if (value) {
		        this.$select.val(value);
		      }
		      else {
		        this.$('option:first-child').prop('selected', true);
		      }
		      this.$el.addClass('o-form-control');
	
		      if (this.params.chosen !== false) {
		        this.__applyChosen();
		      }
		      return this;
		    },
	
		    __applyChosen: function () {
		      var width = this.options.wide ? '100%' : this.params.width || '62%';
		      if (this.params.autoWidth) {
		        width = findSelectWidth(this);
		      }
	
		      defer.call(this, function () {
		        var searchThreshold;
		        if (this.params && this.params.searchThreshold) {
		          searchThreshold = _.result(this.params, 'searchThreshold');
		        } else {
		          searchThreshold = 10;
		        }
		        if (!_.result(this.options, 'autoRender')) {
		          this.update();
		        }
		        this.$select.chosen({
		          'width': width,
		          'disable_search_threshold': searchThreshold,
		          'placeholder_text': this.options['placeholder']
		        });
		        fixChosenModal(this.$select);
	
		        if (this.params.autoWidth) { // fix a chosen css bug
		          this.$el.width(0);
		        }
	
		        this.model.trigger('form:resize');
		      });
		    },
	
	
		    /**
		    * @Override
		    */
		    val: function () {
		      return this.$select && this.$select.val();
		    },
	
		    /**
		    * @Override
		    */
		    focus: function () {
		      if (this.$select) {
		        return this.$select.focus();
		      }
		    },
	
		    /**
		     * @Override
		     */
		    toStringValue: function () {
		      var selectedOption = this.getModelValue(),
		          displayString = selectedOption,
		          options = this.getOptions();
		      if (!_.isEmpty(options)) {
		        displayString = options[selectedOption];
		      }
		      if (_.isUndefined(displayString)) {
		        displayString = this.defaultValue();
		      }
		      return displayString || '';
		    },
	
		    /**
		     * Convert options to an object
		     * support input options that is a
		     * 1. a static object such as {key1: val1, key2: val2...}
		     * 2. a function to be called to return a static object
		     * will return an object with key-value pairs or with empty content
		     * @return {Object} The value
		     */
		    getOptions: function () {
		      var options = this.options.options;
	
		      if (_.isFunction(options)) {
		        options = options.call(this);
		      }
	
		      return _.isObject(options) ? options : {};
		    },
	
		    remove: function () {
		      if (this.$select) {
		        this.$select.trigger('remove');
		      }
		      return BaseInput.prototype.remove.apply(this, arguments);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Chosen, a Select Box Enhancer for jQuery and Prototype
		// by Patrick Filler for Harvest, http://getharvest.com
		//
		// Version 0.11.1
		// Full source at https://github.com/harvesthq/chosen
		// Copyright (c) 2011 Harvest http://getharvest.com
	
		// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
		// This file is generated by `grunt build`, do not edit it by hand.
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
		  (function() {
		    var SelectParser;
	
		    SelectParser = (function() {
		      function SelectParser() {
		        this.options_index = 0;
		        this.parsed = [];
		      }
	
		      SelectParser.prototype.add_node = function(child) {
		        if (child.nodeName.toUpperCase() === "OPTGROUP") {
		          return this.add_group(child);
		        } else {
		          return this.add_option(child);
		        }
		      };
	
		      SelectParser.prototype.add_group = function(group) {
		        var group_position, option, _i, _len, _ref, _results;
	
		        group_position = this.parsed.length;
		        this.parsed.push({
		          array_index: group_position,
		          group: true,
		          label: group.label,
		          children: 0,
		          disabled: group.disabled
		        });
		        _ref = group.childNodes;
		        _results = [];
		        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
		          option = _ref[_i];
		          _results.push(this.add_option(option, group_position, group.disabled));
		        }
		        return _results;
		      };
	
		      SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
		        if (option.nodeName.toUpperCase() === "OPTION") {
		          if (option.text !== "") {
		            if (group_position != null) {
		              this.parsed[group_position].children += 1;
		            }
		            this.parsed.push({
		              array_index: this.parsed.length,
		              options_index: this.options_index,
		              value: option.value,
		              text: option.text,
		              html: option.innerHTML,
		              selected: option.selected,
		              disabled: group_disabled === true ? group_disabled : option.disabled,
		              group_array_index: group_position,
		              classes: option.className,
		              style: option.style.cssText
		            });
		          } else {
		            this.parsed.push({
		              array_index: this.parsed.length,
		              options_index: this.options_index,
		              empty: true
		            });
		          }
		          return this.options_index += 1;
		        }
		      };
	
		      return SelectParser;
	
		    })();
	
		    SelectParser.select_to_array = function(select) {
		      var child, parser, _i, _len, _ref;
	
		      parser = new SelectParser();
		      _ref = select.childNodes;
		      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
		        child = _ref[_i];
		        parser.add_node(child);
		      }
		      return parser.parsed;
		    };
	
		    this.SelectParser = SelectParser;
	
		  }).call(this);
	
		  (function() {
		    var AbstractChosen, root;
	
		    root = this;
	
		    AbstractChosen = (function() {
		      function AbstractChosen(form_field, options) {
		        this.form_field = form_field;
		        this.options = options != null ? options : {};
		        if (!AbstractChosen.browser_is_supported()) {
		          return;
		        }
		        this.is_multiple = this.form_field.multiple;
		        this.set_default_text();
		        this.set_default_values();
		        this.setup();
		        this.set_up_html();
		        this.register_observers();
		        this.finish_setup();
		      }
	
		      AbstractChosen.prototype.set_default_values = function() {
		        var _this = this;
	
		        this.click_test_action = function(evt) {
		          return _this.test_active_click(evt);
		        };
		        this.activate_action = function(evt) {
		          return _this.activate_field(evt);
		        };
		        this.active_field = false;
		        this.mouse_on_container = false;
		        this.results_showing = false;
		        this.result_highlighted = null;
		        this.result_single_selected = null;
		        this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
		        this.disable_search_threshold = this.options.disable_search_threshold || 0;
		        this.disable_search = this.options.disable_search || false;
		        this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
		        this.search_contains = this.options.search_contains || false;
		        this.single_backstroke_delete = this.options.single_backstroke_delete || false;
		        this.max_selected_options = this.options.max_selected_options || Infinity;
		        return this.inherit_select_classes = this.options.inherit_select_classes || false;
		      };
	
		      AbstractChosen.prototype.set_default_text = function() {
		        if (this.form_field.getAttribute("data-placeholder")) {
		          this.default_text = this.form_field.getAttribute("data-placeholder");
		        } else if (this.is_multiple) {
		          this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
		        } else {
		          this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
		        }
		        return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
		      };
	
		      AbstractChosen.prototype.mouse_enter = function() {
		        return this.mouse_on_container = true;
		      };
	
		      AbstractChosen.prototype.mouse_leave = function() {
		        return this.mouse_on_container = false;
		      };
	
		      AbstractChosen.prototype.input_focus = function(evt) {
		        var _this = this;
	
		        if (this.is_multiple) {
		          if (!this.active_field) {
		            return setTimeout((function() {
		              return _this.container_mousedown();
		            }), 50);
		          }
		        } else {
		          if (!this.active_field) {
		            return this.activate_field();
		          }
		        }
		      };
	
		      AbstractChosen.prototype.input_blur = function(evt) {
		        var _this = this;
	
		        if (!this.mouse_on_container) {
		          this.active_field = false;
		          return setTimeout((function() {
		            return _this.blur_test();
		          }), 100);
		        }
		      };
	
		      AbstractChosen.prototype.result_add_option = function(option) {
		        var classes, style;
	
		        option.dom_id = this.container_id + "_o_" + option.array_index;
		        classes = [];
		        if (!option.disabled && !(option.selected && this.is_multiple)) {
		          classes.push("active-result");
		        }
		        if (option.disabled && !(option.selected && this.is_multiple)) {
		          classes.push("disabled-result");
		        }
		        if (option.selected) {
		          classes.push("result-selected");
		        }
		        if (option.group_array_index != null) {
		          classes.push("group-option");
		        }
		        if (option.classes !== "") {
		          classes.push(option.classes);
		        }
		        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
		        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
		      };
	
		      AbstractChosen.prototype.results_update_field = function() {
		        this.set_default_text();
		        if (!this.is_multiple) {
		          this.results_reset_cleanup();
		        }
		        this.result_clear_highlight();
		        this.result_single_selected = null;
		        return this.results_build();
		      };
	
		      AbstractChosen.prototype.results_toggle = function() {
		        if (this.results_showing) {
		          return this.results_hide();
		        } else {
		          return this.results_show();
		        }
		      };
	
		      AbstractChosen.prototype.results_search = function(evt) {
		        if (this.results_showing) {
		          return this.winnow_results();
		        } else {
		          return this.results_show();
		        }
		      };
	
		      AbstractChosen.prototype.choices_count = function() {
		        var option, _i, _len, _ref;
	
		        if (this.selected_option_count != null) {
		          return this.selected_option_count;
		        }
		        this.selected_option_count = 0;
		        _ref = this.form_field.options;
		        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
		          option = _ref[_i];
		          if (option.selected) {
		            this.selected_option_count += 1;
		          }
		        }
		        return this.selected_option_count;
		      };
	
		      AbstractChosen.prototype.choices_click = function(evt) {
		        evt.preventDefault();
		        if (!(this.results_showing || this.is_disabled)) {
		          return this.results_show();
		        }
		      };
	
		      AbstractChosen.prototype.keyup_checker = function(evt) {
		        var stroke, _ref;
	
		        stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
		        this.search_field_scale();
		        switch (stroke) {
		          case 8:
		            if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
		              return this.keydown_backstroke();
		            } else if (!this.pending_backstroke) {
		              this.result_clear_highlight();
		              return this.results_search();
		            }
		            break;
		          case 13:
		            evt.preventDefault();
		            if (this.results_showing) {
		              return this.result_select(evt);
		            }
		            break;
		          case 27:
		            if (this.results_showing) {
		              this.results_hide();
		            }
		            return true;
		          case 9:
		          case 38:
		          case 40:
		          case 16:
		          case 91:
		          case 17:
		            break;
		          default:
		            return this.results_search();
		        }
		      };
	
		      AbstractChosen.prototype.generate_field_id = function() {
		        var new_id;
	
		        new_id = this.generate_random_id();
		        this.form_field.id = new_id;
		        return new_id;
		      };
	
		      AbstractChosen.prototype.generate_random_char = function() {
		        var chars, newchar, rand;
	
		        chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		        rand = Math.floor(Math.random() * chars.length);
		        return newchar = chars.substring(rand, rand + 1);
		      };
	
		      AbstractChosen.prototype.container_width = function() {
		        if (this.options.width != null) {
		          return this.options.width;
		        } else {
		          return "" + this.form_field.offsetWidth + "px";
		        }
		      };
	
		      AbstractChosen.browser_is_supported = function() {
		        var _ref;
	
		        if (window.navigator.appName === "Microsoft Internet Explorer") {
		          return (null !== (_ref = document.documentMode) && _ref >= 8);
		        }
		        return true;
		      };
	
		      AbstractChosen.default_multiple_text = "Select Some Options";
	
		      AbstractChosen.default_single_text = "Select an Option";
	
		      AbstractChosen.default_no_result_text = "No results match";
	
		      return AbstractChosen;
	
		    })();
	
		    root.AbstractChosen = AbstractChosen;
	
		  }).call(this);
	
		  (function() {
		    var $, Chosen, root, _ref,
		      __hasProp = {}.hasOwnProperty,
		      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
		    root = this;
	
		    // OKTA-93521 - plugin assumes root is global scope
		    var AbstractChosen = root.AbstractChosen;
	
		    $ = jQuery;
	
		    $.fn.extend({
		      chosen: function(options) {
		        if (!AbstractChosen.browser_is_supported()) {
		          return this;
		        }
		        return this.each(function(input_field) {
		          var $this;
	
		          $this = $(this);
		          if (!$this.hasClass("chzn-done")) {
		            return $this.data('chosen', new Chosen(this, options));
		          }
		        });
		      }
		    });
	
		    Chosen = (function(_super) {
		      __extends(Chosen, _super);
	
		      function Chosen() {
		        _ref = Chosen.__super__.constructor.apply(this, arguments);
		        return _ref;
		      }
	
		      Chosen.prototype.setup = function() {
		        this.form_field_jq = $(this.form_field);
		        this.current_selectedIndex = this.form_field.selectedIndex;
		        return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
		      };
	
		      Chosen.prototype.finish_setup = function() {
		        return this.form_field_jq.addClass("chzn-done");
		      };
	
		      Chosen.prototype.set_up_html = function() {
		        var container_classes, container_props;
	
		        this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
		        this.container_id += "_chzn";
		        container_classes = ["chzn-container"];
		        container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
		        if (this.inherit_select_classes && this.form_field.className) {
		          container_classes.push(this.form_field.className);
		        }
		        if (this.is_rtl) {
		          container_classes.push("chzn-rtl");
		        }
		        container_props = {
		          'id': this.container_id,
		          'class': container_classes.join(' '),
		          'style': "width: " + (this.container_width()) + ";",
		          'title': this.form_field.title
		        };
		        this.container = $("<div />", container_props);
		        if (this.is_multiple) {
		          this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
		        } else {
		          this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
		        }
		        this.form_field_jq.hide().after(this.container);
		        this.dropdown = this.container.find('div.chzn-drop').first();
		        this.search_field = this.container.find('input').first();
		        this.search_results = this.container.find('ul.chzn-results').first();
		        this.search_field_scale();
		        this.search_no_results = this.container.find('li.no-results').first();
		        if (this.is_multiple) {
		          this.search_choices = this.container.find('ul.chzn-choices').first();
		          this.search_container = this.container.find('li.search-field').first();
		        } else {
		          this.search_container = this.container.find('div.chzn-search').first();
		          this.selected_item = this.container.find('.chzn-single').first();
		        }
		        this.results_build();
		        this.set_tab_index();
		        this.set_label_behavior();
		        return this.form_field_jq.trigger("liszt:ready", {
		          chosen: this
		        });
		      };
	
		      Chosen.prototype.register_observers = function() {
		        var _this = this;
	
		        this.container.mousedown(function(evt) {
		          _this.container_mousedown(evt);
		        });
		        this.container.mouseup(function(evt) {
		          _this.container_mouseup(evt);
		        });
		        this.container.mouseenter(function(evt) {
		          _this.mouse_enter(evt);
		        });
		        this.container.mouseleave(function(evt) {
		          _this.mouse_leave(evt);
		        });
		        this.search_results.mouseup(function(evt) {
		          _this.search_results_mouseup(evt);
		        });
		        this.search_results.mouseover(function(evt) {
		          _this.search_results_mouseover(evt);
		        });
		        this.search_results.mouseout(function(evt) {
		          _this.search_results_mouseout(evt);
		        });
		        this.search_results.bind('mousewheel DOMMouseScroll', function(evt) {
		          _this.search_results_mousewheel(evt);
		        });
		        this.form_field_jq.bind("liszt:updated", function(evt) {
		          _this.results_update_field(evt);
		        });
		        this.form_field_jq.bind("liszt:activate", function(evt) {
		          _this.activate_field(evt);
		        });
		        this.form_field_jq.bind("liszt:open", function(evt) {
		          _this.container_mousedown(evt);
		        });
		        this.search_field.blur(function(evt) {
		          _this.input_blur(evt);
		        });
		        this.search_field.keyup(function(evt) {
		          _this.keyup_checker(evt);
		        });
		        this.search_field.keydown(function(evt) {
		          _this.keydown_checker(evt);
		        });
		        this.search_field.focus(function(evt) {
		          _this.input_focus(evt);
		        });
		        if (this.is_multiple) {
		          return this.search_choices.click(function(evt) {
		            _this.choices_click(evt);
		          });
		        } else {
		          return this.container.click(function(evt) {
		            evt.preventDefault();
		          });
		        }
		      };
	
		      Chosen.prototype.search_field_disabled = function() {
		        this.is_disabled = this.form_field_jq[0].disabled;
		        if (this.is_disabled) {
		          this.container.addClass('chzn-disabled');
		          this.search_field[0].disabled = true;
		          if (!this.is_multiple) {
		            this.selected_item.unbind("focus", this.activate_action);
		          }
		          return this.close_field();
		        } else {
		          this.container.removeClass('chzn-disabled');
		          this.search_field[0].disabled = false;
		          if (!this.is_multiple) {
		            return this.selected_item.bind("focus", this.activate_action);
		          }
		        }
		      };
	
		      Chosen.prototype.container_mousedown = function(evt) {
		        if (!this.is_disabled) {
		          if (evt && evt.type === "mousedown" && !this.results_showing) {
		            evt.preventDefault();
		          }
		          if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
		            if (!this.active_field) {
		              if (this.is_multiple) {
		                this.search_field.val("");
		              }
		              $(document).click(this.click_test_action);
		              this.results_show();
		            } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
		              evt.preventDefault();
		              this.results_toggle();
		            }
		            return this.activate_field();
		          }
		        }
		      };
	
		      Chosen.prototype.container_mouseup = function(evt) {
		        if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
		          return this.results_reset(evt);
		        }
		      };
	
		      Chosen.prototype.search_results_mousewheel = function(evt) {
		        var delta, _ref1, _ref2;
	
		        delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
		        if (delta != null) {
		          evt.preventDefault();
		          if (evt.type === 'DOMMouseScroll') {
		            delta = delta * 40;
		          }
		          return this.search_results.scrollTop(delta + this.search_results.scrollTop());
		        }
		      };
	
		      Chosen.prototype.blur_test = function(evt) {
		        if (!this.active_field && this.container.hasClass("chzn-container-active")) {
		          return this.close_field();
		        }
		      };
	
		      Chosen.prototype.close_field = function() {
		        $(document).unbind("click", this.click_test_action);
		        this.active_field = false;
		        this.results_hide();
		        this.container.removeClass("chzn-container-active");
		        this.clear_backstroke();
		        this.show_search_field_default();
		        return this.search_field_scale();
		      };
	
		      Chosen.prototype.activate_field = function() {
		        this.container.addClass("chzn-container-active");
		        this.active_field = true;
		        this.search_field.val(this.search_field.val());
		        return this.search_field.focus();
		      };
	
		      Chosen.prototype.test_active_click = function(evt) {
		        if ($(evt.target).parents('#' + this.container_id).length) {
		          return this.active_field = true;
		        } else {
		          return this.close_field();
		        }
		      };
	
		      Chosen.prototype.results_build = function() {
		        var content, data, _i, _len, _ref1;
	
		        this.parsing = true;
		        this.selected_option_count = null;
		        this.results_data = root.SelectParser.select_to_array(this.form_field);
		        if (this.is_multiple) {
		          this.search_choices.find("li.search-choice").remove();
		        } else if (!this.is_multiple) {
		          this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
		          if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
		            this.search_field[0].readOnly = true;
		            this.container.addClass("chzn-container-single-nosearch");
		          } else {
		            this.search_field[0].readOnly = false;
		            this.container.removeClass("chzn-container-single-nosearch");
		          }
		        }
		        content = '';
		        _ref1 = this.results_data;
		        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
		          data = _ref1[_i];
		          if (data.group) {
		            content += this.result_add_group(data);
		          } else if (!data.empty) {
		            content += this.result_add_option(data);
		            if (data.selected && this.is_multiple) {
		              this.choice_build(data);
		            } else if (data.selected && !this.is_multiple) {
		              this.selected_item.removeClass("chzn-default").find("span").text(data.text);
		              if (this.allow_single_deselect) {
		                this.single_deselect_control_build();
		              }
		            }
		          }
		        }
		        this.search_field_disabled();
		        this.show_search_field_default();
		        this.search_field_scale();
		        this.search_results.html(content);
		        return this.parsing = false;
		      };
	
		      Chosen.prototype.result_add_group = function(group) {
		        group.dom_id = this.container_id + "_g_" + group.array_index;
		        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
		      };
	
		      Chosen.prototype.result_do_highlight = function(el) {
		        var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
	
		        if (el.length) {
		          this.result_clear_highlight();
		          this.result_highlight = el;
		          this.result_highlight.addClass("highlighted");
		          maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
		          visible_top = this.search_results.scrollTop();
		          visible_bottom = maxHeight + visible_top;
		          high_top = this.result_highlight.position().top + this.search_results.scrollTop();
		          high_bottom = high_top + this.result_highlight.outerHeight();
		          if (high_bottom >= visible_bottom) {
		            return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
		          } else if (high_top < visible_top) {
		            return this.search_results.scrollTop(high_top);
		          }
		        }
		      };
	
		      Chosen.prototype.result_clear_highlight = function() {
		        if (this.result_highlight) {
		          this.result_highlight.removeClass("highlighted");
		        }
		        return this.result_highlight = null;
		      };
	
		      Chosen.prototype.results_show = function() {
		        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
		          this.form_field_jq.trigger("liszt:maxselected", {
		            chosen: this
		          });
		          return false;
		        }
		        this.container.addClass("chzn-with-drop");
		        this.form_field_jq.trigger("liszt:showing_dropdown", {
		          chosen: this
		        });
		        this.results_showing = true;
		        this.search_field.focus();
		        this.search_field.val(this.search_field.val());
		        return this.winnow_results();
		      };
	
		      Chosen.prototype.results_hide = function() {
		        if (this.results_showing) {
		          this.result_clear_highlight();
		          this.container.removeClass("chzn-with-drop");
		          this.form_field_jq.trigger("liszt:hiding_dropdown", {
		            chosen: this
		          });
		        }
		        return this.results_showing = false;
		      };
	
		      Chosen.prototype.set_tab_index = function(el) {
		        var ti;
	
		        if (this.form_field_jq.attr("tabindex")) {
		          ti = this.form_field_jq.attr("tabindex");
		          this.form_field_jq.attr("tabindex", -1);
		          return this.search_field.attr("tabindex", ti);
		        }
		      };
	
		      Chosen.prototype.set_label_behavior = function() {
		        var _this = this;
	
		        this.form_field_label = this.form_field_jq.parents("label");
		        if (!this.form_field_label.length && this.form_field.id.length) {
		          this.form_field_label = $("label[for='" + this.form_field.id + "']");
		        }
		        if (this.form_field_label.length > 0) {
		          return this.form_field_label.click(function(evt) {
		            if (_this.is_multiple) {
		              return _this.container_mousedown(evt);
		            } else {
		              return _this.activate_field();
		            }
		          });
		        }
		      };
	
		      Chosen.prototype.show_search_field_default = function() {
		        if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
		          this.search_field.val(this.default_text);
		          return this.search_field.addClass("default");
		        } else {
		          this.search_field.val("");
		          return this.search_field.removeClass("default");
		        }
		      };
	
		      Chosen.prototype.search_results_mouseup = function(evt) {
		        var target;
	
		        target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
		        if (target.length) {
		          this.result_highlight = target;
		          this.result_select(evt);
		          return this.search_field.focus();
		        }
		      };
	
		      Chosen.prototype.search_results_mouseover = function(evt) {
		        var target;
	
		        target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
		        if (target) {
		          return this.result_do_highlight(target);
		        }
		      };
	
		      Chosen.prototype.search_results_mouseout = function(evt) {
		        if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
		          return this.result_clear_highlight();
		        }
		      };
	
		      Chosen.prototype.choice_build = function(item) {
		        var choice, close_link,
		          _this = this;
	
		        choice = $('<li />', {
		          "class": "search-choice"
		        }).html("<span>" + item.html + "</span>");
		        if (item.disabled) {
		          choice.addClass('search-choice-disabled');
		        } else {
		          close_link = $('<a />', {
		            href: '#',
		            "class": 'search-choice-close',
		            rel: item.array_index
		          });
		          close_link.click(function(evt) {
		            return _this.choice_destroy_link_click(evt);
		          });
		          choice.append(close_link);
		        }
		        return this.search_container.before(choice);
		      };
	
		      Chosen.prototype.choice_destroy_link_click = function(evt) {
		        evt.preventDefault();
		        evt.stopPropagation();
		        if (!this.is_disabled) {
		          return this.choice_destroy($(evt.target));
		        }
		      };
	
		      Chosen.prototype.choice_destroy = function(link) {
		        if (this.result_deselect(link.attr("rel"))) {
		          this.show_search_field_default();
		          if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
		            this.results_hide();
		          }
		          link.parents('li').first().remove();
		          return this.search_field_scale();
		        }
		      };
	
		      Chosen.prototype.results_reset = function() {
		        this.form_field.options[0].selected = true;
		        this.selected_option_count = null;
		        this.selected_item.find("span").text(this.default_text);
		        if (!this.is_multiple) {
		          this.selected_item.addClass("chzn-default");
		        }
		        this.show_search_field_default();
		        this.results_reset_cleanup();
		        this.form_field_jq.trigger("change");
		        if (this.active_field) {
		          return this.results_hide();
		        }
		      };
	
		      Chosen.prototype.results_reset_cleanup = function() {
		        this.current_selectedIndex = this.form_field.selectedIndex;
		        return this.selected_item.find("abbr").remove();
		      };
	
		      Chosen.prototype.result_select = function(evt) {
		        var high, high_id, item, position;
	
		        if (this.result_highlight) {
		          high = this.result_highlight;
		          high_id = high.attr("id");
		          this.result_clear_highlight();
		          if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
		            this.form_field_jq.trigger("liszt:maxselected", {
		              chosen: this
		            });
		            return false;
		          }
		          if (this.is_multiple) {
		            high.removeClass("active-result");
		          } else {
		            this.search_results.find(".result-selected").removeClass("result-selected");
		            this.result_single_selected = high;
		            this.selected_item.removeClass("chzn-default");
		          }
		          high.addClass("result-selected");
		          position = high_id.substr(high_id.lastIndexOf("_") + 1);
		          item = this.results_data[position];
		          item.selected = true;
		          this.form_field.options[item.options_index].selected = true;
		          this.selected_option_count = null;
		          if (this.is_multiple) {
		            this.choice_build(item);
		          } else {
		            this.selected_item.find("span").first().text(item.text);
		            if (this.allow_single_deselect) {
		              this.single_deselect_control_build();
		            }
		          }
		          if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
		            this.results_hide();
		          }
		          this.search_field.val("");
		          if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
		            this.form_field_jq.trigger("change", {
		              'selected': this.form_field.options[item.options_index].value
		            });
		          }
		          this.current_selectedIndex = this.form_field.selectedIndex;
		          return this.search_field_scale();
		        }
		      };
	
		      Chosen.prototype.result_activate = function(el, option) {
		        if (option.disabled) {
		          return el.addClass("disabled-result");
		        } else if (this.is_multiple && option.selected) {
		          return el.addClass("result-selected");
		        } else {
		          return el.addClass("active-result");
		        }
		      };
	
		      Chosen.prototype.result_deactivate = function(el) {
		        return el.removeClass("active-result result-selected disabled-result");
		      };
	
		      Chosen.prototype.result_deselect = function(pos) {
		        var result, result_data;
	
		        result_data = this.results_data[pos];
		        if (!this.form_field.options[result_data.options_index].disabled) {
		          result_data.selected = false;
		          this.form_field.options[result_data.options_index].selected = false;
		          this.selected_option_count = null;
		          result = $("#" + this.container_id + "_o_" + pos);
		          result.removeClass("result-selected").addClass("active-result").show();
		          this.result_clear_highlight();
		          this.winnow_results();
		          this.form_field_jq.trigger("change", {
		            deselected: this.form_field.options[result_data.options_index].value
		          });
		          this.search_field_scale();
		          return true;
		        } else {
		          return false;
		        }
		      };
	
		      Chosen.prototype.single_deselect_control_build = function() {
		        if (!this.allow_single_deselect) {
		          return;
		        }
		        if (!this.selected_item.find("abbr").length) {
		          this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
		        }
		        return this.selected_item.addClass("chzn-single-with-deselect");
		      };
	
		      Chosen.prototype.winnow_results = function() {
		        var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref1;
	
		        this.no_results_clear();
		        results = 0;
		        searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
		        regexAnchor = this.search_contains ? "" : "^";
		        regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
		        zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
		        _ref1 = this.results_data;
		        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
		          option = _ref1[_i];
		          if (!option.empty) {
		            if (option.group) {
		              $('#' + option.dom_id).css('display', 'none');
		            } else {
		              found = false;
		              result_id = option.dom_id;
		              result = $("#" + result_id);
		              if (regex.test(option.html)) {
		                found = true;
		                results += 1;
		              } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
		                parts = option.html.replace(/\[|\]/g, "").split(" ");
		                if (parts.length) {
		                  for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
		                    part = parts[_j];
		                    if (regex.test(part)) {
		                      found = true;
		                      results += 1;
		                    }
		                  }
		                }
		              }
		              if (found) {
		                if (searchText.length) {
		                  startpos = option.html.search(zregex);
		                  text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
		                  text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
		                } else {
		                  text = option.html;
		                }
		                result.html(text);
		                this.result_activate(result, option);
		                if (option.group_array_index != null) {
		                  $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
		                }
		              } else {
		                if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
		                  this.result_clear_highlight();
		                }
		                this.result_deactivate(result);
		              }
		            }
		          }
		        }
		        if (results < 1 && searchText.length) {
		          return this.no_results(searchText);
		        } else {
		          return this.winnow_results_set_highlight();
		        }
		      };
	
		      Chosen.prototype.winnow_results_set_highlight = function() {
		        var do_high, selected_results;
	
		        if (!this.result_highlight) {
		          selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
		          do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
		          if (do_high != null) {
		            return this.result_do_highlight(do_high);
		          }
		        }
		      };
	
		      Chosen.prototype.no_results = function(terms) {
		        var no_results_html;
	
		        no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
		        no_results_html.find("span").first().html(terms);
		        return this.search_results.append(no_results_html);
		      };
	
		      Chosen.prototype.no_results_clear = function() {
		        return this.search_results.find(".no-results").remove();
		      };
	
		      Chosen.prototype.keydown_arrow = function() {
		        var next_sib;
	
		        if (this.results_showing && this.result_highlight) {
		          next_sib = this.result_highlight.nextAll("li.active-result").first();
		          if (next_sib) {
		            return this.result_do_highlight(next_sib);
		          }
		        } else {
		          return this.results_show();
		        }
		      };
	
		      Chosen.prototype.keyup_arrow = function() {
		        var prev_sibs;
	
		        if (!this.results_showing && !this.is_multiple) {
		          return this.results_show();
		        } else if (this.result_highlight) {
		          prev_sibs = this.result_highlight.prevAll("li.active-result");
		          if (prev_sibs.length) {
		            return this.result_do_highlight(prev_sibs.first());
		          } else {
		            if (this.choices_count() > 0) {
		              this.results_hide();
		            }
		            return this.result_clear_highlight();
		          }
		        }
		      };
	
		      Chosen.prototype.keydown_backstroke = function() {
		        var next_available_destroy;
	
		        if (this.pending_backstroke) {
		          this.choice_destroy(this.pending_backstroke.find("a").first());
		          return this.clear_backstroke();
		        } else {
		          next_available_destroy = this.search_container.siblings("li.search-choice").last();
		          if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
		            this.pending_backstroke = next_available_destroy;
		            if (this.single_backstroke_delete) {
		              return this.keydown_backstroke();
		            } else {
		              return this.pending_backstroke.addClass("search-choice-focus");
		            }
		          }
		        }
		      };
	
		      Chosen.prototype.clear_backstroke = function() {
		        if (this.pending_backstroke) {
		          this.pending_backstroke.removeClass("search-choice-focus");
		        }
		        return this.pending_backstroke = null;
		      };
	
		      Chosen.prototype.keydown_checker = function(evt) {
		        var stroke, _ref1;
	
		        stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
		        this.search_field_scale();
		        if (stroke !== 8 && this.pending_backstroke) {
		          this.clear_backstroke();
		        }
		        switch (stroke) {
		          case 8:
		            this.backstroke_length = this.search_field.val().length;
		            break;
		          case 9:
		            if (this.results_showing && !this.is_multiple) {
		              this.result_select(evt);
		            }
		            this.mouse_on_container = false;
		            break;
		          case 13:
		            evt.preventDefault();
		            break;
		          case 38:
		            evt.preventDefault();
		            this.keyup_arrow();
		            break;
		          case 40:
		            evt.preventDefault();
		            this.keydown_arrow();
		            break;
		        }
		      };
	
		      Chosen.prototype.search_field_scale = function() {
		        var div, h, style, style_block, styles, w, _i, _len;
	
		        if (this.is_multiple) {
		          h = 0;
		          w = 0;
		          style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
		          styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
		          for (_i = 0, _len = styles.length; _i < _len; _i++) {
		            style = styles[_i];
		            style_block += style + ":" + this.search_field.css(style) + ";";
		          }
		          div = $('<div />', {
		            'style': style_block
		          });
		          div.text(this.search_field.val());
		          $('body').append(div);
		          w = div.width() + 25;
		          div.remove();
		          if (!this.f_width) {
		            this.f_width = this.container.outerWidth();
		          }
		          if (w > this.f_width - 10) {
		            w = this.f_width - 10;
		          }
		          return this.search_field.css({
		            'width': w + 'px'
		          });
		        }
		      };
	
		      Chosen.prototype.generate_random_id = function() {
		        var string;
	
		        string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
		        while ($("#" + string).length > 0) {
		          string += this.generate_random_char();
		        }
		        return string;
		      };
	
		      return Chosen;
	
		    })(AbstractChosen);
	
		    root.Chosen = Chosen;
	
		  }).call(this);
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(6),
		  __webpack_require__(42),
		  __webpack_require__(27),
		  __webpack_require__(41),
		  __webpack_require__(48)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, Keys, TemplateUtil, BaseInput) {
	
		  var template = TemplateUtil.tpl('\
		      <input type="radio" name="{{name}}" data-se-name="{{realName}}" value="{{value}}" id="{{id}}">\
		      <label for="{{id}}" data-se-for-name="{{realName}}">\
		        {{label}}\
		        {{#if explain}}\
		        <p class="o-form-explain">{{explain}}</p>\
		        {{/if}}\
		      </label>\
		  ');
	
		  return BaseInput.extend({
	
		    /**
		    * @Override
		    */
		    events: {
		      'change :radio': 'update',
		      'keyup': function (e) {
		        if (Keys.isSpaceBar(e)) {
		          $(e.target).click();
		        }
		        else if (Keys.isEnter(e)) {
		          this.model.trigger('form:save');
		        }
		      }
		    },
	
		    /**
		    * @Override
		    */
		    editMode: function () {
		      this.$el.empty();
	
		      _.each(this.options.options, function (value, key) {
		        var options = {
		          id: _.uniqueId('option'),
		          name: this.options.inputId,
		          realName: this.options.name,
		          value: key
		        };
	
		        if (!_.isObject(value)) {
		          value = { label: value };
		        }
		        _.extend(options, value);
	
		        this.$el.append(template(options));
		      }, this);
	
		      var value = this.getModelValue();
		      if (value) {
		        this.$(':radio[value=' + value + ']').prop('checked', true);
		      }
	
		      this.$('input').customInput();
		      this.model.trigger('form:resize');
	
		      return this;
		    },
	
		    /**
		    * @Override
		    */
		    readMode: function () {
		      this.editMode();
		      this.$(':radio').prop('disabled', true);
		      return this;
		    },
	
		    /**
		    * @Override
		    */
		    val: function () {
		      return this.$(':radio:checked').val();
		    },
	
		    /**
		    * @Override
		    */
		    focus: function () {
		      return this.$('label:eq(0)').focus();
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
		 * There are following local modifications:
		 * - Author: Uzi Kilon ukilon@okta.com
		 *   Bug: OKTA-20830 - solves the conflict when there are multiple labels
		 */
		/**
		 * --------------------------------------------------------------------
		 * jQuery customInput plugin
		 * Author: Maggie Costello Wachs maggie@filamentgroup.com, Scott Jehl, scott@filamentgroup.com
		 * Copyright (c) 2009 Filament Group
		 * licensed under MIT (filamentgroup.com/examples/mit-license.txt)
		 * --------------------------------------------------------------------
		*/
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
		  var $ = jQuery;
		  jQuery.fn.customInput = function(){
		    return $(this).each(function(){
		      if($(this).is('[type=checkbox],[type=radio]')){
		        var input = $(this);
	
		        // get the associated label using the input's id
		        var label = input.siblings('label[for="'+input.attr('id')+'"]:first');
		        if (!label.length) {
		          label = input.closest('label[for="'+input.attr('id')+'"]:first');
		        }
		        // wrap the input + label in a div
		        input.add(label).wrapAll('<div class="custom-'+ input.attr('type') +'"></div>');
	
		        // necessary for browsers that don't support the :hover pseudo class on labels
		        label.hover(
		          function(){ $(this).addClass('hover'); },
		          function(){ $(this).removeClass('hover'); }
		        );
	
		        //bind custom event, trigger it, bind click,focus,blur events
		        input.bind('updateState', function(){
		          input.is(':checked') ? label.addClass('checked') : label.removeClass('checked checkedHover checkedFocus');
		        })
		        .trigger('updateState')
		        .click(function(){
		          $('input[name="'+ $(this).attr('name') +'"]').trigger('updateState');
		        })
		        .focus(function(){
		          label.addClass('focus');
		          if(input.is(':checked')){  $(this).addClass('checkedFocus'); }
		        })
		        .blur(function(){ label.removeClass('focus checkedFocus'); });
		      }
		    });
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(42),
		  __webpack_require__(27),
		  __webpack_require__(41),
		  __webpack_require__(48)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Keys, TemplateUtil, BaseInput) {
	
		  var template = TemplateUtil.tpl('\
		    <input type="checkbox" name="{{name}}" id="{{inputId}}"/>\
		    <label for="{{inputId}}" data-se-for-name="{{name}}">{{placeholder}}</label>\
		  ');
	
		  return BaseInput.extend({
		    template: template,
		    /**
		    * @Override
		    */
		    events: {
		      'change :checkbox': 'update',
		      'keyup': function (e) {
		        if (Keys.isSpaceBar(e)) {
		          this.$(':checkbox').click();
		        }
		        else if (Keys.isEnter(e)) {
		          this.model.trigger('form:save');
		        }
		      }
		    },
	
		    /**
		    * @Override
		    */
		    editMode: function () {
		      var placeholder = _.resultCtx(this.options, 'placeholder', this);
		      if (placeholder === '') {
		        placeholder = _.resultCtx(this.options, 'label', this);
		      } else if (placeholder === false) {
		        placeholder = '';
		      }
	
		      this.$el.html(this.template(_.extend(_.omit(this.options, 'placeholder'), { placeholder: placeholder })));
		      var $input = this.$(':checkbox');
		      $input.prop('checked', this.getModelValue() || false);
	
		      this.$('input').customInput();
		      this.model.trigger('form:resize');
	
		      return this;
		    },
	
		    /**
		     * @Override
		    */
		    readMode: function () {
		      this.editMode();
		      this.$(':checkbox').prop('disabled', true);
		      return this;
		    },
	
		    /**
		    * @Override
		    */
		    val: function () {
		      return this.$(':checkbox').prop('checked');
		    },
	
		    /**
		    * @Override
		    */
		    focus: function () {
		      return this.$(':checkbox').focus();
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 51 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 52 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 53 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 54 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 55 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 56 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 57 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 58 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 59 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(41),
		  __webpack_require__(26),
		  __webpack_require__(61)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseInput, BaseView, ButtonFactory) {
	
	
		  function countInputs(inputs) {
		    return _.filter(inputs || [], function (input) {
		      return !_.contains(['label', 'button', 'select'], input.type);
		    }).length;
		  }
	
		  var LabelInput = BaseInput.extend({
		    tagName: 'span',
		    initialize: function () {
		      this.$el.text(this.getModelValue());
		      if (this.options.display !== 'text') {
		        this.$el.addClass('input-group');
		      } else {
		        this.$el.addClass('input-group-text');
		      }
		    },
		    editMode: function () {
		      this.toggle(true);
		    },
		    readMode: function () {
		      this.toggle(false);
		    },
		    getModelValue: function () {
		      return this.options.label;
		    },
		    toggle: function (isEditMode) {
		      this.$el.toggleClass('o-form-label-inline', isEditMode);
		      this.$el.toggleClass('o-form-control', !isEditMode);
		    },
		    focus: _.noop
		  });
	
		  function createButtonInput(options) {
		    return ButtonFactory.create(_.defaults({
		      getReadModeString: _.constant(' '),
		      focus: _.noop
		    }, _.pick(options, 'click', 'title', 'href')));
		  }
	
		  var InputGroupView = BaseView.extend({
	
		    className: function () {
		      var className = 'o-form-input-group';
		      if (countInputs(this.options.params && this.options.params.inputs) > 1) {
		        className += ' o-form-input-group-2';
		      }
		      return className;
		    },
	
		    initialize: function () {
		      var display = !_.isUndefined(this.options.params) ? this.options.params.display : 'group';
		      _.each(this.options.params && this.options.params.inputs, function (input) {
		        switch (input.type) {
		        case 'label':
		          input.display = display;
		          this.add(LabelInput, {
		            options: input
		          });
		          break;
		        case 'button':
		          this.add(createButtonInput(input));
		          break;
		        default:
		          input = _.defaults({
		            model: this.model,
		            params: _.defaults({
		              autoWidth: true
		            }, input.params || {})
		          }, input);
		          this.add(this.options.params.create(input));
		        }
		      }, this);
		    },
	
		    focus: function () {
		      this.first().focus();
		    }
		  });
	
	
		  return BaseInput.extend({
	
		    constructor: function (options) {
		      this.inputGroupView = new InputGroupView(options);
		      BaseInput.apply(this, arguments);
		    },
	
		    editMode: function () {
		      this.inputGroupView.remove();
		      this.inputGroupView = new InputGroupView(this.options);
		      this.$el.html(this.inputGroupView.render().el);
		    },
	
		    toStringValue: function () {
		      var strings = this.inputGroupView.map(function (input) {
		        return input.getReadModeString();
		      });
		      return strings.length && _.every(strings) ? strings.join(' ') : ' ';
		    },
	
		    focus: function () {
		      this.inputGroupView.focus();
		    }
	
		  },
		    {  // test hooks
		      LabelInput: LabelInput,
		      InputGroupView: InputGroupView
		    });
	
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(62)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseButtonLink) {
		  /**
		   * @class ButtonFactory
		   * @private
		   *
		   * A factory method wrapper for {@link BaseButtonLink} creation
		   */
	
		  function normalizeEvents(options) {
		    var events = _.extend(options.click ? {click: options.click} : {}, options.events || {}),
		        target = {};
		    _.each(events, function (fn, eventName) {
		      target[eventName] = function (e) {
		        if (!options.href) {
		          e.preventDefault();
		          e.stopPropagation();
		        }
		        fn.apply(this, arguments);
		      };
		    });
		    return target;
		  }
	
		  return {
		    /**
		     * Creates a BaseButtonLink
		     * @param  {Object} options Options hash
		     * @param  {Object} [options.title] The button text
		     * @param  {Object} [options.icon]
		     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
		     * @param {Object} [options.href] The button link
		     * @param {Object} [options.click] On click callback
		     * @param {Object} [options.events] a [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
		     * @return {BaseButtonLink} BaseButtonLink prototype ("class")
		     */
		    create: function (options) {
		      options = _.clone(options);
		      return BaseButtonLink.extend(_.extend(options, {
		        events: normalizeEvents(options)
		      }));
		    }
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView) {
	
		  var disabledEvents = {
		    click: function (e) {
		      e.preventDefault();
		      e.stopPropagation();
		    }
		  };
	
		  return BaseView.extend({
	
		    /**
		     * @class BaseButtonLink
		     * @extends Okta.View
		     * @private
		     * A configurable button.
		     *
		     * ```javascript
		     * var View = BaseButtonLink.extend({
		     *   title: 'Click Me',
		     *   icon: 'help-text'
		     * })
		     * ```
		     */
	
		    /**
		     * @property {String} [title] The main text for the button
		     */
	
		    /**
		     * @property {String} [href] The link for the button
		     */
	
		    /**
		     * @property {String} [icon]
		     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
		     */
	
		    /**
		     * @property {Object} [events] a [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
		     */
	
		    tagName: 'a',
	
		    template: '{{#if icon}}<span class="icon {{icon}}"></span>{{/if}}{{#if title}}{{title}}{{/if}}',
	
		    constructor: function (options) {
		      this.options = options || {};
		      var data = this.getTemplateData();
	
		      this.disabled = false;
	
		      BaseView.apply(this, arguments);
	
		      this.$el.addClass('link-button');
		      if (data.icon) {
		        this.$el.addClass('link-button-icon');
		        if (!data.title) {
		          this.$el.addClass('icon-only');
		        }
		      }
		    },
	
		    getTemplateData: function () {
		      return {
		        href: this.__getAttribute('href'),
		        title: this.__getAttribute('title'),
		        icon: this.__getAttribute('icon')
		      };
		    },
	
		    render: function () {
		      BaseView.prototype.render.apply(this, arguments);
		      var data = this.getTemplateData();
		      this.$el.attr('href', data.href || '#');
		      return this;
		    },
	
		    __getAttribute: function (name, defaultValue) {
		      var value = _.resultCtx(this.options, name, this);
		      if (_.isUndefined(value)) {
		        value = _.result(this, name);
		      }
		      return !_.isUndefined(value) ? value : defaultValue;
		    },
	
		    enable: function () {
		      this.toggle(true);
		    },
	
		    disable: function () {
		      this.toggle(false);
		    },
	
		    toggle: function (enable) {
		      this.disabled = !enable;
		      this.$el.toggleClass('link-button-disabled btn-disabled disabled', this.disabled);
	
		      // delegateEvents asynchronously in case the button is not yet added to the DOM
		      // in these cases the alternate events won't work
		      _.defer(_.bind(function () {
		        this.delegateEvents(this.disabled ? disabledEvents : null);
		      }, this));
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 63 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(27),
		  __webpack_require__(26),
		  __webpack_require__(65)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, TemplateUtil, BaseView) {
	
		  /**
		   * @class InputLabel
		   * @extends {Okta.View}
		   * @private
		   * The input's label.
		   */
		  return BaseView.extend({
	
		    className: 'okta-form-label o-form-label',
	
		    attributes: {
		      'data-se': 'o-form-label'
		    },
	
		    /**
		     * @constructor
		     * @param  {Object} options options hash
		     * @param  {String} [options.type] Input type
		     * @param  {String|Function} [options.label] Label text
		     * @param  {String|Function} [options.sublabel] Sub label text
		     * @param  {String|Function} [options.tooltip] Tooltip text
		     * @param  {String|Function} [options.inputId] Id of the inputs
		     * @param  {String|Function} [options.id] Id of the inputs
		     */
		    constructor: function (options) {
		      /* eslint max-statements: [2, 16] complexity: [2, 7]*/
		      _.defaults(options, {inputId: options.id});
		      delete options.id;
	
		      BaseView.apply(this, arguments);
	
		      var template;
		      if (this._isLabelView(options.label)) {
		        template = '<label for="{{inputId}}"></label>';
		      } else if (_.contains(['radio', 'checkbox'], options.type) || !options.label) {
		        template = '{{label}}';
		      }  else {
		        template = '<label for="{{inputId}}">{{label}}</label>';
		      }
		      if (options.sublabel) {
		        template += '<span class="o-form-explain">{{sublabel}}</span>';
		      }
		      if (options.tooltip) {
		        if (_.isString(options.tooltip)) {
		          options.tooltip = {
		            text: options.tooltip
		          };
		        }
		        template += '<span class="o-form-tooltip icon-16 icon-only form-help-16" title="{{tooltip.text}}"></span>';
		      }
		      this.template = TemplateUtil.tpl(template);
	
		    },
	
		    getTemplateData: function () {
		      var options = {label: ''};
		      _.each(['inputId', 'label', 'sublabel', 'tooltip'], function (option) {
		        options[option] = _.resultCtx(this.options, option, this);
		      }, this);
	
		      return options;
		    },
	
		    _isLabelView: function (label) {
		      return !_.isUndefined(label) && label instanceof BaseView;
		    },
	
		    postRender: function () {
		      var options = this.getTemplateData();
		      if (this._isLabelView(options.label)) {
		        this.add(options.label, 'label');
		      }
	
		      if (options.tooltip) {
		        this.$('.o-form-tooltip').qtip(_.extend({
		          style: {classes: 'qtip-custom qtip-shadow'},
		          position: {
		            my: 'bottom left',
		            at: 'top center'
		          },
		          hide: {fixed: true},
		          show: {delay: 0}
		        }, options.tooltip.options));
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 65 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_65__;
	
	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(26), __webpack_require__(67)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, FormUtil) {
	
		  function runCallback(callback, field) {
		    callback.apply(this, _.map(field.split(/\s+/), function (field) {
		      return this.model.get(field);
		    }, this));
		  }
	
		  function runIf(fn, ctx) {
		    if (_.isFunction(fn)) {
		      fn.call(ctx);
		    }
		  }
	
		  /**
		   * @class InputWrapper
		   * @extends Okta.View
		   * @private
		   * The outer wrapper that warps the label and the input container
		   */
		  return BaseView.extend({
	
		    className: function () {
		      var className = 'o-form-fieldset';
	
		      if (this.options['label-top']) {
		        className += ' o-form-label-top';
		      }
	
		      if (this.options.readOnly) {
		        className += ' o-form-read-mode';
		      }
	
		      return className;
		    },
	
		    attributes: function () {
		      return {
		        'data-se': this.options['data-se'] || 'o-form-fieldset'
		      };
		    },
	
		    /**
		     * @constructor
		     * @param  {Object} options options hash
		     * @param  {Object} [options.events]
		     * @param  {Object} [options.bindings]
		     * @param  {Object} [options.showWhen]
		     * @param  {Function} [options.initialize] post initialize callback
		     * @param  {Function} [options.render] post render callback
		     */
		    constructor: function (options) {
		      if (options.className) {
		        this.inputWrapperClassName = this.className;
		        this.optionsClassName = options.className;
		        options.className = function () {
		          return _.result(this, 'inputWrapperClassName', '') + ' ' + _.result(this, 'optionsClassName');
		        };
		      }
		      BaseView.apply(this, arguments);
		      _.each(options.events || {}, function (callback, event) {
		        this.listenTo(this.model, event, callback);
		      }, this);
	
		      _.each(options.bindings || {}, function (callback, field) {
		        this.listenTo(this.model, FormUtil.changeEventString(field.split(/\s+/)),
		          _.bind(runCallback, this, callback, field));
		      }, this);
	
		      FormUtil.applyShowWhen(this, options.showWhen);
		      FormUtil.applyToggleWhen(this, options.toggleWhen);
	
		      runIf(options.initialize, this);
		    },
	
		    postRender: function () {
		      _.each(this.options.bindings || {}, runCallback, this);
		      runIf(this.options.render, this);
		    },
	
		    /**
		     * @return {InputLabel}
		     */
		    getLabel: function () {
		      return this.size() > 1 ? this.at(0) : null;
		    },
		    /**
		     * @deprecated ambiguous naming, use {@link #getInputContainer}
		     */
		    getInput: function () {
		      return this.getInputContainer();
		    },
	
		    /**
		     * @return {InputContainer}
		     */
		    getInputContainer: function () {
		      return this.at(this.size() > 1 ? 1 : 0);
		    },
	
		    /**
		     * @return {BaseInput[]}
		     */
		    getInputs: function () {
		      return this.getInputContainer().toArray();
		    },
	
		    focus: function () {
		      return this.getInput().focus();
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint max-params: [2, 6] */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(7),
		  __webpack_require__(26),
		  __webpack_require__(42),
		  __webpack_require__(13),
		  __webpack_require__(68)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, StringUtil, BaseView, Keys, Logger, ViewUtil) {
	
		  var LABEL_OPTIONS = ['model', 'id', 'inputId', 'type', 'label', 'sublabel', 'tooltip', 'name'],
	
		      CONTAINER_OPTIONS = ['wide', 'multi', 'input', 'explain', 'customExplain', 'model', 'name', 'type', 'autoRender'],
	
		      WRAPPER_OPTIONS = ['model', 'name', 'label-top', 'readOnly', 'events', 'initialize', 'showWhen', 'bindings',
		                         'render', 'className', 'data-se', 'toggleWhen'],
	
		      INPUT_OPTIONS = ['model', 'name', 'inputId', 'type', // base options
		                      'input', // custom input
		                      'placeholder', 'label', // labels
		                      'readOnly', 'read', 'disabled', 'readModeString', // modes
		                      'options', // select/radio
		                      'from', 'to', // model transformers,
		                      'autoRender', // model attributes change event to trigger rerendering of the input
		                      'params'], // widgets params - for input specific widgets
	
		      OTHER_OPTIONS = ['errorField'];
	
	
		  var ALL_OPTIONS = _.uniq(_.union(LABEL_OPTIONS, CONTAINER_OPTIONS, WRAPPER_OPTIONS, INPUT_OPTIONS, OTHER_OPTIONS));
	
		  var SAVE_BUTTON_PHASES = [
		    '•         ',
		    '•  •      ',
		    '•  •  •   ',
		    '•  •  •  •',
		    '   •  •  •',
		    '      •  •',
		    '         •',
		    '          ',
		    '          ',
		    '          '
		  ];
	
		  function decorateDoWhen(doWhen) {
		    if (doWhen && !doWhen['__edit__']) {
		      return _.extend({'__edit__': _.constant(true)}, doWhen);
		    }
		  }
	
		  function createButton(options) {
	
		    options = _.pick(options || {}, 'action', 'className', 'text', 'type');
	
		    var timeoutId, intervalId, phaseCount;
	
		    return BaseView.extend({
		      tagName: 'input',
		      className: 'button',
		      events: {
		        'click': function () {
		          if (options.action && !this.disabled()) {
		            options.action.call(this);
		          }
		        },
		        'keyup': function (e) {
		          if (Keys.isEnter(e) && options.action && !this.disabled()) {
		            options.action.call(this);
		          }
		        }
		      },
	
		      disabled: function () {
		        return this.$el.prop('disabled') === true;
		      },
	
		      disable: function () {
		        this.$el.prop('disabled', true);
		        this.$el.addClass('btn-disabled');
		      },
	
		      enable: function () {
		        this.$el.prop('disabled', false);
		        this.$el.removeClass('btn-disabled');
		      },
	
		      initialize: function () {
		        this.$el.attr('type', options.type == 'save' ? 'submit' : 'button');
		        this.$el.val(options.text);
		        if (options.className) {
		          this.$el.addClass(options.className);
		        }
		        if (options.type) {
		          this.$el.attr('data-type', options.type);
		        }
	
		        this.listenTo(this.model, 'form:set-saving-state', function () {
		          this.disable();
		          if (options.type == 'save') {
		            timeoutId = setTimeout(_.bind(this.__changeSaveText, this), 1000);
		          }
		        });
		        this.listenTo(this.model, 'form:clear-saving-state', function () {
		          this.enable();
		          if (options.type == 'save') {
		            clearTimeout(timeoutId);
		            clearInterval(intervalId);
		            this.$el.val(options.text);
		          }
		        });
		      },
	
		      __changeSaveText: function () {
		        phaseCount = 0;
		        intervalId = setInterval(_.bind(this.__showLoadingText, this), 200);
		      },
	
		      __showLoadingText: function () {
		        this.$el.val(SAVE_BUTTON_PHASES[phaseCount++ % SAVE_BUTTON_PHASES.length]);
		      }
		    });
		  }
	
		  function validateInput(options, model) {
		    /* eslint max-statements: 0, complexity: 0 */
	
		    options || (options = {});
	
		    if (options.type == 'label') {
		      if (!options.label) {
		        Logger.warn('A label input must have a "label" parameter', options);
		      }
		      return;
		    }
	
		    if (options.type == 'button') {
		      if (!options.title && !options.icon) {
		        Logger.warn('A button input must have a "title" and/or an "icon" parameter', options);
		      }
		      if (!options.click && !options.href) {
		        Logger.warn('A button input must have a "click" and/or an "href" parameter', options);
		      }
		      return;
		    }
	
		    if (!options.name && !options.input) {
		      Logger.warn('Missing "name" or "input" parameters', options);
		    }
	
		    if (_.isArray(options.name) && _.isArray(options.input)) {
		      throw new Error('Not allowed to have both "name" and "input" defined as array.');
		    }
	
		    if (options.name && (model && model.allows)) {
		      var names = [];
		      if (_.isArray(options.name)) {
		        names = options.name;
		      } else {
		        names.push(options.name);
		      }
		      _.each(names, function (name) {
		        if (!model.allows(name)) {
		          throw new Error('field not allowed: ' + options.name);
		        }
		      });
		    }
	
		    if (_.isArray(options.input)) {
		      _.each(options.input, function (input) {
		        validateInput(input, model);
		      });
		    }
	
		    var keys = _.keys(options),
		        intersection = _.intersection(keys, ALL_OPTIONS);
	
		    if (_.size(intersection) != _.size(options)) {
		      var fields = _.clone(ALL_OPTIONS);
		      fields.unshift(keys);
		      Logger.warn('Invalid input parameters', _.without.apply(null, fields), options);
		    }
		  }
	
		  function generateInputOptions(options, form, createFn) {
		    options = _.clone(options);
	
		    if (_.contains(['list', 'group'], options.type)) {
		      options.params = _.defaults({
		        create: createFn,
		        inputs: _.map(_.isArray(options.input) ? options.input : [options.input], function (input) {
		          return _.first(generateInputOptions(input, form, createFn));
		        })
		      }, options.params || {});
		      delete options.input;
		    }
	
		    var inputs = _.isArray(options.input) ? _.clone(options.input) : [options];
	
		    return _.map(inputs, function (input) {
		      var target = _.defaults({model: form.model}, input, _.omit(options, 'input', 'inputs'), form.options, {
		        id: _.uniqueId('input'),
		        readOnly: form.isReadOnly(),
		        read: form.hasReadMode()
		      });
		      if (form.isReadOnly()) {
		        target.read = target.readOnly = true;
		      }
		      return target;
		    });
	
		  }
	
		  return {
	
		    LABEL_OPTIONS: LABEL_OPTIONS,
		    CONTAINER_OPTIONS: CONTAINER_OPTIONS,
		    WRAPPER_OPTIONS: WRAPPER_OPTIONS,
		    INPUT_OPTIONS: INPUT_OPTIONS,
	
		    generateInputOptions: generateInputOptions,
	
		    changeEventString: function (fieldNames) {
		      return 'change:' + fieldNames.join(' change:');
		    },
	
		    createReadFormButton: function (options) {
	
		      var action, text;
		      if (options.type == 'cancel') {
		        text = StringUtil.localize('oform.cancel');
		        action = function () {
		          this.model.trigger('form:cancel');
		        };
		      }
		      else {
		        text = StringUtil.localize('oform.edit');
		        action = function () {
		          this.model.set('__edit__', true);
		        };
		      }
	
		      return BaseView.extend({
		        tagName: 'a',
		        attributes: {
		          href: '#'
		        },
		        template: function () {
		          return _.escape(text);
		        },
		        events: {
		          click: function (e) {
		            e.preventDefault();
		            action.call(this);
		          }
		        }
		      });
	
		    },
	
		    createButton: function (options) {
		      options = _.clone(options);
		      switch (options.type) {
		      case 'save':
		        _.defaults(options, {className: 'button-primary'});
		        break;
		      case 'cancel':
		        _.defaults(options, {
		          text: StringUtil.localize('oform.cancel'),
		          action: function () {
		            this.model.trigger('form:cancel');
		          }
		        });
		        break;
		      case 'previous':
		        _.defaults(options, {
		          text: StringUtil.localize('oform.previous'),
		          action: function () {
		            this.model.trigger('form:previous');
		          }
		        });
		        break;
		      }
		      return createButton(options);
		    },
	
		    validateInput: validateInput,
	
		    /**
		     * Applies a show-when logic on a view instance.
		     * The show-when is a map of a model field name -> a boolean or a function that returns a boolean.
		     * The view will toggle based on the field value.
		     *
		     * @param  {Okta.View} view a view instance that has a this.model attached to it
		     * @param  {Object} showWhen
		     */
		    applyShowWhen: function (view, showWhen) {
		      var toggleAndResize = function (bool) {
		        return function () {
		          // The `toggle` is here since an event may be triggered before the el is in the DOM
		          // and in that case slide events may not function as expected.
		          view.$el.toggle(bool);
		          view.model.trigger('form:resize');
		        };
		      };
	
		      ViewUtil.applyDoWhen(view, decorateDoWhen(showWhen), function (bool, options) {
		        if (!options.animate) {
		          view.$el.toggle(bool);
		        }
		        else {
		          view.$el['slide' + (bool ? 'Down' : 'Up')](200, toggleAndResize(bool));
		        }
		      });
		    },
	
		    applyToggleWhen: function (view, toggleWhen) {
		      ViewUtil.applyDoWhen(view, decorateDoWhen(toggleWhen), function (bool, options) {
		        view.$el.toggle(bool);
		        view.model.trigger('form:resize');
		        if (options.animate) {
		          view.render();
		        }
		      });
		    }
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
		  function changeEventString(doWhen) {
		    return 'change:' + _.keys(doWhen).join(' change:');
		  }
	
		  function calcDoWhen(value, key) {
		    var modelValue = this.model.get(key);
		    if (_.isFunction(value)) {
		      return value.call(this, modelValue);
		    }
		    else {
		      return value == modelValue;
		    }
		  }
	
		  function _doWhen(view, doWhen, fn) {
		    var toggle = _.bind(fn, view, view, doWhen);
	
		    view.render = _.wrap(view.render, function (render) {
		      var val = render.call(view);
		      toggle({animate: false});
		      return val;
		    });
	
		    view.listenTo(view.model, changeEventString(doWhen), function () {
		      toggle({animate: true});
		    });
		  }
	
		  return {
		    applyDoWhen: function (view, doWhen, fn) {
		      if (!(view.model && _.isObject(doWhen) && _.size(doWhen) && _.isFunction(fn))) {
		        return;
		      }
		      _doWhen(view, doWhen, function (view, doWhen, options) {
		        var result = _.every(_.map(doWhen, calcDoWhen, view));
		        fn.call(view, result, options);
		      });
		    }
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView) {
	
		  var template = '\
		    <div class="okta-form-infobox-error infobox infobox-error">\
		      <span class="icon error-16"></span>\
		      {{#if errorSummary}}\
		        <p>{{errorSummary}}</p>\
		      {{else}}\
		        <p>{{i18n code="oform.errorbanner.title"}}</p>\
		      {{/if}}\
		    </div>\
		  ';
	
		  return BaseView.extend({
		    template: template,
		    modelEvents: {
		      'form:clear-errors': 'remove'
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
		  return {
	
		    /**
		     * Helper function that returns the json output of an xhr objext
		     * @param  {jqXhr} xhr
		     * @return {Object}
		     */
		    getResponseJSON: function (xhr) {
		      try {
		        return xhr.responseJSON || JSON.parse(xhr.responseText);
		      }
		      catch (e) {
		        return;
		      }
		    },
	
		    /**
		     * Parses an error summary to extract a field name and an error message
		     * @param  {String} errorSummary The raw error summary
		     * @return {String[]} An array with two members: [field name, error message]
		     */
		    parseErrorSummary: function (errorSummary) {
		      // error format is: `fieldName: The field cannot be left blank`
		      var matches = errorSummary.match(/^([^\:]+)\: (.+)$/);
		      if (matches) {
		        return [matches[1], matches[2]];
		      }
		    },
	
		    /**
		     * Parses the response for errors
		     * Returns a map of field names > array or error messages
		     * Example:
		     * ```javascript
		     * {
		     *   url: ['The field cannot be left blank', 'The field has to be a valid URI'],
		     *   name: ['The field cannot be left blank']
		     * }
		     * ```
		     * @param  {Object} resp
		     * @return {Object}
		     */
		    parseFieldErrors: function (resp) {
		      var responseJSON = this.getResponseJSON(resp),
		          errors = {};
	
		      // xhr error object
		      if (responseJSON) {
		        _.each(responseJSON.errorCauses || [], function (cause) {
		          var res = this.parseErrorSummary(cause && cause.errorSummary || '');
		          if (res) {
		            var fieldName = res[0], message = res[1];
		            errors[fieldName] || (errors[fieldName] = []);
		            errors[fieldName].push(message);
		          }
		        }, this);
		      }
		      // validation key/value object
		      else if (_.isObject(resp) && _.size(resp)) {
		        _.each(resp, function (msg, field) {
		          errors[field] = [msg];
		        });
		      }
		      return _.size(errors) ? errors : undefined;
		    }
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 71 */
	/***/ function(module, exports) {
	
		// empty (null-loader)
	
	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(26),
		  __webpack_require__(67)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, FormUtil) {
	
		  return BaseView.extend({
	
		    className: 'o-form-button-bar',
	
		    initialize: function (options) {
		      this.addButton({
		        type: 'save',
		        text: _.resultCtx(options, 'save', this),
		        className: _.resultCtx(options, 'saveClassName', this)
		      });
	
		      if (!options.noCancelButton) {
		        this.addButton({type: 'cancel', text: _.resultCtx(options, 'cancel', this)});
		      }
	
		      if (options.hasPrevStep) {
		        this.addButton({type: 'previous'}, {prepend: true});
		      }
		    },
	
		    /**
		     * Adds a buttomn to the toolbar
		     * @param {Object} params button parameters
		     * @param {Object} options {@link Okta.View#add} options
		     */
		    addButton: function (params, options) {
		      return this.add(FormUtil.createButton(params), options);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(26)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView) {
	
		  function getOption(callout, option) {
		    return _.resultCtx(callout.options, option, callout) || _.result(callout, option);
		  }
	
		  function getTopClass(callout) {
		    var klass = 'infobox clearfix infobox-' + getOption(callout, 'type');
		    switch (getOption(callout, 'size')) {
		    case 'standard':
		      klass += '';
		      break;
		    case 'compact':
		      klass += ' infobox-compact';
		      break;
		    case 'large':
		      klass += ' infobox-md';
		      break;
		    }
		    if (getOption(callout, 'dismissible')) {
		      klass += ' infobox-dismiss';
		    }
		    return klass;
		  }
	
		  var events = {
		    'click .infobox-dismiss-link': function (e) {
		      e.preventDefault();
		      this.remove();
		    }
		  };
	
		  var template = '\
		    {{#if dismissible}}\
		      <a class="infobox-dismiss-link" title="Dismiss" href="#">\
		        <span class="dismiss-icon"></span>\
		      </a>\
		    {{/if}}\
		    <span class="icon {{icon}}"></span>\
		    {{#if title}}<h3>{{title}}</h3>{{/if}}\
		    {{#if subtitle}}<p>{{subtitle}}</p>{{/if}}\
		    {{#if bullets}}\
		      <ul class="bullets">\
		      {{#each bullets}}<li>{{this}}</li>{{/each}}\
		      </ul>\
		    {{/if}}\
		  ';
	
		  /**
		   * @class Callout
		   * @private
		   */
	
		  var Callout = BaseView.extend({
	
		    /**
		     * Custom HTML or view to inject to the callout
		     * @type {String|Okta.View}
		     */
		    content: null,
	
		    /**
		     * Size of icon. options are standard, large, compact
		     * @type {String}
		     */
		    size: 'standard',
	
		    /**
		     * Type of the callout. Valid values are: info, success, warning, error, tip
		     * @type {String}
		     */
		    type: 'info',
	
		    /**
		     * Can the callout be dismissed
		     * @type {Boolean}
		     */
		    dismissible: false,
	
		    /**
		     * Callout title
		     * @type {String}
		     */
		    title: null,
	
		    /**
		     * Callout subtitle
		     * @type {String}
		     */
		    subtitle: null,
	
		    /**
		     * Array of strings to render as bullet points
		     * @type {Array}
		     */
		    bullets: null,
	
		    constructor: function () {
		      this.events = _.defaults(this.events || {}, events);
	
		      BaseView.apply(this, arguments);
	
		      this.$el.addClass(getTopClass(this));
	
		      this.template = template;
	
		      var content = getOption(this, 'content');
		      if (content) {
		        this.add(content);
		      }
		    },
	
		    getTemplateData: function () {
		      var icon = getOption(this, 'type');
		      if (icon == 'tip') { // css is inconsistent
		        icon = 'light-bulb';
		      }
		      return {
		        icon: icon + '-' + (getOption(this, 'size') == 'large' ? '24' : '16'),
		        title: getOption(this, 'title'),
		        subtitle: getOption(this, 'subtitle'),
		        bullets: getOption(this, 'bullets'),
		        dismissible: getOption(this, 'dismissible')
		      };
		    }
		  });
	
		  return {
		    /**
		     * @static
		     * @param {Object} options
		     * @param {String|Function} [options.size] Size of icon. options are standard, large, compact
		     * @param {String|Okta.View} [options.content] Custom HTML or view to inject to the callout
		     * @param {String|Function} [options.title] Callout title
		     * @param {String|Function} [options.subtitle] Callout subtitle
		     * @param {Array|Function} [options.bullets] Array of strings to render as bullet points
		     * @param {Boolean|Function} [options.dismissible] Can the callout be dismissed
		     * @param {String|Function} [options.type] Callout type. Valid values are: info, success, warning, error, tip
		     *
		     * @return {Callout}
		     */
		    create: function (options) {
		      return new Callout(options);
		    }
		  };
	
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* jshint maxparams: 100 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(86),
		  __webpack_require__(140),
		  __webpack_require__(101),
		  __webpack_require__(104),
		  __webpack_require__(115),
		  __webpack_require__(119),
		  __webpack_require__(121),
		  __webpack_require__(124),
		  __webpack_require__(125),
		  __webpack_require__(126),
		  __webpack_require__(127),
		  __webpack_require__(131),
		  __webpack_require__(132),
		  __webpack_require__(133),
		  __webpack_require__(134),
		  __webpack_require__(137),
		  __webpack_require__(138),
		  __webpack_require__(139),
		  __webpack_require__(75),
		  __webpack_require__(144),
		  __webpack_require__(146),
		  __webpack_require__(148),
		  __webpack_require__(149),
		  __webpack_require__(150),
		  __webpack_require__(152),
		  __webpack_require__(154),
		  __webpack_require__(155),
		  __webpack_require__(156),
		  __webpack_require__(157),
		  __webpack_require__(158),
		  __webpack_require__(159),
		  __webpack_require__(160),
		  __webpack_require__(161),
		  __webpack_require__(88),
		  __webpack_require__(94),
		  __webpack_require__(162)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseLoginRouter,
		          PrimaryAuthController,
		          VerifyDuoController,
		          MfaVerifyController,
		          VerifyWindowsHelloController,
		          VerifyU2FController,
		          EnrollChoicesController,
		          EnrollDuoController,
		          EnrollQuestionController,
		          EnrollWindowsHelloController,
		          EnrollCallAndSmsController,
		          EnrollOnPremController,
		          EnrollSymantecVipController,
		          EnrollYubikeyController,
		          EnrollTotpController,
		          EnrollU2FController,
		          BarcodeTotpController,
		          BarcodePushController,
		          ActivateTotpController,
		          ManualSetupTotpController,
		          ManualSetupPushController,
		          EnrollmentLinkSentController,
		          EnterPasscodePushFlowController,
		          PasswordExpiredController,
		          ForgotPasswordController,
		          RecoveryChallengeController,
		          PwdResetEmailSentController,
		          RecoveryQuestionController,
		          PasswordResetController,
		          RecoveryLoadingController,
		          UnlockAccountController,
		          AccountUnlockedController,
		          UnlockEmailSentController,
		          RefreshAuthStateController,
		          SecurityBeacon,
		          FactorBeacon) {
		  return BaseLoginRouter.extend({
	
		    routes: {
		      '': 'primaryAuth',
		      'signin': 'primaryAuth',
		      'signin/verify/duo/web': 'verifyDuo',
		      'signin/verify/fido/webauthn': 'verifyWindowsHello',
		      'signin/verify/fido/u2f': 'verifyU2F',
		      'signin/verify/:provider/:factorType': 'verify',
		      'signin/enroll': 'enrollChoices',
		      'signin/enroll/duo/web': 'enrollDuo',
		      'signin/enroll/okta/question': 'enrollQuestion',
		      'signin/enroll/okta/sms': 'enrollSms',
		      'signin/enroll/okta/call': 'enrollCall',
		      'signin/enroll-activate/okta/sms': 'enrollSms',
		      'signin/enroll/rsa/token': 'enrollRsa',
		      'signin/enroll/del_oath/token': 'enrollOnPrem',
		      'signin/enroll/symantec/token': 'enrollSymantecVip',
		      'signin/enroll/yubico/token:hardware': 'enrollYubikey',
		      'signin/enroll/fido/webauthn': 'enrollWindowsHello',
		      'signin/enroll/fido/u2f': 'enrollU2F',
		      'signin/enroll/:provider/:factorType': 'enrollTotpFactor',
		      'signin/enroll-activate/okta/push': 'scanBarcodePushFactor',
		      'signin/enroll-activate/okta/push/manual': 'manualSetupPushFactor',
		      'signin/enroll-activate/okta/push/sent': 'activationLinkSent',
		      'signin/enroll-activate/okta/token:software:totp/passcode': 'enterPasscodeInPushEnrollmentFlow',
		      'signin/enroll-activate/:provider/:factorType': 'scanBarcodeTotpFactor',
		      'signin/enroll-activate/:provider/:factorType/activate': 'activateTotpFactor',
		      'signin/enroll-activate/:provider/:factorType/manual': 'manualSetupTotpFactor',
		      'signin/password-expired': 'passwordExpired',
		      'signin/forgot-password': 'forgotPassword',
		      'signin/recovery-challenge': 'recoveryChallenge',
		      'signin/recovery-emailed': 'recoveryEmailSent',
		      'signin/recovery-question': 'recoveryQuestion',
		      'signin/password-reset': 'passwordReset',
		      'signin/reset-password/:token': 'recoveryLoading',
		      'signin/user-unlock/:token': 'recoveryLoading',
		      'signin/recovery/:token': 'recoveryLoading',
		      'signin/unlock-emailed': 'unlockEmailSent',
		      'signin/unlock': 'unlockAccount',
		      'signin/account-unlocked': 'accountUnlocked',
		      'signin/refresh-auth-state(/:token)': 'refreshAuthState',
		      '*wildcard': 'primaryAuth'
		    },
	
		    // Route handlers that do not require a stateToken. If the page is refreshed,
		    // these functions will not require a status call to refresh the stateToken.
		    stateLessRouteHandlers: [
		      'primaryAuth', 'forgotPassword', 'recoveryLoading', 'unlockAccount', 'refreshAuthState'
		    ],
	
		    primaryAuth: function () {
		      this.render(PrimaryAuthController, { Beacon: SecurityBeacon });
		    },
	
		    verifyDuo: function () {
		      this.render(VerifyDuoController, {
		        provider: 'DUO',
		        factorType: 'web',
		        Beacon: FactorBeacon
		      });
		    },
	
		    verifyWindowsHello: function () {
		      this.render(VerifyWindowsHelloController, {
		        provider: 'FIDO',
		        factorType: 'webauthn',
		        Beacon: FactorBeacon
		      });
		    },
	
		    verifyU2F: function () {
		      this.render(VerifyU2FController, {
		        provider: 'FIDO',
		        factorType: 'u2f',
		        Beacon: FactorBeacon
		      });
		    },
	
		    verify: function (provider, factorType) {
		      this.render(MfaVerifyController, {
		        provider: provider.toUpperCase(),
		        factorType: factorType,
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollChoices: function () {
		      this.render(EnrollChoicesController, { Beacon: SecurityBeacon });
		    },
	
		    enrollDuo: function () {
		      this.render(EnrollDuoController, {
		        provider: 'DUO',
		        factorType: 'web',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollQuestion: function () {
		      this.render(EnrollQuestionController, {
		        provider: 'OKTA',
		        factorType: 'question',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollSms: function () {
		      this.render(EnrollCallAndSmsController, {
		        provider: 'OKTA',
		        factorType: 'sms',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollCall: function () {
		      this.render(EnrollCallAndSmsController, {
		        provider: 'OKTA',
		        factorType: 'call',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollRsa: function () {
		      this.render(EnrollOnPremController, {
		        provider: 'RSA',
		        factorType: 'token',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollOnPrem: function () {
		      this.render(EnrollOnPremController, {
		        provider: 'DEL_OATH',
		        factorType: 'token',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollSymantecVip: function () {
		      this.render(EnrollSymantecVipController, {
		        provider: 'SYMANTEC',
		        factorType: 'token',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollYubikey: function () {
		      this.render(EnrollYubikeyController, {
		        provider: 'YUBICO',
		        factorType: 'token:hardware',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollTotpFactor: function (provider, factorType) {
		      this.render(EnrollTotpController, {
		        provider: provider.toUpperCase(),
		        factorType: factorType,
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollWindowsHello: function () {
		      this.render(EnrollWindowsHelloController, {
		        provider: 'FIDO',
		        factorType: 'webauthn',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enrollU2F: function () {
		      this.render(EnrollU2FController, {
		        provider: 'FIDO',
		        factorType: 'u2f',
		        Beacon: FactorBeacon
		      });
		    },
	
		    scanBarcodeTotpFactor: function (provider, factorType) {
		      this.render(BarcodeTotpController, {
		        provider: provider.toUpperCase(),
		        factorType: factorType,
		        Beacon: FactorBeacon
		      });
		    },
	
		    scanBarcodePushFactor: function () {
		      this.render(BarcodePushController, {
		        provider: 'OKTA',
		        factorType: 'push',
		        Beacon: FactorBeacon
		      });
		    },
	
		    activateTotpFactor: function (provider, factorType) {
		      this.render(ActivateTotpController, {
		        provider: provider.toUpperCase(),
		        factorType: factorType,
		        Beacon: FactorBeacon
		      });
		    },
	
		    manualSetupTotpFactor: function (provider, factorType) {
		      this.render(ManualSetupTotpController, {
		        provider: provider.toUpperCase(),
		        factorType: factorType,
		        Beacon: FactorBeacon
		      });
		    },
	
		    manualSetupPushFactor: function () {
		      this.render(ManualSetupPushController, {
		        provider: 'OKTA',
		        factorType: 'push',
		        Beacon: FactorBeacon
		      });
		    },
	
		    activationLinkSent: function () {
		      this.render(EnrollmentLinkSentController, {
		        provider: 'OKTA',
		        factorType: 'push',
		        Beacon: FactorBeacon
		      });
		    },
	
		    enterPasscodeInPushEnrollmentFlow: function () {
		      this.render(EnterPasscodePushFlowController, {
		        provider: 'OKTA',
		        factorType: 'token:software:totp',
		        Beacon: FactorBeacon
		      });
		    },
	
		    passwordExpired: function () {
		      this.render(PasswordExpiredController, { Beacon: SecurityBeacon });
		    },
	
		    forgotPassword: function () {
		      this.render(ForgotPasswordController);
		    },
	
		    recoveryChallenge: function () {
		      this.render(RecoveryChallengeController, { Beacon: SecurityBeacon });
		    },
	
		    recoveryEmailSent: function () {
		      this.render(PwdResetEmailSentController, { Beacon: SecurityBeacon });
		    },
	
		    unlockEmailSent: function () {
		      this.render(UnlockEmailSentController, { Beacon: SecurityBeacon });
		    },
	
		    recoveryQuestion: function () {
		      this.render(RecoveryQuestionController, { Beacon: SecurityBeacon });
		    },
	
		    passwordReset: function () {
		      this.render(PasswordResetController, { Beacon: SecurityBeacon });
		    },
	
		    recoveryLoading: function (token) {
		      this.render(RecoveryLoadingController, {
		        token: token,
		        Beacon: SecurityBeacon
		      });
		    },
	
		    unlockAccount: function () {
		      this.render(UnlockAccountController);
		    },
	
		    accountUnlocked: function () {
		      this.render(AccountUnlockedController, { Beacon: SecurityBeacon });
		    },
	
		    refreshAuthState: function (token) {
		      this.render(RefreshAuthStateController, {
		        token: token,
		        Beacon: SecurityBeacon
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(80),
		  __webpack_require__(84)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, EnterPasscodeForm, Footer) {
	
		  return FormController.extend({
		    className: 'activate-totp',
		    Model: function () {
		      return {
		        props: {
		          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
		          passCode: ['string', true]
		        },
		        local: {
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        },
		        save: function () {
		          return this.doTransaction(function(transaction) {
		            return transaction.activate({
		              passCode: this.get('passCode')
		            });
		          });
		        }
		      };
		    },
	
		    Form: EnterPasscodeForm,
	
		    Footer: Footer
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(77),
		  __webpack_require__(72),
		  __webpack_require__(67),
		  __webpack_require__(78),
		  __webpack_require__(79)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, Toolbar, FormUtil, BaseLoginController, BaseLoginModel) {
	
		  var _ = Okta._;
	
		  var SimpleForm = Okta.Form.extend({
		    layout: 'o-form-theme',
		    noCancelButton: true,
		    constructor: function (options) {
		      Okta.Form.call(this, options);
		      _.each(_.result(this, 'formChildren') || [], function (child) {
		        switch (child.type) {
		        case FormType.INPUT:
		          this.addInput(_.extend({
		            label: false,
		            'label-top': true
		          }, child.viewOptions));
		          break;
		        case FormType.BUTTON:
		          this.add(Okta.createButton(_.extend({ model: this.model }, child.viewOptions)), child.addOptions);
		          FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
		          break;
		        case FormType.DIVIDER:
		          this.addDivider(child.viewOptions);
		          break;
		        case FormType.TOOLBAR:
		          this.add(Toolbar, { options: child.viewOptions });
		          FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
		          break;
		        case FormType.VIEW:
		          this.add(child.viewOptions.View, child.addOptions);
		          FormUtil.applyShowWhen(this.last(), child.viewOptions.showWhen);
		          break;
		        default:
		          throw new Error('Unrecognized child type: ' + child.type);
		        }
		      }, this);
		    }
		  });
	
		  return BaseLoginController.extend({
	
		    constructor: function () {
		      var initialize = this.initialize;
		      this.initialize = function () {};
	
		      BaseLoginController.apply(this, arguments);
	
		      if (this.Model && this.Form) {
		        var Model = BaseLoginModel.extend(_.extend({
		          parse: function (attributes) {
		            this.settings = attributes.settings;
		            this.appState = attributes.appState;
		            return _.omit(attributes, ['settings', 'appState']);
		          }
		        }, _.result(this, 'Model')));
		        this.model = new Model({
		          settings: this.settings,
		          appState: this.options.appState
		        }, { parse: true });
		        var Form = SimpleForm.extend(_.result(this, 'Form', this));
		        this.form = new Form(this.toJSON());
		        this.add(this.form);
		      }
	
		      if (this.Footer) {
		        this.footer = new this.Footer(this.toJSON());
		        this.add(this.footer);
		      }
	
		      this.addListeners();
		      initialize.apply(this, arguments);
		    },
	
		    toJSON: function () {
		      var data = BaseLoginController.prototype.toJSON.apply(this, arguments);
		      return _.extend(_.pick(this.options, 'appState'), data);
		    },
	
		    back: function () {
		      if (this.footer && this.footer.back) {
		        this.footer.back();
		      }
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
		  // Syntactic sugar to provide some structure to SimpleForm inputs - Just
		  // wraps options with { type: type, viewOptions: viewOptions, addOptions: addOptions }
	
		  var INPUT = 'INPUT';
		  var BUTTON = 'BUTTON';
		  var DIVIDER = 'DIVIDER';
		  var TOOLBAR = 'TOOLBAR';
		  var VIEW = 'VIEW';
	
		  function wrap(type) {
		    return function (viewOptions, addOptions) {
		      return { type: type, viewOptions: viewOptions, addOptions: addOptions };
		    };
		  }
	
		  return {
		    Input: wrap(INPUT),
		    Button: wrap(BUTTON),
		    Divider: wrap(DIVIDER),
		    Toolbar: wrap(TOOLBAR),
		    View: wrap(VIEW),
	
		    INPUT: INPUT,
		    BUTTON: BUTTON,
		    DIVIDER: DIVIDER,
		    TOOLBAR: TOOLBAR,
		    VIEW: VIEW
		  };
	
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint newcap:false */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q) {
		  var _ = Okta._;
	
		  function getForm(controller) {
		    return _.find(controller.getChildren(), function (item) {
		      return (item instanceof Okta.Form);
		    });
		  }
	
		  return Okta.Controller.extend({
	
		    // Ideally we should be attaching the listeners in the constructor, but because of the way
		    // we construct the FormController (this.model is generated after the BaseLoginController's
		    // constructor is called), this.model is undefined in when try to attach the events and
		    // therefore we don't listen to events for such forms. And changing the order in which we call
		    // the constructor doesn't help either (JS errors etc.). This at least guarantees that we
		    // are listening to the model events.
		    // Note - Figure out a way to call the constructor in the right order.
		    addListeners: function () {
		      // TOTP model is special, its model will not be attached to a controller, but will
		      // tag along with the push factor model. We need to listen to the transaction
		      // changes on this as well (in case of the push+totp form).
		      var totpModel = this.model.get('backupFactor');
	
		      // Events to enable/disable the primary button on the forms
		      this.listenTo(this.model, 'save', function () {
		        //disable the submit button on forms while making the request
		        //to prevent users from hitting rate limiting exceptions of
		        //1 per second on the auth api
		        var form = getForm(this);
		        var disableSubmitButton = form.disableSubmitButton;
		        if (disableSubmitButton && !form.disableSubmitButton()) {
		          return;
		        }
		        this.toggleButtonState(true);
		      });
	
		      this.listenTo(this.model, 'error', function () {
		        this.toggleButtonState(false);
		      });
	
		      var setTransactionHandler = _.bind(function (transaction) {
		        this.options.appState.set('transaction', transaction);
		      }, this);
		      var transactionErrorHandler = _.bind(function (err) {
		        this.options.appState.set('transactionError', err);
		      }, this);
	
		      // Events to set the transaction attributes on the app state.
		      this.listenTo(this.model, 'setTransaction', setTransactionHandler);
		      this.listenTo(this.model, 'setTransactionError', transactionErrorHandler);
	
		      // For TOTP factor model
		      if (totpModel) {
		        this.listenTo(totpModel, 'setTransaction', setTransactionHandler);
		        this.listenTo(totpModel, 'setTransactionError', transactionErrorHandler);
		      }
		    },
	
		    // Override this method to delay switching to this screen until return
		    // promise is resolved. This is useful for cases like enrolling a security
		    // question, which requires an additional request to fetch the question
		    // list.
		    fetchInitialData: function () {
		      return Q();
		    },
	
		    // Override this method to prevent route navigation. This is useful for
		    // intermediate status changes that do not trigger a full refresh of the
		    // page, like MFA_ENROLL_ACTIVATE and MFA_CHALLENGE.
		    trapAuthResponse: function () {
		      return false;
		    },
	
		    toJSON: function () {
		      var data = Okta.Controller.prototype.toJSON.apply(this, arguments);
		      return _.extend(_.pick(this.options, 'appState'), data);
		    },
	
		    toggleButtonState: function (state) {
		      var button = this.$el.find('.button');
		      button.toggleClass('link-button-disabled', state);
		    },
	
	
		    postRenderAnimation: function() {
		      // Event triggered after a page is rendered along with the classname to identify the page
		      this.trigger('pageRendered', {page: this.className});
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(9)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q) {
	
		  var _ = Okta._;
		  var KNOWN_ERRORS = [
		    'OAuthError', 
		    'AuthSdkError', 
		    'AuthPollStopError', 
		    'AuthApiError'
		  ];
	
		  return Okta.Model.extend({
		    doTransaction: function (fn, rethrow) {
		      var self = this;
		      return fn.call(this, this.appState.get('transaction'))
		      .then(function(trans) {
		        self.trigger('setTransaction', trans);
		        return trans;
		      })
		      .fail(function(err) {
		        // Q may still consider AuthPollStopError to be unhandled
		        if (err.name === 'AuthPollStopError') {
		          return;
		        }
		        self.trigger('setTransactionError', err);
		        self.trigger('error', self, err.xhr);
		        if (rethrow || _.indexOf(KNOWN_ERRORS, err.name) === -1) {
		          throw err;
		        }
		      });
		    },
	
		    manageTransaction: function (fn) {
		      var self = this,
		          res = fn.call(this, this.appState.get('transaction'), _.bind(this.setTransaction, this));
		      
		      // If it's a promise, listen for failures
		      if (Q.isPromise(res)) {
		        res.fail(function(err) {
		          if (err.name === 'AuthPollStopError') {
		            return;
		          }
		          self.trigger('setTransactionError', err);
		          self.trigger('error', self, err.xhr);
		        });
		      }
	
		      return Q.resolve(res);
		    },
	
		    startTransaction: function (fn) {
		      var self = this,
		          res = fn.call(this, this.settings.getAuthClient());
	
		      // If it's a promise, then chain to it
		      if (Q.isPromise(res)) {
		        return res.then(function(trans) {
		          self.trigger('setTransaction', trans);
		          return trans;
		        })
		        .fail(function(err) {
		          self.trigger('setTransactionError', err);
		          self.trigger('error', self, err.xhr);
		          throw err;
		        });
		      }
	
		      return Q.resolve(res);
		    },
	
		    setTransaction: function (trans) {
		      this.appState.set('transaction', trans);
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(77),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormType, TextBox) {
	
		  var _ = Okta._;
	
		  var form = {
		    title: function () {
		      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		      return Okta.loc('enroll.totp.title', 'login', [factorName]);
		    },
		    subtitle: _.partial(Okta.loc, 'enroll.totp.enterCode', 'login'),
		    autoSave: true,
		    noButtonBar: true,
		    attributes: { 'data-se': 'step-sendcode' },
	
		    formChildren: function () {
		      return [
		        FormType.Input({
		          name: 'passCode',
		          input: TextBox,
		          type: 'text',
		          placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		          params: {
		            innerTooltip: Okta.loc('mfa.challenge.enterCode.tooltip', 'login')
		          }
		        }),
	
		        FormType.Toolbar({
		          noCancelButton: true,
		          save: Okta.loc('oform.verify', 'login')
		        })
		      ];
		    }
		  };
	
		  return form;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  var fn = {};
	
		  var factorData = {
		    'OKTA_VERIFY': {
		      label: 'factor.totpSoft.oktaVerify',
		      description: 'factor.totpSoft.description',
		      iconClassName: 'mfa-okta-verify',
		      sortOrder: 1
		    },
		    'OKTA_VERIFY_PUSH': {
		      label: 'factor.oktaVerifyPush',
		      description: 'factor.push.description',
		      iconClassName: 'mfa-okta-verify',
		      sortOrder: 1
		    },
		    'GOOGLE_AUTH': {
		      label: 'factor.totpSoft.googleAuthenticator',
		      description: 'factor.totpSoft.description',
		      iconClassName: 'mfa-google-auth',
		      sortOrder: 2
		    },
		    'SYMANTEC_VIP': {
		      label: 'factor.totpHard.symantecVip',
		      description: 'factor.totpHard.description',
		      iconClassName: 'mfa-symantec',
		      sortOrder: 3
		    },
		    'RSA_SECURID': {
		      label: 'factor.totpHard.rsaSecurId',
		      description: 'factor.totpHard.description',
		      iconClassName: 'mfa-rsa',
		      sortOrder: 4
		    },
		    'ON_PREM': {
		      label: '',
		      description: 'factor.totpHard.description',
		      iconClassName: 'mfa-onprem',
		      sortOrder: 4
		    },
		    'DUO': {
		      label: 'factor.duo',
		      description: 'factor.duo.description',
		      iconClassName: 'mfa-duo',
		      sortOrder: 5
		    },
		    'YUBIKEY': {
		      label: 'factor.totpHard.yubikey',
		      description: 'factor.totpHard.yubikey.description',
		      iconClassName: 'mfa-yubikey',
		      sortOrder: 6
		    },
		    'SMS': {
		      label: 'factor.sms',
		      description: 'factor.sms.description',
		      iconClassName: 'mfa-okta-sms',
		      sortOrder: 7
		    },
		    'CALL': {
		      label: 'factor.call',
		      description: 'factor.call.description',
		      iconClassName: 'mfa-okta-call',
		      sortOrder: 8
		    },
		    'QUESTION': {
		      label: 'factor.securityQuestion',
		      description: 'factor.securityQuestion.description',
		      iconClassName: 'mfa-okta-security-question',
		      sortOrder: 9
		    },
		    'WINDOWS_HELLO': {
		      label: 'factor.windowsHello',
		      description: 'factor.windowsHello.signin.description',
		      iconClassName: 'mfa-windows-hello',
		      sortOrder: 10
		    },
		    'U2F': {
		      label: 'factor.u2f',
		      description: 'factor.u2f.description',
		      iconClassName: 'mfa-u2f',
		      sortOrder: 11
		    }
		  };
	
		  /* jshint maxstatements: 30, maxcomplexity: 15 */
		  fn.getFactorName = function (provider, factorType) {
		    if (provider === 'OKTA' && factorType === 'token:software:totp') {
		      return 'OKTA_VERIFY';
		    }
		    if (provider === 'OKTA' && factorType === 'push') {
		      return 'OKTA_VERIFY_PUSH';
		    }
		    if (provider === 'GOOGLE') {
		      return 'GOOGLE_AUTH';
		    }
		    if (provider === 'SYMANTEC' && factorType === 'token') {
		      return 'SYMANTEC_VIP';
		    }
		    if (provider === 'RSA' && factorType === 'token') {
		      return 'RSA_SECURID';
		    }
		    if (provider === 'DEL_OATH' && factorType === 'token') {
		      return 'ON_PREM';
		    }
		    if (provider === 'DUO' && factorType === 'web') {
		      return 'DUO';
		    }
		    if (provider === 'YUBICO' && factorType === 'token:hardware') {
		      return 'YUBIKEY';
		    }
		    if (provider === 'OKTA' && factorType === 'sms') {
		      return 'SMS';
		    }
		    if (provider === 'OKTA' && factorType === 'call') {
		      return 'CALL';
		    }
		    if (provider === 'OKTA' && factorType === 'question') {
		      return 'QUESTION';
		    }
		    if (provider === 'FIDO' && factorType === 'webauthn') {
		      return 'WINDOWS_HELLO';
		    }
		    if (provider === 'FIDO' && factorType === 'u2f') {
		      return 'U2F';
		    }
		  };
	
		  fn.isOktaVerify = function (provider, factorType) {
		    return provider === 'OKTA' && (factorType === 'token:software:totp' || factorType === 'push');
		  };
	
		  fn.getFactorLabel = function (provider, factorType) {
		    var key = factorData[fn.getFactorName(provider, factorType)].label;
		    return Okta.loc(key, 'login');
		  };
	
		  fn.getFactorDescription = function (provider, factorType) {
		    var key = factorData[fn.getFactorName(provider, factorType)].description;
		    return Okta.loc(key, 'login');
		  };
	
		  fn.getFactorIconClassName = function (provider, factorType) {
		    return factorData[fn.getFactorName(provider, factorType)].iconClassName;
		  };
	
		  fn.getFactorSortOrder = function (provider, factorType) {
		    return factorData[fn.getFactorName(provider, factorType)].sortOrder;
		  };
	
		  fn.getRememberDeviceValue = function (appState) {
		    return appState && appState.get('rememberDeviceByDefault');
		  };
	
		  fn.getSecurityQuestionLabel = function (questionObj) {
		    var localizedQuestion = Okta.loc('security.' + questionObj.question);
		    return localizedQuestion.indexOf('L10N_ERROR') < 0 ? localizedQuestion : questionObj.questionText;
		  };
	
	
		  return fn;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		//note: not including Okta here and explicitly including jquery and Handlebars
		//because we want to be explicit about which TextBox we are extending here
		//and want to avoid the cirucular dependency that occurs if we
		//include Okta
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(6),
		  __webpack_require__(5),
		  __webpack_require__(83),
		  __webpack_require__(40),
		  __webpack_require__(65)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Handlebars, BrowserFeatures, TextBox) {
	
		  function hasTitleAndText(options) {
		    var title = options.title,
		        text = options.text;
	
		    if (title && text && title !== text) {
		      return true;
		    }
		    return false;
		  }
	
		  // options may be a string or an object.
		  function createQtipContent(options) {
		    if (hasTitleAndText(options)) {
		      return options;
		    }
		    return {text: options.text || options};
		  }
	
		  return TextBox.extend({
	
		    template: Handlebars.compile('\
		      {{#if params}}\
		        {{#if params.innerTooltip}}\
		          <span class="input-tooltip icon form-help-16"></span>\
		        {{/if}}\
		        {{#if params.icon}}\
		          <span class="icon input-icon {{params.icon}}"></span>\
		        {{/if}}\
		      {{/if}}\
		      <input type="{{type}}" placeholder="{{placeholder}}" aria-label="{{placeholder}}"\
		        name="{{name}}" id="{{inputId}}" value="{{value}}" autocomplete="off"/>\
		    '),
	
		    postRender: function () {
		      var params = this.options.params,
		          content;
	
		      if (params && params.innerTooltip) {
		        content = createQtipContent(params.innerTooltip);
		        this.$('.input-tooltip').qtip({
		          content: content,
		          style: {classes: 'okta-sign-in-tooltip qtip-custom qtip-shadow'},
		          position: {
		            my: 'bottom left',
		            at: 'top center',
		            adjust: {
		              method: 'flip'
		            },
		            viewport: $('body')
		          },
		          hide: {fixed: true},
		          show: {delay: 0}
		        });
		      }
		    },
	
		    // Override the focus() to ignore focus in IE. IE (8-11) has a known bug where
		    // the placeholder text disappears when the input field is focused.
		    focus: function () {
		      if (BrowserFeatures.isIE()) {
		        return;
		      }
		      return TextBox.prototype.focus.apply(this, arguments);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
		  var fn = {},
		      hasFullCorsSupport = 'withCredentials' in new window.XMLHttpRequest(),
		      hasXDomainRequest = typeof XDomainRequest !== 'undefined';
	
		  fn.corsIsNotSupported = function () {
		    return !(hasFullCorsSupport || hasXDomainRequest);
		  };
	
		  fn.corsIsNotEnabled = function (jqXhr) {
		    // Not a definitive check, but it's the best we've got.
		    // Note: This will change when OktaAuth is updated
		    return jqXhr.status === 0;
		  };
	
		  // This is currently not being used, but we'll keep it around for when we
		  // want a fallback mechanism - i.e. use localStorage if it exists, else fall
		  // back to cookies.
		  fn.localStorageIsNotSupported = function () {
		    var test = 'test';
		    try {
		        localStorage.setItem(test, test);
		        localStorage.removeItem(test);
		        return false;
		    } catch(e) {
		        return true;
		    }
		  };
	
		  fn.supportsPushState = function (win) {
		    win = win || window;
		    return !!(win.history && win.history.pushState);
		  };
	
		  fn.isIE = function () {
		    return /(msie|trident)/i.test(navigator.userAgent);
		  };
	
		  fn.isFirefox = function () {
		    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
		  };
	
		  // Returns a list of languages the user has configured for their browser, in
		  // order of preference.
		  fn.getUserLanguages = function () {
		    var languages, properties;
	
		    // Chrome, Firefox
		    if (navigator.languages) {
		      return navigator.languages;
		    }
	
		    languages = [];
		    properties = [
		      'language',         // Safari, IE11
		      'userLanguage',     // IE
		      'browserLanguage',  // IE
		      'systemLanguage'    // IE
		    ];
	
		    _.each(properties, function (property) {
		      if (navigator[property]) {
		        languages.push(navigator[property]);
		      }
		    });
	
		    return languages;
		  };
	
		  return fn;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums) {
	
		  return Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="mfa.backToFactors" bundle="login"}}\
		      </a>\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      }
		    },
	
		    back: function () {
		      this.state.set('navigateDir', Enums.DIRECTION_BACK);
		      if (this.options.appState.get('prevLink')) {
		        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
		        // correct state. Fortunately, this means that the router will
		        // handle navigation once the request is finished.
		        this.model.doTransaction(function (transaction) {
		          return transaction.prev();
		        });
		      }
		      else {
		        this.options.appState.trigger('navigate', 'signin/enroll');
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(module.exports = {
	
		  DIRECTION_BACK: 'DIRECTION_BACK',
	
		  RECOVERY_TYPE_PASSWORD: 'PASSWORD',
		  RECOVERY_TYPE_UNLOCK: 'UNLOCK',
		  RECOVERY_FACTOR_TYPE_SMS: 'SMS',
		  RECOVERY_FACTOR_TYPE_EMAIL: 'EMAIL',
		  RECOVERY_FACTOR_TYPE_CALL: 'CALL',
	
		  // Global success messages
		  SUCCESS: 'SUCCESS',
		  FORGOT_PASSWORD_EMAIL_SENT: 'FORGOT_PASSWORD_EMAIL_SENT',
		  UNLOCK_ACCOUNT_EMAIL_SENT: 'UNLOCK_ACCOUNT_EMAIL_SENT',
	
		  // Global error messages
		  CONFIG_ERROR: 'CONFIG_ERROR',
		  UNSUPPORTED_BROWSER_ERROR: 'UNSUPPORTED_BROWSER_ERROR',
		  OAUTH_ERROR: 'OAUTH_ERROR',
	
		  // Enroll choice page types
		  ALL_OPTIONAL_NONE_ENROLLED: 'ALL_OPTIONAL_NONE_ENROLLED',
		  ALL_OPTIONAL_SOME_ENROLLED: 'ALL_OPTIONAL_SOME_ENROLLED',
		  HAS_REQUIRED_NONE_ENROLLED: 'HAS_REQUIRED_NONE_ENROLLED',
		  HAS_REQUIRED_SOME_REQUIRED_ENROLLED: 'HAS_REQUIRED_SOME_REQUIRED_ENROLLED',
		  HAS_REQUIRED_ALL_REQUIRED_ENROLLED: 'HAS_REQUIRED_ALL_REQUIRED_ENROLLED',
	
		  // Operations
		  PRIMARY_AUTH: 'PRIMARY_AUTH',
		  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
		  UNLOCK_ACCOUNT: 'UNLOCK_ACCOUNT'
	
		});
	
	
	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* jshint maxparams: 100 */
		// BaseLoginRouter contains the more complicated router logic - rendering/
		// transition, etc. Most router changes should happen in LoginRouter (which is
		// responsible for adding new routes)
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(22),
		  __webpack_require__(83),
		  __webpack_require__(88),
		  __webpack_require__(89),
		  __webpack_require__(91),
		  __webpack_require__(94),
		  __webpack_require__(87),
		  __webpack_require__(95),
		  __webpack_require__(97),
		  __webpack_require__(92),
		  __webpack_require__(90),
		  __webpack_require__(8)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Backbone, BrowserFeatures, RefreshAuthStateController, Settings, Header,
		          SecurityBeacon, AuthContainer, AppState, RouterUtil, Animations, Errors, Bundles) {
	
		  var _ = Okta._,
		      $ = Okta.$;
	
		  function isStateLessRouteHandler(router, fn) {
		    return _.find(router.stateLessRouteHandlers, function (routeName) {
		      return fn === router[routeName];
		    });
		  }
	
		  function beaconIsAvailable(Beacon, settings) {
		    if (!Beacon) {
		      return false;
		    }
		    if (Beacon === SecurityBeacon) {
		      return settings.get('features.securityImage');
		    }
		    return true;
		  }
	
		  function loadLanguage(appState, i18n, assetBaseUrl, assetRewrite) {
		    var timeout = setTimeout(function () {
		      // Trigger a spinner if we're waiting on a request for a new language.
		      appState.trigger('loading', true);
		    }, 200);
		    return Bundles.loadLanguage(
		      appState.get('languageCode'),
		      i18n,
		      {
		        baseUrl: assetBaseUrl,
		        rewrite: assetRewrite
		      }
		    )
		    .then(function () {
		      clearTimeout(timeout);
		      appState.trigger('loading', false);
		    });
		  }
	
		  return Okta.Router.extend({
		    Events:  Backbone.Events,
	
		    initialize: function (options) {
		      this.settings = new Settings(_.omit(options, 'el', 'authClient'), { parse: true });
		      this.settings.setAuthClient(options.authClient);
	
		      if (!options.el) {
		        this.settings.callGlobalError(new Errors.ConfigError(
		          Okta.loc('error.required.el')
		        ));
		      }
	
		      $('body > div').on('click', function () {
		        // OKTA-69769 Tooltip wont close on iPhone/iPad
		        // Registering a click handler on the first div
		        // allows a tap that falls outside the tooltip
		        // to be registered as a tap by iOS
		        // and then the open tooltip will lose focus and close.
		      });
	
		      this.appState = new AppState({
		        baseUrl: this.settings.get('baseUrl'),
		        settings: this.settings
		      }, { parse: true });
	
		      var wrapper = new AuthContainer({appState: this.appState});
		      Okta.$(options.el).append(wrapper.render().$el);
		      this.el = '#okta-sign-in';
	
		      this.header = new Header({
		        el: this.el,
		        appState: this.appState,
		        settings: this.settings
		      });
	
		      this.listenTo(this.appState, 'change:transactionError', function (appState, err) {
		        RouterUtil.routeAfterAuthStatusChange(this, err);
		      });
	
		      this.listenTo(this.appState, 'change:transaction', function (appState, trans) {
		        RouterUtil.routeAfterAuthStatusChange(this, null, trans.data);
		      });
	
		      this.listenTo(this.appState, 'navigate', function (url) {
		        this.navigate(url, { trigger: true });
		      });
		    },
	
		    execute: function (cb, args) {
		      // Recovery flow with a token passed through widget settings
		      var recoveryToken = this.settings.get('recoveryToken');
		      if (recoveryToken) {
		        this.settings.unset('recoveryToken');
		        this.navigate(RouterUtil.createRecoveryUrl(recoveryToken), { trigger: true });
		        return;
		      }
	
		      // Refresh flow with a stateToken passed through widget settings
		      var stateToken = this.settings.get('stateToken');
		      if (stateToken) {
		        this.settings.unset('stateToken');
		        this.navigate(RouterUtil.createRefreshUrl(stateToken), { trigger: true });
		        return;
		      }
	
		      // Normal flow - we've either navigated to a stateless page, or are
		      // in the middle of an auth flow
		      var trans = this.appState.get('transaction');
		      if ((trans && trans.data) || isStateLessRouteHandler(this, cb)) {
		        cb.apply(this, args);
		        return;
		      }
	
		      // StateToken cookie exists on page load, and we are on a stateful url
		      if (this.settings.getAuthClient().tx.exists()) {
		        this.navigate(RouterUtil.createRefreshUrl(), { trigger: true });
		        return;
		      }
	
		      // We've hit a page that requires state, but have no stateToken - redirect
		      // back to primary auth
		      this.navigate('', { trigger: true });
		    },
	
		    // Overriding the default navigate method to allow the widget consumer
		    // to "turn off" routing - if features.router is false, the browser
		    // location bar will not update when the router navigates
		    navigate: function (fragment, options) {
		      if (this.settings.get('features.router')) {
		        return Okta.Router.prototype.navigate.apply(this, arguments);
		      }
		      if (options && options.trigger) {
		        return Backbone.history.loadUrl(fragment);
		      }
		    },
	
		    render: function (Controller, options) {
		      options || (options = {});
	
		      var Beacon = options.Beacon;
		      var controllerOptions = _.extend(
		        { settings: this.settings, appState: this.appState },
		        _.omit(options, 'Beacon')
		      );
	
		      // Since we have a wrapper view, render our wrapper and use its content
		      // element as our new el.
		      // Note: Render it here because we know dom is ready at this point
		      if (!this.header.rendered()) {
		        this.el = this.header.render().getContentEl();
		      }
	
		      // If we need to load a language (or apply custom i18n overrides), do
		      // this now and re-run render after it's finished.
		      if (!Bundles.isLoaded(this.appState.get('languageCode'))) {
		        return loadLanguage(
		          this.appState,
		          this.settings.get('i18n'),
		          this.settings.get('assets.baseUrl'),
		          this.settings.get('assets.rewrite')
		        )
		        .then(_.bind(this.render, this, Controller, options))
		        .done();
		      }
	
		      var oldController = this.controller;
		      this.controller = new Controller(controllerOptions);
	
		      // Bubble up all controller events
		      this.listenTo(this.controller, 'all', this.trigger);
	
		      // First run fetchInitialData, in case the next controller needs data
		      // before it's initial render. This will leave the current page in a
		      // loading state.
		      this.controller.fetchInitialData()
		      .then(_.bind(function () {
	
		        // Beacon transition occurs in parallel to page swap
		        if (!beaconIsAvailable(Beacon, this.settings)) {
		          Beacon = null;
		        }
		        this.header.setBeacon(Beacon, controllerOptions);
	
		        this.controller.render();
	
		        if (!oldController) {
		          this.el.append(this.controller.el);
		          this.controller.postRenderAnimation();
		          return;
		        }
	
		        return Animations.swapPages({
		          $parent: this.el,
		          $oldRoot: oldController.$el,
		          $newRoot: this.controller.$el,
		          dir: oldController.state.get('navigateDir'),
		          ctx: this,
		          success: function () {
		            var flashError = this.appState.get('flashError'),
		                model = this.controller.model;
		            oldController.remove();
		            oldController.$el.remove();
		            this.controller.postRenderAnimation();
		            if (flashError) {
		              model.trigger('error', model, {
		                responseJSON: {
		                  errorSummary: flashError
		                }
		              });
		              this.appState.unset('flashError');
		            }
		          }
		        });
	
		      }, this))
		      .fail(function () {
		        // OKTA-69665 - if an error occurs in fetchInitialData, we're left in
		        // a state with two active controllers. Therefore, we clean up the
		        // old one. Note: This explicitly handles the invalid token case -
		        // if we get some other type of error which doesn't force a redirect,
		        // we will probably be left in a bad state. I.e. old controller is
		        // dropped and new controller is not rendered.
		        if (oldController) {
		          oldController.remove();
		          oldController.$el.remove();
		        }
		      })
		      .done();
	
		    },
	
		    start: function () {
		      var pushState = false;
		      // Support for browser's back button.
		      if (window.addEventListener) {
		        window.addEventListener('popstate', _.bind(function(e) {
		          if (this.controller.back) {
		            e.preventDefault();
		            e.stopImmediatePropagation();
		            this.controller.back();
		          }
		        }, this));
		        pushState = BrowserFeatures.supportsPushState();
		      }
		      Okta.Router.prototype.start.call(this, { pushState: pushState });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
		  var CAN_REMOVE_BEACON_CLS = 'can-remove-beacon';
		  return Okta.View.extend({
		    className: 'auth-container main-container',
		    id: 'okta-sign-in',
		    attributes: { 'data-se': 'auth-container' },
		    initialize: function (options) {
		      this.listenTo(options.appState, 'change:beaconType', function (model, type) {
		        this.$el.toggleClass(CAN_REMOVE_BEACON_CLS, type === 'security');
		      });
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(76)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController) {
	
		  return FormController.extend({
		    className: 'refresh-auth-state',
	
		    Model: {},
	
		    Form: {
		      noButtonBar: true
		    },
	
		    preRender: function () {
		      var token = this.options.token;
		      var appState = this.options.appState;
		      this.model.startTransaction(function(authClient) {
		        if (token) {
		          appState.trigger('loading', true);
		          return authClient.tx.resume({
		            stateToken: token
		          });
		        }
	
		        if (authClient.tx.exists()) {
		          appState.trigger('loading', true);
		          return authClient.tx.resume();
		        }
	
		        appState.trigger('navigate', '');
		      });
		    },
	
		    remove: function () {
		      this.options.appState.trigger('loading', false);
		      return FormController.prototype.remove.apply(this, arguments);
		    }
	
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint maxcomplexity:8 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(90),
		  __webpack_require__(83),
		  __webpack_require__(18),
		  __webpack_require__(12),
		  __webpack_require__(1)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Errors, BrowserFeatures, Util, Logger, config) {
	
		  var DEFAULT_LANGUAGE = 'en';
	
		  var supportedIdps = ['facebook', 'google', 'linkedin', 'microsoft'],
		      supportedResponseTypes = ['token', 'id_token', 'code'],
		      oauthRedirectTpl = Okta.tpl('{{origin}}');
	
		  var _ = Okta._,
		      ConfigError = Errors.ConfigError,
		      UnsupportedBrowserError = Errors.UnsupportedBrowserError;
	
		  var assetBaseUrlTpl = Okta.tpl(
		    'https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/{{version}}'
		  );
	
		  return Okta.Model.extend({
	
		    flat: true,
		    authClient: undefined,
	
		    local: {
		      'baseUrl': ['string', true],
		      'recoveryToken': ['string', false, undefined],
		      'stateToken': ['string', false, undefined],
		      'username' : ['string', false],
	
		      // Function to transform the username before passing it to the API
		      // for Primary Auth, Forgot Password and Unlock Account.
		      'transformUsername' : ['function', false],
	
		      // CALLBACKS
		      'globalSuccessFn': 'function',
		      'globalErrorFn': 'function',
		      'processCreds': 'function',
	
		      // IMAGES
		      'logo': 'string',
		      'helpSupportNumber': 'string',
	
		      // FEATURES
		      'features.router': ['boolean', true, false],
		      'features.securityImage': ['boolean', true, false],
		      'features.rememberMe': ['boolean', true, true],
		      'features.autoPush': ['boolean', true, false],
		      'features.smsRecovery': ['boolean', true, false],
		      'features.callRecovery': ['boolean', true, false],
		      'features.windowsVerify': ['boolean', true, false],
		      'features.selfServiceUnlock': ['boolean', true, false],
		      'features.multiOptionalFactorEnroll': ['boolean', true, false],
		      'features.preventBrowserFromSavingOktaPassword': ['boolean', true, true],
	
		      // I18N
		      'language': ['any', false], // Can be a string or a function
		      'i18n': ['object', false],
	
		      // ASSETS
		      'assets.baseUrl': ['string', false],
		      'assets.rewrite': {
		        type: 'function',
		        value: _.identity
		      },
	
		      // OAUTH2
		      'authScheme': ['string', false, 'OAUTH2'],
		      'authParams.display': {
		        type: 'string',
		        values: ['none', 'popup', 'page']
		      },
	
		      // Note: It shouldn't be necessary to override/pass in this property -
		      // it will be set correctly depending on what the value of display is
		      // and whether we are using Okta or a social IDP.
		      'authParams.responseMode': {
		        type: 'string',
		        values: ['query', 'fragment', 'form_post', 'okta_post_message']
		      },
	
		      // Can either be a string or an array, i.e.
		      // - Single value: 'id_token', 'token', or 'code'
		      // - Multiple values: ['id_token', 'token']
		      'authParams.responseType': ['any', false, 'id_token'],
		      'authParams.scopes': ['array', false],
	
		      'authParams.issuer': ['string', false],
		      'authParams.authorizeUrl': ['string', false],
		      'authParams.state': ['string', false],
		      'authParams.nonce': ['string', false],
	
		      'clientId': 'string',
		      'redirectUri': 'string',
		      'idps': ['array', false, []],
		      'idpDisplay': {
		        type: 'string',
		        values: ['PRIMARY', 'SECONDARY'],
		        value: 'SECONDARY'
		      },
		      'oAuthTimeout': ['number', false],
	
		      // HELP LINKS
		      'helpLinks.help': 'string',
		      'helpLinks.forgotPassword': 'string',
		      'helpLinks.unlock': 'string',
		      'helpLinks.custom': 'array'
		    },
	
		    derived: {
		      supportedLanguages: {
		        deps: ['i18n'],
		        fn: function (i18n) {
		          // Developers can pass in their own languages
		          return _.union(config.supportedLanguages, _.keys(i18n));
		        },
		        cache: true
		      },
		      languageCode: {
		        deps: ['language', 'supportedLanguages'],
		        fn: function (language, supportedLanguages) {
		          var userLanguages = BrowserFeatures.getUserLanguages(),
		              preferred = _.clone(userLanguages),
		              supportedLowerCase = Util.toLower(supportedLanguages),
		              expanded;
	
		          // Any developer defined "language" takes highest priority:
		          // As a string, i.e. 'en', 'ja', 'zh-CN'
		          if (_.isString(language)) {
		            preferred.unshift(language);
		          }
		          // As a callback function, which is passed the list of supported
		          // languages and detected user languages. This function must return
		          // a languageCode, i.e. 'en', 'ja', 'zh-CN'
		          else if (_.isFunction(language)) {
		            preferred.unshift(language(supportedLanguages, userLanguages));
		          }
	
		          // Add english as the default, and expand to include any language
		          // codes that do not include region, dialect, etc.
		          preferred.push(DEFAULT_LANGUAGE);
		          expanded = Util.toLower(Util.expandLanguages(preferred));
	
		          // Perform a case insensitive search - this is necessary in the case
		          // of browsers like Safari
		          var i, supportedPos;
		          for (i = 0; i < expanded.length; i++) {
		            supportedPos = supportedLowerCase.indexOf(expanded[i]);
		            if (supportedPos > -1) {
		              return supportedLanguages[supportedPos];
		            }
		          }
	
		        }
		      },
		      oauth2Enabled: {
		        deps: ['clientId', 'authScheme', 'authParams.responseType'],
		        fn: function (clientId, authScheme, responseType) {
		          if (!clientId) {
		            return false;
		          }
		          if (authScheme.toLowerCase() !== 'oauth2') {
		            return false;
		          }
		          var responseTypes = _.isArray(responseType) ? responseType : [responseType];
		          return _.intersection(responseTypes, supportedResponseTypes).length > 0;
		        },
		        cache: true
		      },
		      // Redirect Uri to provide in the oauth API
		      oauthRedirectUri: {
		        deps: ['redirectUri'],
		        fn: function (redirectUri) {
		          if (redirectUri) {
		            return redirectUri;
		          }
	
		          var origin = window.location.origin;
		          // IE8
		          if (!origin) {
		            var href = window.location.href;
		            var path = window.location.pathname;
		            if (path !== '') {
		              origin = href.substring(0, href.lastIndexOf(path));
		            }
		          }
	
		          return oauthRedirectTpl({
		            origin: origin
		          });
		        }
		      },
		      // filters the idps passed into the widget to include only the ones we support.
		      configuredSocialIdps: {
		        deps: ['idps'],
		        fn: function (idps) {
		          return _.filter(idps, function (idp) {
		            return _.contains(supportedIdps, idp.type.toLowerCase());
		          });
		        },
		        cache: true
		      },
		      // checks if there are any valid configured idps.
		      socialAuthConfigured: {
		        deps: ['configuredSocialIdps'],
		        fn: function (idps) {
		          return !_.isEmpty(idps);
		        },
		        cache: true
		      },
		      // social auth buttons order - 'above'/'below' the primary auth form (boolean)
		      socialAuthPositionTop: {
		        deps: ['socialAuthConfigured', 'idpDisplay'],
		        fn: function (socialAuthConfigured, idpDisplay) {
		          return !!(socialAuthConfigured && idpDisplay.toUpperCase() === 'PRIMARY');
		        },
		        cache: true
		      }
		    },
	
		    initialize: function (options) {
		      if (!options.baseUrl) {
		        this.callGlobalError(new ConfigError(Okta.loc('error.required.baseUrl')));
		      }
		      else if (!options.globalSuccessFn) {
		        this.callGlobalError(new ConfigError(Okta.loc('error.required.success')));
		      }
		      else if (BrowserFeatures.corsIsNotSupported()) {
		        this.callGlobalError(new UnsupportedBrowserError(Okta.loc('error.unsupported.cors')));
		      }
		    },
	
		    setAuthClient: function (authClient) {
		      this.authClient = authClient;
		    },
	
		    getAuthClient: function () {
		      return this.authClient;
		    },
	
		    set: function () {
		      try {
		        return Okta.Model.prototype.set.apply(this, arguments);
		      }
		      catch (e) {
		        var message = e.message ? e.message : e;
		        this.callGlobalError(new ConfigError(message));
		      }
		    },
	
		    // Invokes the global success function. This should only be called on a
		    // terminal part of the code (i.e. authStatus SUCCESS or after sending
		    // a recovery email)
		    callGlobalSuccess: function (status, data) {
		      // Defer this to ensure that our functions have rendered completely
		      // before invoking their function
		      var res = _.extend(data, { status: status });
		      _.defer(_.partial(this.get('globalSuccessFn'), res));
		    },
	
		    // Invokes the global error function. This should only be called on non
		    // recoverable errors (i.e. configuration errors, browser unsupported
		    // errors, etc)
		    callGlobalError: function (err) {
		      // Note: Must use "this.options.globalErrorFn" when they've passed invalid
		      // arguments - globalErrorFn will not have been set yet
		      var globalErrorFn = this.get('globalErrorFn') || this.options.globalErrorFn;
		      if (globalErrorFn) {
		        globalErrorFn(err);
		      }
		      else {
		        // Only throw the error if they have not registered a globalErrorFn
		        throw err;
		      }
		    },
	
		    // Get the username by applying the transform function if it exists.
		    transformUsername: function (username, operation) {
		      var transformFn = this.get('transformUsername');
		      if (transformFn && _.isFunction(transformFn)) {
		        return transformFn(username, operation);
		      }
		      return username;
		    },
	
		    // Use the parse function to transform config options to the standard
		    // settings we currently support. This is a good place to deprecate old
		    // option formats.
		    parse: function (options) {
		      if (options.authParams && options.authParams.scope) {
		        Logger.deprecate('Use "scopes" instead of "scope"');
		        options.authParams.scopes = options.authParams.scope;
		        delete options.authParams.scope;
		      }
	
		      if (options.labels || options.country) {
		        Logger.deprecate('Use "i18n" instead of "labels" and "country"');
		        var overrides = options.labels || {};
		        _.each(options.country, function (val, key) {
		          overrides['country.' + key] = val;
		        });
		        // Old behavior is to treat the override as a global override, so we
		        // need to add these overrides to each language
		        options.i18n = {};
		        _.each(config.supportedLanguages, function (language) {
		          options.i18n[language] = overrides;
		        });
		        delete options.labels;
		        delete options.country;
		      }
	
		      // Default the assets.baseUrl to the cdn, or remove any trailing slashes
		      if (!options.assets) {
		        options.assets = {};
		      }
		      var abu = options.assets.baseUrl;
		      if (!abu) {
		        options.assets.baseUrl = assetBaseUrlTpl({ version: config.version });
		      }
		      else if (abu[abu.length - 1] === '/') {
		        options.assets.baseUrl = abu.substring(0, abu.length - 1);
		      }
	
		      return options;
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums) {
	
		  function ConfigError(message) {
		    this.name = Enums.CONFIG_ERROR;
		    this.message = message || Okta.loc('error.config');
		  }
		  ConfigError.prototype = new Error();
	
		  function UnsupportedBrowserError(message) {
		    this.name = Enums.UNSUPPORTED_BROWSER_ERROR;
		    this.message = message || Okta.loc('error.unsupported.browser');
		  }
		  UnsupportedBrowserError.prototype = new Error();
	
		  function OAuthError(message) {
		    this.name = Enums.OAUTH_ERROR;
		    this.message = message;
		  }
		  OAuthError.prototype = new Error();
	
		  return {
		    ConfigError: ConfigError,
		    UnsupportedBrowserError: UnsupportedBrowserError,
		    OAuthError: OAuthError
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint maxcomplexity:9*/
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(92),
		  __webpack_require__(93)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Animations, LoadingBeacon) {
	
		  var NO_BEACON_CLS = 'no-beacon';
		  var LOADING_BEACON_CLS = 'beacon-small beacon-loading';
	
		  function isLoadingBeacon (beacon) {
		    return beacon && beacon.equals(LoadingBeacon);
		  }
	
		  function removeBeacon (view) {
		    // There are some timing issues with removing beacons (i.e. the case of
		    // transitioning from loadingBeacon -> loadingBeacon)
		    if (!view.currentBeacon) {
		      return;
		    }
		    view.currentBeacon.remove();
		    view.currentBeacon = null;
		  }
	
		  function addBeacon (view, NextBeacon, selector, options) {
		    view.add(NextBeacon, {
		      selector: selector,
		      options: options
		    });
		    view.currentBeacon = view.first();
		  }
	
		  function typeOfTransition (currentBeacon, NextBeacon, options) {
		    if (!currentBeacon && !NextBeacon) {
		      return 'none';
		    }
		    // Show Loading beacon
		    if (!currentBeacon && options.loading) {
		      return 'load';
		    }
		    // Swap/Hide Loading beacon
		    if (currentBeacon && isLoadingBeacon(currentBeacon)) {
		      return NextBeacon ? 'swap' : 'unload';
		    }
		    if (currentBeacon && currentBeacon.equals(NextBeacon, options)) {
		      return 'same';
		    }
		    if (!currentBeacon && NextBeacon) {
		      return 'add';
		    }
		    if (currentBeacon && !NextBeacon) {
		      return 'remove';
		    }
		    if (currentBeacon instanceof NextBeacon) {
		      return 'fade';
		    }
		    // If none of the above
		    // then we are changing the type of beacon
		    // ex. from SecurityBeacon to FactorBeacon
		    return 'swap';
		  }
	
		  return Okta.View.extend({
	
		    currentBeacon: null,
	
		    template: '\
		      <div class="okta-sign-in-header auth-header">\
		        {{#if logo}}\
		        <img src="{{logo}}" class="auth-org-logo"/>\
		        {{/if}}\
		        <div data-type="beacon-container" class="beacon-container"></div>\
		      </div>\
		      <div class="auth-content"><div class="auth-content-inner"></div></div>\
		    ',
	
		    // Attach a 'no-beacon' class if the security image feature
		    // is not passed in to prevent the beacon from jumping.
		    initialize: function (options) {
		      if (!options.settings.get('features.securityImage')) {
		        this.$el.addClass(NO_BEACON_CLS);
		        // To show/hide the spinner when there is no security image,
		        // listen to the appState's loading/removeLoading events.
		        this.listenTo(options.appState, 'loading', this.setLoadingBeacon);
		        this.listenTo(options.appState, 'removeLoading', this.removeLoadingBeacon);
		      }
		    },
	
		    /* jshint maxcomplexity:false */
		    setBeacon: function (NextBeacon, options) {
		      var selector = '[data-type="beacon-container"]',
		          container = this.$(selector),
		          transition = typeOfTransition(this.currentBeacon, NextBeacon, options),
		          self = this;
	
		      switch (transition) {
		        case 'none':
		          this.$el.addClass(NO_BEACON_CLS);
		          return;
		        case 'same':
		          return;
		        case 'add':
		          this.$el.removeClass(NO_BEACON_CLS);
		          addBeacon(this, NextBeacon, selector, options);
		          return Animations.explode(container);
		        case 'remove':
		          this.$el.addClass(NO_BEACON_CLS);
		          return Animations.implode(container)
		          .then(function () {
		            removeBeacon(self);
		          })
		          .done();
		        case 'fade':
		          // Other transitions are performed on the beacon container,
		          // but this transition is on the content inside the beacon.
		          // For a SecurityBeacon the username change will update the
		          // AppState and trigger an transition to a new Becon
		          // Since there is no url change this method is not called.
		          // For a FactorBeacon a page refresh has occurred
		          // so we execute the beacon's own transition method.
		          if (!this.currentBeacon.fadeOut) {
		            throw new Error('The current beacon is missing the "fadeOut" method');
		          }
		          options.animate = true;
		          return this.currentBeacon.fadeOut()
		          .then(function () {
		            removeBeacon(self);
		            addBeacon(self, NextBeacon, selector, options);
		          })
		          .done();
		        case 'swap':
		          return Animations.swapBeacons({
		            $el: container,
		            swap: function () {
		              var isLoading = isLoadingBeacon(self.currentBeacon);
		              // Order of these calls is important for -
		              // loader --> security/factor beacon swap.
		              removeBeacon(self);
		              if (isLoading) {
		                container.removeClass(LOADING_BEACON_CLS);
		                self.$el.removeClass(NO_BEACON_CLS);
		              }
		              addBeacon(self, NextBeacon, selector, options);
		            }
		          })
		          .done();
		        case 'load':
		          // Show the loading beacon. Add a couple of classes
		          // before triggering the add beacon code.
		          container.addClass(LOADING_BEACON_CLS);
		          addBeacon(self, NextBeacon, selector, options);
		          return Animations.explode(container);
		        case 'unload':
		          // Hide the loading beacon.
		          return this.removeLoadingBeacon();
		        default:
		          throw new Error('the "' + transition + '" is not recognized');
		      }
		    },
	
		    // Show the loading beacon when the security image feature is not enabled.
		    setLoadingBeacon: function (isLoading) {
		      if (!isLoading || isLoadingBeacon(this.currentBeacon)) {
		        return;
		      }
		      this.setBeacon(LoadingBeacon, { loading: true });
		    },
	
		    // Hide the beacon on primary auth failure. On primary auth success, setBeacon does this job.
		    removeLoadingBeacon: function () {
		      var self = this,
		          container = this.$('[data-type="beacon-container"]');
	
		      return Animations.implode(container)
		      .then(function () {
		        removeBeacon(self);
		        container.removeClass(LOADING_BEACON_CLS);
		      })
		      .done();
		    },
	
		    getTemplateData: function () {
		      return this.settings.toJSON({ verbose: true });
		    },
	
		    getContentEl: function () {
		      return this.$('.auth-content-inner');
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Q, Enums) {
	
		  var SWAP_PAGE_TIME = 200;
	
		  var fn = {};
	
		  function zoom ($el, start, finish) {
		    var deferred = Q.defer();
		    $el.animate({
		      'text-indent': 1
		    }, {
		      duration: 200,
		      easing: 'swing',
		      step: function (now, fx) {
		        fx.start = start;
		        fx.end = finish;
		        $el.css('transform', 'scale(' + now + ', ' + now + ')');
		      },
		      always: function () {
		        deferred.resolve($el);
		      }
		    });
		    return deferred.promise;
		  }
	
		  function rotate ($el, start, finish) {
		    var deferred = Q.defer();
		    $el.animate({
		      'text-indent': 1
		    }, {
		      duration: 150,
		      easing: 'swing',
		      step: function (now, fx) {
		        fx.start = start;
		        fx.end = finish;
		        $el.css('transform', 'rotate(' + now + 'deg)');
		      },
		      always: function () {
		        deferred.resolve($el);
		      }
		    });
		    return deferred.promise;
		  }
	
		  // Note: It is necessary to pass in a success callback because we must
		  // remove the old dom node (and controller) in the same tick of the event
		  // loop. Waiting for "then" results in a glitchy animation.
		  fn.swapPages = function (options) {
		    var deferred = Q.defer();
		    var $parent = options.$parent;
		    var $oldRoot = options.$oldRoot;
		    var $newRoot = options.$newRoot;
		    var success = options.success;
		    var ctx = options.ctx;
		    var directionClassName = 'transition-from-right';
	
		    if (options.dir && options.dir === Enums.DIRECTION_BACK) {
		      directionClassName = 'transition-from-left';
		    }
	
		    $newRoot.addClass(directionClassName);
		    $parent.append($newRoot);
	
		    $parent.addClass('animation-container-overflow');
		    $newRoot.animate(
		      { left: '0px', top: '0px', opacity: 1 },
		      SWAP_PAGE_TIME,
		      function () {
		        $parent.removeClass('animation-container-overflow');
		        $newRoot.removeClass(directionClassName);
		        $newRoot.removeAttr('style');
		        success.call(ctx);
		        deferred.resolve();
		      }
		    );
	
		    $oldRoot.animate(
		      { height: $newRoot.height(), opacity: 0 },
		      SWAP_PAGE_TIME * 0.8
		    );
	
		    return deferred.promise;
		  };
	
		  fn.swapBeacons = function (options) {
		    var $el = options.$el,
		        swap = options.swap,
		        ctx = options.ctx;
	
		    return this.implode($el)
		    .then(function () {
		      swap.call(ctx);
		      return $el;
		    })
		    .then(this.explode);
		  };
	
		  fn.explode = function ($el) {
		    return zoom($el, 0, 1); //zoom in
		  };
	
		  fn.implode = function ($el) {
		    return zoom($el, 1, 0); //zoom out
		  };
	
		  fn.radialProgressBar = function (options) {
		    var radialProgressBar = options.$el,
		        swap = options.swap,
		        circles = radialProgressBar.children();
	
		    return rotate(circles, 0, 180)
		    .then(function () {
		      radialProgressBar.css({'clip': 'auto'});
		    })
		    .then(function () {
		      var leftHalf = circles.eq(0);
		      swap();
		      return rotate(leftHalf, 180, 360);
		    })
		    .then(function () {
		      //reset values to initial state
		      radialProgressBar.css({'clip': 'rect(0px, 96px, 96px, 48px)'});
		      circles.css({
		        'transform': 'rotate(0deg)',
		        'text-indent': '1px'
		      });
		    });
		  };
	
		  return fn;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  return Okta.View.extend({
	
		    template: '\
		      <div class="beacon-blank"/>\
		      <div class="bg-helper auth-beacon auth-beacon-security" data-se="loading-beacon">\
		      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border"/>\
		      </div>\
		    ',
	
		    equals: function (Beacon) {
		      return Beacon && this instanceof Beacon;
		    }
	
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(92)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Animations) {
	
		  var _ = Okta._,
		      $ = Okta.$;
	
		  function setBackgroundImage (el, appState) {
		    // NOTE: The imgSrc is returned by the server so that every
		    // user has a unique image. However new and undefined user states
		    // are hard coded into the css and the value returned by the server
		    // is ignored.
		    var imgSrc = appState.get('securityImage'),
		        isUndefinedUser = appState.get('isUndefinedUser'),
		        isNewUser = appState.get('isNewUser'),
		        isSecurityImage = !isUndefinedUser && !isNewUser;
	
		    el.css('background-image', '');
		    el.removeClass('new-user undefined-user');
		    if (isNewUser) {
		      el.addClass('new-user');
		      return;
		    }
		    if (isUndefinedUser) {
		      el.addClass('undefined-user');
		      return;
		    }
		    if (isSecurityImage) {
		      el.css('background-image', 'url(' + _.escape(imgSrc) + ')');
		      return;
		    }
		  }
	
		  function antiPhishingMessage (image, host, shown) {
		    // Show the message that the user has not logged in from this device before.
		    image.qtip({
		      prerender: true,
		      content: {
		        text: Okta.loc('primaryauth.newUser.tooltip', 'login', [_.escape(host)]),
		        button: Okta.loc('primaryauth.newUser.tooltip.close', 'login')
		      },
		      style: {
		        classes: 'okta-security-image-tooltip security-image-qtip qtip-custom qtip-shadow qtip-rounded',
		        tip: {height: 12, width: 16}
		      },
		      position: {
		        my: 'top center',
		        at: 'bottom center',
		        adjust: {method: 'flip', y: -22},
		        viewport: $('body')
		      },
		      hide: {event: false, fixed: true},
		      show: {event: false, delay: 200}
		    });
		    image.qtip('toggle', shown);
		  }
	
		  function updateSecurityImage($el, appState, animate) {
		    var image = $el.find('.auth-beacon-security'),
		        border = $el.find('.js-auth-beacon-border'),
		        hasBorder = !appState.get('isUndefinedUser'),
		        hasAntiPhishing = appState.get('isNewUser'),
		        radialProgressBar = $el.find('.radial-progress-bar'),
		        host = appState.get('baseUrl').match(/https?:\/\/(.[^\/]+)/)[1],
		        duration = 200;
		    if (!animate) {
		      // Do not animate the security beacon
		      // This occurs when initializing the form
		      setBackgroundImage(image, appState);
		      border.toggleClass('auth-beacon-border', hasBorder);
		      return;
		    }
		    // Animate loading the security beacon
		    if (!hasBorder) {
		      // This occurrs when appState username is blank
		      // we do not yet know if the user is recognized
		      image.qtip('destroy');
		      image.fadeOut(duration, function () {
		        setBackgroundImage(image, appState);
		        border.removeClass('auth-beacon-border');
		        image.fadeIn(duration);
		      });
		    } else {
		      // Animate loading the security beacon with a loading bar for the border
		      // This occurrs when the username has been checked against Okta.
		      image.qtip('destroy');
		      border.removeClass('auth-beacon-border');
		      Animations.radialProgressBar({
		        $el: radialProgressBar,
		        swap: function () {
		          image.fadeOut(duration, function () {
		            setBackgroundImage(image, appState);
		            image.fadeIn(duration);
		          });
		        }
		      }).then(function () {
		        border.addClass('auth-beacon-border');
		      }).then(function () {
		        antiPhishingMessage(image, host, hasAntiPhishing);
		      });
		    }
		  }
	
		  return Okta.View.extend({
	
		    template: '\
		    <div class="beacon-blank">\
		      <div class="radial-progress-bar">\
		        <div class="circle left"></div>\
		        <div class="circle right"></div>\
		      </div>\
		    </div>\
		    <div class="bg-helper auth-beacon auth-beacon-security" data-se="security-beacon">\
		      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border">\
		      </div>\
		    </div>\
		    ',
		    className: 'js-security-beacon',
	
		    initialize: function (options) {
		      this.update = _.partial(updateSecurityImage, this.$el, options.appState);
		      this.listenTo(options.appState, 'change:securityImage', this.update);
		      this.listenTo(options.appState, 'loading', function (isLoading) {
		        this.$el.toggleClass('beacon-loading', isLoading);
		      });
		      this.options.appState.set('beaconType', 'security');
		    },
	
		    postRender: function () {
		      this.update(false);
		    },
	
		    equals: function (Beacon) {
		      return Beacon && this instanceof Beacon;
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint newcap:false, camelcase:false */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(9),
		  __webpack_require__(96),
		  __webpack_require__(83),
		  __webpack_require__(90)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, Factor, BrowserFeatures, Errors) {
	
		  // Keep track of stateMachine with this special model. Some reasons to not
		  // keep it generic:
		  // 1. We know exactly what we're using appState for by requiring props
		  // 2. Can have some derived functions to help us translate the lastAuthRes
	
		  var _ = Okta._;
		  var $ = Okta.$;
		  var compile = Okta.Handlebars.compile;
	
		  var USER_NOT_SEEN_ON_DEVICE = '/img/security/unknown.png';
		  var UNDEFINED_USER = '/img/security/default.png';
		  var NEW_USER = '/img/security/unknown-device.png';
	
		  var securityImageUrlTpl = compile('{{baseUrl}}/login/getimage?username={{username}}');
	
		  function getSecurityImage(baseUrl, username) {
		    var url = securityImageUrlTpl({ baseUrl: baseUrl, username: username });
	
		    // When the username is empty, we want to show the default image.
		    if (_.isEmpty(username) || _.isUndefined(username)) {
		      return Q(UNDEFINED_USER);
		    }
	
		    return Q($.get(url)).then(function (res) {
		      if (res.pwdImg === USER_NOT_SEEN_ON_DEVICE) {
		        // When we get an unknown.png security image from OKTA,
		        // we want to show the unknown-device security image.
		        // We are mapping the server's img url to a new one because
		        // we still need to support the original login page.
		        return NEW_USER;
		      }
		      return res.pwdImg;
		    });
		  }
	
		  function getMinutesString(factorLifetimeInMinutes) {
		    if (factorLifetimeInMinutes > 60 && factorLifetimeInMinutes <= 1440) {
		      var lifetimeInHours = (factorLifetimeInMinutes / 60);
		      return Okta.loc('hours', 'login', [lifetimeInHours]);
		    } else if (factorLifetimeInMinutes > 1440) {
		      var lifetimeInDays = (factorLifetimeInMinutes / 1440);
		      return Okta.loc('days', 'login', [lifetimeInDays]);
		    }
		    //Use minutes as the time unit by default
		    if (factorLifetimeInMinutes === 1) {
		      return Okta.loc('minutes.oneMinute', 'login');
		    }
		    return Okta.loc('minutes', 'login', [factorLifetimeInMinutes]);
		  }
	
		  return Okta.Model.extend({
	
		    initialize: function () {
		      // Handle this in initialize (as opposed to a derived property) because
		      // the operation is asynchronous
		      if (this.settings.get('features.securityImage')) {
		        var self = this;
		        this.listenTo(this, 'change:username', function (model, username) {
		          getSecurityImage(this.get('baseUrl'), username)
		          .then(function (image) {
		            model.set('securityImage', image);
		          })
		          .fail(function (jqXhr) {
		            // Only notify the consumer on a CORS error
		            if (BrowserFeatures.corsIsNotEnabled(jqXhr)) {
		              self.settings.callGlobalError(new Errors.UnsupportedBrowserError(
		                Okta.loc('error.enabled.cors')
		              ));
		            }
		            else {
		              throw jqXhr;
		            }
		          })
		          .done();
		        });
		      }
		    },
	
		    local: {
		      baseUrl: 'string',
		      lastAuthResponse: ['object', true, {}],
		      transaction: 'object',
		      transactionError: 'object',
		      username: 'string',
		      factors: 'object',
		      policy: 'object',
		      securityImage: ['string', true, UNDEFINED_USER],
		      userCountryCode: 'string',
		      userPhoneNumber: 'string',
		      factorActivationType: 'string',
		      flashError: 'object',
		      beaconType: 'string',
	
		      // Note: languageCode is special in that it is shared between Settings
		      // and AppState. Settings is the *configured* language, and is static.
		      // AppState is the dynamic language state - it can be changed via a
		      // language picker, etc.
		      languageCode: ['string', true]
		    },
	
		    setAuthResponse: function (res) {
		      // Because of MFA_CHALLENGE (i.e. DUO), we need to remember factors
		      // across auth responses. Not doing this, for example, results in being
		      // unable to switch away from the duo factor dropdown.
		      var self = this;
		      if (res._embedded && res._embedded.policy) {
		        this.set('policy', res._embedded.policy);
		      }
		      if (res._embedded && res._embedded.factors) {
		        var settings = this.settings;
		        var factors = _.map(res._embedded.factors, function (factor) {
		          factor.settings = settings;
		          factor.appState = self;
		          return factor;
		        });
		        this.set('factors', new Factor.Collection(factors, { parse: true }));
		      }
		      this.set('lastAuthResponse', res);
		    },
	
		    derived: {
		      'isSuccessResponse': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'SUCCESS';
		        }
		      },
		      'isMfaRequired': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'MFA_REQUIRED';
		        }
		      },
		      'isMfaEnroll': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'MFA_ENROLL';
		        }
		      },
		      'isMfaChallenge': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'MFA_CHALLENGE';
		        }
		      },
		      'isMfaRejectedByUser': {
		        // MFA failures are usually error responses
		        // except in the case of Okta Push, when a
		        // user clicks 'deny' on his phone.
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.factorResult === 'REJECTED';
		        }
		      },
		      'isMfaTimeout': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.factorResult === 'TIMEOUT';
		        }
		      },
		      'isMfaEnrollActivate': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'MFA_ENROLL_ACTIVATE';
		        }
		      },
		      'isWaitingForActivation': {
		        deps: ['isMfaEnrollActivate', 'lastAuthResponse'],
		        fn: function (isMfaEnrollActivate, res) {
		          return isMfaEnrollActivate && res.factorResult === 'WAITING';
		        }
		      },
		      'hasMfaRequiredOptions': {
		        deps: ['lastAuthResponse', 'factors'],
		        fn: function (res, factors) {
		          if (res.status !== 'MFA_REQUIRED' && res.status !== 'MFA_CHALLENGE') {
		            return false;
		          }
		          return factors && factors.length > 1;
		        }
		      },
		      'userId': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.user) {
		            return null;
		          }
		          return res._embedded.user.id;
		        }
		      },
		      'isPwdExpiringSoon': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.status === 'PASSWORD_WARN';
		        }
		      },
		      'passwordExpireDays': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.policy || !res._embedded.policy.expiration) {
		            return null;
		          }
		          return res._embedded.policy.expiration.passwordExpireDays;
		        }
		      },
		      'recoveryType': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.recoveryType;
		        }
		      },
		      'factorType': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          return res.factorType;
		        }
		      },
		      'factor': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.factor) {
		            return null;
		          }
		          return res._embedded.factor;
		        }
		      },
		      'activatedFactorId': {
		        deps: ['factor'],
		        fn: function (factor) {
		          return factor ? factor.id : null;
		        }
		      },
		      'activatedFactorType': {
		        deps: ['factor'],
		        fn: function (factor) {
		          return factor ? factor.factorType : null;
		        }
		      },
		      'activatedFactorProvider': {
		        deps: ['factor'],
		        fn: function (factor) {
		          return factor ? factor.provider : null;
		        }
		      },
		      'qrcode': {
		        deps: ['factor'],
		        fn: function (factor) {
		          try {
		            return factor._embedded.activation._links.qrcode.href;
		          } catch (err) {
		            return null;
		          }
		        }
		      },
		      'activationSendLinks': {
		        deps: ['factor'],
		        fn: function (factor) {
		          var sendLinks;
		          try {
		            sendLinks = factor._embedded.activation._links.send;
		          } catch (err) {
		            sendLinks = [];
		          }
		          return sendLinks;
		        }
		      },
		      'textActivationLinkUrl': {
		        deps: ['activationSendLinks'],
		        fn: function (activationSendLinks) {
		          var item = _.findWhere(activationSendLinks, {name: 'sms'});
		          return item ? item.href : null;
		        }
		      },
		      'emailActivationLinkUrl': {
		        deps: ['activationSendLinks'],
		        fn: function (activationSendLinks) {
		          var item = _.findWhere(activationSendLinks, {name: 'email'});
		          return item ? item.href : null;
		        }
		      },
		      'sharedSecret': {
		        deps: ['factor'],
		        fn: function (factor) {
		          try {
		            return factor._embedded.activation.sharedSecret;
		          } catch (err) {
		            return null;
		          }
		        }
		      },
		      'duoEnrollActivation': {
		        deps: ['factor'],
		        fn: function (factor) {
		          if (!factor || !factor._embedded || !factor._embedded.activation) {
		            return null;
		          }
		          return factor._embedded.activation;
		        }
		      },
		      'prevLink': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (res._links && res._links.prev) {
		            return res._links.prev.href;
		          }
		          return null;
		        }
		      },
		      'user': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.user) {
		            return null;
		          }
		          return res._embedded.user;
		        }
		      },
		      'recoveryQuestion': {
		        deps: ['user'],
		        fn: function (user) {
		          if (!user || !user.recovery_question) {
		            return null;
		          }
		          return user.recovery_question.question;
		        }
		      },
		      'userProfile': {
		        deps: ['user'],
		        fn: function (user) {
		          if (!user || !user.profile) {
		            return null;
		          }
		          return user.profile;
		        }
		      },
		      'userEmail': {
		        deps: ['userProfile'],
		        fn: function (userProfile) {
		          if (!userProfile || !userProfile.login) {
		            return null;
		          }
		          return userProfile.login;
		        }
		      },
		      'userFullName': {
		        deps: ['userProfile'],
		        fn: function (userProfile) {
		          if (!userProfile || (!userProfile.firstName && !userProfile.lastName)) {
		            return '';
		          }
		          return userProfile.firstName + ' ' + userProfile.lastName;
		        }
		      },
		      'hasExistingPhones': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.factors) {
		            return false;
		          }
		          var factors = res._embedded.factors;
		          var factor = _.findWhere(factors, {factorType: 'sms', provider: 'OKTA'});
		          if (!factor || !factor._embedded) {
		            return false;
		          }
	
		          return !!factor._embedded.phones.length;
		        }
		      },
		      'hasExistingPhonesForCall': {
		        deps: ['lastAuthResponse'],
		        fn: function (res) {
		          if (!res._embedded || !res._embedded.factors) {
		            return false;
		          }
		          var factors = res._embedded.factors;
		          var factor = _.findWhere(factors, {factorType: 'call', provider: 'OKTA'});
		          if (!factor || !factor._embedded) {
		            return false;
		          }
	
		          return !!factor._embedded.phones.length;
		        }
		      },
		      'isUndefinedUser': {
		        deps: ['securityImage'],
		        fn: function (securityImage) {
		          return (securityImage === UNDEFINED_USER);
		        }
		      },
		      'isNewUser': {
		        deps: ['securityImage'],
		        fn: function (securityImage) {
		          return (securityImage === NEW_USER);
		        }
		      },
		      'allowRememberDevice': {
		        deps: ['policy'],
		        fn: function (policy) {
		          return policy && policy.allowRememberDevice;
		        }
		      },
		      'rememberDeviceLabel': {
		        deps: ['policy'],
		        fn: function (policy) {
		          if (policy && policy.rememberDeviceLifetimeInMinutes > 0) {
		            var timeString = getMinutesString(policy.rememberDeviceLifetimeInMinutes);
		            return Okta.loc('rememberDevice.timebased', 'login', [timeString]);
		          } else if (policy && policy.rememberDeviceLifetimeInMinutes === 0) {
		            return Okta.loc('rememberDevice.devicebased', 'login');
		          }
		          return Okta.loc('rememberDevice', 'login');
		        }
		      },
		      'rememberDeviceByDefault': {
		        deps: ['policy'],
		        fn: function (policy) {
		          return policy && policy.rememberDeviceByDefault;
		        }
		      }
		    },
	
		    parse: function (options) {
		      this.settings = options.settings;
		      return _.extend(
		        _.omit(options, 'settings'),
		        { languageCode: this.settings.get('languageCode' )}
		      );
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* jshint maxstatements: 18 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(9),
		  __webpack_require__(81),
		  __webpack_require__(79)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, factorUtil, BaseLoginModel) {
		  var _ = Okta._;
	
		  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
		  // in network connection lost errors in Safari and IE.
		  var PUSH_INTERVAL = 6000;
	
		  var Factor = BaseLoginModel.extend({
		    extraProperties: true,
		    flat: false,
	
		    props: {
		      id: 'string',
		      factorType: {
		        type: 'string',
		        values: [
		          'sms',
		          'call',
		          'token',
		          'token:software:totp',
		          'token:hardware',
		          'question',
		          'push',
		          'u2f'
		        ]
		      },
		      provider: {
		        type: 'string',
		        values: [
		          'OKTA',
		          'RSA',
		          'DEL_OATH',
		          'SYMANTEC',
		          'GOOGLE',
		          'YUBICO',
		          'FIDO'
		        ]
		      },
		      enrollment: {
		        type: 'string',
		        values: [
		          'OPTIONAL',
		          'REQUIRED'
		        ]
		      },
		      status: {
		        type: 'string',
		        values: [
		          'NOT_SETUP',
		          'ACTIVE'
		        ]
		      },
		      profile: ['object'],
		      vendorName: 'string'
		    },
	
		    local: {
		      'answer': 'string',
		      'backupFactor': 'object',
		      'showAnswer': 'boolean',
		      'rememberDevice': 'boolean',
		      'autoPush': ['boolean', true, false]
		    },
	
		    derived: {
		      isOktaFactor: {
		        deps: ['provider'],
		        fn: function (provider) {
		          return provider === 'OKTA';
		        }
		      },
		      factorName: {
		        deps: ['provider', 'factorType'],
		        fn: factorUtil.getFactorName
		      },
		      factorLabel: {
		        deps: ['provider', 'factorType', 'vendorName'],
		        fn: function (provider, factorType, vendorName) {
		          if (provider === 'DEL_OATH') {
		            return vendorName;
		          }
		          return factorUtil.getFactorLabel(provider, factorType);
		        }
		      },
		      factorDescription: {
		        deps: ['provider', 'factorType'],
		        fn: factorUtil.getFactorDescription
		      },
		      sortOrder: {
		        deps: ['provider', 'factorType'],
		        fn: factorUtil.getFactorSortOrder
		      },
		      iconClassName: {
		        deps: ['provider', 'factorType'],
		        fn: factorUtil.getFactorIconClassName
		      },
		      securityQuestion: {
		        deps: ['profile', 'factorType'],
		        fn: function (profile, factorType) {
		          if (factorType !== 'question') {
		            return null;
		          }
		          return profile && factorUtil.getSecurityQuestionLabel(profile);
		        }
		      },
		      phoneNumber: {
		        deps: ['profile', 'factorType'],
		        fn: function (profile, factorType) {
		          if (_.contains(['sms', 'call'], factorType)) {
		            return profile && profile.phoneNumber;
		          }
		          return null;
		        }
		      },
		      deviceName: {
		        deps: ['profile', 'factorType'],
		        fn: function (profile, factorType) {
		          if (factorType !== 'push') {
		            return null;
		          }
		          return profile && profile.name;
		        }
		      },
		      enrolled: {
		        deps: ['status'],
		        fn: function (status) {
		          return status === 'ACTIVE';
		        }
		      },
		      required: {
		        deps: ['enrollment'],
		        fn: function (enrollment) {
		          return enrollment === 'REQUIRED';
		        }
		      },
		      canUseResend: {
		        deps: ['provider', 'factorType'],
		        fn: function (provider, factorType) {
		          // Only push and sms have resend links.
		          // However, we currently have a problem with SMS
		          // (no way to know whether we want resend or verifyFactor),
		          // so we're turning it off for now.
		          return (provider === 'OKTA' && factorType === 'push');
		        }
		      },
		      isSMSorCall: {
		        deps: ['factorType'],
		        fn: function (factorType) {
		          return _.contains(['sms', 'call'], factorType);
		        }
		      }
		    },
	
		    parse: function (attributes) {
		      this.settings = attributes.settings;
		      this.appState = attributes.appState;
		      // set the initial value for remember device.
		      attributes.rememberDevice = factorUtil.getRememberDeviceValue(this.appState);
		      return _.omit(attributes, ['settings', 'appState']);
		    },
	
		    validate: function () {
		      if (this.get('isSMSorCall') && !this.get('answer')) {
		        return {'answer': Okta.loc('model.validation.field.blank')};
		      }
		    },
	
		    save: function () {
		      var rememberDevice = !!this.get('rememberDevice');
		      // Set/Remove the remember device cookie based on the remember device input.
	
		      return this.doTransaction(function (transaction) {
		        var data = {
		          rememberDevice: rememberDevice
		        };
		        if (this.get('factorType') === 'question') {
		          data.answer = this.get('answer');
		        } else {
		          data.passCode = this.get('answer');
		        }
	
		        var promise;
		        // MFA_REQUIRED
		        if (transaction.status === 'MFA_REQUIRED') {
		          var factor = _.findWhere(transaction.factors, {
		            id: this.get('id')
		          });
		          promise = factor.verify(data);
		        }
	
		        // MFA_CHALLENGE
		        else if (this.get('canUseResend') && transaction.resend) {
		          var firstLink = transaction.data._links.resend[0];
		          promise = transaction.resend(firstLink.name);
		        } else {
		          promise = transaction.verify(data);
		        }
		        //the 'save' event here is triggered and used in the BaseLoginController
		        //to disable the primary button on the factor form
		        this.trigger('save');
	
		        return promise
		        .then(function (trans) {
		          if (trans.status === 'MFA_CHALLENGE' && trans.poll) {
		            return Q.delay(PUSH_INTERVAL).then(function() {
		              return trans.poll(PUSH_INTERVAL);
		            });
		          }
		          return trans;
		        })
		        .fail(function (err) {
		          // Clean up the cookie on failure.
		          throw err;
		        });
		      });
		    }
		  });
	
		  var Factors = Okta.Collection.extend({
	
		    model: Factor,
		    comparator: 'sortOrder',
	
		    // One override necessary here - Okta Verify with Push is treated like
		    // one factor. In the beacon menu, there's only one option - only in the
		    // view can you choose to enable the other factor (which will be exposed
		    // by the backupFactor property)
		    parse: function (factors) {
		      // Keep a track of the last used factor, since
		      // we need it to determine the default factor.
		      this.lastUsedFactor = factors[0];
	
		      var oktaPushFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'push' });
		      if (!oktaPushFactor) {
		        return factors;
		      }
		      var totpFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'token:software:totp' });
	
		      var isTotpFirst = (totpFactor === factors[0]);
	
		      var parsedFactors = _.reduce(factors, function (memo, factor) {
		        var isOkta = factor.provider === 'OKTA';
		        var isOktaTotp = isOkta && factor.factorType === 'token:software:totp';
		        var isOktaPush = isOkta && factor.factorType === 'push';
		        var notEnrolled = factor.status !== 'ACTIVE';
	
		        var hideOktaTotp = isOktaTotp && (notEnrolled || oktaPushFactor.status === 'ACTIVE');
		        var hideOktaPush = isOktaPush && notEnrolled && totpFactor.status === 'ACTIVE';
	
		        if (hideOktaTotp || hideOktaPush) {
		          return memo;
		        }
	
		        if (isOktaPush) {
		          factor.backupFactor = new Factor(totpFactor, { parse: true });
		        }
		        memo.push(factor);
		        return memo;
		      }, []);
	
		      // Use push factor instead of TOTP, if TOTP is first in the list
		      // (since it is stored as backupFactor for push).
		      if (isTotpFirst) {
		        this.lastUsedFactor = oktaPushFactor;
		      }
	
		      return parsedFactors;
		    },
	
		    // Will need to update this to use HAL link to get last used factor:
		    // https://oktainc.atlassian.net/browse/OKTA-58380
		    // However, current code returns last used factor as first factor in list.
		    // Also, will need to add priority - i.e. if they do not have a last used
		    // factor, should try Okta Verify, then Okta SMS, etc.
		    getDefaultFactor: function () {
		      var factor = _.pick(this.lastUsedFactor, 'factorType', 'provider');
		      return this.findWhere(factor);
		    },
	
		    getFirstUnenrolledRequiredFactor: function () {
		      return this.findWhere({ required: true, enrolled: false });
		    }
	
		  });
	
		  return {
		    Model: Factor,
		    Collection: Factors
		  };
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint maxcomplexity:23,maxstatements:23 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(98),
		  __webpack_require__(99),
		  __webpack_require__(85),
		  __webpack_require__(83),
		  __webpack_require__(90),
		  __webpack_require__(100)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Util, OAuth2Util, Enums, BrowserFeatures, Errors, ErrorCodes) {
	
		  var fn = {};
	
		  var verifyUrlTpl = Okta.tpl('signin/verify/{{provider}}/{{factorType}}');
		  var enrollFactorUrlTpl = Okta.tpl('signin/enroll/{{provider}}/{{factorType}}');
		  var activateFactorUrlTpl = Okta.tpl(
		    'signin/enroll-activate/{{provider}}/{{factorType}}{{#if step}}/{{step}}{{/if}}'
		  );
		  var recoveryUrlTpl = Okta.tpl('signin/recovery/{{recoveryToken}}');
		  var refreshUrlTpl = Okta.tpl('signin/refresh-auth-state{{#if token}}/{{token}}{{/if}}');
		  var sessionCookieRedirectTpl = Okta.tpl(
		    '{{baseUrl}}/login/sessionCookieRedirect?checkAccountSetupComplete=true' +
		    '&token={{{token}}}&redirectUrl={{{redirectUrl}}}'
		  );
	
		  fn.createVerifyUrl = function (provider, factorType) {
		    return verifyUrlTpl({
		      provider: encodeURIComponent(provider.toLowerCase()),
		      factorType: encodeURIComponent(factorType)
		    });
		  };
	
		  fn.createEnrollFactorUrl = function (provider, factorType) {
		    return enrollFactorUrlTpl({
		      provider: encodeURIComponent(provider.toLowerCase()),
		      factorType: encodeURIComponent(factorType)
		    });
		  };
	
		  fn.createActivateFactorUrl = function (provider, factorType, step) {
		    return activateFactorUrlTpl({
		      provider: encodeURIComponent(provider.toLowerCase()),
		      factorType: encodeURIComponent(factorType),
		      step: step ? encodeURIComponent(step) : false
		    });
		  };
	
		  fn.createRecoveryUrl = function (recoveryToken) {
		    return recoveryUrlTpl({
		      recoveryToken: encodeURIComponent(recoveryToken)
		    });
		  };
	
		  fn.createRefreshUrl = function (stateToken) {
		    var token = stateToken ? encodeURIComponent(stateToken) : null;
		    return refreshUrlTpl({ token: token });
		  };
	
		  fn.routeAfterAuthStatusChange = function (router, err, res) {
	
		    // Global error handling for CORS enabled errors
		    if (err && err.xhr && BrowserFeatures.corsIsNotEnabled(err.xhr)) {
		      router.settings.callGlobalError(new Errors.UnsupportedBrowserError(
		        Okta.loc('error.enabled.cors')
		      ));
		      return;
		    }
	
		    // Token has expired - no longer valid. Navigate back to primary auth.
		    if (err && err.errorCode === ErrorCodes.INVALID_TOKEN_EXCEPTION) {
		      router.appState.set('flashError', Okta.loc('error.expired.session'));
		      router.controller.state.set('navigateDir', Enums.DIRECTION_BACK);
		      router.navigate('', { trigger: true });
		      return;
		    }
	
		    // Other errors are handled by the function making the authClient request
		    if (err || !res || !res.status) {
		      return;
		    }
	
		    router.appState.setAuthResponse(res);
	
		    if (router.controller && router.controller.trapAuthResponse(res)) {
		      return;
		    }
	
		    switch (res.status) {
		    case 'SUCCESS':
		      // If the desired end result object needs to have idToken (and not sessionToken),
		      // get the id token from session token before calling the global success function.
		      if (router.settings.get('oauth2Enabled')) {
		        OAuth2Util.getTokens(router.settings, {sessionToken: res.sessionToken}, router.controller);
		        return;
		      }
	
		      if(res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK) {
		        router.navigate('signin/account-unlocked', {trigger: true});
		        return;
		      }
	
		      router.settings.callGlobalSuccess(Enums.SUCCESS, {
		        user: res._embedded.user,
		        session: {
		          token: res.sessionToken,
		          setCookieAndRedirect: function (redirectUrl) {
		            Util.redirect(sessionCookieRedirectTpl({
		              baseUrl: router.settings.get('baseUrl'),
		              token: encodeURIComponent(res.sessionToken),
		              redirectUrl: encodeURIComponent(redirectUrl)
		            }));
		          }
		        }
		      });
		      return;
		    case 'MFA_REQUIRED':
		      var factor = router.appState.get('factors').getDefaultFactor();
		      var url = fn.createVerifyUrl(factor.get('provider'), factor.get('factorType'));
		      router.navigate(url, { trigger: true });
		      return;
		    case 'MFA_CHALLENGE':
		      // Since we normally trap MFA_CHALLENGE, this will only get called on a
		      // page refresh. We need to return to MFA_REQUIRED to initialize the
		      // page correctly (i.e. factors dropdown, etc)
		      router.appState.get('transaction').prev()
		      .then(function(trans) {
		        router.appState.set('transaction', trans);
		      }).done();
		      return;
		    case 'MFA_ENROLL':
		      router.navigate('signin/enroll', { trigger: true });
		      return;
		    case 'MFA_ENROLL_ACTIVATE':
		      var activateUrl = fn.createActivateFactorUrl(router.appState.get('activatedFactorProvider'),
		        router.appState.get('activatedFactorType'));
		      router.navigate(activateUrl, { trigger: true });
		      return;
		    case 'PASSWORD_WARN':
		    case 'PASSWORD_EXPIRED':
		      router.navigate('signin/password-expired', { trigger: true });
		      return;
		    case 'RECOVERY_CHALLENGE':
		      // Will use this workaround (lowercasing response) until OKTA-69083 is resolved
		      var fromEmail = res.factorType.toLowerCase() === Enums.RECOVERY_FACTOR_TYPE_EMAIL.toLowerCase(),
		          isForgotPassword = res.recoveryType === Enums.RECOVERY_TYPE_PASSWORD,
		          isUnlock = res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK;
		      if (isForgotPassword && fromEmail) {
		        router.navigate('signin/recovery-emailed', { trigger: true });
		      }
		      else if (isUnlock && fromEmail) {
		        router.navigate('signin/unlock-emailed', { trigger: true });
		      }
		      else {
		        router.navigate('signin/recovery-challenge', { trigger: true });
		      }
		      return;
		    case 'RECOVERY':
		      router.navigate('signin/recovery-question', { trigger: true });
		      return;
		    case 'PASSWORD_RESET':
		      router.navigate('signin/password-reset', { trigger: true });
		      return;
		    case 'LOCKED_OUT':
		      if (router.settings.get('features.selfServiceUnlock')) {
		        router.navigate('signin/unlock', { trigger: true });
		      } else {
		        router.controller.model.trigger('error', router.controller.model, {
		          responseJSON: {
		            errorCauses: [],
		            errorSummary: Okta.loc('error.auth.lockedOut', 'login')
		          }
		        });
		      }
		      return;
		    default:
		      throw new Error('Unknown status: ' + res.status);
		    }
		  };
	
		  return fn;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
		  return {
		    redirect: function (url) {
		      window.location = url;
		    },
	
		    constantError: function (errorMessage) {
		      return function () {
		        throw new Error(errorMessage);
		      };
		    },
	
		    /**
		     * Simply convert an URL query key value pair object into an URL query string.
		     * Remember NOT to escape the query string when using this util.
		     * example:
		     * input: {userId: 123, instanceId: undefined, expand: 'schema,app'}
		     * output: '?userId=123&expand=schema,app'
		     */
		    getUrlQueryString: function (queries) {
		      _.isObject(queries) || (queries = {});
		      var queriesString = _.without(_.map(queries, function (value, key) {
		        if (value !== undefined && value !== null) {
		          return key + '=' + encodeURIComponent(value);
		        }
		      }), undefined).join('&');
		      return _.isEmpty(queriesString) ? '' : '?' + queriesString;
		    }
		  };
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(85), __webpack_require__(90)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, Errors) {
	
		  var util = {};
		  var _ = Okta._;
	
		  function hasResponseType(params, type) {
		    if (_.isArray(params.responseType)) {
		      return _.contains(params.responseType, type);
		    }
		    else {
		      return type === params.responseType;
		    }
		  }
	
		  /**
		   * Get the tokens in the OIDC/OAUTH flows
		   *
		   * @param settings - settings model object
		   * @param params - {idp: 'xxx'} for social auth
		   *                 {sessionToken: 'xxx'} for okta idp
		   */
		  util.getTokens = function (settings, params, controller) {
	
		    function success(result) {
		      settings.callGlobalSuccess(Enums.SUCCESS, result);
		    }
	
		    function error(error) {
		      // OKTA-104330- Handle error case where user is not assigned to OIDC client
		      if (error.errorCode === 'access_denied') {
		        controller.model.trigger('error', controller.model, {'responseJSON': error});
		        controller.model.appState.trigger('removeLoading');
		      } else {
		        settings.callGlobalError(new Errors.OAuthError(error.message));
		      }
		    }
	
		    var authClient = settings.getAuthClient(),
		        options = settings.toJSON({ verbose: true }),
		        oauthParams = {},
		        extraOptions = {};
	
		    _.extend(
		      oauthParams,
		      _.pick(options, 'clientId', 'redirectUri'),
		      _.pick(options.authParams, 'responseType', 'responseMode', 'display', 'scopes', 'state', 'nonce'),
		      params
		    );
	
		    // Extra Options for Social Idp popup window title and id_token response timeout
		    extraOptions.popupTitle = Okta.loc('socialauth.popup.title', 'login');
		    extraOptions.timeout = options.oAuthTimeout;
	
		    _.extend(
		      extraOptions,
		      _.pick(options.authParams, 'issuer', 'authorizeUrl')
		    );
	
		    // Redirect flow - this can be used when logging into an external IDP, or
		    // converting the Okta sessionToken to an access_token, id_token, and/or
		    // authorization code. Note: The authorization code flow will always redirect.
		    if (oauthParams.display === 'page' || hasResponseType(oauthParams, 'code')) {
		      authClient.token.getWithRedirect(oauthParams, extraOptions);
		    }
	
		    // Default flow if logging in with Okta as the IDP - convert sessionToken to
		    // tokens in a hidden iframe. Used in Single Page Apps where the app does
		    // not want to redirect away from the page to convert the token.
		    else if (oauthParams.sessionToken) {
		      authClient.token.getWithoutPrompt(oauthParams, extraOptions)
		      .then(success)
		      .fail(error)
		      .done();
		    }
	
		    // Default flow if logging in with an external IDP - opens a popup and
		    // gets the token from a postMessage response.
		    else {
		      authClient.token.getWithPopup(oauthParams, extraOptions)
		      .then(success)
		      .fail(error)
		      .done();
		    }
		  };
	
		  return util;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(module.exports = {
		  INVALID_TOKEN_EXCEPTION: 'E0000011'
		});
	
	
	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint camelcase:false, newcap:false */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(102),
		  __webpack_require__(9),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(85),
		  __webpack_require__(77),
		  __webpack_require__(103)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Duo, Q, FactorUtil, FormController, Enums, FormType, FooterSignout) {
	
		  var $ = Okta.$,
		      _ = Okta._;
	
		  return FormController.extend({
	
		    className: 'mfa-verify-duo duo-form',
	
		    Model: {
		      props: {
		        host: 'string',
		        signature: 'string',
		        postAction: 'string',
		        factorId: 'string',
		        stateToken: 'string',
		        rememberDevice: 'boolean'
		      },
	
		      initialize: function () {
		        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
		        // set the initial value for remember device (Cannot do this while defining the
		        // local property because this.settings would not be initialized there yet).
		        this.set('rememberDevice', rememberDevice);
		      },
	
		      getInitOptions: function () {
		        var rememberDevice = !!this.get('rememberDevice');
		        return this.doTransaction(function(transaction) {
		          var data = {
		            rememberDevice: rememberDevice
		          };
		          var factor = _.findWhere(transaction.factors, {
		            provider: 'DUO',
		            factorType: 'web'
		          });
		          return factor.verify(data)
		          .fail(function (err) {
		            // Clean up the cookie on failure.
		            throw err;
		          });
		        });
		      },
	
		      verify: function (signedResponse) {
		        // Note: We should be doing this in OktaAuth! Fix when it's updated.
		        var url = this.get('postAction'),
		            factorId = this.get('factorId'),
		            self = this,
		            data = {
		              id: factorId,
		              stateToken: this.get('stateToken'),
		              sig_response: signedResponse
		            };
		        // We don't actually use authClient.post() here (unlike all the other cases in the
		        // sign-in widget) since the endpoint is wired to accept serialized form post instead
		        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
		        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
		        // are the only two places where we actually do this.
		        // NOTE - If we ever decide to change this, we should test this very carefully.
		        var rememberDevice = this.get('rememberDevice');
		        return Q($.post(url, data))
		        .then(function () {
		          return self.doTransaction(function(transaction) {
		            var data;
		            if (rememberDevice) {
		              data = {rememberDevice: rememberDevice};
		            }
		            return transaction.poll(data);
		          });
		        })
		        .fail(function (err) {
		          self.trigger('error', self, err.xhr);
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      noButtonBar: true,
		      title: _.partial(Okta.loc, 'factor.duo'),
		      attributes: { 'data-se': 'factor-duo' },
	
		      postRender: function () {
		        this.add('<iframe frameborder="0"></iframe>');
		        if (this.options.appState.get('allowRememberDevice')) {
		          this.addInput({
		            label: false,
		            'label-top': true,
		            placeholder: this.options.appState.get('rememberDeviceLabel'),
		            className: 'margin-btm-0',
		            name: 'rememberDevice',
		            type: 'checkbox'
		          });
		        }
		        Duo.init({
		          'host': this.model.get('host'),
		          'sig_request': this.model.get('signature'),
		          'iframe': this.$('iframe').get(0),
		          'post_action': _.bind(this.model.verify, this.model)
		        });
		      }
		    },
	
		    Footer: FooterSignout,
	
		    fetchInitialData: function () {
		      var self = this;
		      return this.model.getInitOptions()
		      .then(function (trans) {
		        var res = trans.data;
		        if (!res._embedded || !res._embedded.factor || !res._embedded.factor._embedded ||
		            !res._embedded.factor._embedded.verification) {
		          throw new Error('Response does not have duo verification options');
		        }
		        var verification = res._embedded.factor._embedded.verification;
		        self.model.set({
		          host: verification.host,
		          signature: verification.signature,
		          postAction: verification._links.complete.href,
		          factorId: res._embedded.factor.id,
		          stateToken: res.stateToken
		        });
		      });
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaChallenge')) {
		        return true;
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;/**
		 * Duo Web SDK v2
		 * Copyright 2015, Duo Security
		 */
	
		// OKTA: Added define to use with AMD
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
		    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\|[A-Za-z0-9\+\/=]+\|[A-Za-z0-9\+\/=]+$/;
		    var DUO_ERROR_FORMAT = /^ERR\|[\w\s\.\(\)]+$/;
	
		    var iframeId = 'duo_iframe',
		        postAction = '',
		        postArgument = 'sig_response',
		        host,
		        sigRequest,
		        duoSig,
		        appSig,
		        iframe;
	
		    function throwError(message, url) {
		        throw new Error(
		            'Duo Web SDK error: ' + message +
		            (url ? ('\n' + 'See ' + url + ' for more information') : '')
		        );
		    }
	
		    function hyphenize(str) {
		        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();
		    }
	
		    // cross-browser data attributes
		    function getDataAttribute(element, name) {
		        if ('dataset' in element) {
		            return element.dataset[name];
		        } else {
		            return element.getAttribute('data-' + hyphenize(name));
		        }
		    }
	
		    // cross-browser event binding/unbinding
		    function on(context, event, fallbackEvent, callback) {
		        if ('addEventListener' in window) {
		            context.addEventListener(event, callback, false);
		        } else {
		            context.attachEvent(fallbackEvent, callback);
		        }
		    }
	
		    function off(context, event, fallbackEvent, callback) {
		        if ('removeEventListener' in window) {
		            context.removeEventListener(event, callback, false);
		        } else {
		            context.detachEvent(fallbackEvent, callback);
		        }
		    }
	
		    function onReady(callback) {
		        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);
		    }
	
		    function offReady(callback) {
		        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);
		    }
	
		    function onMessage(callback) {
		        on(window, 'message', 'onmessage', callback);
		    }
	
		    function offMessage(callback) {
		        off(window, 'message', 'onmessage', callback);
		    }
	
		    /**
		     * Parse the sig_request parameter, throwing errors if the token contains
		     * a server error or if the token is invalid.
		     *
		     * @param {String} sig Request token
		     */
		    function parseSigRequest(sig) {
		        if (!sig) {
		            // nothing to do
		            return;
		        }
	
		        // see if the token contains an error, throwing it if it does
		        if (sig.indexOf('ERR|') === 0) {
		            throwError(sig.split('|')[1]);
		        }
	
		        // validate the token
		        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {
		            throwError(
		                'Duo was given a bad token.  This might indicate a configuration ' +
		                'problem with one of Duo\'s client libraries.',
		                'https://www.duosecurity.com/docs/duoweb#first-steps'
		            );
		        }
	
		        var sigParts = sig.split(':');
	
		        // hang on to the token, and the parsed duo and app sigs
		        sigRequest = sig;
		        duoSig = sigParts[0];
		        appSig = sigParts[1];
	
		        return {
		            sigRequest: sig,
		            duoSig: sigParts[0],
		            appSig: sigParts[1]
		        };
		    }
	
		    /**
		     * This function is set up to run when the DOM is ready, if the iframe was
		     * not available during `init`.
		     */
		    function onDOMReady() {
		        iframe = document.getElementById(iframeId);
	
		        if (!iframe) {
		            throw new Error(
		                'This page does not contain an iframe for Duo to use.' +
		                'Add an element like <iframe id="duo_iframe"></iframe> ' +
		                'to this page.  ' +
		                'See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe ' +
		                'for more information.'
		            );
		        }
	
		        // we've got an iframe, away we go!
		        ready();
	
		        // always clean up after yourself
		        offReady(onDOMReady);
		    }
	
		    /**
		     * Validate that a MessageEvent came from the Duo service, and that it
		     * is a properly formatted payload.
		     *
		     * The Google Chrome sign-in page injects some JS into pages that also
		     * make use of postMessage, so we need to do additional validation above
		     * and beyond the origin.
		     *
		     * @param {MessageEvent} event Message received via postMessage
		     */
		    function isDuoMessage(event) {
		        return Boolean(
		            event.origin === ('https://' + host) &&
		            typeof event.data === 'string' &&
		            (
		                event.data.match(DUO_MESSAGE_FORMAT) ||
		                event.data.match(DUO_ERROR_FORMAT)
		            )
		        );
		    }
	
		    /**
		     * Validate the request token and prepare for the iframe to become ready.
		     *
		     * All options below can be passed into an options hash to `Duo.init`, or
		     * specified on the iframe using `data-` attributes.
		     *
		     * Options specified using the options hash will take precedence over
		     * `data-` attributes.
		     *
		     * Example using options hash:
		     * ```javascript
		     * Duo.init({
		     *     iframe: "some_other_id",
		     *     host: "api-main.duo.test",
		     *     sig_request: "...",
		     *     post_action: "/auth",
		     *     post_argument: "resp"
		     * });
		     * ```
		     *
		     * Example using `data-` attributes:
		     * ```
		     * <iframe id="duo_iframe"
		     *         data-host="api-main.duo.test"
		     *         data-sig-request="..."
		     *         data-post-action="/auth"
		     *         data-post-argument="resp"
		     *         >
		     * </iframe>
		     * ```
		     *
		     * @param {Object} options
		     * @param {String} options.iframe                         The iframe, or id of an iframe to set up
		     * @param {String} options.host                           Hostname
		     * @param {String} options.sig_request                    Request token
		     * @param {String} [options.post_action='']               URL to POST back to after successful auth
		     * @param {String} [options.post_argument='sig_response'] Parameter name to use for response token
		     */
		    function init(options) {
		        if (options) {
		            if (options.host) {
		                host = options.host;
		            }
	
		            if (options.sig_request) {
		                parseSigRequest(options.sig_request);
		            }
	
		            if (options.post_action) {
		                postAction = options.post_action;
		            }
	
		            if (options.post_argument) {
		                postArgument = options.post_argument;
		            }
	
		            if (options.iframe) {
		                if ('tagName' in options.iframe) {
		                    iframe = options.iframe;
		                } else if (typeof options.iframe === 'string') {
		                    iframeId = options.iframe;
		                }
		            }
		        }
	
		        // if we were given an iframe, no need to wait for the rest of the DOM
		        if (iframe) {
		            ready();
		        } else {
		            // try to find the iframe in the DOM
		            iframe = document.getElementById(iframeId);
	
		            // iframe is in the DOM, away we go!
		            if (iframe) {
		                ready();
		            } else {
		                // wait until the DOM is ready, then try again
		                onReady(onDOMReady);
		            }
		        }
	
		        // always clean up after yourself!
		        offReady(init);
		    }
	
		    /**
		     * This function is called when a message was received from another domain
		     * using the `postMessage` API.  Check that the event came from the Duo
		     * service domain, and that the message is a properly formatted payload,
		     * then perform the post back to the primary service.
		     *
		     * @param event Event object (contains origin and data)
		     */
		    function onReceivedMessage(event) {
		        if (isDuoMessage(event)) {
		            // the event came from duo, do the post back
		            doPostBack(event.data);
	
		            // always clean up after yourself!
		            offMessage(onReceivedMessage);
		        }
		    }
	
		    /**
		     * Point the iframe at Duo, then wait for it to postMessage back to us.
		     */
		    function ready() {
		        if (!host) {
		            host = getDataAttribute(iframe, 'host');
	
		            if (!host) {
		                throwError(
		                    'No API hostname is given for Duo to use.  Be sure to pass ' +
		                    'a `host` parameter to Duo.init, or through the `data-host` ' +
		                    'attribute on the iframe element.',
		                    'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'
		                );
		            }
		        }
	
		        if (!duoSig || !appSig) {
		            parseSigRequest(getDataAttribute(iframe, 'sigRequest'));
	
		            if (!duoSig || !appSig) {
		                throwError(
		                    'No valid signed request is given.  Be sure to give the ' +
		                    '`sig_request` parameter to Duo.init, or use the ' +
		                    '`data-sig-request` attribute on the iframe element.',
		                    'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'
		                );
		            }
		        }
	
		        // if postAction/Argument are defaults, see if they are specified
		        // as data attributes on the iframe
		        if (postAction === '') {
		            postAction = getDataAttribute(iframe, 'postAction') || postAction;
		        }
	
		        if (postArgument === 'sig_response') {
		            postArgument = getDataAttribute(iframe, 'postArgument') || postArgument;
		        }
	
		        // point the iframe at Duo
		        iframe.src = [
		            'https://', host, '/frame/web/v1/auth?tx=', duoSig,
		            '&parent=', document.location.href
		        ].join('');
	
		        // listen for the 'message' event
		        onMessage(onReceivedMessage);
		    }
	
		    /**
		     * We received a postMessage from Duo.  POST back to the primary service
		     * with the response token, and any additional user-supplied parameters
		     * given in form#duo_form.
		     */
		    // function doPostBack(response) {
		    //     // create a hidden input to contain the response token
		    //     var input = document.createElement('input');
		    //     input.type = 'hidden';
		    //     input.name = postArgument;
		    //     input.value = response + ':' + appSig;
		    //
		    //     // user may supply their own form with additional inputs
		    //     var form = document.getElementById('duo_form');
		    //
		    //     // if the form doesn't exist, create one
		    //     if (!form) {
		    //         form = document.createElement('form');
		    //
		    //         // insert the new form after the iframe
		    //         iframe.parentElement.insertBefore(form, iframe.nextSibling);
		    //     }
		    //
		    //     // make sure we are actually posting to the right place
		    //     form.method = 'POST';
		    //     form.action = postAction;
		    //
		    //     // add the response token input to the form
		    //     form.appendChild(input);
		    //
		    //     // away we go!
		    //     form.submit();
		    // }
	
		    // OKTA: Overriding their doPostBack logic because we want to submit this
		    // through ajax, not a postBack
		    function doPostBack(response) {
		        postAction(response + ':' + appSig);
		    }
	
		    // when the DOM is ready, initialize
		    // note that this will get cleaned up if the user calls init directly!
		    onReady(init);
	
		    return {
		        init: init,
		        _parseSigRequest: parseSigRequest,
		        _isDuoMessage: isDuoMessage
		    };
	
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums) {
	
		  var _ = Okta._;
	
		  return Okta.View.extend({
		    template: '\
		      <a href="#" class="link {{linkClassName}}" data-se="signout-link">\
		        {{linkText}}\
		      </a>\
		    ',
		    className: 'auth-footer clearfix',
		    events: {
		      'click a' : function (e) {
		        e.preventDefault();
		        var self = this;
		        this.model.doTransaction(function(transaction) {
		          return transaction.cancel();
		        })
		        .then(function() {
		          self.state.set('navigateDir', Enums.DIRECTION_BACK);
		          self.options.appState.trigger('navigate', '');
		        });
		      }
		    },
		    getTemplateData: function () {
		      return {
		        linkClassName: _.isUndefined(this.options.linkClassName) ? 'goto' : this.options.linkClassName,
		        linkText: this.options.linkText || Okta.loc('signout', 'login')
		      };
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 104 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint maxcomplexity:12, maxparams:11 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(49),
		  __webpack_require__(78),
		  __webpack_require__(107),
		  __webpack_require__(110),
		  __webpack_require__(111),
		  __webpack_require__(105),
		  __webpack_require__(112),
		  __webpack_require__(113),
		  __webpack_require__(114),
		  __webpack_require__(103)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Checkbox, BaseLoginController, CookieUtil, TOTPForm, YubikeyForm, SecurityQuestionForm, CallAndSMSForm,
		          PushForm, InlineTOTPForm, FooterSignout) {
	
		  return BaseLoginController.extend({
		    className: 'mfa-verify',
	
		    initialize: function (options) {
		      var factors = options.appState.get('factors');
		      var factorType = options.factorType;
		      var provider = options.provider;
	
		      var View;
		      switch (factorType) {
		      case 'question':
		        View = SecurityQuestionForm;
		        break;
		      case 'sms':
		      case 'call':
		        View = CallAndSMSForm;
		        break;
		      case 'token':
		      case 'token:software:totp':
		        View = TOTPForm;
		        break;
		      case 'token:hardware':
		        View = YubikeyForm;
		        break;
		      case 'push':
		        View = PushForm;
		        break;
		      default:
		        throw new Error('Unrecognized factor type');
		      }
	
		      this.model = factors.findWhere({ provider: provider, factorType: factorType });
		      if (!this.model) {
		        // TODO: recover from this more gracefully - probably to redirect
		        // to default factor
		        throw new Error('Unrecognized factor/provider');
		      }
	
		      this.addListeners();
		      this.add(new View(this.toJSON()));
	
		      // Okta Push is different from the other factors - it has a backup
		      // totp factor that can be chosen with the InlineTOTPForm
		      if (factorType === 'push' && this.model.get('isOktaFactor')) {
		        this.add(InlineTOTPForm, {
		          options: { model: this.model.get('backupFactor') }
		        });
	
		        if (this.settings.get('features.autoPush')) {
		          this.add(Checkbox, {
		            options: {
		              model: this.model,
		              name: 'autoPush',
		              placeholder: Okta.loc('autoPush', 'login'),
		              label: false,
		              'label-top': false,
		              className: 'margin-btm-0'
		            }
		          });
		        }
	
		        // Remember Device checkbox resides outside of the Push and TOTP forms.
		        if (this.options.appState.get('allowRememberDevice')) {
		          this.add(Checkbox, {
		            options: {
		              model: this.model,
		              name: 'rememberDevice',
		              placeholder: this.options.appState.get('rememberDeviceLabel'),
		              label: false,
		              'label-top': true,
		              className: 'margin-btm-0'
		            }
		          });
		        }
		        // Set the rememberDevice on the TOTP factor since it is stored as backupFactor.
		        this.listenTo(this.model, 'change:rememberDevice', function (model, rememberDevice) {
		          model.get('backupFactor').set('rememberDevice', rememberDevice);
		        });
		      }
	
		      this.add(new FooterSignout(this.toJSON()));
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaChallenge') ||
		          this.options.appState.get('isMfaRequired')) {
		        return true;
		      }
		      // update auto push cookie after user accepts Okta Verify MFA
		      if (this.options.factorType == 'push') {
		        if (this.settings.get('features.autoPush') && this.model.get('autoPush')) {
		          CookieUtil.setAutoPushCookie(this.options.appState.get('userId'));
		        } else {
		          CookieUtil.removeAutoPushCookie(this.options.appState.get('userId'));
		        }
		      }
		      return false;
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PasswordBox) {
	
		  var _ = Okta._;
	
		  return Okta.Form.extend({
		    className: 'mfa-verify-question',
		    autoSave: true,
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		    scrollOnError: false,
		    layout: 'o-form-theme',
		    attributes: { 'data-se': 'factor-question' },
	
		    initialize: function () {
		      this.title = this.model.get('factorLabel');
	
		      this.addInput({
		        label: this.model.get('securityQuestion'),
		        'label-top': true,
		        placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
		        className: 'auth-passcode',
		        name: 'answer',
		        type: 'password',
		        input: PasswordBox
		      });
	
		      if (this.options.appState.get('allowRememberDevice')) {
		        this.addInput({
		          label: false,
		          'label-top': true,
		          placeholder: this.options.appState.get('rememberDeviceLabel'),
		          className: 'margin-btm-0',
		          name: 'rememberDevice',
		          type: 'checkbox'
		        });
		      }
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		    __webpack_require__(19),
		    __webpack_require__(82)
		  ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		    return TextBox.extend({
		      template: Okta.tpl('\
		        <input type="password" placeholder="{{placeholder}}" name="{{name}}" id="{{inputId}}" value="{{value}}"/>\
		        <span class="password-toggle">\
		          <span class="button button-dark button-show">\
		            {{i18n code="mfa.challenge.answer.showAnswer" bundle="login"}}</span>\
		          <span class="button button-hide">{{i18n code="mfa.challenge.answer.hideAnswer" bundle="login"}}</span>\
		        </span>'),
	
		      initialize: function () {
		        this.events['click .password-toggle .button-show'] = '_showPassword';
		        this.events['click .password-toggle .button-hide'] = '_hidePassword';
	
		        this.delegateEvents();
		      },
	
		      changeType: function (type) {
		        TextBox.prototype.changeType.apply(this, arguments);
		        this.$('.password-toggle').toggleClass('password-toggle-on', type !== 'password');
		      },
	
		      _showPassword: function () {
		        this.changeType('text');
		      },
	
		      _hidePassword: function () {
		        this.changeType('password');
		      }
	
		    });
	
		  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(108), __webpack_require__(109)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CryptoUtil) {
	
		  var $ = Okta.$;
		  var LAST_USERNAME_COOKIE_NAME = 'ln';
		  var AUTO_PUSH_COOKIE_PREFIX  = 'auto_push_';
		  var DAYS_SAVE_REMEMBER = 365;
	
		  function removeCookie (name) {
		    $.removeCookie(name, { path: '/' });
		  }
	
		  function setCookie (name, value) {
		    $.cookie(name, value, {
		      expires: DAYS_SAVE_REMEMBER,
		      path: '/'
		    });
		  }
	
		  function getAutoPushKey(userId) {
		    return AUTO_PUSH_COOKIE_PREFIX + CryptoUtil.getStringHash(userId);
		  }
	
		  var fn = {};
	
		  fn.getCookieUsername = function () {
		    return $.cookie(LAST_USERNAME_COOKIE_NAME);
		  };
	
		  fn.setUsernameCookie = function (username) {
		    setCookie(LAST_USERNAME_COOKIE_NAME, username);
		  };
	
		  fn.removeUsernameCookie = function () {
		    removeCookie(LAST_USERNAME_COOKIE_NAME);
		  };
	
		  fn.isAutoPushEnabled = function (userId) {
		    if (userId === undefined) {
		      return false;
		    }
		    return $.cookie(getAutoPushKey(userId)) === 'true';
		  };
	
		  fn.setAutoPushCookie = function (userId) {
		    if (userId === undefined) {
		      return;
		    }
		    setCookie(getAutoPushKey(userId), true);
		  };
	
		  fn.removeAutoPushCookie = function (userId) {
		    if (userId === undefined) {
		      return;
		    }
		    removeCookie(getAutoPushKey(userId));
		  };
	
		  return fn;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
		  var fn = {};
		  
		   // Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295
		   // Not recommended for data set of size greater than 10000
		   // https://www.npmjs.com/package/string-hash
		  fn.getStringHash = function (str) {
		    var hash = 5381,
		        i = str.length;
		    while(i) {
		      hash = (hash * 33) ^ str.charCodeAt(--i);
		    }
		    return hash >>> 0;
		  };
		  
		  return fn;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 109 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_109__;
	
	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(82)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		  var _ = Okta._;
	
		  return Okta.Form.extend({
		    className: 'mfa-verify-totp',
		    autoSave: true,
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		    scrollOnError: false,
		    layout: 'o-form-theme',
		    attributes: { 'data-se': 'factor-totp' },
	
		    initialize: function () {
		      var factorName = this.model.get('factorLabel');
		      var maskPasswordField = this.model.get('provider') === 'RSA' || this.model.get('provider') === 'DEL_OATH';
	
		      this.title = factorName;
		      this.subtitle = Okta.loc('mfa.challenge.title', 'login', [factorName]);
	
		      this.addInput({
		        label: false,
		        'label-top': true,
		        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		        className: 'o-form-fieldset o-form-label-top auth-passcode',
		        name: 'answer',
		        input: TextBox,
		        type: maskPasswordField ? 'password' : 'text'
		      });
	
		      if (this.options.appState.get('allowRememberDevice')) {
		        this.addInput({
		          label: false,
		          'label-top': true,
		          placeholder: this.options.appState.get('rememberDeviceLabel'),
		          className: 'margin-btm-0',
		          name: 'rememberDevice',
		          type: 'checkbox'
		        });
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(82)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		  var _ = Okta._;
	
		  return Okta.Form.extend({
		    className: 'mfa-verify-yubikey',
		    autoSave: true,
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		    scrollOnError: false,
		    layout: 'o-form-theme',
		    attributes: { 'data-se': 'factor-yubikey' },
	
		    initialize: function () {
		      var factorName = this.model.get('factorLabel');
	
		      this.title = factorName;
		      this.subtitle = Okta.loc('factor.totpHard.yubikey.description', 'login');
	
		      this.addInput({
		        label: false,
		        'label-top': true,
		        className: 'o-form-fieldset o-form-label-top auth-passcode',
		        name: 'answer',
		        input: TextBox,
		        type: 'password',
		        placeholder: Okta.loc('factor.totpHard.yubikey.placeholder','login')
		      });
	
		      if (this.options.appState.get('allowRememberDevice')) {
		        this.addInput({
		          label: false,
		          'label-top': true,
		          className: 'margin-btm-0',
		          placeholder: this.options.appState.get('rememberDeviceLabel'),
		          name: 'rememberDevice',
		          type: 'checkbox'
		        });
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 112 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(9), __webpack_require__(82)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, TextBox) {
	
		  var subtitleTpl = Okta.Handlebars.compile('({{phoneNumber}})');
		  var _ = Okta._;
		  var API_RATE_LIMIT = 30000; //milliseconds
	
		  function isCallFactor(factorType) {
		    return factorType === 'call';
		  }
	
		  return Okta.Form.extend({
		    className: 'mfa-verify-sms-call',
		    autoSave: true,
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		    scrollOnError: false,
		    layout: 'o-form-theme',
	
		    disableSubmitButton: function () {
		      return this.model.appState.get('isMfaChallenge');
		    },
	
		    initialize: function () {
		      /*jshint maxcomplexity:7*/
		      var self = this;
		      this.title = this.model.get('factorLabel');
	
		      var factorType = this.model.get('factorType');
		      var isCall = isCallFactor(factorType);
		      this.$el.attr('data-se', 'factor-' + factorType);
		      var buttonDataSe = isCall ? 'make-call' : 'sms-send-code';
		      var buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';
	
		      var formSubmit = Okta.loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');
		      var formRetry = Okta.loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');
		      var formSubmitted = Okta.loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');
	
		      this.subtitle = subtitleTpl({
		        phoneNumber: this.model.get('phoneNumber')
		      });
		      this.listenTo(this.model, 'error', function () {
		        this.clearErrors();
		      });
		      this.add(Okta.createButton({
		        attributes: { 'data-se': buttonDataSe },
		        className: 'button ' + buttonClassName,
		        title: formSubmit,
		        click: function () {
		          self.clearErrors();
		          // To send an OTP to the device, make the same request but use
		          // an empty passCode
		          this.model.set('answer', '');
		          this.model.save()
		          .then(_.bind(function () {
		            this.options.title = formSubmitted;
		            this.disable();
		            this.render();
		            // render and focus on the passcode input field.
		            self.getInputs().first().render().focus();
		            return Q.delay(API_RATE_LIMIT);
		          }, this))
		          .then(_.bind(function () {
		            this.options.title = formRetry;
		            this.enable();
		            this.render();
		          }, this));
		        }
		      }));
		      this.addInput({
		        label: false,
		        'label-top': true,
		        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		        className: 'o-form-fieldset o-form-label-top auth-passcode',
		        name: 'answer',
		        input: TextBox,
		        type: 'text'
		      });
		      if (this.options.appState.get('allowRememberDevice')) {
		        this.addInput({
		          label: false,
		          'label-top': true,
		          placeholder: this.options.appState.get('rememberDeviceLabel'),
		          className: 'margin-btm-0',
		          name: 'rememberDevice',
		          type: 'checkbox'
		        });
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 113 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(107)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CookieUtil) {
	
		  var _ = Okta._;
		  // deviceName is escaped on BaseForm (see BaseForm's template)
		  var titleTpl = Okta.Handlebars.compile('{{factorName}} ({{{deviceName}}})');
	
		  return Okta.Form.extend({
		    className: 'mfa-verify-push',
		    autoSave: true,
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'oktaverify.send', 'login'),
		    scrollOnError: false,
		    layout: 'o-form-theme',
		    attributes: { 'data-se': 'factor-push' },
		    events: {
		      submit: 'submit'
		    },
	
		    initialize: function () {
		      this.enabled = true;
		      this.listenTo(this.options.appState, 'change:isMfaRejectedByUser',
		        function (state, isMfaRejectedByUser) {
		          this.setSubmitState(isMfaRejectedByUser);
		          if (isMfaRejectedByUser) {
		            this.showError(Okta.loc('oktaverify.rejected', 'login'));
		          }
		        }
		      );
		      this.listenTo(this.options.appState, 'change:isMfaTimeout',
		        function (state, isMfaTimeout) {
		          this.setSubmitState(isMfaTimeout);
		          if (isMfaTimeout) {
		            this.showError(Okta.loc('oktaverify.timeout', 'login'));
		          }
		        }
		      );
		      this.listenTo(this.options.appState, 'change:isMfaRequired',
		        function (state, isMfaRequired) {
		          if (isMfaRequired) {
		            this.clearErrors();
		          }
		        }
		      );
		      this.title = titleTpl({
		        factorName: this.model.get('factorLabel'),
		        deviceName: this.model.get('deviceName')
		      });
		    },
		    setSubmitState: function (ableToSubmit) {
		      var button = this.$el.find('.button');
		      this.enabled = ableToSubmit;
		      if (ableToSubmit) {
		        button.removeClass('link-button-disabled');
		        button.prop('value', Okta.loc('oktaverify.send', 'login'));
		      } else {
		        button.addClass('link-button-disabled');
		        button.prop('value', Okta.loc('oktaverify.sent', 'login'));
		      }
		    },
		    submit: function (e) {
		      if (e !== undefined) {
		        e.preventDefault();
		      }
		      if (this.enabled) {
		        this.setSubmitState(false);
		        this.doSave();
		      }
		    },
		    postRender: function() {
		      if (this.settings.get('features.autoPush') && CookieUtil.isAutoPushEnabled(this.options.appState.get('userId'))) {
		        this.model.set('autoPush', true);
		        // bind after $el has been rendered, and trigger push once DOM is fully loaded
		        _.defer(_.bind(this.submit, this));
		      }
		    },
		    doSave: function () {
		      this.clearErrors();
		      if (this.model.isValid()) {
		        this.listenToOnce(this.model, 'error', this.setSubmitState, true);
		        this.trigger('save', this.model);
		      }
		    },
		    showError: function (msg) {
		      this.model.trigger('error', this.model, {responseJSON: {errorSummary: msg}});
		    }
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 114 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(82)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		  function addInlineTotp(form) {
		    form.addDivider();
		    form.addInput({
		      label: false,
		      'label-top': true,
		      placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		      className: 'o-form-fieldset o-form-label-top inline-input auth-passcode',
		      name: 'answer',
		      input: TextBox,
		      type: 'text'
		    });
		    form.add(Okta.createButton({
		      attributes: { 'data-se': 'inline-totp-verify' },
		      className: 'button inline-totp-verify',
		      title: Okta.loc('mfa.challenge.verify', 'login'),
		      click: function () {
		        form.model.manageTransaction(function (transaction, setTransaction) {
		          // This is the case where we enter the TOTP code and verify while there is an
		          // active Push request (or polling) running. We need to invoke previous() on authClient
		          // and then call model.save(). If not, we would still be in MFA_CHALLENGE state and
		          // verify would result in a wrong request (push verify instead of a TOTP verify).
		          if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
		            return transaction.prev().then(function (trans) {
		              setTransaction(trans);
		              form.model.save();
		            });
		          } else {
		            // Push is not active and we enter the code to verify.
		            form.model.save();
		          }
		        });
		      }
		    }));
		    form.at(1).focus();
		  }
	
		  return Okta.Form.extend({
		    autoSave: true,
		    noButtonBar: true,
		    scrollOnError: false,
		    layout: 'o-form-theme',
	
		    className: 'mfa-verify-totp-inline',
	
		    attributes: { 'data-se': 'factor-inline-totp' },
	
		    initialize: function () {
		      var form = this;
		      this.listenTo(this.model, 'error', function () {
		        this.clearErrors();
		      });
		      this.add(Okta.createButton({
		        className: 'link',
		        attributes: { 'data-se': 'inline-totp-add' },
		        title: Okta.loc('mfa.challenge.orEnterCode', 'login'),
		        click: function () {
		          this.remove();
		          addInlineTotp(form);
		        }
		      }));
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(116),
		  __webpack_require__(117),
		  __webpack_require__(103),
		  __webpack_require__(118)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, webauthn, Spinner, FooterSignout, HtmlErrorMessageView) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'mfa-verify verify-windows-hello',
		    Model: {
		      local: {
		        __autoTriggered__: 'boolean'
		      },
	
		      save: function () {
		        if (!webauthn.isAvailable()) {
		          return;
		        }
	
		        this.trigger('request');
		        var model = this;
	
		        return this.doTransaction(function (transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'webauthn',
		            provider: 'FIDO'
		          });
	
		          return factor.verify()
		          .then(function (verifyData) {
		            var factorData = verifyData.factor;
	
		            return webauthn.getAssertion(
		              factorData.challenge.nonce,
		              [{ id: factorData.profile.credentialId }]
		            )
		            .then(function (assertion) {
		              return factor.verify({
		                authenticatorData: assertion.authenticatorData,
		                clientData: assertion.clientData,
		                signatureData: assertion.signature
		              });
		            })
		            .then(function (data) {
		              model.trigger('sync');
		              model.trigger('signIn');
		              return data;
		            })
		            .fail(function (error) {
		              switch (error.message) {
		              case 'AbortError':
		              case 'NotFoundError':
		              case 'NotSupportedError':
		                model.trigger('abort', error.message);
		                return transaction;
		              }
	
		              throw error;
		            });
		          });
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      hasSavingState: false,
		      title: _.partial(Okta.loc, 'factor.windowsHello', 'login'),
		      subtitle: function () {
		        return webauthn.isAvailable() ? Okta.loc('verify.windowsHello.subtitle', 'login') : '';
		      },
		      save: _.partial(Okta.loc, 'verify.windowsHello.save', 'login'),
	
		      customSavingState:{
		        stop: 'abort'
		      },
	
		      modelEvents: function () {
		        if (!webauthn.isAvailable()) {
		          return {};
		        }
	
		        return {
		          'request': '_startEnrollment',
		          'error': '_stopEnrollment',
		          'abort': '_stopEnrollment',
		          'signIn': '_successEnrollment'
		        };
		      },
	
		      noButtonBar: function () {
		        return !webauthn.isAvailable();
		      },
	
		      formChildren: function () {
		        var result = [];
		        if (!webauthn.isAvailable()) {
		          result.push(
		            FormType.View(
		              { View: new HtmlErrorMessageView(
		                { message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') })},
		              { selector: '.o-form-error-container' }
		            )
		          );
		        }
	
		        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));
	
		        return result;
		      },
	
		      postRender: function () {
		        if (this.options.appState.get('factors').length === 1 && !this.model.get('__autoTriggered__')) {
		          this.model.set('__autoTriggered__', true);
		          this.model.save();
		        }
		      },
	
		      _startEnrollment: function () {
		        this.subtitle = Okta.loc('verify.windowsHello.subtitle.loading', 'login');
	
		        this.model.trigger('spinner:show');
		        this._resetErrorMessage();
	
		        this.render();
		        this.$('.o-form-button-bar').addClass('hide');
		      },
	
	
		      _stopEnrollment: function (errorMessage) {
		        this.subtitle = Okta.loc('verify.windowsHello.subtitle', 'login');
	
		        this.model.trigger('spinner:hide');
		        this.$('.o-form-button-bar').removeClass('hide');
	
		        var message;
		        switch (errorMessage) {
		        case 'NotFoundError':
		          message = this.options.appState.get('factors').length > 1 ?
		            Okta.loc('verify.windowsHello.error.notFound.selectAnother', 'login') :
		            Okta.loc('verify.windowsHello.error.notFound', 'login');
		          break;
	
		        case 'NotSupportedError':
		          message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
		          break;
		        }
	
		        this._resetErrorMessage();
	
		        if (message) {
		          var messageView = new HtmlErrorMessageView({
		            message: message
		          });
	
		          this.$('.o-form-error-container').addClass('o-form-has-errors');
		          this.add(messageView, {selector: '.o-form-error-container'});
		          this._errorMessageView = this.last();
		        }
	
		        this.render();
		      },
	
		      _successEnrollment: function () {
		        this.subtitle = Okta.loc('verify.windowsHello.subtitle.signingIn', 'login');
		        this.render();
		        this.$('.o-form-button-bar').addClass('hide');
		      },
	
		      _resetErrorMessage: function () {
		        this._errorMessageView && this._errorMessageView.remove();
		        this._errorMessageView = undefined;
		        this.clearErrors();
		      }
		    },
	
		    Footer: FooterSignout
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 116 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* globals JSON */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		    __webpack_require__(19),
		    __webpack_require__(9)
		  ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q) {
	
		  function adaptToOkta(promise) {
		    return new Q(promise);
		  }
	
		  function makeCredential(accountInfo, cryptoParams, challenge) {
		    cryptoParams = cryptoParams.map(function (param) {
		      return {type: 'FIDO_2_0', algorithm: param.algorithm};
		    });
	
		    var promise = window.msCredentials.makeCredential(accountInfo, cryptoParams, challenge)
		    .then(function (cred) {
		      return Object.freeze({
		        credential: {id: cred.id},
		        publicKey: JSON.parse(cred.publicKey),
		        attestation: cred.attestation
		      });
		    });
	
		    return adaptToOkta(promise);
		  }
	
		  function getAssertion(challenge, allowList) {
		    var accept = allowList.map(function (item) {
		      return {type: 'FIDO_2_0', id: item.id};
		    });
		    var filters = {accept: accept};
	
		    var promise = window.msCredentials.getAssertion(challenge, filters)
		    .then(function (attestation) {
		      var signature = attestation.signature;
		      return Object.freeze({
		        credential: {id: attestation.id},
		        clientData: signature.clientData,
		        authenticatorData: signature.authnrData,
		        signature: signature.signature
		      });
		    });
	
		    return adaptToOkta(promise);
		  }
	
		  return {
		    makeCredential: makeCredential,
		    getAssertion: getAssertion,
		    isAvailable: function () {
		      return window.hasOwnProperty('msCredentials');
		    }
		  };
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  return Okta.View.extend({
		    className: 'okta-waiting-spinner',
		    attributes: {
		      'data-se': 'o-form-okta-waiting-spinner'
		    },
		    modelEvents: {
		      'spinner:show': 'show',
		      'spinner:hide': 'hide'
		    },
	
		    initialize: function (options) {
		      if(options && options.visible === false){
		        this.hide();
		      }
		    },
	
		    show: function () {
		      this.$el.removeClass('hide');
		    },
	
		    hide: function () {
		      this.$el.addClass('hide');
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 118 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		    __webpack_require__(19),
		    __webpack_require__(26)
		  ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseView) {
	
		    // Have to be unescaped for the html in enroll.windowsHello.error.notConfiguredHtml
		    var template = '\
		      <span class="icon error-24"></span>\
		      <h4><strong>{{{message}}}</strong></h4>\
		    ';
	
		    return BaseView.extend({
		      template: template,
		      className: 'okta-infobox-error infobox infobox-error infobox-md margin-btm-25',
		      attributes: {
		        'data-se': 'o-form-error-html'
		      },
	
		      message: '',
	
		      initialize: function (options) {
		        if (options && options.message) {
		          this.message = options.message;
		        }
		      },
	
		      getTemplateData: function () {
		        return {
		          message: this.message
		        };
		      }
		    });
		  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 119 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* global u2f */
		/* jshint maxcomplexity:9 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(103),
		  __webpack_require__(9),
		  __webpack_require__(118),
		  __webpack_require__(83),
		  __webpack_require__(120)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, FooterSignout, Q, HtmlErrorMessageView, BrowserFeatures) {
	
		  var _ = Okta._;
	
		  function getErrorMessageKeyByCode(errorCode, isOneFactor) {
		    switch (errorCode){
		    case 1: // OTHER_ERROR
		      return isOneFactor ? 'u2f.error.other.oneFactor' : 'u2f.error.other';
		    case 2: // BAD_REQUEST
		    case 3: // CONFIGURATION_UNSUPPORTED
		      return isOneFactor ? 'u2f.error.badRequest.oneFactor' : 'u2f.error.badRequest';
		    case 4: // DEVICE_INELIGIBLE
		      return isOneFactor ? 'u2f.error.unsupported.oneFactor' : 'u2f.error.unsupported';
		    case 5: // TIMEOUT
		      return 'u2f.error.timeout';
		    }
		  }
	
		  return FormController.extend({
		    className: 'verify-u2f',
		    Model: {
		      save: function () {
		        this.trigger('request');
	
		        return this.doTransaction(function (transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'u2f',
		            provider: 'FIDO'
		          });
		          var self = this;
		          return factor.verify()
		          .then(function (transaction) {
		            var factorData = transaction.factor;
		            var appId = factorData.profile.appId;
		            var registeredKeys = [{version: factorData.profile.version, keyHandle: factorData.profile.credentialId }];
		            self.trigger('request');
	
		            var deferred = Q.defer();
		            u2f.sign(appId, factorData.challenge.nonce, registeredKeys, function (data) {
		              self.trigger('errors:clear');
		              if (data.errorCode && data.errorCode !== 0) {
		                var isOneFactor = self.options.appState.get('factors').length === 1;
		                deferred.reject({xhr: {responseJSON:
		                  {errorSummary: Okta.loc(getErrorMessageKeyByCode(data.errorCode, isOneFactor), 'login')}}});
		              } else {
		                return factor.verify({
		                  clientData: data.clientData,
		                  signatureData: data.signatureData
		                })
		                .then(deferred.resolve);
		              }
		            });
		            return deferred.promise;
		          });
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      hasSavingState: false,
		      title: _.partial(Okta.loc, 'factor.u2f', 'login'),
		      className: 'verify-u2f-form',
		      noCancelButton: true,
		      save: _.partial(Okta.loc, 'verify.u2f.retry', 'login'),
		      noButtonBar: function () {
		        return !window.hasOwnProperty('u2f');
		      },
		      modelEvents: {
		        'request': '_startEnrollment',
		        'error': '_stopEnrollment'
		      },
	
		      formChildren: function () {
		        var result = [];
	
		        if (!window.hasOwnProperty('u2f')) {
		          var errorMessageKey = 'u2f.error.notSupportedBrowser';
	
		          if (BrowserFeatures.isFirefox()) {
		            errorMessageKey = 'u2f.error.noFirefoxExtension';
		          }
		          else if (this.options.appState.get('factors').length === 1) {
		            errorMessageKey = 'u2f.error.notSupportedBrowser.oneFactor';
		          }
	
		          result.push(FormType.View(
		            {View: new HtmlErrorMessageView({message: Okta.loc(errorMessageKey, 'login')})},
		            {selector: '.o-form-error-container'}
		          ));
		        }
		        else {
		          result.push(FormType.View({
		            View: '\
		            <div class="u2f-verify-text">\
		              <p>{{i18n code="verify.u2f.instructions" bundle="login"}}</p>\
		              <p>{{i18n code="verify.u2f.instructionsBluetooth" bundle="login"}}</p>\
		              <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
		            </div>'
		          }));
		        }
	
		        return result;
		      },
	
		      postRender: function () {
		        _.defer(_.bind(function () {
		          if (window.hasOwnProperty('u2f')) {
		            this.model.save();
		          }
		          else {
		            this.$('[data-se="u2f-waiting"]').addClass('hide');
		          }
		        }, this));
		      },
	
		      _startEnrollment: function () {
		        this.$('.okta-waiting-spinner').removeClass('hide');
		        this.$('.o-form-button-bar').hide();
		      },
	
		      _stopEnrollment: function () {
		        this.$('.okta-waiting-spinner').addClass('hide');
		        this.$('.o-form-button-bar').show();
		      }
		    },
	
		    Footer: FooterSignout
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 120 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_120__;
	
	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint maxcomplexity:9*/
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(85),
		  __webpack_require__(97),
		  __webpack_require__(72),
		  __webpack_require__(122),
		  __webpack_require__(123)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, RouterUtil, Toolbar, FactorList,
		          RequiredFactorList) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-choices',
		    state: {
		      pageType: null
		    },
	
		    Model: {},
	
		    Form: {
		      noCancelButton: true,
	
		      title: _.partial(Okta.loc, 'enroll.choices.title', 'login'),
	
		      noButtonBar: function () {
		        return this.state.get('pageType') === Enums.ALL_OPTIONAL_NONE_ENROLLED;
		      },
	
		      subtitle: function () {
		        switch (this.state.get('pageType')) {
		        case Enums.ALL_OPTIONAL_SOME_ENROLLED:
		        case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
		          return Okta.loc('enroll.choices.optional', 'login');
		        default:
		          return Okta.loc('enroll.choices.description', 'login');
		        }
		      },
	
		      save: function () {
		        switch (this.state.get('pageType')) {
		        case Enums.ALL_OPTIONAL_SOME_ENROLLED:
		        case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
		          return Okta.loc('enroll.choices.submit.finish', 'login');
		        case Enums.HAS_REQUIRED_NONE_ENROLLED:
		          return Okta.loc('enroll.choices.submit.configure', 'login');
		        case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
		          return Okta.loc('enroll.choices.submit.next', 'login');
		        default:
		          return '';
		        }
		      },
	
		      initialize: function (options) {
		        this.listenTo(this, 'save', function () {
		          var current;
		          switch (this.state.get('pageType')) {
		          case Enums.HAS_REQUIRED_NONE_ENROLLED:
		          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
		            current = options.appState.get('factors').getFirstUnenrolledRequiredFactor();
		            options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(
		              current.get('provider'),
		              current.get('factorType')
		            ));
		            break;
		          default:
		            return this.model.doTransaction(function(transaction) {
		              return transaction.skip();
		            });
		          }
		        });
		      },
	
		      preRender: function () {
		        var factors = this.options.appState.get('factors');
		        switch(this.state.get('pageType')) {
		        case Enums.HAS_REQUIRED_NONE_ENROLLED:
		        case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
		          this.add(new RequiredFactorList({
		            minimize: true,
		            collection: new Okta.Collection(factors.where({ required: true })),
		            appState: this.options.appState
		          }));
		          break;
		        case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
		        case Enums.ALL_OPTIONAL_SOME_ENROLLED:
		        case Enums.ALL_OPTIONAL_NONE_ENROLLED:
		          var enrolled = factors.where({ enrolled: true }),
		              notEnrolled = factors.where({ enrolled: false }),
		              notEnrolledListTitle;
		          if (enrolled.length > 0) {
		            notEnrolledListTitle = Okta.loc('enroll.choices.list.optional', 'login');
		            this.add(new FactorList({
		              listTitle: Okta.loc('enroll.choices.list.enrolled', 'login'),
		              minimize: true,
		              collection: new Okta.Collection(enrolled),
		              appState: this.options.appState
		            }));
		          }
		          this.add(new FactorList({
		            listTitle: notEnrolledListTitle,
		            collection: new Okta.Collection(notEnrolled),
		            appState: this.options.appState
		          }));
		          break;
		        }
		      }
	
		    },
	
		    initialize: function (options) {
		      var numRequiredEnrolled = 0,
		          numRequiredNotEnrolled = 0,
		          numOptionalEnrolled = 0,
		          numOptionalNotEnrolled = 0,
		          hasRequired,
		          pageType;
	
		      options.appState.get('factors').each(function (factor) {
		        var required = factor.get('required'),
		            enrolled = factor.get('enrolled');
		        if (required && enrolled) {
		          numRequiredEnrolled++;
		        }
		        else if (required && !enrolled) {
		          numRequiredNotEnrolled++;
		        }
		        else if (!required && enrolled) {
		          numOptionalEnrolled++;
		        }
		        else if (!required && !enrolled) {
		          numOptionalNotEnrolled++;
		        }
		      });
	
		      hasRequired = numRequiredEnrolled > 0 || numRequiredNotEnrolled > 0;
	
		      // There are 5 possible states this screen can be in:
	
		      // 1. Has required, but none have been enrolled. Wizard start page.
		      if (hasRequired && numRequiredEnrolled === 0) {
		        pageType = Enums.HAS_REQUIRED_NONE_ENROLLED;
		      }
	
		      // 2. Has required, and have enrolled at least one. The page layout
		      //    to configure the remaining required factors.
		      else if (hasRequired && numRequiredNotEnrolled > 0) {
		        pageType = Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED;
		      }
	
		      // 3. Has required, and finished enrolling all required factors. The
		      //    page layout you see to configure any optional factors or skip.
		      else if (hasRequired && numOptionalNotEnrolled > 0) {
		        pageType = Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED;
		      }
	
		      // 4. Factors are all optional, no factors enrolled.
		      else if (numOptionalEnrolled === 0 && numOptionalNotEnrolled > 0) {
		        pageType = Enums.ALL_OPTIONAL_NONE_ENROLLED;
		      }
	
		      // 5. Factors are all optional, some factors have already been
		      //    enrolled (can either enroll more or skip).
		      else if (numOptionalNotEnrolled > 0) {
		        pageType = Enums.ALL_OPTIONAL_SOME_ENROLLED;
		      }
	
		      // 6. Factors are all optional, all factors have already been
		      //    enrolled, among them there is OktaVerify with Push enrolled as totp
		      //    (API return OktaVerify push factor as unenrolled in this case and as we always merge
		      //    push and totp in UI so we redirect to skip link here).
		      else {
		        this.model.doTransaction(function(transaction) {
		          return transaction.skip();
		        });
		      }
	
		      this.state.set('pageType', pageType);
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 122 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(97)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
		  var _ = Okta._;
	
		  var FactorRow = Okta.View.extend({
		    className: 'enroll-factor-row clearfix',
	
		    template: '\
		      <div class="enroll-factor-icon-container">\
		        <div class="factor-icon enroll-factor-icon {{iconClassName}}">\
		        </div>\
		      </div>\
		      <div class="enroll-factor-description">\
		        <h3 class="enroll-factor-label">{{factorLabel}}</h3>\
		        {{#if factorDescription}}\
		          <p>{{factorDescription}}</p>\
		        {{/if}}\
		        <div class="enroll-factor-button"></div>\
		      </div>\
		    ',
	
		    attributes: function () {
		      return { 'data-se': this.model.get('factorName') };
		    },
	
		    children: function () {
		      if (this.model.get('enrolled')) {
		        return [['<span class="icon success-16-green"></span>', '.enroll-factor-label']];
		      }
		      return [[Okta.createButton({
		        className: 'button',
		        title: Okta.loc('enroll.choices.setup', 'login'),
		        click: function () {
		          this.options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(
		            this.model.get('provider'),
		            this.model.get('factorType')
		          ));
		        }
		      }), '.enroll-factor-button']];
		    },
	
		    minimize: function () {
		      this.$el.addClass('enroll-factor-row-min');
		    },
	
		    maximize: function () {
		      this.$el.removeClass('enroll-factor-row-min');
		    }
		  });
	
		  return Okta.ListView.extend({
	
		    className: 'enroll-factor-list',
	
		    item: FactorRow,
	
		    itemSelector: '.list-content',
	
		    template: '\
		      {{#if listSubtitle}}\
		        <div class="list-subtitle">{{listSubtitle}}</div>\
		      {{/if}}\
		      {{#if listTitle}}\
		        <div class="list-title">{{listTitle}}</div>\
		      {{/if}}\
		      <div class="list-content"></div>\
		    ',
	
		    getTemplateData: function () {
		      var json = Okta.ListView.prototype.getTemplateData.call(this);
		      _.extend(json, this);
		      return json;
		    },
	
		    postRender: function () {
		      if (this.options.minimize) {
		        this.invoke('minimize');
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 123 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(122)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorList) {
	
		  var _ = Okta._;
	
		  return FactorList.extend({
	
		    listTitle: _.partial(Okta.loc, 'enroll.choices.list.setup', 'login'),
	
		    className: function () {
		      return FactorList.prototype.className + ' enroll-required-factor-list';
		    },
	
		    initialize: function () {
		      var numRequired = this.collection.length,
		          numCompleted = this.collection.where({ enrolled: true }).length,
		          currentStep = numCompleted + 1;
		      this.listSubtitle = Okta.loc('enroll.choices.step', 'login', [currentStep, numRequired]);
		    },
	
		    postRender: function () {
		      var currentModel, currentRow;
		      FactorList.prototype.postRender.apply(this, arguments);
		      currentModel = this.options.appState.get('factors').getFirstUnenrolledRequiredFactor();
		      currentRow = this.find(function (view) {
		        return view.model === currentModel;
		      });
		      currentRow.maximize();
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 124 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/*jshint camelcase:false, newcap:false */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(102),
		  __webpack_require__(9),
		  __webpack_require__(76),
		  __webpack_require__(84)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Duo, Q, FormController, Footer) {
	
		  var $ = Okta.$,
		      _ = Okta._;
	
		  return FormController.extend({
	
		    className: 'enroll-duo duo-form',
	
		    Model: {
		      props: {
		        host: 'string',
		        signature: 'string',
		        postAction: 'string',
		        factorId: 'string',
		        stateToken: 'string'
		      },
	
		      getInitOptions: function () {
		        return this.doTransaction(function (transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'web',
		            provider: 'DUO'
		          });
		          return factor.enroll();
		        });
		      },
	
		      activate: function (signedResponse) {
		        // Note: We should be doing this in OktaAuth! Fix when it's updated.
		        var url = this.get('postAction'),
		            factorId = this.get('factorId'),
		            self = this,
		            data = {
		              id: factorId,
		              stateToken: this.get('stateToken'),
		              sig_response: signedResponse
		            };
		        // We don't actually use authClient.post() here (unlike all the other cases in the
		        // sign-in widget) since the endpoint is wired to accept serialized form post instead
		        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
		        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
		        // are the only two places where we actually do this.
		        // NOTE - If we ever decide to change this, we should test this very carefully.
		        return Q($.post(url, data))
		        .then(function () {
		          return self.doTransaction(function (transaction) {
		            return transaction.poll();
		          });
		        })
		        .fail(function (err) {
		          self.trigger('error', self, err.xhr);
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      noButtonBar: true,
		      title: _.partial(Okta.loc, 'enroll.duo.title', 'login'),
	
		      postRender: function () {
		        this.add('<iframe frameborder="0"></iframe>');
		        Duo.init({
		          'host': this.model.get('host'),
		          'sig_request': this.model.get('signature'),
		          'iframe': this.$('iframe').get(0),
		          'post_action': _.bind(this.model.activate, this.model)
		        });
		      }
		    },
	
		    Footer: Footer,
	
		    fetchInitialData: function () {
		      var self = this;
		      return this.model.getInitOptions(this.options.appState)
		      .then(function (trans) {
		        var res = trans.data;
		        if (!res ||
		            !res._embedded ||
		            !res._embedded.factor ||
		            !res._embedded.factor._embedded ||
		            !res._embedded.factor._embedded.activation) {
		          throw new Error('Response does not have duo activation options');
		        }
	
		        var factor = res._embedded.factor;
		        var activation = factor._embedded.activation;
		        self.model.set({
		          host: activation.host,
		          signature: activation.signature,
		          postAction: activation._links.complete.href,
		          factorId: factor.id,
		          stateToken: res.stateToken
		        });
		      });
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate')) {
		        return true;
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 125 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(81),
		  __webpack_require__(84),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FactorUtil, Footer, TextBox) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-question',
		    Model: {
		      props: {
		        question: 'string',
		        answer: ['string', true]
		      },
		      local: {
		        securityQuestions: 'object'
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'question',
		            provider: 'OKTA'
		          });
		          return factor.enroll({
		            profile: {
		              question: this.get('question'),
		              answer: this.get('answer')
		            }
		          });
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      title: _.partial(Okta.loc, 'enroll.securityQuestion.setup', 'login'),
		      inputs: function () {
		        return [
		          {
		            label: false,
		            'label-top': true,
		            name: 'question',
		            type: 'select',
		            wide: true,
		            options: function () {
		              return this.model.get('securityQuestions');
		            },
		            params: {
		              searchThreshold: 25
		            }
		          },
		          {
		            label: false,
		            'label-top': true,
		            placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
		            className: 'o-form-fieldset o-form-label-top auth-passcode',
		            name: 'answer',
		            input: TextBox,
		            type: 'text',
		            params: {
		              innerTooltip: Okta.loc('mfa.challenge.answer.tooltip', 'login')
		            }
		          }
		        ];
		      }
		    },
	
		    Footer: Footer,
	
		    fetchInitialData: function () {
		      var self = this;
		      return this.model.manageTransaction(function(transaction) {
		        var factor = _.findWhere(transaction.factors, {
		          factorType: 'question',
		          provider: 'OKTA'
		        });
		        return factor.questions();
		      })
		      .then(function(questionsRes) {
		        var questions = {};
		        _.each(questionsRes, function (question) {
		          questions[question.question] = FactorUtil.getSecurityQuestionLabel(question);
		        });
		        self.model.set('securityQuestions', questions);
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(116),
		  __webpack_require__(117),
		  __webpack_require__(84),
		  __webpack_require__(118)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, webauthn, Spinner, Footer, HtmlErrorMessageView) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-windows-hello',
		    Model: {
		      local: {
		        __isEnrolled__: 'boolean'
		      },
	
		      save: function () {
		        if (!webauthn.isAvailable()) {
		          return;
		        }
	
		        this.trigger('request');
	
		        if (this.get('__isEnrolled__')) {
		          return this.activate();
		        }
	
		        return this.doTransaction(function (transaction) {
		          return this._enroll(transaction);
		        });
		      },
	
		      _enroll: function (transaction) {
		        var factor = _.findWhere(transaction.factors, {
		          factorType: 'webauthn',
		          provider: 'FIDO'
		        });
	
		        return factor.enroll();
		      },
	
		      activate: function () {
		        this.set('__isEnrolled__', true);
	
		        return this.doTransaction(function (transaction) {
		          var activation = transaction.factor.activation;
		          var user = transaction.user;
		          var model = this;
	
		          var accountInfo = {
		            rpDisplayName: activation.rpDisplayName,
		            userDisplayName: user.profile.displayName,
		            accountName: user.profile.login,
		            userId: user.id
		          };
		          var cryptoParams = [{
		            algorithm: activation.algorithm
		          }];
		          var challenge = activation.nonce;
	
		          return webauthn.makeCredential(accountInfo, cryptoParams, challenge)
		          .then(function (creds) {
		            return transaction.activate({
		              credentialId: creds.credential.id,
		              publicKey: creds.publicKey,
		              attestation: null
		            });
		          })
		          .fail(function (error) {
		            switch (error.message) {
		            case 'AbortError':
		            case 'NotFoundError':
		            case 'NotSupportedError':
		              model.trigger('abort', error.message);
		              return transaction;
		            }
	
		            throw error;
		          });
		        });
		      }
		    },
	
		    Form: {
		      autoSave: true,
		      hasSavingState: false,
		      title: _.partial(Okta.loc, 'enroll.windowsHello.title', 'login'),
		      subtitle: function () {
		        return webauthn.isAvailable() ? Okta.loc('enroll.windowsHello.subtitle', 'login') : '';
		      },
		      save: _.partial(Okta.loc, 'enroll.windowsHello.save', 'login'),
	
		      customSavingState: {
		        stop: 'abort'
		      },
	
		      modelEvents: function () {
		        if (!webauthn.isAvailable()) {
		          return {};
		        }
	
		        return {
		          'request': '_startEnrollment',
		          'error': '_stopEnrollment',
		          'abort': '_stopEnrollment'
		        };
		      },
	
		      noButtonBar: function () {
		        return !webauthn.isAvailable();
		      },
	
		      formChildren: function () {
		        var result = [];
	
		        if (!webauthn.isAvailable()) {
		          result.push(
		            FormType.View(
		              { View: new HtmlErrorMessageView(
		                { message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') }) },
		              { selector: '.o-form-error-container'}
		            )
		          );
		        }
	
		        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));
	
		        return result;
		      },
	
		      _startEnrollment: function () {
		        this.subtitle = Okta.loc('enroll.windowsHello.subtitle.loading', 'login');
	
		        this.model.trigger('spinner:show');
		        this._resetErrorMessage();
	
		        this.render();
		        this.$('.o-form-button-bar').addClass('hide');
		      },
	
		      _stopEnrollment: function (errorMessage) {
		        this.subtitle = Okta.loc('enroll.windowsHello.subtitle', 'login');
	
		        this.model.trigger('spinner:hide');
		        this.$('.o-form-button-bar').removeClass('hide');
	
		        var message;
		        switch (errorMessage){
		        case 'NotSupportedError':
		          message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
		          break;
		        }
	
		        this._resetErrorMessage();
	
		        if (message){
		          var messageView = new HtmlErrorMessageView({
		            message: message
		          });
	
		          this.$('.o-form-error-container').addClass('o-form-has-errors');
		          this.add(messageView, { selector: '.o-form-error-container' });
		          this._errorMessageView = this.last();
		        }
	
		        this.render();
		      },
	
	
		      _resetErrorMessage: function () {
		        this._errorMessageView && this._errorMessageView.remove();
		        this._errorMessageView = undefined;
		        this.clearErrors();
		      }
		    },
	
		    Footer: Footer,
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate')) {
		        this.model.activate();
		        return true;
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 127 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(84),
		  __webpack_require__(128),
		  __webpack_require__(82),
		  __webpack_require__(129),
		  __webpack_require__(77),
		  __webpack_require__(42)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Footer, PhoneTextBox, TextBox, CountryUtil, FormType, Keys) {
	
		  var _ = Okta._;
		  var API_RATE_LIMIT = 30000; //milliseconds
	
		  var factorIdIsDefined = {
		    factorId: function (val) {
		      return !_.isUndefined(val);
		    }
		  };
	
		  function isCallFactor(factorType) {
		    return factorType === 'call';
		  }
	
		  function getClassName(factorType) {
		    return isCallFactor(factorType) ? 'enroll-call' : 'enroll-sms';
		  }
	
		  function sendCode(e) {
		    if (Keys.isEnter(e)) {
		      e.stopPropagation();
		      e.preventDefault();
		      if (e.type === 'keyup' && e.data && e.data.model) {
		        e.data.model.sendCode();
		      }
		    }
		  }
	
		  return FormController.extend({
		    className: function () {
		      return getClassName(this.options.factorType);
		    },
		    Model: {
		      props: {
		        countryCode: ['string', true, 'US'],
		        phoneNumber: ['string', true],
		        phoneExtension: ['string', false],
		        lastEnrolledPhoneNumber: 'string',
		        passCode: ['string', true],
		        factorId: 'string'
		      },
		      local: {
		        hasExistingPhones: 'boolean',
		        trapEnrollment: 'boolean',
		        ableToResend: 'boolean',
		        factorType: 'string'
		      },
		      derived: {
		        countryCallingCode: {
		          deps: ['countryCode'],
		          fn: function (countryCode) {
		            return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
		          }
		        },
		        fullPhoneNumber: {
		          deps: ['countryCallingCode', 'phoneNumber'],
		          fn: function (countryCallingCode, phoneNumber) {
		            return phoneNumber ? (countryCallingCode + phoneNumber) : '';
		          }
		        },
		        enrolled: {
		          deps: ['lastEnrolledPhoneNumber', 'fullPhoneNumber'],
		          fn: function (lastEnrolled, current) {
		            return lastEnrolled === current;
		          }
		        }
		      },
		      limitResending: function () {
		        this.set({ableToResend: false});
		        _.delay(_.bind(this.set, this), API_RATE_LIMIT, {ableToResend: true});
		      },
		      sendCode: function () {
		        var self = this;
		        var phoneNumber = this.get('fullPhoneNumber');
		        var phoneExtension = this.get('phoneExtension');
	
		        self.trigger('errors:clear');
	
		        if(!phoneNumber.length) {
		          self.trigger('invalid', self, {'phoneNumber': 'model.validation.field.blank'});
		          return;
		        }
	
		        return this.doTransaction(function(transaction) {
		          var isMfaEnroll = transaction.status === 'MFA_ENROLL';
		          var profileData = {
		            phoneNumber: phoneNumber,
		            updatePhone: isMfaEnroll ? self.get('hasExistingPhones') : true
		          };
		          if (isCallFactor(self.get('factorType'))) {
		            profileData['phoneExtension'] = phoneExtension;
		          }
	
		          if (isMfaEnroll) {
		            var factor = _.findWhere(transaction.factors, {
		              factorType: self.get('factorType'),
		              provider: 'OKTA'
		            });
		            return factor.enroll({
		              profile: profileData
		            });
	
		          } else {
		            // We must transition to MfaEnroll before updating the phone number
		            self.set('trapEnrollment', true);
		            return transaction.prev()
		            .then(function (trans) {
		              var factor = _.findWhere(trans.factors, {
		                factorType: self.get('factorType'),
		                provider: 'OKTA'
		              });
		              return factor.enroll({
		                profile: profileData
		             });
		            })
		            .then(function (trans) {
		              self.set('trapEnrollment', false);
		              return trans;
		            });
		          }
		        // Rethrow errors so we can change state
		        // AFTER setting the new transaction
		        }, true)
		        .then(function () {
		          self.set('lastEnrolledPhoneNumber', phoneNumber);
		          self.limitResending();
		        })
		        .fail(function () {
		          self.set('ableToResend', true);
		          self.set('trapEnrollment', false);
		        });
		      },
		      resendCode: function () {
		        this.trigger('errors:clear');
		        this.limitResending();
		        return this.doTransaction(function(transaction) {
		          return transaction.resend(this.get('factorType'));
		        });
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          return transaction.activate({
		            passCode: this.get('passCode')
		          });
		        });
		      }
		    },
	
		    Form: function () {
		      /*jshint maxcomplexity:8*/
		      var factorType = this.options.factorType;
		      var isCall = isCallFactor(factorType);
	
		      var formTitle = Okta.loc(isCall ? 'enroll.call.setup' : 'enroll.sms.setup', 'login');
		      var formSubmit = Okta.loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');
		      var formRetry = Okta.loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');
		      var formSubmitted = Okta.loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');
	
		      var numberFieldClassName = isCall ? 'enroll-call-phone' : 'enroll-sms-phone';
		      var buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';
	
		      var formChildren = [
		        FormType.Input({
		          name: 'countryCode',
		          type: 'select',
		          wide: true,
		          options: CountryUtil.getCountries()
		        }),
		        FormType.Input({
		          placeholder: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
		          className: numberFieldClassName,
		          name: 'phoneNumber',
		          input: PhoneTextBox,
		          type: 'text',
		          render: function () {
		            this.$('input[name="phoneNumber"]')
		              .off('keydown keyup', sendCode)
		              .keydown(sendCode)
		              .keyup({model: this.model}, sendCode);
		          }
		        })
		      ];
		      if (isCall) {
		        formChildren.push(FormType.Input({
		          placeholder: Okta.loc('mfa.phoneNumber.ext.placeholder', 'login'),
		          className: 'enroll-call-extension',
		          name: 'phoneExtension',
		          input: TextBox,
		          type: 'text'
		        }));
		      }
		      formChildren.push(
		        FormType.Button({
		          title: formSubmit,
		          attributes: { 'data-se': buttonClassName },
		          className: 'button button-primary js-enroll-phone ' + buttonClassName,
		          click: function () {
		            this.model.sendCode();
		          }
		        }),
		        FormType.Button({
		          title: formRetry,
		          attributes: { 'data-se': buttonClassName },
		          className: 'button js-enroll-phone ' + buttonClassName,
		          click: function () {
		            this.model.resendCode();
		          },
		          initialize: function () {
		            this.$el.css({display: 'none'});
		            this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
		              if (ableToResend) {
		                this.options.title = formRetry;
		                this.enable();
		              } else {
		                this.options.title = formSubmitted;
		                this.disable();
		              }
		              this.render();
		            });
		          }
		        }),
		        FormType.Divider({
		          showWhen: factorIdIsDefined
		        }),
		        FormType.Input({
		          placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		          name: 'passCode',
		          input: TextBox,
		          type: 'text',
		          params: {
		            innerTooltip: Okta.loc('mfa.challenge.enterCode.tooltip', 'login')
		          },
		          showWhen: factorIdIsDefined
		        }),
		        FormType.Toolbar({
		          noCancelButton: true,
		          save: Okta.loc('mfa.challenge.verify', 'login'),
		          showWhen: factorIdIsDefined
		        })
		      );
	
		      return {
		        title: formTitle,
		        noButtonBar: true,
		        autoSave: true,
		        className: getClassName(factorType),
		        initialize: function () {
		          this.listenTo(this.model, 'error errors:clear', function () {
		            this.clearErrors();
		          });
		          this.listenTo(this.model, 'change:enrolled', function () {
		            this.$('.js-enroll-phone').toggle();
		          });
		        },
		        formChildren: formChildren
		      };
		    },
	
		    Footer: Footer,
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate')) {
		        this.model.set('factorId', this.options.appState.get('activatedFactorId'));
		        return true;
		      }
		      if (this.options.appState.get('isMfaEnroll') && this.model.get('trapEnrollment')) {
		        return true;
		      }
		    },
	
		    initialize: function () {
		      if (isCallFactor(this.options.factorType)) {
		        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhonesForCall'));
		      } else {
		        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhones'));
		      }
		      this.model.set('factorType', this.options.factorType);
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 128 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(40)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		  var _ = Okta._;
	
		  return TextBox.extend({
	
		    template: Okta.Handlebars.compile('\
		      <span class="okta-form-label-inline o-form-label-inline">{{countryCallingCode}}</span>\
		      <span class="okta-form-input-field input-fix o-form-control">\
		        <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" \
		          id="{{inputId}}" value="{{value}}" autocomplete="off"/>\
		      </span>\
		    '),
	
		    initialize: function () {
		      this.listenTo(this.model, 'change:countryCallingCode', function () {
		        this.$('.o-form-label-inline').text(this.model.get('countryCallingCode'));
		      });
		    },
	
		    preRender: function () {
		      this.options.countryCallingCode = this.model.get('countryCallingCode');
		    },
	
		    postRender: function () {
		      // This is a hack - once inputGroups are done, get rid of it!!
		      this.$el.removeClass('input-fix o-form-control');
		      _.defer(_.bind(function () {
		        this.$el.parent().addClass('o-form-input-group');
		      }, this));
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 129 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(8),
		  __webpack_require__(130)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, bundles, countryCallingCodes) {
	
		  var fn = {};
	
		  // () => [{ countryCode: countryName }], sorted by countryName
		  fn.getCountries = function () {
		    // HM, BV, and TF do not have phone prefixes, so don't give the
		    // user the option to choose these countries. FYI it appears that these
		    // countries do not have calling codes because they are ~~uninhabited~~
		    var countries = _.omit(bundles.country, 'HM', 'BV', 'TF');
	
		    // Sort it; figure out if there is a better way to do this (best would
		    // be to sort it in the properties file!!)
		    var collection = _.map(countries, function (name, code) {
		      return { name: name, code: code };
		    });
		    collection = _.sortBy(collection, 'name');
		    var sorted = {};
		    _.each(collection, function (country) {
		      sorted[country.code] = country.name;
		    });
	
		    return sorted;
		  };
	
		  fn.getCallingCodeForCountry = function (countryCode) {
		    return countryCallingCodes[countryCode];
		  };
	
		  return fn;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 130 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(module.exports = {"US":"1","AG":"1","AI":"1","AS":"1","BB":"1","BM":"1","BS":"1","CA":"1","DM":"1","DO":"1","GD":"1","GU":"1","JM":"1","KN":"1","KY":"1","LC":"1","MP":"1","MS":"1","PR":"1","SX":"1","TC":"1","TT":"1","VC":"1","VG":"1","VI":"1","RU":"7","KZ":"7","EG":"20","ZA":"27","GR":"30","NL":"31","BE":"32","FR":"33","ES":"34","HU":"36","IT":"39","RO":"40","CH":"41","AT":"43","GB":"44","GG":"44","IM":"44","JE":"44","DK":"45","SE":"46","NO":"47","SJ":"47","PL":"48","DE":"49","PE":"51","MX":"52","CU":"53","AR":"54","BR":"55","CL":"56","CO":"57","VE":"58","MY":"60","AU":"61","CC":"61","CX":"61","ID":"62","PH":"63","NZ":"64","SG":"65","TH":"66","JP":"81","KR":"82","VN":"84","CN":"86","TR":"90","IN":"91","PK":"92","AF":"93","LK":"94","MM":"95","IR":"98","SS":"211","MA":"212","EH":"212","DZ":"213","TN":"216","LY":"218","GM":"220","SN":"221","MR":"222","ML":"223","GN":"224","CI":"225","BF":"226","NE":"227","TG":"228","BJ":"229","MU":"230","LR":"231","SL":"232","GH":"233","NG":"234","TD":"235","CF":"236","CM":"237","CV":"238","ST":"239","GQ":"240","GA":"241","CG":"242","CD":"243","AO":"244","GW":"245","IO":"246","AC":"247","SC":"248","SD":"249","RW":"250","ET":"251","SO":"252","DJ":"253","KE":"254","TZ":"255","UG":"256","BI":"257","MZ":"258","ZM":"260","MG":"261","RE":"262","YT":"262","ZW":"263","NA":"264","MW":"265","LS":"266","BW":"267","SZ":"268","KM":"269","SH":"290","TA":"290","ER":"291","AW":"297","FO":"298","GL":"299","GI":"350","PT":"351","LU":"352","IE":"353","IS":"354","AL":"355","MT":"356","CY":"357","FI":"358","AX":"358","BG":"359","LT":"370","LV":"371","EE":"372","MD":"373","AM":"374","BY":"375","AD":"376","MC":"377","SM":"378","VA":"379","UA":"380","RS":"381","ME":"382","HR":"385","SI":"386","BA":"387","MK":"389","CZ":"420","SK":"421","LI":"423","FK":"500","BZ":"501","GT":"502","SV":"503","HN":"504","NI":"505","CR":"506","PA":"507","PM":"508","HT":"509","GP":"590","BL":"590","MF":"590","BO":"591","GY":"592","EC":"593","GF":"594","PY":"595","MQ":"596","SR":"597","UY":"598","CW":"599","BQ":"599","TL":"670","NF":"672","BN":"673","NR":"674","PG":"675","TO":"676","SB":"677","VU":"678","FJ":"679","PW":"680","WF":"681","CK":"682","NU":"683","WS":"685","KI":"686","NC":"687","TV":"688","PF":"689","TK":"690","FM":"691","MH":"692","001":"979","KP":"850","HK":"852","MO":"853","KH":"855","LA":"856","BD":"880","TW":"886","MV":"960","LB":"961","JO":"962","SY":"963","IQ":"964","KW":"965","SA":"966","YE":"967","OM":"968","PS":"970","AE":"971","IL":"972","BH":"973","QA":"974","BT":"975","MN":"976","NP":"977","TJ":"992","TM":"993","AZ":"994","GE":"995","KG":"996","UZ":"998","GS":500,"PN":64,"AQ":672,"UM":1,"AN":599})
	
	/***/ },
	/* 131 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(77),
		  __webpack_require__(76),
		  __webpack_require__(84),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
		  var _ = Okta._;
	
		  function isRSA(provider) {
		    return provider === 'RSA';
		  }
	
		  function getClassName(provider) {
		    return isRSA(provider) ? 'enroll-rsa' : 'enroll-onprem';
		  }
	
		  return FormController.extend({
		    className: function () {
		      return getClassName(this.options.provider);
		    },
		    Model: function () {
		      var provider = this.options.provider;
		      return {
		        props: {
		          credentialId: ['string', true],
		          passCode: ['string', true],
		          factorId: 'string'
		        },
		        save: function () {
		          return this.doTransaction(function(transaction) {
		            var factor = _.findWhere(transaction.factors, {
		              factorType: 'token',
		              provider: provider
		            });
		            return factor.enroll({
		              passCode: this.get('passCode'),
		              profile: {credentialId: this.get('credentialId')}
		            });
		          });
		        }
		      };
		    },
	
		    Form: function () {
		      var provider = this.options.provider;
		      var factors = this.options.appState.get('factors');
		      var factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
		      var vendorName = factor.get('vendorName');
		      var title = isRSA(provider) ? Okta.loc('factor.totpHard.rsaSecurId', 'login') : vendorName;
	
		      return {
		        title: title,
		        noButtonBar: true,
		        autoSave: true,
		        className: getClassName(provider),
		        formChildren: [
		          FormType.Input({
		            name: 'credentialId',
		            input: TextBox,
		            type: 'text',
		            placeholder: Okta.loc('enroll.onprem.username.placeholder', 'login', [vendorName]),
		            params: {
		              innerTooltip: Okta.loc('enroll.onprem.username.tooltip', 'login', [vendorName])
		            }
		          }),
		          FormType.Input({
		            name: 'passCode',
		            input: TextBox,
		            type: 'password',
		            placeholder: Okta.loc('enroll.onprem.passcode.placeholder', 'login', [vendorName]),
		            params: {
		              innerTooltip: Okta.loc('enroll.onprem.passcode.tooltip', 'login', [vendorName])
		            }
		          }),
		          FormType.Toolbar({
		            noCancelButton: true,
		            save: Okta.loc('mfa.challenge.verify', 'login')
		          })
		        ]
		      };
		    },
	
		    Footer: Footer
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 132 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(77),
		  __webpack_require__(76),
		  __webpack_require__(84),
		  __webpack_require__(82)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-symantec',
		    Model: {
		      props: {
		        credentialId: ['string', true],
		        passCode: ['string', true],
		        nextPassCode: ['string', true],
		        factorId: 'string'
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
	
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'token',
		            provider: 'SYMANTEC'
		          });
		          return factor.enroll({
		            passCode: this.get('passCode'),
		            nextPassCode: this.get('nextPassCode'),
		            profile: {credentialId: this.get('credentialId')}
		          });
		        });
		      }
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'factor.totpHard.symantecVip', 'login'),
		      subtitle: _.partial(Okta.loc, 'enroll.symantecVip.subtitle', 'login'),
		      noButtonBar: true,
		      autoSave: true,
		      className: 'enroll-symantec',
		      formChildren: function () {
		        return [
		          FormType.Input({
		            name: 'credentialId',
		            input: TextBox,
		            type: 'text',
		            placeholder: Okta.loc('enroll.symantecVip.credentialId.placeholder', 'login'),
		            params: {
		              innerTooltip: Okta.loc('enroll.symantecVip.credentialId.tooltip', 'login')
		            }
		          }),
		          FormType.Input({
		            name: 'passCode',
		            input: TextBox,
		            type: 'text',
		            placeholder: Okta.loc('enroll.symantecVip.passcode1.placeholder', 'login'),
		            params: {
		              innerTooltip: Okta.loc('enroll.symantecVip.passcode1.tooltip', 'login')
		            }
		          }),
		          FormType.Input({
		            name: 'nextPassCode',
		            input: TextBox,
		            type: 'text',
		            placeholder: Okta.loc('enroll.symantecVip.passcode2.placeholder', 'login'),
		            params: {
		              innerTooltip: Okta.loc('enroll.symantecVip.passcode2.tooltip', 'login')
		            }
		          }),
		          FormType.Toolbar({
		            noCancelButton: true,
		            save: Okta.loc('mfa.challenge.verify', 'login')
		          })
		        ];
		      }
		    },
	
		    Footer: Footer
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(77),
		  __webpack_require__(76),
		  __webpack_require__(84),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-yubikey',
		    Model: {
		      props: {
		        passCode: ['string', true],
		        factorId: 'string'
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'token:hardware',
		            provider: 'YUBICO'
		          });
		          return factor.enroll({
		            passCode: this.get('passCode')
		          });
		        });
		      }
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'enroll.yubikey.title', 'login'),
		      subtitle: _.partial(Okta.loc, 'enroll.yubikey.subtitle', 'login'),
		      noCancelButton: true,
		      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		      autoSave: true,
		      className: 'enroll-yubikey',
		      formChildren: [
		        FormType.View({
		          View: '<div class="yubikey-demo" data-type="yubikey-example"></div>'
		        }),
		        FormType.Input({
		          name: 'passCode',
		          input: TextBox,
		          type: 'password'
		        })
		      ]
		    },
	
		    Footer: Footer
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 134 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97),
		  __webpack_require__(135),
		  __webpack_require__(136),
		  __webpack_require__(84)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType,
		  RouterUtil, StoreLinks, BarcodeView, Footer) {
	
		  var _ = Okta._;
	
		  var showWhenDeviceTypeSelected = {
		    '__deviceType__': function (val) {
		      return val !== undefined;
		    }
		  };
	
		  var AppDownloadInstructionsView = Okta.View.extend({
		    attributes: { 'data-se': 'app-download-instructions' },
		    className: 'app-download-instructions',
		    template: '\
		      <p class="instructions-title">{{title}}</p>\
		      <span class="app-logo {{appIcon}}"></span>\
		      <p class="instructions">{{{appStoreLinkText}}}</p>\
		    ',
		    initialize: function () {
		      this.listenTo(this.model, 'change:__deviceType__', this.render);
		    },
		    getTemplateData: function () {
		      var appStoreLink, appIcon, appStoreName;
		      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		      appStoreName = StoreLinks.STORE[this.model.get('__deviceType__')];
		      if (this.model.get('__provider__') === 'GOOGLE') {
		        appStoreLink = StoreLinks.GOOGLE[this.model.get('__deviceType__')];
		        appIcon = 'google-auth-38';
		      } else {
		        appStoreLink = StoreLinks.OKTA[this.model.get('__deviceType__')];
		        appIcon = 'okta-verify-38';
		      }
		      return {
		        title: Okta.loc('enroll.totp.installApp', 'login', [factorName]),
		        appStoreLinkText: Okta.loc('enroll.totp.downloadApp',
		          'login', [appStoreLink, factorName, appStoreName]),
		        appIcon: appIcon
		      };
		    }
		  });
	
		  var EnrollTotpController = FormController.extend({
		    className: 'enroll-totp',
		    Model: function () {
		      return {
		        local: {
		          '__deviceType__': 'string',
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        },
		        save: function () {
		          return this.doTransaction(function(transaction) {
		            var factor = _.findWhere(transaction.factors, {
		              factorType: this.get('__factorType__'),
		              provider: this.get('__provider__')
		            });
		            return factor.enroll();
		          });
		        }
		      };
		    },
	
		    Form: {
		      title: function () {
		        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		        return Okta.loc('enroll.totp.title', 'login', [factorName]);
		      },
		      subtitle: _.partial(Okta.loc, 'enroll.totp.selectDevice', 'login'),
		      autoSave: true,
		      noButtonBar: true,
		      attributes: { 'data-se': 'step-device-type' },
	
		      formChildren: function () {
		        var inputOptions = {
		          APPLE: '',
		          ANDROID: ''
		        };
		        if (this.settings.get('features.windowsVerify') && this.model.get('__provider__') === 'OKTA') {
		          inputOptions.WINDOWS = '';
		        } else if (this.model.get('__provider__') === 'GOOGLE') {
		          inputOptions.BLACKBERRY = '';
		        }
	
		        var children = [
		          FormType.Input({
		            name: '__deviceType__',
		            type: 'radio',
		            options: inputOptions,
		            className: 'device-type-input'
		          }),
	
		          FormType.Divider({showWhen: showWhenDeviceTypeSelected}),
	
		          FormType.View({
		            View: AppDownloadInstructionsView,
		            showWhen: showWhenDeviceTypeSelected
		          }),
	
		          FormType.Toolbar({
		            noCancelButton: true,
		            save: Okta.loc('oform.next', 'login'),
		            showWhen: showWhenDeviceTypeSelected
		          })
		        ];
	
		        return children;
		      }
		    },
	
		    Footer: Footer
	
		  });
	
		  return EnrollTotpController;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 135 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(module.exports = {
			OKTA: {
				APPLE: 'https://itunes.apple.com/us/app/okta-verify/id490179405',
				ANDROID: 'https://play.google.com/store/apps/details?id=com.okta.android.auth',
				WINDOWS: 'http://www.windowsphone.com/en-us/store/app/okta-verify/9df0e2c4-7301-411f-80e5-62fcf6679666'
			},
			GOOGLE: {
				APPLE: 'https://itunes.apple.com/us/app/google-authenticator/id388497605',
				ANDROID: 'https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2',
				BLACKBERRY: 'https://support.google.com/accounts/answer/1066447'
			},
			STORE: {
				APPLE: 'App Store',
				ANDROID: 'Google Play Store',
				WINDOWS: 'Windows Store',
				BLACKBERRY: 'Blackberry World Store'
			}
		});
	
	
	/***/ },
	/* 136 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(97)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, RouterUtil) {
	
		  var _ = Okta._;
	
		  return Okta.View.extend({
		    className: 'scan-instructions clearfix',
		    template: '\
		      <div class="scan-instructions-details-wrapper">\
		          <div class="scan-instructions-details">\
		              <p>{{instructions}}</p>\
		          </div>\
		      </div>\
		      <div class="scan-instructions-qrcode-wrapper">\
		          <div class="qrcode-wrap">\
		              <img data-se="qrcode" class="qrcode-image" src="{{qrcode}}">\
		              <div data-se="qrcode-success" class="qrcode-success"></div>\
		              <div data-se="qrcode-error" class="qrcode-error"></div>\
		          </div>\
		          <a href="#" data-type="manual-setup" data-se="manual-setup" class="link manual-setup">\
		            {{i18n code="enroll.totp.cannotScan" bundle="login"}}\
		          </a>\
		          <a href="#" data-type="refresh-qrcode" data-se="refresh-qrcode" class="link refresh-qrcode">\
		            {{i18n code="enroll.totp.refreshBarcode" bundle="login"}}\
		          </a>\
		      </div>\
		    ',
	
		    events: {
		      'click [data-type="manual-setup"]': function (e) {
		        e.preventDefault();
		        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'),
		          this.model.get('__factorType__'), 'manual');
		        this.options.appState.trigger('navigate', url);
		      },
		      'click [data-type="refresh-qrcode"]': function (e) {
		        e.preventDefault();
		        this.model.trigger('errors:clear');
	
		        var self = this;
		        this.model.doTransaction(function (transaction) {
		          if (this.appState.get('isWaitingForActivation')) {
		            return transaction.poll();
		          } else {
		            return transaction.activate();
		          }
		        })
		        .then(function (trans) {
		          var res = trans.data;
		          if (res.status === 'MFA_ENROLL_ACTIVATE' && res.factorResult === 'WAITING') {
		            // defer the render here to have a lastResponse set in AppState
		            // so that we get new QRcode rendered
		            _.defer(_.bind(self.render, self));
		          }
		        });
		      }
		    },
	
		    initialize: function () {
		      this.listenTo(this.options.appState, 'change:lastAuthResponse', function () {
		        if (this.options.appState.get('isMfaEnrollActivate')) {
		          this.$el.toggleClass('qrcode-expired', !this.options.appState.get('isWaitingForActivation'));
		        } else if (this.options.appState.get('isSuccessResponse')) {
		          this.$el.addClass('qrcode-success');
		        }
		      });
		      this.listenTo(this.model, 'error', function () {
		        if (this.options.appState.get('isMfaEnrollActivate')) {
		          this.$el.toggleClass('qrcode-expired', true);
		        }
		      });
		    },
	
		    getTemplateData: function () {
		      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		      var instructions;
		      if (this.model.get('__provider__') === 'GOOGLE') {
		        instructions = Okta.loc('enroll.totp.setupGoogleAuthApp', 'login', [factorName]);
		      } else {
		        instructions = Okta.loc('enroll.totp.setupApp', 'login', [factorName]);
		      }
		      return {
		        instructions: instructions,
		        qrcode: this.options.appState.get('qrcode')
		      };
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 137 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* global u2f */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(77),
		  __webpack_require__(76),
		  __webpack_require__(84),
		  __webpack_require__(9),
		  __webpack_require__(118),
		  __webpack_require__(83),
		  __webpack_require__(120)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, Q, HtmlErrorMessageView, BrowserFeatures) {
	
		  var _ = Okta._;
	
		  function getErrorMessageKeyByCode(errorCode) {
		    switch (errorCode) {
		    default:
		    case 1:
		      return 'u2f.error.other';
		    case 2:
		    case 3:
		      return 'u2f.error.badRequest';
		    case 4:
		      return 'u2f.error.unsupported';
		    case 5:
		      return 'u2f.error.timeout';
		    }
		  }
	
		  return FormController.extend({
		    className: 'enroll-u2f',
		    Model: {
		      local: {
		        '__enrolled__': 'boolean'
		      },
	
		      save: function () {
		        this.trigger('request');
	
		        if (this.get('__enrolled__')) {
		          return this.activate();
		        }
	
		        return this.doTransaction(function (transaction) {
		          var factor = _.findWhere(transaction.factors, {
		            factorType: 'u2f',
		            provider: 'FIDO'
		          });
		          return factor.enroll();
		        });
		      },
	
		      activate: function () {
		        this.set('__enrolled__', true);
		        this.trigger('errors:clear');
	
		        return this.doTransaction(function (transaction) {
		          var activation = transaction.factor.activation;
		          var appId = activation.appId;
		          var registerRequests = [{
		            version: activation.version,
		            challenge: activation.nonce
		          }];
		          var self = this;
		          var deferred = Q.defer();
		          u2f.register(appId, registerRequests, [], function (data) {
		            self.trigger('errors:clear');
		            if (data.errorCode && data.errorCode !== 0) {
		              deferred.reject({
		                xhr: {responseJSON: {errorSummary: Okta.loc(getErrorMessageKeyByCode(data.errorCode), 'login')}}
		              });
		            } else {
		              deferred.resolve(transaction.activate({
		                registrationData: data.registrationData,
		                version: data.version,
		                challenge: data.challenge,
		                clientData: data.clientData
		              }));
		            }
		          });
		          return deferred.promise;
		        });
		      }
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'enroll.u2f.title', 'login'),
		      save: _.partial(Okta.loc, 'enroll.u2f.save', 'login'),
		      noCancelButton: true,
		      hasSavingState: false,
		      autoSave: true,
		      className: 'enroll-u2f-form',
		      noButtonBar: function () {
		        return !window.hasOwnProperty('u2f');
		      },
		      modelEvents: {
		        'request': '_startEnrollment',
		        'error': '_stopEnrollment'
		      },
		      formChildren: function () {
		        var result = [];
	
		        if (!window.hasOwnProperty('u2f')) {
		          var errorMessageKey = 'u2f.error.notSupportedBrowser';
	
		          if (BrowserFeatures.isFirefox()) {
		            errorMessageKey = 'u2f.error.noFirefoxExtension';
		          }
	
		          result.push(FormType.View(
		            {View: new HtmlErrorMessageView({message: Okta.loc(errorMessageKey, 'login')})},
		            {selector: '.o-form-error-container'}
		          ));
		        }
		        else {
		          //There is html in enroll.u2f.general2 in our properties file, reason why is unescaped
		          result.push(FormType.View({
		            View: '<div class="u2f-instructions"><ol>\
		          <li>{{i18n code="enroll.u2f.general1" bundle="login"}}</li>\
		          <li>{{{i18n code="enroll.u2f.general2" bundle="login"}}}</li>\
		          <li>{{i18n code="enroll.u2f.general3" bundle="login"}}</li>\
		          </ol></div>'
		          }));
	
		          result.push(FormType.View({
		            View: '\
		          <div class="u2f-enroll-text hide">\
		            <p>{{i18n code="enroll.u2f.instructions" bundle="login"}}</p>\
		            <p>{{i18n code="enroll.u2f.instructionsBluetooth" bundle="login"}}</p>\
		            <div data-se="u2f-devices" class="u2f-devices-images">\
		              <div class="u2f-usb"></div>\
		              <div class="u2f-bluetooth"></div>\
		            </div>\
		            <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
		          </div>'
		          }));
		        }
	
		        return result;
		      },
	
		      _startEnrollment: function () {
		        this.$('.u2f-instructions').addClass('hide');
		        this.$('.u2f-enroll-text').removeClass('hide');
		        this.$('.o-form-button-bar').hide();
		      },
	
		      _stopEnrollment: function () {
		        this.$('.u2f-instructions').removeClass('hide');
		        this.$('.u2f-enroll-text').addClass('hide');
		        this.$('.o-form-button-bar').show();
		      }
		    },
	
		    Footer: Footer,
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate')) {
		        this.model.activate();
		        return true;
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 138 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97),
		  __webpack_require__(136),
		  __webpack_require__(84)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'barcode-totp',
		    Model: function () {
		      return {
		        local: {
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        }
		      };
		    },
	
		    Form: {
		      title: function () {
		        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		        return Okta.loc('enroll.totp.title', 'login', [factorName]);
		      },
		      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
		      save: _.partial(Okta.loc, 'oform.next', 'login'),
		      noCancelButton: true,
		      attributes: { 'data-se': 'step-scan' },
		      className: 'barcode-scan',
	
		      formChildren: [
		        FormType.View({View: BarcodeView})
		      ]
		    },
	
		    Footer: Footer,
	
		    initialize: function () {
		      this.listenTo(this.form, 'save', function () {
		        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'),
		          this.model.get('__factorType__'), 'activate');
		        this.options.appState.trigger('navigate', url);
		      });
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 139 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97),
		  __webpack_require__(136),
		  __webpack_require__(84)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {
	
		  var _ = Okta._;
	
		  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
		  // in network connection lost errors in Safari and IE.
		  var PUSH_INTERVAL = 6000;
	
		  return FormController.extend({
		    className: 'barcode-push',
		    Model: function () {
		      return {
		        local: {
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        }
		      };
		    },
	
		    Form: {
		      title: function () {
		        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		        return Okta.loc('enroll.totp.title', 'login', [factorName]);
		      },
		      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
		      noButtonBar: true,
		      attributes: { 'data-se': 'step-scan' },
		      className: 'barcode-scan',
		      initialize: function () {
		        this.listenTo(this.model, 'error errors:clear', function () {
		          this.clearErrors();
		        });
		      },
	
		      formChildren: [
		        FormType.View({View: BarcodeView})
		      ]
		    },
	
		    Footer: Footer,
	
		    initialize: function () {
		      this.pollForEnrollment();
		    },
	
		    pollForEnrollment: function () {
		      return this.model.doTransaction(function(transaction) {
		        return transaction.poll(PUSH_INTERVAL);
		      });
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate')) {
		        return true;
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 140 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(141),
		  __webpack_require__(142),
		  __webpack_require__(143),
		  __webpack_require__(98),
		  __webpack_require__(78)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PrimaryAuthForm, SocialAuth, PrimaryAuthModel, Util, BaseLoginController) {
	
		  var compile = Okta.Handlebars.compile;
		  var _ = Okta._;
		  var $ = Okta.$;
	
		  var Footer = Okta.View.extend({
		    template: '\
		      <a href="#" data-se="needhelp" class="link help js-help">\
		      {{i18n code="needhelp" bundle="login"}}\
		      </a>\
		      <ul class="help-links js-help-links">\
		        <li>\
		        <a href="#" data-se="forgot-password" class="link js-forgot-password">\
		        {{i18n code="forgotpassword" bundle="login"}}\
		        </a>\
		        </li>\
		        {{#if features.selfServiceUnlock}}\
		          <li>\
		          <a href="#" data-se="unlock" class="link js-unlock">\
		          {{i18n code="unlockaccount" bundle="login"}}\
		          </a>\
		          </li>\
		        {{/if}}\
		        {{#each helpLinks.custom}}\
		          <li>\
		          <a href="{{href}}" class="link js-custom">{{text}}</a></li>\
		        {{/each}}\
		        <li>\
		        <a href="{{helpLinkUrl}}" data-se="help-link" class="link js-help-link" target="_blank">\
		        {{i18n code="help" bundle="login"}}\
		        </a>\
		        </li>\
		      </ul>\
		    ',
		    className: 'auth-footer',
	
		    initialize: function () {
		      this.listenTo(this.state, 'change:enabled', function(model, enable) {
		        this.$(':link').toggleClass('o-form-disabled', !enable);
		      });
		    },
	
		    getTemplateData: function () {
		      var helpLinkUrl;
		      var customHelpPage = this.settings.get('helpLinks.help');
		      if (customHelpPage) {
		        helpLinkUrl = customHelpPage;
		      } else {
		        helpLinkUrl = compile('{{baseUrl}}/help/login')({baseUrl: this.settings.get('baseUrl')});
		      }
		      return _.extend(this.settings.toJSON({verbose: true}), {helpLinkUrl: helpLinkUrl});
		    },
		    postRender: function () {
		      this.$('.js-help-links').hide();
		    },
		    toggleLinks: function (e) {
		      e.preventDefault();
		      this.$('.js-help-links').slideToggle(200);
		    },
		    events: {
		      'click .js-help': function (e) {
		        e.preventDefault();
		        if(!this.state.get('enabled')) {
		          return;
		        }
	
		        this.toggleLinks(e);
		      },
		      'click .js-forgot-password' : function (e) {
		        e.preventDefault();
		        if(!this.state.get('enabled')) {
		          return;
		        }
	
		        var customResetPasswordPage = this.settings.get('helpLinks.forgotPassword');
		        if (customResetPasswordPage) {
		          Util.redirect(customResetPasswordPage);
		        }
		        else {
		          this.options.appState.trigger('navigate', 'signin/forgot-password');
		        }
		      },
		      'click .js-unlock' : function (e) {
		        e.preventDefault();
		        if(!this.state.get('enabled')) {
		          return;
		        }
	
		        var customUnlockPage = this.settings.get('helpLinks.unlock');
		        if (customUnlockPage) {
		          Util.redirect(customUnlockPage);
		        }
		        else {
		          this.options.appState.trigger('navigate', 'signin/unlock');
		        }
		      }
		    }
		  });
	
		  return BaseLoginController.extend({
		    className: 'primary-auth',
	
		    state: { enabled: true },
	
		    View: PrimaryAuthForm,
	
		    constructor: function (options) {
		      var username;
		      options.appState.unset('username');
	
		      this.model = new PrimaryAuthModel({
		        multiOptionalFactorEnroll: options.settings.get('features.multiOptionalFactorEnroll'),
		        settings: options.settings,
		        appState: options.appState
		      }, { parse: true });
	
		      BaseLoginController.apply(this, arguments);
	
		      this.addListeners();
	
		      // Add SocialAuth view only when the idps are configured. If configured, 'socialAuthPositionTop'
		      // will determine the order in which the social auth and primary auth are shown on the screen.
		      if (options.settings.get('socialAuthConfigured')) {
		        this.add(SocialAuth, {prepend: options.settings.get('socialAuthPositionTop')});
		      }
		      this.add(new Footer(this.toJSON({appState: options.appState})));
	
		      username = this.model.get('username');
		      if (username) {
		        this.options.appState.set('username', username);
		      }
		    },
	
		    events: {
		      'focusout input[name=username]': function () {
		        this.options.appState.set('username', this.model.get('username'));
		      },
		      'focusin input': function (e) {
		        $(e.target.parentElement).addClass('focused-input');
		      },
		      'focusout input': function (e) {
		        $(e.target.parentElement).removeClass('focused-input');
		      }
		    },
	
		    // This model and the AppState both have a username property.
		    // The controller updates the AppState's username when the user is
		    // done editing (on blur) or deletes the username (see below).
		    initialize: function () {
		      this.listenTo(this.model, 'change:username', function (model, value) {
		        if (!value) {
		          // reset AppState to an undefined user.
		          this.options.appState.set('username', '');
		        }
		      });
		      this.listenTo(this.model, 'save', function () {
		        this.state.set('enabled', false);
		      });
		      this.listenTo(this.model, 'error', function () {
		        this.state.set('enabled', true);
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 141 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
		  var _ = Okta._;
	
		  return Okta.Form.extend({
		    className: 'primary-auth-form',
		    noCancelButton: true,
		    save: _.partial(Okta.loc, 'primaryauth.submit', 'login'),
		    layout: 'o-form-theme',
	
		    // If socialAuth is configured, the title moves from the form to
		    // the top of the container (and is rendered in socialAuth).
		    title: function () {
		      var formTitle = Okta.loc('primaryauth.title', 'login');
		      if (this.settings.get('socialAuthConfigured') &&
		          this.settings.get('socialAuthPositionTop')) {
		        formTitle = '';
		      }
		      return formTitle;
		    },
	
		    initialize: function () {
		      this.listenTo(this, 'save', function () {
		        var processCreds = this.settings.get('processCreds');
		        if (_.isFunction(processCreds)) {
		          processCreds({
		            username: this.model.get('username'),
		            password: this.model.get('password')
		          });
		        }
		        this.model.save();
		      });
		      this.listenTo(this.state, 'change:enabled', function(model, enable) {
		        if(enable) {
		          this.enable();
		        }
		        else {
		          this.disable();
		        }
		      });
		    },
	
		    inputs: function () {
		      var inputs = [
		        {
		          label: false,
		          'label-top': true,
		          placeholder: Okta.loc('primaryauth.username.placeholder', 'login'),
		          name: 'username',
		          input: TextBox,
		          type: 'text',
		          params: {
		            innerTooltip: {
		              title: Okta.loc('primaryauth.username.placeholder', 'login'),
		              text: Okta.loc('primaryauth.username.tooltip', 'login')
		            },
		            icon: 'person-16-gray'
		          }
		        },
		        {
		          label: false,
		          'label-top': true,
		          placeholder: Okta.loc('primaryauth.password.placeholder', 'login'),
		          name: 'password',
		          input: TextBox,
		          type: 'password',
		          params: {
		            innerTooltip: {
		              title: Okta.loc('primaryauth.password.placeholder', 'login'),
		              text: Okta.loc('primaryauth.password.tooltip', 'login')
		            },
		            icon: 'remote-lock-16'
		          }
		        }
		      ];
		      if (this.settings.get('features.rememberMe')) {
		        inputs.push({
		          label: false,
		          placeholder: Okta.loc('remember', 'login'),
		          name: 'remember',
		          type: 'checkbox',
		          'label-top': true,
		          className: 'margin-btm-0',
		          initialize: function () {
		            this.listenTo(this.model, 'change:remember', function (model, val) {
		              // OKTA-98946: We normally re-render on changes to model values,
		              // but in this case we will manually update the checkbox due to
		              // iOS Safari and how it handles autofill - it will autofill the
		              // form anytime the dom elements are re-rendered, which prevents
		              // the user from editing their username.
		              this.$(':checkbox').prop('checked', val).trigger('updateState');
		            });
		          }
		        });
		      }
	
		      return inputs;
		    },
	
		    focus: function () {
		      if (!this.model.get('username')) {
		        this.getInputs().first().focus();
		      } else {
		        this.getInputs().toArray()[1].focus();
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 142 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(99)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, OAuth2Util) {
	
		  var _ = Okta._;
	
		  var dividerTpl = Okta.tpl(
		    '<div class="auth-divider">\
		      <span class="auth-divider-text">{{text}}</span>\
		    </div>');
		  var formTitleTpl = Okta.tpl(
		    '<h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>'
		  );
	
		  return Okta.View.extend({
	
		    className: 'social-auth',
	
		    children: function () {
		      var children = [],
		          idProviders = this.settings.get('configuredSocialIdps'),
		          divider = dividerTpl({text: Okta.loc('socialauth.divider.text', 'login')});
	
		      // Social Auth IDPs.
		      _.each(idProviders, function (provider) {
		        children.push(this._createButton(provider));
		      }, this);
	
		      // If the social auth buttons have to be above the Okta form, the title moves from
		      // primary auth form to the social auth (above the buttons) and the divider goes below
		      // the buttons (in between social auth and primary auth). If social auth needs to go below
		      // Okta form, just add the divider at the top of the social auth container. The title still
		      // lives in primary auth form.
		      if (this.settings.get('socialAuthPositionTop')) {
		        children.unshift(formTitleTpl({title: Okta.loc('primaryauth.title', 'login')}));
		        // Divider between Primary Auth and the Social Auth
		        children.push(divider);
		      } else {
		        children.unshift(divider);
		      }
	
		      return children;
		    },
	
		    _createButton: function (options) {
		      var type = options.type.toLowerCase(),
		          attr = 'social-auth-' + type + '-button';
	
		      return Okta.createButton({
		        attributes: {
		          'data-se': attr
		        },
		        className: 'social-auth-button ' + attr,
		        title: Okta.loc('socialauth.' + type + '.label'),
		        events: {
		          'click': function (e) {
		            e.preventDefault();
		            OAuth2Util.getTokens(this.settings, {idp: options.id});
		          }
		        }
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(79),
		  __webpack_require__(107),
		  __webpack_require__(85)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseLoginModel, CookieUtil, Enums) {
	
		  var _ = Okta._;
	
		  return BaseLoginModel.extend({
	
		    props: function () {
		      var settingsUsername = this.settings && this.settings.get('username'),
		          cookieUsername = CookieUtil.getCookieUsername(),
		          remember = false,
		          username;
		      if (settingsUsername) {
		        username = settingsUsername;
		        remember = username === cookieUsername;
		      }
		      else if (cookieUsername) {
		        username = cookieUsername;
		        remember = true;
		      }
	
		      return {
		        username: ['string', true, username],
		        lastUsername: ['string', false, cookieUsername],
		        password: ['string', true],
		        context: ['object', false],
		        remember: ['boolean', true, remember],
		        multiOptionalFactorEnroll: ['boolean', true]
		      };
		    },
	
		    constructor: function (options) {
		      this.settings = options && options.settings;
		      this.appState = options && options.appState;
		      Okta.Model.apply(this, arguments);
		      this.listenTo(this, 'change:username', function (model, username) {
		        this.set({remember: username === this.get('lastUsername')});
		      });
		    },
		    parse: function (options) {
		      return _.omit(options, ['settings', 'appState']);
		    },
	
		    save: function () {
		      var username = this.settings.transformUsername(this.get('username'), Enums.PRIMARY_AUTH),
		          password = this.get('password'),
		          remember = this.get('remember'),
		          lastUsername = this.get('lastUsername'),
		          multiOptionalFactorEnroll = this.get('multiOptionalFactorEnroll');
	
		      // Only delete the cookie if its owner says so. This allows other
		      // users to log in on a one-off basis.
		      if (!remember && lastUsername === username) {
		        CookieUtil.removeUsernameCookie();
		      }
		      else if (remember) {
		        CookieUtil.setUsernameCookie(username);
		      }
	
		      //the 'save' event here is triggered and used in the BaseLoginController
		      //to disable the primary button on the primary auth form
		      this.trigger('save');
	
		      this.appState.trigger('loading', true);
		      return this.startTransaction(function (authClient) {
		        return authClient.signIn({
		          username: username,
		          password: password,
		          options: {
		            warnBeforePasswordExpired: true,
		            multiOptionalFactorEnroll: multiOptionalFactorEnroll
		          }
		        });
		      })
		      .fail(_.bind(function () {
		        this.trigger('error');
		        // Specific event handled by the Header for the case where the security image is not
		        // enabled and we want to show a spinner. (Triggered only here and handled only by Header).
		        this.appState.trigger('removeLoading');
		        CookieUtil.removeUsernameCookie();
		      }, this))
		      .fin(_.bind(function () {
		        this.appState.trigger('loading', false);
		      }, this));
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/***/ },
	/* 144 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97),
		  __webpack_require__(145),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, ManualSetupFooter, TextBox) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'enroll-manual-totp',
		    Model: function () {
		      return {
		        local: {
		          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        }
		      };
		    },
	
		    Form: {
		      title: function () {
		        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		        return Okta.loc('enroll.totp.title', 'login', [factorName]);
		      },
		      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
		      noButtonBar: true,
		      attributes: { 'data-se': 'step-manual-setup' },
	
		      formChildren: function () {
		        return [
		          FormType.View({View: '\
		            <p class="okta-form-subtitle o-form-explain text-align-c">\
		              {{i18n code="enroll.totp.manualSetupInstructions" bundle="login"}}\
		            </p>\
		          '}),
	
		          FormType.Input({
		            name: 'sharedSecret',
		            input: TextBox,
		            type: 'text',
		            disabled: true
		          }),
	
		          FormType.Toolbar({
		            noCancelButton: true,
		            save: Okta.loc('oform.next', 'login')
		          })
		        ];
		      }
		    },
	
		    Footer: ManualSetupFooter,
	
		    initialize: function () {
		      this.listenTo(this.form, 'save', function () {
		        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'),
		          this.model.get('__factorType__'), 'activate');
		        this.options.appState.trigger('navigate', url);
		      });
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(97),
		  __webpack_require__(85)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil, Enums) {
	
		  return Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="mfa.backToFactors" bundle="login"}}\
		      </a>\
		      <a href="#" class="link help goto js-goto" data-se="goto-link">\
		        {{i18n code="mfa.scanBarcode" bundle="login"}}\
		      </a>\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      },
		      'click .js-goto' : function (e) {
		        e.preventDefault();
		        // go to a different screen with current auth status:
		        // refresh the latest response
		        this.model.startTransaction(function (authClient) {
		          return authClient.tx.resume();
		        });
		      }
		    },
		    back: function () {
		      this.state.set('navigateDir', Enums.DIRECTION_BACK);
		      if (this.options.appState.get('prevLink')) {
		        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
		        // correct state. Fortunately, this means that the router will
		        // handle navigation once the request is finished.
		        this.model.doTransaction(function (transaction) {
		          return transaction.prev();
		        });
		      }
		      else {
		        this.options.appState.trigger('navigate', 'signin/enroll');
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 146 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(129),
		  __webpack_require__(81),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97),
		  __webpack_require__(147),
		  __webpack_require__(128),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CountryUtil, FactorUtil, FormController, FormType, RouterUtil,
		          Footer, PhoneTextBox, TextBox) {
	
		  var _ = Okta._;
	
		  function goToFactorActivation(view, step) {
		    var url = RouterUtil.createActivateFactorUrl(view.options.appState.get('activatedFactorProvider'),
		      view.options.appState.get('activatedFactorType'), step);
		    view.options.appState.trigger('navigate', url);
		  }
	
		  function setStateValues(view) {
		    var userPhoneNumber, userCountryCode;
		    if (view.model.get('activationType') === 'SMS') {
		      userCountryCode = view.model.get('countryCode');
		      userPhoneNumber = view.model.get('phoneNumber');
		    }
		    view.options.appState.set({
		      factorActivationType: view.model.get('activationType'),
		      userCountryCode: userCountryCode,
		      userPhoneNumber: userPhoneNumber
		    });
		  }
	
		  function enrollFactor(view, factorType) {
		    return view.model.doTransaction(function(transaction) {
		      return transaction.prev()
		      .then(function (trans) {
		        var factor = _.findWhere(trans.factors, {
		          factorType: factorType,
		          provider: 'OKTA'
		        });
		        return factor.enroll();
		      })
		      .then(function (trans) {
		        var textActivationLinkUrl,
		            emailActivationLinkUrl,
		            sharedSecret,
		            res = trans.data;
	
		        if (res &&
		            res._embedded &&
		            res._embedded.factor &&
		            res._embedded.factor._embedded &&
		            res._embedded.factor._embedded.activation) {
	
		          var factor = res._embedded.factor;
	
		          // Shared secret
		          sharedSecret = factor._embedded.activation.sharedSecret;
	
		          if (factor._embedded.activation._links &&
		              factor._embedded.activation._links.send) {
	
		            var activationSendLinks = factor._embedded.activation._links.send;
	
		            // SMS activation url
		            var smsItem = _.findWhere(activationSendLinks, {name: 'sms'});
		            textActivationLinkUrl = smsItem ? smsItem.href : null;
	
		            // Email activation url
		            var emailItem = _.findWhere(activationSendLinks, {name: 'email'});
		            emailActivationLinkUrl = emailItem ? emailItem.href : null;
		          }
		        }
	
		        view.model.set({
		          'SMS': textActivationLinkUrl,
		          'EMAIL': emailActivationLinkUrl,
		          'sharedSecret': sharedSecret
		        });
	
		        return trans;
		      });
		    });
		  }
	
		  return FormController.extend({
		    className: 'enroll-manual-push',
		    Model: function () {
		      return {
		        local: {
		          activationType: ['string', true, this.options.appState.get('factorActivationType') || 'SMS'],
		          countryCode: ['string', false, 'US'],
		          phoneNumber: 'string',
		          'SMS': ['string', false, this.options.appState.get('textActivationLinkUrl')],
		          'EMAIL': ['string', false, this.options.appState.get('emailActivationLinkUrl')],
		          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        },
		        derived: {
		          countryCallingCode: {
		            deps: ['countryCode'],
		            fn: function (countryCode) {
		              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
		            }
		          },
		          fullPhoneNumber: {
		            deps: ['countryCallingCode', 'phoneNumber'],
		            fn: function (countryCallingCode, phoneNumber) {
		              return countryCallingCode + phoneNumber;
		            }
		          }
		        }
		      };
		    },
	
		    Form: {
		      title: function () {
		        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
		        return Okta.loc('enroll.totp.title', 'login', [factorName]);
		      },
		      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
		      noButtonBar: true,
		      attributes: { 'data-se': 'step-manual-setup' },
	
		      formChildren: function () {
		        var children = [
		          FormType.Input({
		            name: 'activationType',
		            type: 'select',
		            wide: true,
		            options: {
		              SMS: Okta.loc('enroll.totp.sendSms', 'login'),
		              EMAIL: Okta.loc('enroll.totp.sendEmail', 'login'),
		              MANUAL: Okta.loc('enroll.totp.setupManually', 'login')
		            }
		          }),
	
		          FormType.Input({
		            name: 'countryCode',
		            type: 'select',
		            wide: true,
		            options: CountryUtil.getCountries(),
		            showWhen: {activationType: 'SMS'}
		          }),
	
		          FormType.Input({
		            placeholder: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
		            className: 'enroll-sms-phone',
		            name: 'phoneNumber',
		            input: PhoneTextBox,
		            type: 'text',
		            showWhen: {activationType: 'SMS'}
		          }),
	
		          FormType.View({
		            View: '\
		              <p class="okta-form-subtitle o-form-explain text-align-c">\
		                {{i18n code="enroll.totp.sharedSecretInstructions" bundle="login"}}\
		              </p>\
		            ',
		            showWhen: {activationType: 'MANUAL'}
		          }),
	
		          FormType.Input({
		            name: 'sharedSecret',
		            input: TextBox,
		            type: 'text',
		            disabled: true,
		            showWhen: {activationType: 'MANUAL'},
		            initialize: function () {
		              this.listenTo(this.model, 'change:sharedSecret', this.render);
		            }
		          }),
	
		          FormType.View({
		            View: '<div data-type="next-button-wrap"></div>',
		            showWhen: {activationType: 'MANUAL'}
		          }),
	
		          FormType.Button({
		            title: Okta.loc('oform.next', 'login'),
		            className: 'button button-primary button-wide button-next',
		            attributes: {'data-se': 'next-button'},
		            click: _.bind(function () {
		              setStateValues(this);
		              goToFactorActivation(this, 'passcode');
		            }, this)
		          }, '[data-type="next-button-wrap"]'),
	
		          FormType.Toolbar({
		            noCancelButton: true,
		            save: Okta.loc('oform.send', 'login'),
		            showWhen: {
		              activationType: function (val) {
		                return val === 'SMS' || val === 'EMAIL';
		              }
		            }
		          })
		        ];
		        return children;
		      }
		    },
	
		    Footer: Footer,
	
		    initialize: function () {
		      this.setInitialModel();
		      // Move this logic to a model when AuthClient supports sending email and sms
		      this.listenTo(this.form, 'save', function () {
		        var self = this;
		        this.model.doTransaction(function(transaction) {
		          var activationType = this.get('activationType').toLowerCase(),
		              opts = {};
	
		          if (activationType === 'sms') {
		            opts.profile = {phoneNumber: this.get('fullPhoneNumber')};
		          }
	
		          return transaction.factor.activation.send(activationType, opts)
		          .then(function(trans) {
		            setStateValues(self);
		            // Note: Need to defer because OktaAuth calls our router success
		            // handler on the next tick - if we immediately called, appState would
		            // still be populated with the last response
		            _.defer(function () {
		              goToFactorActivation(self, 'sent');
		            });
		            return trans;
		          });
		        });
		      });
	
		      this.listenTo(this.model, 'change:activationType', function (model, value) {
		        this.form.clearErrors();
		        if (value === 'MANUAL' && this.options.appState.get('activatedFactorType') !== 'token:software:totp') {
		          enrollFactor(this, 'token:software:totp');
		        } else if (this.options.appState.get('activatedFactorType') !== 'push') {
		          enrollFactor(this, 'push');
		        }
		      });
		    },
	
		    setInitialModel: function () {
		      if (this.options.appState.get('factorActivationType') === 'SMS') {
		        this.model.set({
		          countryCode: this.options.appState.get('userCountryCode') || 'US',
		          phoneNumber: this.options.appState.get('userPhoneNumber')
		        });
		      }
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isMfaEnrollActivate') ||
		        this.options.appState.get('isMfaEnroll')) {
		        return true;
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 147 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(97)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
		  var _ = Okta._;
	
		  function goToFactorActivation(appState) {
		    var url = RouterUtil.createActivateFactorUrl(appState.get('activatedFactorProvider'),
		      appState.get('activatedFactorType'));
		    appState.trigger('navigate', url);
		  }
	
		  return Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="mfa.backToFactors" bundle="login"}}\
		      </a>\
		      <a href="#" class="link help goto js-goto" data-se="goto-link">\
		        {{i18n code="mfa.scanBarcode" bundle="login"}}\
		      </a>\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      },
		      'click .js-goto' : function (e) {
		        e.preventDefault();
		        var goToFactor = _.partial(goToFactorActivation, this.options.appState);
		        this.options.appState.unset('factorActivationType');
		        if (this.options.appState.get('activatedFactorType') !== 'push') {
		          this.model.doTransaction(function (transaction) {
		            return transaction.prev()
		            .then(function (trans) {
		              var factor = _.findWhere(trans.factors, {
		                factorType: 'push',
		                provider: 'OKTA'
		              });
		              return factor.enroll();
		            });
		          })
		          .then(goToFactor);
		        } else {
		          this.model.startTransaction(function (authClient) {
		            return authClient.tx.resume();
		          })
		          .then(function() {
		            // Sets to trigger on a tick after the appState has been set.
		            // This is due to calling the globalSuccessFn in a callback
		            setTimeout(goToFactor);
		          });
		        }
		      }
		    },
		    back: function () {
		      var self = this;
		      self.options.appState.unset('factorActivationType');
		      if (self.options.appState.get('prevLink')) {
		        this.model.doTransaction(function(transaction) {
		          return transaction.prev();
		        })
		        .then(function() {
		          // we trap 'MFA_ENROLL' response that's why we need to trigger navigation from here
		          self.options.appState.trigger('navigate', 'signin/enroll');
		        });
		      }
		      else {
		        self.options.appState.trigger('navigate', 'signin/enroll');
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 148 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(129),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(97)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CountryUtil, FormController, FormType, RouterUtil) {
	
		  var _ = Okta._;
	
		  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
		  // in network connection lost errors in Safari and IE.
		  var PUSH_INTERVAL = 6000;
	
		  var Footer = Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="oform.back" bundle="login"}}\
		      </a>\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      }
		    },
		    back: function() {
		      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'),
		          this.options.appState.get('activatedFactorType'), 'manual');
		      this.options.appState.trigger('navigate', url);
		    }
		  });
	
		  var emailSentForm = {
		    title: _.partial(Okta.loc, 'enroll.totp.enrollViaEmail.title', 'login'),
		    noButtonBar: true,
		    attributes: { 'data-se': 'sent-email-activation-link' },
		    formChildren: [
		      FormType.View({
		        View: Okta.View.extend({
		          template: '\
		            <p>{{i18n code="enroll.totp.enrollViaEmail.msg" bundle="login"}}</p>\
		            <p class="email-address">{{email}}</p>\
		          ',
		          getTemplateData: function () {
		            return {email: this.options.appState.get('userEmail')};
		          }
		        })
		      })
		    ]
		  };
	
		  var smsSentForm = {
		    title: _.partial(Okta.loc, 'enroll.totp.enrollViaSms.title', 'login'),
		    noButtonBar: true,
		    attributes: { 'data-se': 'sent-sms-activation-link' },
		    formChildren: [
		      FormType.View({
		        View: Okta.View.extend({
		          template: '\
		            <p>{{i18n code="enroll.totp.enrollViaSms.msg" bundle="login"}}</p>\
		            <p class="phone-number">{{phoneNumber}}</p>\
		          ',
		          getTemplateData: function () {
		            return {phoneNumber: this.model.get('fullPhoneNumber')};
		          }
		        })
		      })
		    ]
		  };
	
		  return FormController.extend({
		    className: 'enroll-activation-link-sent',
		    Model: function () {
		      return {
		        local: {
		          countryCode: ['string', false, this.options.appState.get('userCountryCode')],
		          phoneNumber: ['string', false, this.options.appState.get('userPhoneNumber')],
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        },
		        derived: {
		          countryCallingCode: {
		            deps: ['countryCode'],
		            fn: function (countryCode) {
		              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
		            }
		          },
		          fullPhoneNumber: {
		            deps: ['countryCallingCode', 'phoneNumber'],
		            fn: function (countryCallingCode, phoneNumber) {
		              return countryCallingCode + phoneNumber;
		            }
		          }
		        }
		      };
		    },
	
		    Form: function () {
		      var activationType = this.options.appState.get('factorActivationType');
		      switch (activationType) {
		      case 'SMS':
		        return smsSentForm;
		      case 'EMAIL':
		        return emailSentForm;
		      default:
		        throw new Error('Unknown activation option: ' + activationType);
		      }
		    },
	
		    Footer: Footer,
	
		    initialize: function () {
		      this.pollForEnrollment();
		    },
	
		    remove: function () {
		      return FormController.prototype.remove.apply(this, arguments);
		    },
	
		    pollForEnrollment: function () {
		      return this.model.doTransaction(function(transaction) {
		        return transaction.poll(PUSH_INTERVAL);
		      });
		    },
	
		    trapAuthResponse: function () {
		      if (this.options.appState.get('isWaitingForActivation')) {
		        this.pollForEnrollment();
		        return true;
		      }
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 149 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(97),
		  __webpack_require__(80)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, RouterUtil, EnterPasscodeForm) {
	
		  var Footer = Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="oform.back" bundle="login"}}\
		      </a>\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      }
		    },
		    back: function () {
		      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'),
		          'push', 'manual');
		      this.options.appState.trigger('navigate', url);
		    }
		  });
	
		  return FormController.extend({
		    className: 'activate-push',
		    Model: function () {
		      return {
		        props: {
		          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
		          passCode: ['string', true]
		        },
		        local: {
		          '__factorType__': ['string', false, this.options.factorType],
		          '__provider__': ['string', false, this.options.provider]
		        },
		        save: function () {
		          return this.doTransaction(function(transaction) {
		            return transaction.activate({
		              passCode: this.get('passCode')
		            });
		          });
		        }
		      };
		    },
	
		    Form: EnterPasscodeForm,
	
		    Footer: Footer
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 150 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(85),
		  __webpack_require__(77),
		  __webpack_require__(151),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, TextBox) {
	
		  var _ = Okta._;
	
		  var Footer = Okta.View.extend({
		    template: '\
		      {{#if passwordWarn}}\
		        <a href="#" class="link help js-skip" data-se="skip-link">\
		          {{i18n code="password.expiring.later" bundle="login"}}\
		        </a>\
		      {{/if}}\
		      <a href="#" class="link help goto js-signout" data-se="signout-link">{{i18n code="signout" bundle="login"}}</a>\
		    ',
		    className: 'auth-footer clearfix',
		    events: {
		      'click .js-signout' : function (e) {
		        e.preventDefault();
		        var self = this;
		        this.model.doTransaction(function (transaction) {
		          return transaction.cancel();
		        })
		        .then(function () {
		          self.state.set('navigateDir', Enums.DIRECTION_BACK);
		          self.options.appState.trigger('navigate', '');
		        });
		      },
		      'click .js-skip' : function (e) {
		        e.preventDefault();
		        this.model.doTransaction(function (transaction) {
		          return transaction.skip();
		        });
		      }
		    },
		    getTemplateData: function () {
		      return {passwordWarn: this.options.appState.get('isPwdExpiringSoon')};
		    }
		  });
	
		  return FormController.extend({
		    className: 'password-expired',
		    Model: {
		      props: {
		        oldPassword: ['string', true],
		        newPassword: ['string', true],
		        confirmPassword: ['string', true]
		      },
		      validate: function () {
		        return ValidationUtil.validatePasswordMatch(this);
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          return transaction.changePassword({
		            oldPassword: this.get('oldPassword'),
		            newPassword: this.get('newPassword')
		          });
		        });
		      }
		    },
		    Form: {
		      save: _.partial(Okta.loc, 'password.expired.submit', 'login'),
		      title: function () {
		        var expiringSoon = this.options.appState.get('isPwdExpiringSoon'),
		            numDays = this.options.appState.get('passwordExpireDays');
		        if (expiringSoon && numDays > 0) {
		          return Okta.loc('password.expiring.title', 'login', [numDays]);
		        }
		        else if (expiringSoon && numDays === 0) {
		          return Okta.loc('password.expiring.today', 'login');
		        }
		        else {
		          return Okta.loc('password.expired.title', 'login');
		        }
		      },
		      subtitle: function () {
		        if (this.options.appState.get('isPwdExpiringSoon')) {
		          return Okta.loc('password.expiring.subtitle', 'login');
		        }
		      },
		      formChildren: function () {
		        return [
		          FormType.Input({
		            'label-top': true,
		            label: false,
		            placeholder: Okta.loc('password.oldPassword.placeholder', 'login'),
		            name: 'oldPassword',
		            input: TextBox,
		            type: 'password',
		            params: {
		              innerTooltip: Okta.loc('password.oldPassword.tooltip', 'login'),
		              icon: 'credentials-16'
		            }
		          }),
		          FormType.Divider(),
		          FormType.Input({
		            'label-top': true,
		            label: false,
		            placeholder: Okta.loc('password.newPassword.placeholder', 'login'),
		            name: 'newPassword',
		            input: TextBox,
		            type: 'password',
		            params: {
		              innerTooltip: Okta.loc('password.newPassword.tooltip', 'login'),
		              icon: 'credentials-16'
		            }
		          }),
		          FormType.Input({
		            'label-top': true,
		            label: false,
		            placeholder: Okta.loc('password.confirmPassword.placeholder', 'login'),
		            name: 'confirmPassword',
		            input: TextBox,
		            type: 'password',
		            params: {
		              innerTooltip: Okta.loc('password.confirmPassword.tooltip', 'login'),
		              icon: 'credentials-16'
		            }
		          })
		        ];
		      }
		    },
		    Footer: Footer,
	
		    initialize: function () {
		      this.listenTo(this.form, 'save', function () {
		        var processCreds = this.settings.get('processCreds');
		        if (_.isFunction(processCreds)) {
		          processCreds({
		            username: this.options.appState.get('userEmail'),
		            password: this.model.get('newPassword')
		          });
		        }
		        this.model.save();
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 151 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  var fn = {};
	
		  // Validate the 'username' field on the model.
		  fn.validateUsername = function (model) {
		    var username = model.get('username');
		    if (username && username.length > 256) {
		      return {
		        username: Okta.loc('model.validation.field.username', 'login')
		      };
		    }
		  };
	
		  // Validate that the 'newPassword' and 'confirmPassword' fields on the model are a match.
		  fn.validatePasswordMatch = function (model) {
		    if (model.get('newPassword') !== model.get('confirmPassword')) {
		      return {
		        confirmPassword: Okta.loc('password.error.match', 'login')
		      };
		    }
		  };
	
		  return fn;
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(85),
		  __webpack_require__(77),
		  __webpack_require__(151),
		  __webpack_require__(153),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, ContactSupport, TextBox) {
	
		  var _ = Okta._;
	
		  var Footer = Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="goback" bundle="login"}}\
		      </a>\
		      {{#if helpSupportNumber}}\
		      <a href="#" class="link goto js-contact-support">\
		        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
		      </a>\
		      {{/if}}\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      },
		      'click .js-contact-support': function (e) {
		        e.preventDefault();
		        this.state.trigger('contactSupport');
		        this.$('.js-contact-support').hide();
		      }
		    },
		    getTemplateData: function () {
		      return this.settings.pick('helpSupportNumber');
		    },
		    back: function () {
		      this.state.set('navigateDir', Enums.DIRECTION_BACK);
		      this.options.appState.trigger('navigate', '');
		    }
		  });
	
		  return FormController.extend({
		    className: 'forgot-password',
		    Model: {
		      props: {
		        username: ['string', true],
		        factorType: ['string', true, Enums.RECOVERY_FACTOR_TYPE_EMAIL]
		      },
		      validate: function () {
		        return ValidationUtil.validateUsername(this);
		      },
		      save: function () {
		        var self = this;
		        this.startTransaction(function(authClient) {
		          return authClient.forgotPassword({
		            username: self.settings.transformUsername(self.get('username'), Enums.FORGOT_PASSWORD),
		            factorType: self.get('factorType')
		          });
		        })
		        .fail(function () {
		          self.set('factorType', Enums.RECOVERY_FACTOR_TYPE_EMAIL);
		        });
		      }
		    },
		    Form: {
		      autoSave: true,
		      save: _.partial(Okta.loc, 'password.forgot.sendEmail', 'login'),
		      title: _.partial(Okta.loc, 'password.reset', 'login'),
		      formChildren: function () {
		        var formChildren = [
		          FormType.Input({
		            placeholder: Okta.loc('password.forgot.email.or.username.placeholder', 'login'),
		            name: 'username',
		            input: TextBox,
		            type: 'text',
		            params: {
		              innerTooltip: Okta.loc('password.forgot.email.or.username.tooltip', 'login'),
		              icon: 'person-16-gray'
		            }
		          })
		        ];
		        var smsEnabled = this.settings.get('features.smsRecovery');
		        var callEnabled = this.settings.get('features.callRecovery');
		        if (smsEnabled || callEnabled) {
		          formChildren.push(FormType.View({
		            View: Okta.View.extend({
		              template: '\
		                <p class="mobile-recovery-hint">\
		                  {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\
		                </p>',
		              getTemplateData: function () {
		                var mobileFactors;
		                if (smsEnabled && callEnabled) {
		                  mobileFactors = Okta.loc('recovery.smsOrCall');
		                }
		                else if (callEnabled) {
		                  mobileFactors = Okta.loc('recovery.call');
		                }
		                else {
		                  mobileFactors = Okta.loc('recovery.sms');
		                }
		                return { mobileFactors : mobileFactors };
		              }
		            })
		          }));
		        }
	
		        return formChildren;
		      },
		      initialize: function () {
		        var form = this;
	
		        if (this.settings.get('features.callRecovery')) {
		          this.$el.addClass('forgot-password-call-enabled');
		          this.addRecoveryFactorButton('call-button', 'password.forgot.call',
		            Enums.RECOVERY_FACTOR_TYPE_CALL, form);
		        }
		        if (this.settings.get('features.smsRecovery')) {
		          this.$el.addClass('forgot-password-sms-enabled');
		          this.addRecoveryFactorButton('sms-button', 'password.forgot.sendText',
		            Enums.RECOVERY_FACTOR_TYPE_SMS, form);
		        }
	
		        this.listenTo(this.state, 'contactSupport', function () {
		          this.add(ContactSupport, '.o-form-error-container');
		        });
	
		        this.listenTo(this, 'save', function () {
		          this.options.appState.set('username', this.model.get('username'));
		        });
		      },
		      addRecoveryFactorButton: function (className, labelCode, factorType, form) {
		        this.addButton({
		          attributes: { 'data-se': className},
		          type: 'button',
		          className: 'button-primary ' + className,
		          text: Okta.loc(labelCode, 'login'),
		          action: function () {
		            form.clearErrors();
		            if (this.model.isValid()) {
		              this.model.set('factorType', factorType);
		              form.trigger('save', this.model);
		            }
		          }
		        }, { prepend: true });
		      }
		    },
		    Footer: Footer,
	
		    initialize: function () {
		      this.options.appState.unset('username');
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 153 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
		  return Okta.View.extend({
		    template: '\
		      <div class="infobox">\
		        <span class="icon info-16"></span>\
		        <p>{{i18n code="contact.support" bundle="login" arguments="helpSupportNumber"}}</p>\
		      </div>',
		    className: 'contact-support',
	
		    getTemplateData: function () {
		      return this.settings.pick('helpSupportNumber');
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(85),
		  __webpack_require__(103),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, Enums, FooterSignout, TextBox) {
	
		  var _ = Okta._;
		  var API_RATE_LIMIT = 30000; //milliseconds
	
		  return FormController.extend({
		    className: 'recovery-challenge',
		    Model: {
		      props: {
		        passCode: ['string', true]
		      },
		      local: {
		        ableToResend: 'boolean'
		      },
		      resendCode: function () {
		        // Note: This does not require a trapAuthResponse because Backbone's
		        // router will not navigate if the url path is the same
		        this.limitResending();
		        return this.doTransaction(function(transaction) {
		          return transaction.resend();
		        });
		      },
		      limitResending: function () {
		        this.set({ableToResend: false});
		        _.delay(_.bind(this.set, this), API_RATE_LIMIT, {ableToResend: true});
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          return transaction.verify({
		            passCode: this.get('passCode')
		          });
		        });
		      }
		    },
		    Form: {
		      autoSave: true,
		      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
		      title: function () {
		        if (this.options.appState.get('factorType') === Enums.RECOVERY_FACTOR_TYPE_CALL) {
		          return Okta.loc('recoveryChallenge.call.title', 'login');
		        } else {
		          return Okta.loc('recoveryChallenge.sms.title', 'login');
		        }
		      },
		      className: 'recovery-challenge',
		      initialize: function () {
		        this.listenTo(this.model, 'error', function () {
		          this.clearErrors();
		        });
		      },
		      formChildren: function () {
		        return [
		          FormType.Button({
		            title: Okta.loc('mfa.resendCode', 'login'),
		            attributes: { 'data-se': 'resend-button' },
		            className: 'button sms-request-button',
		            click: function () {
		              this.model.resendCode();
		            },
		            initialize: function () {
		              this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
		                if (ableToResend) {
		                  this.options.title = Okta.loc('mfa.resendCode', 'login');
		                  this.enable();
		                  this.render();
		                } else {
		                  this.options.title = Okta.loc('mfa.sent', 'login');
		                  this.disable();
		                  this.render();
		                }
		              });
		            }
		          }),
		          FormType.Input({
		            placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
		            className: 'enroll-sms-phone',
		            name: 'passCode',
		            input: TextBox,
		            type: 'text'
		          })
		        ];
		      }
		    },
	
		    events: {
		      'click .send-email-link': function (e) {
		        e.preventDefault();
		        var settings = this.model.settings,
		            username = this.options.appState.get('username'),
		            recoveryType = this.options.appState.get('recoveryType');
	
		        this.model.startTransaction(function (authClient) {
		          // The user could have landed here via the Forgot Password/Unlock Account flow
		          switch (recoveryType) {
		            case Enums.RECOVERY_TYPE_PASSWORD:
		              return authClient.forgotPassword({
		                username: settings.transformUsername(username, Enums.FORGOT_PASSWORD),
		                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
		              });
		            case Enums.RECOVERY_TYPE_UNLOCK:
		              return authClient.unlockAccount({
		                username: settings.transformUsername(username, Enums.UNLOCK_ACCOUNT),
		                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
		              });
		            default:
		              return;
		          }
		        });
		      }
		    },
	
		    initialize: function () {
		      var recoveryType = this.options.appState.get('recoveryType'),
		          sendEmailLink;
	
		      switch (recoveryType) {
		        case Enums.RECOVERY_TYPE_PASSWORD:
		          sendEmailLink = '\
		            <a href="#" class="link send-email-link" data-se="send-email-link">\
		              {{i18n code="password.forgot.code.notReceived" bundle="login"}}\
		            </a>';
		          break;
		        case Enums.RECOVERY_TYPE_UNLOCK:
		          sendEmailLink = '\
		            <a href="#" class="link send-email-link" data-se="send-email-link">\
		              {{i18n code="account.unlock.sms.notReceived" bundle="login"}}\
		            </a>';
		          break;
		        default:
		          break;
		      }
	
		      if (sendEmailLink) {
		        this.add(sendEmailLink);
		      }
	
		      this.add(new FooterSignout(_.extend(this.toJSON(), {linkText: Okta.loc('goback', 'login'), linkClassName: ''})));
		    },
	
		    postRender: function () {
		      this.model.limitResending();
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 155 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(85),
		  __webpack_require__(76),
		  __webpack_require__(77)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'password-reset-email-sent',
		    Model: function () {
		      return {
		        local: {
		          userFullName: ['string', false, this.options.appState.get('userFullName')]
		        }
		      };
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'password.forgot.emailSent.title', 'login'),
		      subtitle: function () {
		        var username = this.options.appState.get('username');
		        return Okta.loc('password.forgot.emailSent.desc', 'login', [username]);
		      },
		      noButtonBar: true,
		      attributes: { 'data-se': 'pwd-reset-email-sent' },
		      formChildren: function () {
		        return [
		          FormType.Button({
		            title: Okta.loc('goback', 'login'),
		            className: 'button button-primary button-wide',
		            attributes: {'data-se': 'back-button'},
		            click: function () {
		              var self = this;
		              return this.model.doTransaction(function (transaction) {
		                return transaction.cancel();
		              })
		              .then(function() {
		                self.state.set('navigateDir', Enums.DIRECTION_BACK);
		                self.options.appState.trigger('navigate', '');
		              });
		            }
		          })
		        ];
		      }
		    },
	
		    initialize: function (options) {
		      this.settings.callGlobalSuccess(Enums.FORGOT_PASSWORD_EMAIL_SENT, {
		        username: options.appState.get('username')
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 156 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(103),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, FooterSignout, TextBox) {
	
		  return FormController.extend({
		    className: 'recovery-question',
		    Model: {
		      props: {
		        answer: ['string', true],
		        showAnswer: 'boolean'
		      },
		      save: function () {
		        return this.doTransaction(function(transaction) {
		          return transaction.answer({ answer: this.get('answer') });
		        });
		      }
		    },
		    Form: {
		      autoSave: true,
		      save: function () {
		        switch (this.options.appState.get('recoveryType')) {
		        case 'PASSWORD':
		          return Okta.loc('password.forgot.question.submit', 'login');
		        case 'UNLOCK':
		          return Okta.loc('account.unlock.question.submit', 'login');
		        default:
		          return Okta.loc('mfa.challenge.verify', 'login');
		        }
		      },
		      title: function () {
		        switch (this.options.appState.get('recoveryType')) {
		        case 'PASSWORD':
		          return Okta.loc('password.forgot.question.title', 'login');
		        case 'UNLOCK':
		          return Okta.loc('account.unlock.question.title', 'login');
		        default:
		          return '';
		        }
		      },
		      formChildren: function () {
		        return [
		          FormType.Input({
		            label: this.options.appState.get('recoveryQuestion'),
		            placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
		            name: 'answer',
		            input: TextBox,
		            type: 'password',
		            initialize: function () {
		              this.listenTo(this.model, 'change:showAnswer', function () {
		                var type = this.model.get('showAnswer') ? 'text' : 'password';
		                this.getInputs()[0].changeType(type);
		              });
		            }
		          }),
		          FormType.Input({
		            label: false,
		            'label-top': true,
		            placeholder: Okta.loc('mfa.challenge.answer.showAnswer', 'login'),
		            className: 'recovery-question-show margin-btm-0',
		            name: 'showAnswer',
		            type: 'checkbox'
		          })
		        ];
		      }
		    },
		    Footer: FooterSignout
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 157 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(77),
		  __webpack_require__(151),
		  __webpack_require__(103),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, ValidationUtil, FooterSignout, TextBox) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'password-reset',
		    Model: {
		      props: {
		        newPassword: ['string', true],
		        confirmPassword: ['string', true]
		      },
		      validate: function () {
		        return ValidationUtil.validatePasswordMatch(this);
		      },
		      save: function () {
		        var self = this;
		        return this.doTransaction(function(transaction) {
		          return transaction
		          .resetPassword({
		            newPassword: self.get('newPassword')
		          });
		        });
		      }
		    },
		    Form: {
		      save: _.partial(Okta.loc, 'password.reset', 'login'),
		      title: _.partial(Okta.loc, 'password.reset.title', 'login'),
		      subtitle: function () {
		        var policy = this.options.appState.get('policy');
		        if (!policy || !policy.complexity) {
		          return;
		        }
	
		        var fields = {
		          minLength: {i18n: 'password.complexity.length', args: true},
		          minLowerCase: {i18n: 'password.complexity.lowercase'},
		          minUpperCase: {i18n: 'password.complexity.uppercase'},
		          minNumber: {i18n: 'password.complexity.number'},
		          minSymbol: {i18n: 'password.complexity.symbol'},
		          excludeUsername: {i18n: 'password.complexity.no_username'}
		        };
	
		        var requirements = _.map(policy.complexity, function (complexityValue, complexityType) {
		          var params = fields[complexityType];
	
		          return params.args ?
		            Okta.loc(params.i18n, 'login', [complexityValue]) : Okta.loc(params.i18n, 'login');
		        });
	
		        if (requirements.length) {
		          requirements = _.reduce(requirements, function (result, requirement) {
		            return result ?
		              (result + Okta.loc('password.complexity.list.element', 'login', [requirement])) :
		              requirement;
		          });
	
		          return Okta.loc('password.complexity.description', 'login', [requirements]);
		        }
		      },
		      formChildren: function () {
		        return [
		          FormType.Input({
		            placeholder: Okta.loc('password.newPassword.placeholder', 'login'),
		            name: 'newPassword',
		            input: TextBox,
		            type: 'password',
		            params: {
		              innerTooltip: Okta.loc('password.newPassword.tooltip', 'login'),
		              icon: 'credentials-16'
		            }
		          }),
		          FormType.Input({
		            placeholder: Okta.loc('password.confirmPassword.placeholder', 'login'),
		            name: 'confirmPassword',
		            input: TextBox,
		            type: 'password',
		            params: {
		              innerTooltip: Okta.loc('password.confirmPassword.tooltip', 'login'),
		              icon: 'credentials-16'
		            }
		          })
		        ];
		      }
		    },
		    Footer: FooterSignout,
	
		    initialize: function () {
		      this.listenTo(this.form, 'save', function () {
		        var processCreds = this.settings.get('processCreds');
		        if (_.isFunction(processCreds)) {
		          processCreds({
		            username: this.options.appState.get('userEmail'),
		            password: this.model.get('newPassword')
		          });
		        }
		        this.model.save();
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 158 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(76)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController) {
	
		  return FormController.extend({
		    className: 'recovery-loading',
	
		    Model: {},
		    Form: {
		      noButtonBar: true
		    },
	
		    initialize: function (options) {
		      var self = this;
		      return this.model.startTransaction(function (authClient) {
		        return authClient.verifyRecoveryToken({
		          recoveryToken: options.token
		        });
		      })
		      .fail(function () {
		        self.options.appState.trigger('loading', false);
		      });
		    },
	
		    preRender: function () {
		      this.options.appState.trigger('loading', true);
		    },
	
		    trapAuthResponse: function () {
		      this.options.appState.trigger('loading', false);
		      return false;
		    }
	
		  });
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 159 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(76),
		  __webpack_require__(85),
		  __webpack_require__(77),
		  __webpack_require__(151),
		  __webpack_require__(153),
		  __webpack_require__(82)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, ContactSupport, TextBox) {
	
		  var _ = Okta._;
	
		  var Footer = Okta.View.extend({
		    template: '\
		      <a href="#" class="link help js-back" data-se="back-link">\
		        {{i18n code="goback" bundle="login"}}\
		      </a>\
		      {{#if helpSupportNumber}}\
		      <a href="#" class="link goto js-contact-support">\
		        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
		      </a>\
		      {{/if}}\
		    ',
		    className: 'auth-footer',
		    events: {
		      'click .js-back' : function (e) {
		        e.preventDefault();
		        this.back();
		      },
		      'click .js-contact-support': function (e) {
		        e.preventDefault();
		        this.state.trigger('contactSupport');
		        this.$('.js-contact-support').hide();
		      }
		    },
		    getTemplateData: function () {
		      return this.settings.pick('helpSupportNumber');
		    },
		    back: function () {
		      this.state.set('navigateDir', Enums.DIRECTION_BACK);
		      this.options.appState.trigger('navigate', '');
		    }
		  });
	
		  return FormController.extend({
		    className: 'account-unlock',
		    Model: {
		      props: {
		        username: ['string', true],
		        factorType: ['string', true, Enums.RECOVERY_FACTOR_TYPE_EMAIL]
		      },
		      validate: function () {
		        return ValidationUtil.validateUsername(this);
		      },
		      save: function () {
		        var self = this;
		        return this.startTransaction(function (authClient) {
		          return authClient.unlockAccount({
		            username: self.settings.transformUsername(self.get('username'), Enums.UNLOCK_ACCOUNT),
		            factorType: self.get('factorType')
		          });
		        })
		        .fail(function () {
		          self.set('factorType', Enums.RECOVERY_FACTOR_TYPE_EMAIL);
		        });
		      }
		    },
		    Form: {
		      autoSave: true,
		      save: _.partial(Okta.loc, 'account.unlock.sendEmail', 'login'),
		      title: _.partial(Okta.loc, 'account.unlock.title', 'login'),
		      formChildren: function () {
		        var formChildren = [
		          FormType.Input({
		            placeholder: Okta.loc('account.unlock.email.or.username.placeholder', 'login'),
		            name: 'username',
		            input: TextBox,
		            type: 'text',
		            params: {
		              innerTooltip: Okta.loc('account.unlock.email.or.username.tooltip', 'login'),
		              icon: 'person-16-gray'
		            }
		          })
		        ];
		        if (this.settings.get('features.smsRecovery')) {
		          formChildren.push(FormType.View({View: '\
		            <p class="sms-hint">\
		              {{i18n code="recovery.sms.hint" bundle="login"}}\
		            </p>\
		          '}));
		        }
	
		        return formChildren;
		      },
		      initialize: function () {
		        var form = this;
	
		        this.listenTo(this, 'save', function () {
		          this.options.appState.set('username', this.model.get('username'));
		        });
	
		        if (this.settings.get('features.smsRecovery')) {
		          this.$el.addClass('forgot-password-sms-enabled');
		          this.addButton({
		            attributes: { 'data-se': 'sms-button'},
		            type: 'button',
		            className: 'button-primary sms-button',
		            text: Okta.loc('account.unlock.sendText', 'login'),
		            action: function () {
		              form.clearErrors();
		              if (this.model.isValid()) {
		                this.model.set('factorType', Enums.RECOVERY_FACTOR_TYPE_SMS);
		                form.trigger('save', this.model);
		              }
		            }
		          }, { prepend: true });
		        }
	
		        this.listenTo(this.state, 'contactSupport', function () {
		          this.add(ContactSupport, '.o-form-error-container');
		        });
		      }
		    },
		    Footer: Footer
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 160 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(85),
		  __webpack_require__(76),
		  __webpack_require__(77)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'account-unlocked',
		    Model: function () {
		      return {
		        local: {
		          userFullName: ['string', false, this.options.appState.get('userFullName')]
		        }
		      };
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'account.unlock.unlocked.title', 'login'),
		      subtitle: _.partial(Okta.loc, 'account.unlock.unlocked.desc', 'login'),
		      noButtonBar: true,
		      attributes: { 'data-se': 'account-unlocked' },
		      formChildren: function () {
		        return [
		          FormType.Button({
		            title: Okta.loc('goback', 'login'),
		            className: 'button button-primary button-wide',
		            attributes: {'data-se': 'back-button'},
		            click: function () {
		              this.state.set('navigateDir', Enums.DIRECTION_BACK);
		              this.options.appState.trigger('navigate', '');
		            }
		          })
		        ];
		      }
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 161 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(85),
		  __webpack_require__(76),
		  __webpack_require__(77)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
		  var _ = Okta._;
	
		  return FormController.extend({
		    className: 'account-unlock-email-sent',
		    Model: function () {
		      return {
		        local: {
		          userFullName: ['string', false, this.options.appState.get('userFullName')]
		        }
		      };
		    },
	
		    Form: {
		      title: _.partial(Okta.loc, 'account.unlock.emailSent.title', 'login'),
		      subtitle: function () {
		        var username = this.options.appState.get('username');
		        return Okta.loc('account.unlock.emailSent.desc', 'login', [username]);
		      },
		      noButtonBar: true,
		      attributes: { 'data-se': 'unlock-email-sent' },
		      formChildren: function () {
		        return [
		          FormType.Button({
		            title: Okta.loc('goback', 'login'),
		            className: 'button button-primary button-wide',
		            attributes: {'data-se': 'back-button'},
		            click: function () {
		              this.state.set('navigateDir', Enums.DIRECTION_BACK);
		              this.options.appState.trigger('navigate', '');
		            }
		          })
		        ];
		      }
		    },
	
		    initialize: function (options) {
		      this.settings.callGlobalSuccess(Enums.UNLOCK_ACCOUNT_EMAIL_SENT, {
		        username: options.appState.get('username')
		      });
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 162 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* jshint maxcomplexity: 8 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(9),
		  __webpack_require__(81),
		  __webpack_require__(163),
		  __webpack_require__(96)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, FactorUtil, FactorsDropDown, Factor) {
	
		  var _ = Okta._;
	
		  return Okta.View.extend({
	
		    template: '\
		      <div class="beacon-blank auth-beacon">\
		        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\
		      </div>\
		      <div class="bg-helper auth-beacon auth-beacon-factor {{className}}" data-se="factor-beacon">\
		        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\
		      </div>\
		      <div data-type="factor-types-dropdown" class="factors-dropdown-wrap"></div>\
		    ',
	
		    events: {
		      'click .auth-beacon-factor': function (e) {
		        e.preventDefault();
		        e.stopPropagation();
		        this.$('.dropdown .options').toggle();
		      }
		    },
	
		    initialize: function () {
		      this.options.appState.set('beaconType', 'factor');
		    },
	
		    getTemplateData: function () {
		      var factors = this.options.appState.get('factors'),
		          factor, className;
		      if (factors) {
		        factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
		      } else  {
		        factor = new Factor.Model(this.options.appState.get('factor'), this.toJSON());
		      }
		      className = factor.get('iconClassName');
		      return { className: className || '' };
		    },
	
		    postRender: function () {
		      if (this.options.animate) {
		        this.$('.auth-beacon-factor').fadeIn(200);
		      }
		      var appState = this.options.appState;
		      if (appState.get('hasMfaRequiredOptions')) {
		        this.add(FactorsDropDown, '[data-type="factor-types-dropdown"]');
		      }
		    },
	
		    fadeOut: function () {
		      var deferred = Q.defer();
		      this.$('.auth-beacon-factor').fadeOut(200, function () {
		        deferred.resolve();
		      });
		      return deferred.promise;
		    },
	
		    equals: function (Beacon, options) {
		      return Beacon &&
		        this instanceof Beacon &&
		        options.provider === this.options.provider &&
		        (options.factorType === this.options.factorType ||
		          (FactorUtil.isOktaVerify(options.provider, options.factorType) &&
		          FactorUtil.isOktaVerify(this.options.provider, this.options.factorType)));
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 163 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(19),
		  __webpack_require__(164),
		  __webpack_require__(165)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorsDropDownOptions, BaseDropDown) {
		  var _ = Okta._;
		  var $ = Okta.$;
	
		  $(document).click(function (e) {
		    var $target = $(e.target);
		    var isDropdown = $target.closest('.option-selected').length > 0 && $target.closest('.dropdown').length > 0;
		    if (!isDropdown) {
		      $('.dropdown .options').hide();
		    }
		  });
	
		  return BaseDropDown.extend({
		    className: 'bg-helper icon-button',
		    events: {
		      'click a.option-selected': function (e) {
		        e.preventDefault();
		        if (_.result(this, 'disabled')) {
		          e.stopPropagation();
		        } else {
		          this.$('.options').toggle();
		        }
		      },
		      'click .dropdown-disabled': function (e) {
		        e.preventDefault();
		        e.stopPropagation();
		      }
		    },
		    initialize: function () {
		      this.addOption(FactorsDropDownOptions.getDropdownOption('TITLE'));
		      this.options.appState.get('factors').each(function (factor) {
		        this.addOption(FactorsDropDownOptions.getDropdownOption(factor.get('factorName')), {model: factor});
		        this.listenTo(this.last(), 'options:toggle', function () {
		          this.$('.options').hide();
		        });
		      }, this);
		    }
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 164 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
		 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
		 *
		 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
		 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 *
		 * See the License for the specific language governing permissions and limitations under the License.
		 */
	
		/* jshint maxstatements: 16, maxcomplexity: 10 */
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19), __webpack_require__(97)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
		  var _ = Okta._;
	
		  var action = function (model) {
		    var url = RouterUtil.createVerifyUrl(model.get('provider'), model.get('factorType')),
		        self = this;
	
		    this.model.manageTransaction(function (transaction, setTransaction) {
		      if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
		        return transaction.prev()
		        .then(function (trans) {
		          self.trigger('options:toggle');
		          self.options.appState.trigger('navigate', url);
		          setTransaction(trans);
		        });
		      } else {
		        self.trigger('options:toggle');
		        self.options.appState.trigger('navigate', url);
		      }
		    });
		  };
	
		  var dropdownOptions = {
		    'TITLE': {
		      title: _.partial(Okta.loc, 'mfa.factors.dropdown.title', 'login'),
		      className: 'dropdown-list-title'
		    },
	
		    'OKTA_VERIFY': {
		      icon: 'factor-icon mfa-okta-verify-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'OKTA_VERIFY_PUSH': {
		      icon: 'factor-icon mfa-okta-verify-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'GOOGLE_AUTH': {
		      icon: 'factor-icon mfa-google-auth-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'SYMANTEC_VIP': {
		      icon: 'factor-icon mfa-symantec-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'RSA_SECURID': {
		      icon: 'factor-icon mfa-rsa-30',
		      title: _.partial(Okta.loc, 'factor.totpHard.rsaSecurId', 'login'),
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'ON_PREM': {
		      icon: 'factor-icon mfa-onprem-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'DUO': {
		      icon: 'factor-icon mfa-duo-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'DUO_PUSH': {
		      icon: 'duo-push-16',
		      className: 'suboption',
		      // TODO: add phone number here
		      title: _.partial(Okta.loc, 'mfa.duoSecurity.push', 'login', ['XXX-XXX-7890'])
		    },
	
		    'DUO_SMS': {
		      icon: 'duo-sms-16',
		      className: 'suboption',
		      // TODO: add phone number here
		      title: _.partial(Okta.loc, 'mfa.duoSecurity.sms', 'login', ['XXX-XXX-7890'])
		    },
	
		    'DUO_CALL': {
		      icon: 'duo-call-16',
		      className: 'suboption',
		      // TODO: add phone number here
		      title: _.partial(Okta.loc, 'mfa.duoSecurity.call', 'login', ['XXX-XXX-7890'])
		    },
	
		    'YUBIKEY': {
		      icon: 'factor-icon mfa-yubikey-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'SMS': {
		      icon: 'factor-icon mfa-sms-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'CALL': {
		      icon: 'factor-icon mfa-call-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'QUESTION': {
		      icon: 'factor-icon mfa-question-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'WINDOWS_HELLO': {
		      icon: 'factor-icon mfa-windows-hello-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    },
	
		    'U2F': {
		      icon: 'factor-icon mfa-u2f-30',
		      title: function () {
		        return this.model.get('factorLabel');
		      },
		      action: function () {
		        action.call(this, this.model);
		      }
		    }
		  };
	
		  return {
		    getDropdownOption: function (factorName) {
		      return dropdownOptions[factorName];
		    }
		  };
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ },
	/* 165 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		  __webpack_require__(2),
		  __webpack_require__(6),
		  __webpack_require__(27),
		  __webpack_require__(26)
		], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, TemplateUtil, BaseView) {
	
		  var optionsTemplate = TemplateUtil.tpl('\
		    <a class="icon-16 {{className}}" data-se="{{seleniumId}}">\
		      {{#if icon}}\
		      <span class="icon {{icon}}"></span>\
		      {{/if}}\
		      {{#if title}}\
		      {{title}}\
		      {{/if}}\
		      {{#if subtitle}}\
		        <p class="option-subtitle">{{subtitle}}</p>\
		      {{/if}}\
		   </a>\
		   ');
	
		  var DropDownOption = BaseView.extend({
		    tagName: 'li',
	
		    events: {
		      click: function (e) {
		        e.preventDefault();
		        this.action && this.action.call(this);
		      }
		    },
	
		    constructor: function () {
		      BaseView.apply(this, arguments);
		      this.$el.addClass('okta-dropdown-option option');
		    },
	
		    render: function () {
		      this.$el.html(optionsTemplate({
		        icon: _.result(this, 'icon'),
		        className: _.result(this, 'className') || '',
		        title: _.result(this, 'title'),
		        subtitle: _.result(this, 'subtitle'),
		        seleniumId: _.result(this, 'seleniumId')
		      }));
		      return this;
		    }
		  });
	
		  return BaseView.extend({
	
		    events: {
		      'click a.option-selected': function (e) {
		        e.preventDefault();
		        if (_.result(this, 'disabled')) {
		          e.stopPropagation();
		        }
		      },
		      'click .dropdown-disabled': function (e) {
		        e.preventDefault();
		        e.stopPropagation();
		      }
		    },
	
		    items: [],
	
		    constructor: function () {
	
		      // In this very specific case we want to NOT append className to $el
		      // but to the <a> tag in the template
		      // so we want to disable backbone default functionality.
		      var className = this.className;
		      this.className = null;
	
		      BaseView.apply(this, arguments);
	
		      this.className = className;
	
		      this.$el.addClass('dropdown more-actions float-l');
	
		      _.each(_.result(this, 'items'), function (option) {
		        this.addOption(option, this.options);
		      }, this);
	
		    },
	
		    template: '\
		      <a href="#" class="link-button {{className}} link-button-icon option-selected center">\
		        {{#if icon}}\
		        <span class="icon {{icon}}"></span>\
		        {{/if}}\
		        <span class="option-selected-text">{{title}}</span>\
		        <span class="icon-dm"></span>\
		      </a>\
		      <div class="options clearfix" style="display: none;">\
		      <ul class="okta-dropdown-list options-wrap clearfix"></ul>\
		      </div>\
		    ',
	
		    getTemplateData: function () {
		      var className = [ _.result(this, 'className') || '',
		        _.result(this, 'disabled') ? 'dropdown-disabled' : ''
		      ];
		      return {
		        icon: _.result(this, 'icon'),
		        className: $.trim(className.join(' ')),
		        title: _.result(this, 'title')
		      };
		    },
	
		    addOption: function (proto, options) {
		      this.add(DropDownOption.extend(proto), 'ul.options-wrap', {options: options || {}});
		    }
	
		  });
	
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	
	 handlebars v4.0.5
	
	Copyright (C) 2011-2015 by Yehuda Katz
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	
	@license
	*/
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Handlebars"] = factory();
		else
			root["Handlebars"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	
	
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _handlebarsRuntime = __webpack_require__(2);
	
		var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
	
		// Compiler imports
	
		var _handlebarsCompilerAst = __webpack_require__(21);
	
		var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
	
		var _handlebarsCompilerBase = __webpack_require__(22);
	
		var _handlebarsCompilerCompiler = __webpack_require__(27);
	
		var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);
	
		var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
	
		var _handlebarsCompilerVisitor = __webpack_require__(25);
	
		var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
	
		var _handlebarsNoConflict = __webpack_require__(20);
	
		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
	
		var _create = _handlebarsRuntime2['default'].create;
		function create() {
		  var hb = _create();
	
		  hb.compile = function (input, options) {
		    return _handlebarsCompilerCompiler.compile(input, options, hb);
		  };
		  hb.precompile = function (input, options) {
		    return _handlebarsCompilerCompiler.precompile(input, options, hb);
		  };
	
		  hb.AST = _handlebarsCompilerAst2['default'];
		  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
		  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
		  hb.Parser = _handlebarsCompilerBase.parser;
		  hb.parse = _handlebarsCompilerBase.parse;
	
		  return hb;
		}
	
		var inst = create();
		inst.create = create;
	
		_handlebarsNoConflict2['default'](inst);
	
		inst.Visitor = _handlebarsCompilerVisitor2['default'];
	
		inst['default'] = inst;
	
		exports['default'] = inst;
		module.exports = exports['default'];
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		"use strict";
	
		exports["default"] = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		};
	
		exports.__esModule = true;
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _handlebarsBase = __webpack_require__(4);
	
		var base = _interopRequireWildcard(_handlebarsBase);
	
		// Each of these augment the Handlebars object. No need to setup here.
		// (This is done to easily share code between commonjs and browse envs)
	
		var _handlebarsSafeString = __webpack_require__(18);
	
		var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
	
		var _handlebarsException = __webpack_require__(6);
	
		var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
	
		var _handlebarsUtils = __webpack_require__(5);
	
		var Utils = _interopRequireWildcard(_handlebarsUtils);
	
		var _handlebarsRuntime = __webpack_require__(19);
	
		var runtime = _interopRequireWildcard(_handlebarsRuntime);
	
		var _handlebarsNoConflict = __webpack_require__(20);
	
		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
	
		// For compatibility and usage outside of module systems, make the Handlebars object a namespace
		function create() {
		  var hb = new base.HandlebarsEnvironment();
	
		  Utils.extend(hb, base);
		  hb.SafeString = _handlebarsSafeString2['default'];
		  hb.Exception = _handlebarsException2['default'];
		  hb.Utils = Utils;
		  hb.escapeExpression = Utils.escapeExpression;
	
		  hb.VM = runtime;
		  hb.template = function (spec) {
		    return runtime.template(spec, hb);
		  };
	
		  return hb;
		}
	
		var inst = create();
		inst.create = create;
	
		_handlebarsNoConflict2['default'](inst);
	
		inst['default'] = inst;
	
		exports['default'] = inst;
		module.exports = exports['default'];
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		"use strict";
	
		exports["default"] = function (obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
	
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
		      }
		    }
	
		    newObj["default"] = obj;
		    return newObj;
		  }
		};
	
		exports.__esModule = true;
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.HandlebarsEnvironment = HandlebarsEnvironment;
	
		var _utils = __webpack_require__(5);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _helpers = __webpack_require__(7);
	
		var _decorators = __webpack_require__(15);
	
		var _logger = __webpack_require__(17);
	
		var _logger2 = _interopRequireDefault(_logger);
	
		var VERSION = '4.0.5';
		exports.VERSION = VERSION;
		var COMPILER_REVISION = 7;
	
		exports.COMPILER_REVISION = COMPILER_REVISION;
		var REVISION_CHANGES = {
		  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
		  2: '== 1.0.0-rc.3',
		  3: '== 1.0.0-rc.4',
		  4: '== 1.x.x',
		  5: '== 2.0.0-alpha.x',
		  6: '>= 2.0.0-beta.1',
		  7: '>= 4.0.0'
		};
	
		exports.REVISION_CHANGES = REVISION_CHANGES;
		var objectType = '[object Object]';
	
		function HandlebarsEnvironment(helpers, partials, decorators) {
		  this.helpers = helpers || {};
		  this.partials = partials || {};
		  this.decorators = decorators || {};
	
		  _helpers.registerDefaultHelpers(this);
		  _decorators.registerDefaultDecorators(this);
		}
	
		HandlebarsEnvironment.prototype = {
		  constructor: HandlebarsEnvironment,
	
		  logger: _logger2['default'],
		  log: _logger2['default'].log,
	
		  registerHelper: function registerHelper(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple helpers');
		      }
		      _utils.extend(this.helpers, name);
		    } else {
		      this.helpers[name] = fn;
		    }
		  },
		  unregisterHelper: function unregisterHelper(name) {
		    delete this.helpers[name];
		  },
	
		  registerPartial: function registerPartial(name, partial) {
		    if (_utils.toString.call(name) === objectType) {
		      _utils.extend(this.partials, name);
		    } else {
		      if (typeof partial === 'undefined') {
		        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
		      }
		      this.partials[name] = partial;
		    }
		  },
		  unregisterPartial: function unregisterPartial(name) {
		    delete this.partials[name];
		  },
	
		  registerDecorator: function registerDecorator(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple decorators');
		      }
		      _utils.extend(this.decorators, name);
		    } else {
		      this.decorators[name] = fn;
		    }
		  },
		  unregisterDecorator: function unregisterDecorator(name) {
		    delete this.decorators[name];
		  }
		};
	
		var log = _logger2['default'].log;
	
		exports.log = log;
		exports.createFrame = _utils.createFrame;
		exports.logger = _logger2['default'];
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
		exports.extend = extend;
		exports.indexOf = indexOf;
		exports.escapeExpression = escapeExpression;
		exports.isEmpty = isEmpty;
		exports.createFrame = createFrame;
		exports.blockParams = blockParams;
		exports.appendContextPath = appendContextPath;
		var escape = {
		  '&': '&amp;',
		  '<': '&lt;',
		  '>': '&gt;',
		  '"': '&quot;',
		  "'": '&#x27;',
		  '`': '&#x60;',
		  '=': '&#x3D;'
		};
	
		var badChars = /[&<>"'`=]/g,
		    possible = /[&<>"'`=]/;
	
		function escapeChar(chr) {
		  return escape[chr];
		}
	
		function extend(obj /* , ...source */) {
		  for (var i = 1; i < arguments.length; i++) {
		    for (var key in arguments[i]) {
		      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
		        obj[key] = arguments[i][key];
		      }
		    }
		  }
	
		  return obj;
		}
	
		var toString = Object.prototype.toString;
	
		exports.toString = toString;
		// Sourced from lodash
		// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
		/* eslint-disable func-style */
		var isFunction = function isFunction(value) {
		  return typeof value === 'function';
		};
		// fallback for older versions of Chrome and Safari
		/* istanbul ignore next */
		if (isFunction(/x/)) {
		  exports.isFunction = isFunction = function (value) {
		    return typeof value === 'function' && toString.call(value) === '[object Function]';
		  };
		}
		exports.isFunction = isFunction;
	
		/* eslint-enable func-style */
	
		/* istanbul ignore next */
		var isArray = Array.isArray || function (value) {
		  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
		};
	
		exports.isArray = isArray;
		// Older IE versions do not directly support indexOf so we must implement our own, sadly.
	
		function indexOf(array, value) {
		  for (var i = 0, len = array.length; i < len; i++) {
		    if (array[i] === value) {
		      return i;
		    }
		  }
		  return -1;
		}
	
		function escapeExpression(string) {
		  if (typeof string !== 'string') {
		    // don't escape SafeStrings, since they're already safe
		    if (string && string.toHTML) {
		      return string.toHTML();
		    } else if (string == null) {
		      return '';
		    } else if (!string) {
		      return string + '';
		    }
	
		    // Force a string conversion as this will be done by the append regardless and
		    // the regex test will do this transparently behind the scenes, causing issues if
		    // an object's to string has escaped characters in it.
		    string = '' + string;
		  }
	
		  if (!possible.test(string)) {
		    return string;
		  }
		  return string.replace(badChars, escapeChar);
		}
	
		function isEmpty(value) {
		  if (!value && value !== 0) {
		    return true;
		  } else if (isArray(value) && value.length === 0) {
		    return true;
		  } else {
		    return false;
		  }
		}
	
		function createFrame(object) {
		  var frame = extend({}, object);
		  frame._parent = object;
		  return frame;
		}
	
		function blockParams(params, ids) {
		  params.path = ids;
		  return params;
		}
	
		function appendContextPath(contextPath, id) {
		  return (contextPath ? contextPath + '.' : '') + id;
		}
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
	
		function Exception(message, node) {
		  var loc = node && node.loc,
		      line = undefined,
		      column = undefined;
		  if (loc) {
		    line = loc.start.line;
		    column = loc.start.column;
	
		    message += ' - ' + line + ':' + column;
		  }
	
		  var tmp = Error.prototype.constructor.call(this, message);
	
		  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
		  for (var idx = 0; idx < errorProps.length; idx++) {
		    this[errorProps[idx]] = tmp[errorProps[idx]];
		  }
	
		  /* istanbul ignore else */
		  if (Error.captureStackTrace) {
		    Error.captureStackTrace(this, Exception);
		  }
	
		  if (loc) {
		    this.lineNumber = line;
		    this.column = column;
		  }
		}
	
		Exception.prototype = new Error();
	
		exports['default'] = Exception;
		module.exports = exports['default'];
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.registerDefaultHelpers = registerDefaultHelpers;
	
		var _helpersBlockHelperMissing = __webpack_require__(8);
	
		var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
	
		var _helpersEach = __webpack_require__(9);
	
		var _helpersEach2 = _interopRequireDefault(_helpersEach);
	
		var _helpersHelperMissing = __webpack_require__(10);
	
		var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
	
		var _helpersIf = __webpack_require__(11);
	
		var _helpersIf2 = _interopRequireDefault(_helpersIf);
	
		var _helpersLog = __webpack_require__(12);
	
		var _helpersLog2 = _interopRequireDefault(_helpersLog);
	
		var _helpersLookup = __webpack_require__(13);
	
		var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
	
		var _helpersWith = __webpack_require__(14);
	
		var _helpersWith2 = _interopRequireDefault(_helpersWith);
	
		function registerDefaultHelpers(instance) {
		  _helpersBlockHelperMissing2['default'](instance);
		  _helpersEach2['default'](instance);
		  _helpersHelperMissing2['default'](instance);
		  _helpersIf2['default'](instance);
		  _helpersLog2['default'](instance);
		  _helpersLookup2['default'](instance);
		  _helpersWith2['default'](instance);
		}
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('blockHelperMissing', function (context, options) {
		    var inverse = options.inverse,
		        fn = options.fn;
	
		    if (context === true) {
		      return fn(this);
		    } else if (context === false || context == null) {
		      return inverse(this);
		    } else if (_utils.isArray(context)) {
		      if (context.length > 0) {
		        if (options.ids) {
		          options.ids = [options.name];
		        }
	
		        return instance.helpers.each(context, options);
		      } else {
		        return inverse(this);
		      }
		    } else {
		      if (options.data && options.ids) {
		        var data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
		        options = { data: data };
		      }
	
		      return fn(context, options);
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('each', function (context, options) {
		    if (!options) {
		      throw new _exception2['default']('Must pass iterator to #each');
		    }
	
		    var fn = options.fn,
		        inverse = options.inverse,
		        i = 0,
		        ret = '',
		        data = undefined,
		        contextPath = undefined;
	
		    if (options.data && options.ids) {
		      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
		    }
	
		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }
	
		    if (options.data) {
		      data = _utils.createFrame(options.data);
		    }
	
		    function execIteration(field, index, last) {
		      if (data) {
		        data.key = field;
		        data.index = index;
		        data.first = index === 0;
		        data.last = !!last;
	
		        if (contextPath) {
		          data.contextPath = contextPath + field;
		        }
		      }
	
		      ret = ret + fn(context[field], {
		        data: data,
		        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
		      });
		    }
	
		    if (context && typeof context === 'object') {
		      if (_utils.isArray(context)) {
		        for (var j = context.length; i < j; i++) {
		          if (i in context) {
		            execIteration(i, i, i === context.length - 1);
		          }
		        }
		      } else {
		        var priorKey = undefined;
	
		        for (var key in context) {
		          if (context.hasOwnProperty(key)) {
		            // We're running the iterations one step out of sync so we can detect
		            // the last iteration without have to scan the object twice and create
		            // an itermediate keys array.
		            if (priorKey !== undefined) {
		              execIteration(priorKey, i - 1);
		            }
		            priorKey = key;
		            i++;
		          }
		        }
		        if (priorKey !== undefined) {
		          execIteration(priorKey, i - 1, true);
		        }
		      }
		    }
	
		    if (i === 0) {
		      ret = inverse(this);
		    }
	
		    return ret;
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('helperMissing', function () /* [args, ]options */{
		    if (arguments.length === 1) {
		      // A missing field in a {{foo}} construct.
		      return undefined;
		    } else {
		      // Someone is actually trying to call something, blow up.
		      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('if', function (conditional, options) {
		    if (_utils.isFunction(conditional)) {
		      conditional = conditional.call(this);
		    }
	
		    // Default behavior is to render the positive path if the value is truthy and not empty.
		    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
		    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
		    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
		      return options.inverse(this);
		    } else {
		      return options.fn(this);
		    }
		  });
	
		  instance.registerHelper('unless', function (conditional, options) {
		    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (instance) {
		  instance.registerHelper('log', function () /* message, options */{
		    var args = [undefined],
		        options = arguments[arguments.length - 1];
		    for (var i = 0; i < arguments.length - 1; i++) {
		      args.push(arguments[i]);
		    }
	
		    var level = 1;
		    if (options.hash.level != null) {
		      level = options.hash.level;
		    } else if (options.data && options.data.level != null) {
		      level = options.data.level;
		    }
		    args[0] = level;
	
		    instance.log.apply(instance, args);
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 13 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (instance) {
		  instance.registerHelper('lookup', function (obj, field) {
		    return obj && obj[field];
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('with', function (context, options) {
		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }
	
		    var fn = options.fn;
	
		    if (!_utils.isEmpty(context)) {
		      var data = options.data;
		      if (options.data && options.ids) {
		        data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
		      }
	
		      return fn(context, {
		        data: data,
		        blockParams: _utils.blockParams([context], [data && data.contextPath])
		      });
		    } else {
		      return options.inverse(this);
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.registerDefaultDecorators = registerDefaultDecorators;
	
		var _decoratorsInline = __webpack_require__(16);
	
		var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
	
		function registerDefaultDecorators(instance) {
		  _decoratorsInline2['default'](instance);
		}
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerDecorator('inline', function (fn, props, container, options) {
		    var ret = fn;
		    if (!props.partials) {
		      props.partials = {};
		      ret = function (context, options) {
		        // Create a new partials stack frame prior to exec.
		        var original = container.partials;
		        container.partials = _utils.extend({}, original, props.partials);
		        var ret = fn(context, options);
		        container.partials = original;
		        return ret;
		      };
		    }
	
		    props.partials[options.args[0]] = options.fn;
	
		    return ret;
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var logger = {
		  methodMap: ['debug', 'info', 'warn', 'error'],
		  level: 'info',
	
		  // Maps a given level value to the `methodMap` indexes above.
		  lookupLevel: function lookupLevel(level) {
		    if (typeof level === 'string') {
		      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
		      if (levelMap >= 0) {
		        level = levelMap;
		      } else {
		        level = parseInt(level, 10);
		      }
		    }
	
		    return level;
		  },
	
		  // Can be overridden in the host environment
		  log: function log(level) {
		    level = logger.lookupLevel(level);
	
		    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
		      var method = logger.methodMap[level];
		      if (!console[method]) {
		        // eslint-disable-line no-console
		        method = 'log';
		      }
	
		      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        message[_key - 1] = arguments[_key];
		      }
	
		      console[method].apply(console, message); // eslint-disable-line no-console
		    }
		  }
		};
	
		exports['default'] = logger;
		module.exports = exports['default'];
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		// Build out our basic SafeString type
		'use strict';
	
		exports.__esModule = true;
		function SafeString(string) {
		  this.string = string;
		}
	
		SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
		  return '' + this.string;
		};
	
		exports['default'] = SafeString;
		module.exports = exports['default'];
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.checkRevision = checkRevision;
		exports.template = template;
		exports.wrapProgram = wrapProgram;
		exports.resolvePartial = resolvePartial;
		exports.invokePartial = invokePartial;
		exports.noop = noop;
	
		var _utils = __webpack_require__(5);
	
		var Utils = _interopRequireWildcard(_utils);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _base = __webpack_require__(4);
	
		function checkRevision(compilerInfo) {
		  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
		      currentRevision = _base.COMPILER_REVISION;
	
		  if (compilerRevision !== currentRevision) {
		    if (compilerRevision < currentRevision) {
		      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
		          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
		      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
		    } else {
		      // Use the embedded version info since the runtime doesn't know about this revision yet
		      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
		    }
		  }
		}
	
		function template(templateSpec, env) {
		  /* istanbul ignore next */
		  if (!env) {
		    throw new _exception2['default']('No environment passed to template');
		  }
		  if (!templateSpec || !templateSpec.main) {
		    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
		  }
	
		  templateSpec.main.decorator = templateSpec.main_d;
	
		  // Note: Using env.VM references rather than local var references throughout this section to allow
		  // for external users to override these as psuedo-supported APIs.
		  env.VM.checkRevision(templateSpec.compiler);
	
		  function invokePartialWrapper(partial, context, options) {
		    if (options.hash) {
		      context = Utils.extend({}, context, options.hash);
		      if (options.ids) {
		        options.ids[0] = true;
		      }
		    }
	
		    partial = env.VM.resolvePartial.call(this, partial, context, options);
		    var result = env.VM.invokePartial.call(this, partial, context, options);
	
		    if (result == null && env.compile) {
		      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
		      result = options.partials[options.name](context, options);
		    }
		    if (result != null) {
		      if (options.indent) {
		        var lines = result.split('\n');
		        for (var i = 0, l = lines.length; i < l; i++) {
		          if (!lines[i] && i + 1 === l) {
		            break;
		          }
	
		          lines[i] = options.indent + lines[i];
		        }
		        result = lines.join('\n');
		      }
		      return result;
		    } else {
		      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
		    }
		  }
	
		  // Just add water
		  var container = {
		    strict: function strict(obj, name) {
		      if (!(name in obj)) {
		        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
		      }
		      return obj[name];
		    },
		    lookup: function lookup(depths, name) {
		      var len = depths.length;
		      for (var i = 0; i < len; i++) {
		        if (depths[i] && depths[i][name] != null) {
		          return depths[i][name];
		        }
		      }
		    },
		    lambda: function lambda(current, context) {
		      return typeof current === 'function' ? current.call(context) : current;
		    },
	
		    escapeExpression: Utils.escapeExpression,
		    invokePartial: invokePartialWrapper,
	
		    fn: function fn(i) {
		      var ret = templateSpec[i];
		      ret.decorator = templateSpec[i + '_d'];
		      return ret;
		    },
	
		    programs: [],
		    program: function program(i, data, declaredBlockParams, blockParams, depths) {
		      var programWrapper = this.programs[i],
		          fn = this.fn(i);
		      if (data || depths || blockParams || declaredBlockParams) {
		        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
		      } else if (!programWrapper) {
		        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
		      }
		      return programWrapper;
		    },
	
		    data: function data(value, depth) {
		      while (value && depth--) {
		        value = value._parent;
		      }
		      return value;
		    },
		    merge: function merge(param, common) {
		      var obj = param || common;
	
		      if (param && common && param !== common) {
		        obj = Utils.extend({}, common, param);
		      }
	
		      return obj;
		    },
	
		    noop: env.VM.noop,
		    compilerInfo: templateSpec.compiler
		  };
	
		  function ret(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
		    var data = options.data;
	
		    ret._setup(options);
		    if (!options.partial && templateSpec.useData) {
		      data = initData(context, data);
		    }
		    var depths = undefined,
		        blockParams = templateSpec.useBlockParams ? [] : undefined;
		    if (templateSpec.useDepths) {
		      if (options.depths) {
		        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
		      } else {
		        depths = [context];
		      }
		    }
	
		    function main(context /*, options*/) {
		      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
		    }
		    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
		    return main(context, options);
		  }
		  ret.isTop = true;
	
		  ret._setup = function (options) {
		    if (!options.partial) {
		      container.helpers = container.merge(options.helpers, env.helpers);
	
		      if (templateSpec.usePartial) {
		        container.partials = container.merge(options.partials, env.partials);
		      }
		      if (templateSpec.usePartial || templateSpec.useDecorators) {
		        container.decorators = container.merge(options.decorators, env.decorators);
		      }
		    } else {
		      container.helpers = options.helpers;
		      container.partials = options.partials;
		      container.decorators = options.decorators;
		    }
		  };
	
		  ret._child = function (i, data, blockParams, depths) {
		    if (templateSpec.useBlockParams && !blockParams) {
		      throw new _exception2['default']('must pass block params');
		    }
		    if (templateSpec.useDepths && !depths) {
		      throw new _exception2['default']('must pass parent depths');
		    }
	
		    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
		  };
		  return ret;
		}
	
		function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
		  function prog(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
		    var currentDepths = depths;
		    if (depths && context !== depths[0]) {
		      currentDepths = [context].concat(depths);
		    }
	
		    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
		  }
	
		  prog = executeDecorators(fn, prog, container, depths, data, blockParams);
	
		  prog.program = i;
		  prog.depth = depths ? depths.length : 0;
		  prog.blockParams = declaredBlockParams || 0;
		  return prog;
		}
	
		function resolvePartial(partial, context, options) {
		  if (!partial) {
		    if (options.name === '@partial-block') {
		      partial = options.data['partial-block'];
		    } else {
		      partial = options.partials[options.name];
		    }
		  } else if (!partial.call && !options.name) {
		    // This is a dynamic partial that returned a string
		    options.name = partial;
		    partial = options.partials[partial];
		  }
		  return partial;
		}
	
		function invokePartial(partial, context, options) {
		  options.partial = true;
		  if (options.ids) {
		    options.data.contextPath = options.ids[0] || options.data.contextPath;
		  }
	
		  var partialBlock = undefined;
		  if (options.fn && options.fn !== noop) {
		    options.data = _base.createFrame(options.data);
		    partialBlock = options.data['partial-block'] = options.fn;
	
		    if (partialBlock.partials) {
		      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
		    }
		  }
	
		  if (partial === undefined && partialBlock) {
		    partial = partialBlock;
		  }
	
		  if (partial === undefined) {
		    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
		  } else if (partial instanceof Function) {
		    return partial(context, options);
		  }
		}
	
		function noop() {
		  return '';
		}
	
		function initData(context, data) {
		  if (!data || !('root' in data)) {
		    data = data ? _base.createFrame(data) : {};
		    data.root = context;
		  }
		  return data;
		}
	
		function executeDecorators(fn, prog, container, depths, data, blockParams) {
		  if (fn.decorator) {
		    var props = {};
		    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
		    Utils.extend(prog, props);
		  }
		  return prog;
		}
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		/* WEBPACK VAR INJECTION */(function(global) {/* global window */
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (Handlebars) {
		  /* istanbul ignore next */
		  var root = typeof global !== 'undefined' ? global : window,
		      $Handlebars = root.Handlebars;
		  /* istanbul ignore next */
		  Handlebars.noConflict = function () {
		    if (root.Handlebars === Handlebars) {
		      root.Handlebars = $Handlebars;
		    }
		    return Handlebars;
		  };
		};
	
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
		var AST = {
		  // Public API used to evaluate derived attributes regarding AST nodes
		  helpers: {
		    // a mustache is definitely a helper if:
		    // * it is an eligible helper, and
		    // * it has at least one parameter or hash segment
		    helperExpression: function helperExpression(node) {
		      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
		    },
	
		    scopedId: function scopedId(path) {
		      return (/^\.|this\b/.test(path.original)
		      );
		    },
	
		    // an ID is simple if it only has one part, and that part is not
		    // `..` or `this`.
		    simpleId: function simpleId(path) {
		      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
		    }
		  }
		};
	
		// Must be exported as an object rather than the root of the module as the jison lexer
		// must modify the object to operate properly.
		exports['default'] = AST;
		module.exports = exports['default'];
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		exports.__esModule = true;
		exports.parse = parse;
	
		var _parser = __webpack_require__(23);
	
		var _parser2 = _interopRequireDefault(_parser);
	
		var _whitespaceControl = __webpack_require__(24);
	
		var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
	
		var _helpers = __webpack_require__(26);
	
		var Helpers = _interopRequireWildcard(_helpers);
	
		var _utils = __webpack_require__(5);
	
		exports.parser = _parser2['default'];
	
		var yy = {};
		_utils.extend(yy, Helpers);
	
		function parse(input, options) {
		  // Just return if an already-compiled AST was passed in.
		  if (input.type === 'Program') {
		    return input;
		  }
	
		  _parser2['default'].yy = yy;
	
		  // Altering the shared object here, but this is ok as parser is a sync operation
		  yy.locInfo = function (locInfo) {
		    return new yy.SourceLocation(options && options.srcName, locInfo);
		  };
	
		  var strip = new _whitespaceControl2['default'](options);
		  return strip.accept(_parser2['default'].parse(input));
		}
	
	/***/ },
	/* 23 */
	/***/ function(module, exports) {
	
		/* istanbul ignore next */
		/* Jison generated parser */
		"use strict";
	
		var handlebars = (function () {
		    var parser = { trace: function trace() {},
		        yy: {},
		        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
		        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
		        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
		        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
		        /**/) {
	
		            var $0 = $$.length - 1;
		            switch (yystate) {
		                case 1:
		                    return $$[$0 - 1];
		                    break;
		                case 2:
		                    this.$ = yy.prepareProgram($$[$0]);
		                    break;
		                case 3:
		                    this.$ = $$[$0];
		                    break;
		                case 4:
		                    this.$ = $$[$0];
		                    break;
		                case 5:
		                    this.$ = $$[$0];
		                    break;
		                case 6:
		                    this.$ = $$[$0];
		                    break;
		                case 7:
		                    this.$ = $$[$0];
		                    break;
		                case 8:
		                    this.$ = $$[$0];
		                    break;
		                case 9:
		                    this.$ = {
		                        type: 'CommentStatement',
		                        value: yy.stripComment($$[$0]),
		                        strip: yy.stripFlags($$[$0], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 10:
		                    this.$ = {
		                        type: 'ContentStatement',
		                        original: $$[$0],
		                        value: $$[$0],
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 11:
		                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 12:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
		                    break;
		                case 13:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
		                    break;
		                case 14:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
		                    break;
		                case 15:
		                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 16:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 17:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 18:
		                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
		                    break;
		                case 19:
		                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
		                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
		                    program.chained = true;
	
		                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };
	
		                    break;
		                case 20:
		                    this.$ = $$[$0];
		                    break;
		                case 21:
		                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
		                    break;
		                case 22:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 23:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 24:
		                    this.$ = {
		                        type: 'PartialStatement',
		                        name: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        indent: '',
		                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 25:
		                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 26:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
		                    break;
		                case 27:
		                    this.$ = $$[$0];
		                    break;
		                case 28:
		                    this.$ = $$[$0];
		                    break;
		                case 29:
		                    this.$ = {
		                        type: 'SubExpression',
		                        path: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 30:
		                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 31:
		                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 32:
		                    this.$ = yy.id($$[$0 - 1]);
		                    break;
		                case 33:
		                    this.$ = $$[$0];
		                    break;
		                case 34:
		                    this.$ = $$[$0];
		                    break;
		                case 35:
		                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 36:
		                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
		                    break;
		                case 37:
		                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
		                    break;
		                case 38:
		                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
		                    break;
		                case 39:
		                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
		                    break;
		                case 40:
		                    this.$ = $$[$0];
		                    break;
		                case 41:
		                    this.$ = $$[$0];
		                    break;
		                case 42:
		                    this.$ = yy.preparePath(true, $$[$0], this._$);
		                    break;
		                case 43:
		                    this.$ = yy.preparePath(false, $$[$0], this._$);
		                    break;
		                case 44:
		                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
		                    break;
		                case 45:
		                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
		                    break;
		                case 46:
		                    this.$ = [];
		                    break;
		                case 47:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 48:
		                    this.$ = [$$[$0]];
		                    break;
		                case 49:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 50:
		                    this.$ = [];
		                    break;
		                case 51:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 58:
		                    this.$ = [];
		                    break;
		                case 59:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 64:
		                    this.$ = [];
		                    break;
		                case 65:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 70:
		                    this.$ = [];
		                    break;
		                case 71:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 78:
		                    this.$ = [];
		                    break;
		                case 79:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 82:
		                    this.$ = [];
		                    break;
		                case 83:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 86:
		                    this.$ = [];
		                    break;
		                case 87:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 90:
		                    this.$ = [];
		                    break;
		                case 91:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 94:
		                    this.$ = [];
		                    break;
		                case 95:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 98:
		                    this.$ = [$$[$0]];
		                    break;
		                case 99:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 100:
		                    this.$ = [$$[$0]];
		                    break;
		                case 101:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		            }
		        },
		        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
		        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
		        parseError: function parseError(str, hash) {
		            throw new Error(str);
		        },
		        parse: function parse(input) {
		            var self = this,
		                stack = [0],
		                vstack = [null],
		                lstack = [],
		                table = this.table,
		                yytext = "",
		                yylineno = 0,
		                yyleng = 0,
		                recovering = 0,
		                TERROR = 2,
		                EOF = 1;
		            this.lexer.setInput(input);
		            this.lexer.yy = this.yy;
		            this.yy.lexer = this.lexer;
		            this.yy.parser = this;
		            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
		            var yyloc = this.lexer.yylloc;
		            lstack.push(yyloc);
		            var ranges = this.lexer.options && this.lexer.options.ranges;
		            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
		            function popStack(n) {
		                stack.length = stack.length - 2 * n;
		                vstack.length = vstack.length - n;
		                lstack.length = lstack.length - n;
		            }
		            function lex() {
		                var token;
		                token = self.lexer.lex() || 1;
		                if (typeof token !== "number") {
		                    token = self.symbols_[token] || token;
		                }
		                return token;
		            }
		            var symbol,
		                preErrorSymbol,
		                state,
		                action,
		                a,
		                r,
		                yyval = {},
		                p,
		                len,
		                newState,
		                expected;
		            while (true) {
		                state = stack[stack.length - 1];
		                if (this.defaultActions[state]) {
		                    action = this.defaultActions[state];
		                } else {
		                    if (symbol === null || typeof symbol == "undefined") {
		                        symbol = lex();
		                    }
		                    action = table[state] && table[state][symbol];
		                }
		                if (typeof action === "undefined" || !action.length || !action[0]) {
		                    var errStr = "";
		                    if (!recovering) {
		                        expected = [];
		                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
		                            expected.push("'" + this.terminals_[p] + "'");
		                        }
		                        if (this.lexer.showPosition) {
		                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
		                        } else {
		                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
		                        }
		                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
		                    }
		                }
		                if (action[0] instanceof Array && action.length > 1) {
		                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
		                }
		                switch (action[0]) {
		                    case 1:
		                        stack.push(symbol);
		                        vstack.push(this.lexer.yytext);
		                        lstack.push(this.lexer.yylloc);
		                        stack.push(action[1]);
		                        symbol = null;
		                        if (!preErrorSymbol) {
		                            yyleng = this.lexer.yyleng;
		                            yytext = this.lexer.yytext;
		                            yylineno = this.lexer.yylineno;
		                            yyloc = this.lexer.yylloc;
		                            if (recovering > 0) recovering--;
		                        } else {
		                            symbol = preErrorSymbol;
		                            preErrorSymbol = null;
		                        }
		                        break;
		                    case 2:
		                        len = this.productions_[action[1]][1];
		                        yyval.$ = vstack[vstack.length - len];
		                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
		                        if (ranges) {
		                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
		                        }
		                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
		                        if (typeof r !== "undefined") {
		                            return r;
		                        }
		                        if (len) {
		                            stack = stack.slice(0, -1 * len * 2);
		                            vstack = vstack.slice(0, -1 * len);
		                            lstack = lstack.slice(0, -1 * len);
		                        }
		                        stack.push(this.productions_[action[1]][0]);
		                        vstack.push(yyval.$);
		                        lstack.push(yyval._$);
		                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
		                        stack.push(newState);
		                        break;
		                    case 3:
		                        return true;
		                }
		            }
		            return true;
		        }
		    };
		    /* Jison generated lexer */
		    var lexer = (function () {
		        var lexer = { EOF: 1,
		            parseError: function parseError(str, hash) {
		                if (this.yy.parser) {
		                    this.yy.parser.parseError(str, hash);
		                } else {
		                    throw new Error(str);
		                }
		            },
		            setInput: function setInput(input) {
		                this._input = input;
		                this._more = this._less = this.done = false;
		                this.yylineno = this.yyleng = 0;
		                this.yytext = this.matched = this.match = '';
		                this.conditionStack = ['INITIAL'];
		                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
		                if (this.options.ranges) this.yylloc.range = [0, 0];
		                this.offset = 0;
		                return this;
		            },
		            input: function input() {
		                var ch = this._input[0];
		                this.yytext += ch;
		                this.yyleng++;
		                this.offset++;
		                this.match += ch;
		                this.matched += ch;
		                var lines = ch.match(/(?:\r\n?|\n).*/g);
		                if (lines) {
		                    this.yylineno++;
		                    this.yylloc.last_line++;
		                } else {
		                    this.yylloc.last_column++;
		                }
		                if (this.options.ranges) this.yylloc.range[1]++;
	
		                this._input = this._input.slice(1);
		                return ch;
		            },
		            unput: function unput(ch) {
		                var len = ch.length;
		                var lines = ch.split(/(?:\r\n?|\n)/g);
	
		                this._input = ch + this._input;
		                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
		                //this.yyleng -= len;
		                this.offset -= len;
		                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
		                this.match = this.match.substr(0, this.match.length - 1);
		                this.matched = this.matched.substr(0, this.matched.length - 1);
	
		                if (lines.length - 1) this.yylineno -= lines.length - 1;
		                var r = this.yylloc.range;
	
		                this.yylloc = { first_line: this.yylloc.first_line,
		                    last_line: this.yylineno + 1,
		                    first_column: this.yylloc.first_column,
		                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
		                };
	
		                if (this.options.ranges) {
		                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
		                }
		                return this;
		            },
		            more: function more() {
		                this._more = true;
		                return this;
		            },
		            less: function less(n) {
		                this.unput(this.match.slice(n));
		            },
		            pastInput: function pastInput() {
		                var past = this.matched.substr(0, this.matched.length - this.match.length);
		                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
		            },
		            upcomingInput: function upcomingInput() {
		                var next = this.match;
		                if (next.length < 20) {
		                    next += this._input.substr(0, 20 - next.length);
		                }
		                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
		            },
		            showPosition: function showPosition() {
		                var pre = this.pastInput();
		                var c = new Array(pre.length + 1).join("-");
		                return pre + this.upcomingInput() + "\n" + c + "^";
		            },
		            next: function next() {
		                if (this.done) {
		                    return this.EOF;
		                }
		                if (!this._input) this.done = true;
	
		                var token, match, tempMatch, index, col, lines;
		                if (!this._more) {
		                    this.yytext = '';
		                    this.match = '';
		                }
		                var rules = this._currentRules();
		                for (var i = 0; i < rules.length; i++) {
		                    tempMatch = this._input.match(this.rules[rules[i]]);
		                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
		                        match = tempMatch;
		                        index = i;
		                        if (!this.options.flex) break;
		                    }
		                }
		                if (match) {
		                    lines = match[0].match(/(?:\r\n?|\n).*/g);
		                    if (lines) this.yylineno += lines.length;
		                    this.yylloc = { first_line: this.yylloc.last_line,
		                        last_line: this.yylineno + 1,
		                        first_column: this.yylloc.last_column,
		                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
		                    this.yytext += match[0];
		                    this.match += match[0];
		                    this.matches = match;
		                    this.yyleng = this.yytext.length;
		                    if (this.options.ranges) {
		                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
		                    }
		                    this._more = false;
		                    this._input = this._input.slice(match[0].length);
		                    this.matched += match[0];
		                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
		                    if (this.done && this._input) this.done = false;
		                    if (token) return token;else return;
		                }
		                if (this._input === "") {
		                    return this.EOF;
		                } else {
		                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
		                }
		            },
		            lex: function lex() {
		                var r = this.next();
		                if (typeof r !== 'undefined') {
		                    return r;
		                } else {
		                    return this.lex();
		                }
		            },
		            begin: function begin(condition) {
		                this.conditionStack.push(condition);
		            },
		            popState: function popState() {
		                return this.conditionStack.pop();
		            },
		            _currentRules: function _currentRules() {
		                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
		            },
		            topState: function topState() {
		                return this.conditionStack[this.conditionStack.length - 2];
		            },
		            pushState: function begin(condition) {
		                this.begin(condition);
		            } };
		        lexer.options = {};
		        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
		        /**/) {
	
		            function strip(start, end) {
		                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
		            }
	
		            var YYSTATE = YY_START;
		            switch ($avoiding_name_collisions) {
		                case 0:
		                    if (yy_.yytext.slice(-2) === "\\\\") {
		                        strip(0, 1);
		                        this.begin("mu");
		                    } else if (yy_.yytext.slice(-1) === "\\") {
		                        strip(0, 1);
		                        this.begin("emu");
		                    } else {
		                        this.begin("mu");
		                    }
		                    if (yy_.yytext) return 15;
	
		                    break;
		                case 1:
		                    return 15;
		                    break;
		                case 2:
		                    this.popState();
		                    return 15;
	
		                    break;
		                case 3:
		                    this.begin('raw');return 15;
		                    break;
		                case 4:
		                    this.popState();
		                    // Should be using `this.topState()` below, but it currently
		                    // returns the second top instead of the first top. Opened an
		                    // issue about it at https://github.com/zaach/jison/issues/291
		                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
		                        return 15;
		                    } else {
		                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
		                        return 'END_RAW_BLOCK';
		                    }
	
		                    break;
		                case 5:
		                    return 15;
		                    break;
		                case 6:
		                    this.popState();
		                    return 14;
	
		                    break;
		                case 7:
		                    return 65;
		                    break;
		                case 8:
		                    return 68;
		                    break;
		                case 9:
		                    return 19;
		                    break;
		                case 10:
		                    this.popState();
		                    this.begin('raw');
		                    return 23;
	
		                    break;
		                case 11:
		                    return 55;
		                    break;
		                case 12:
		                    return 60;
		                    break;
		                case 13:
		                    return 29;
		                    break;
		                case 14:
		                    return 47;
		                    break;
		                case 15:
		                    this.popState();return 44;
		                    break;
		                case 16:
		                    this.popState();return 44;
		                    break;
		                case 17:
		                    return 34;
		                    break;
		                case 18:
		                    return 39;
		                    break;
		                case 19:
		                    return 51;
		                    break;
		                case 20:
		                    return 48;
		                    break;
		                case 21:
		                    this.unput(yy_.yytext);
		                    this.popState();
		                    this.begin('com');
	
		                    break;
		                case 22:
		                    this.popState();
		                    return 14;
	
		                    break;
		                case 23:
		                    return 48;
		                    break;
		                case 24:
		                    return 73;
		                    break;
		                case 25:
		                    return 72;
		                    break;
		                case 26:
		                    return 72;
		                    break;
		                case 27:
		                    return 87;
		                    break;
		                case 28:
		                    // ignore whitespace
		                    break;
		                case 29:
		                    this.popState();return 54;
		                    break;
		                case 30:
		                    this.popState();return 33;
		                    break;
		                case 31:
		                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
		                    break;
		                case 32:
		                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
		                    break;
		                case 33:
		                    return 85;
		                    break;
		                case 34:
		                    return 82;
		                    break;
		                case 35:
		                    return 82;
		                    break;
		                case 36:
		                    return 83;
		                    break;
		                case 37:
		                    return 84;
		                    break;
		                case 38:
		                    return 81;
		                    break;
		                case 39:
		                    return 75;
		                    break;
		                case 40:
		                    return 77;
		                    break;
		                case 41:
		                    return 72;
		                    break;
		                case 42:
		                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
		                    break;
		                case 43:
		                    return 'INVALID';
		                    break;
		                case 44:
		                    return 5;
		                    break;
		            }
		        };
		        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
		        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
		        return lexer;
		    })();
		    parser.lexer = lexer;
		    function Parser() {
		        this.yy = {};
		    }Parser.prototype = parser;parser.Parser = Parser;
		    return new Parser();
		})();exports.__esModule = true;
		exports['default'] = handlebars;
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _visitor = __webpack_require__(25);
	
		var _visitor2 = _interopRequireDefault(_visitor);
	
		function WhitespaceControl() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
		  this.options = options;
		}
		WhitespaceControl.prototype = new _visitor2['default']();
	
		WhitespaceControl.prototype.Program = function (program) {
		  var doStandalone = !this.options.ignoreStandalone;
	
		  var isRoot = !this.isRootSeen;
		  this.isRootSeen = true;
	
		  var body = program.body;
		  for (var i = 0, l = body.length; i < l; i++) {
		    var current = body[i],
		        strip = this.accept(current);
	
		    if (!strip) {
		      continue;
		    }
	
		    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
		        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
		        openStandalone = strip.openStandalone && _isPrevWhitespace,
		        closeStandalone = strip.closeStandalone && _isNextWhitespace,
		        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
	
		    if (strip.close) {
		      omitRight(body, i, true);
		    }
		    if (strip.open) {
		      omitLeft(body, i, true);
		    }
	
		    if (doStandalone && inlineStandalone) {
		      omitRight(body, i);
	
		      if (omitLeft(body, i)) {
		        // If we are on a standalone node, save the indent info for partials
		        if (current.type === 'PartialStatement') {
		          // Pull out the whitespace from the final line
		          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
		        }
		      }
		    }
		    if (doStandalone && openStandalone) {
		      omitRight((current.program || current.inverse).body);
	
		      // Strip out the previous content node if it's whitespace only
		      omitLeft(body, i);
		    }
		    if (doStandalone && closeStandalone) {
		      // Always strip the next node
		      omitRight(body, i);
	
		      omitLeft((current.inverse || current.program).body);
		    }
		  }
	
		  return program;
		};
	
		WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
		  this.accept(block.program);
		  this.accept(block.inverse);
	
		  // Find the inverse program that is involed with whitespace stripping.
		  var program = block.program || block.inverse,
		      inverse = block.program && block.inverse,
		      firstInverse = inverse,
		      lastInverse = inverse;
	
		  if (inverse && inverse.chained) {
		    firstInverse = inverse.body[0].program;
	
		    // Walk the inverse chain to find the last inverse that is actually in the chain.
		    while (lastInverse.chained) {
		      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
		    }
		  }
	
		  var strip = {
		    open: block.openStrip.open,
		    close: block.closeStrip.close,
	
		    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
		    // so our parent can determine if we actually are standalone
		    openStandalone: isNextWhitespace(program.body),
		    closeStandalone: isPrevWhitespace((firstInverse || program).body)
		  };
	
		  if (block.openStrip.close) {
		    omitRight(program.body, null, true);
		  }
	
		  if (inverse) {
		    var inverseStrip = block.inverseStrip;
	
		    if (inverseStrip.open) {
		      omitLeft(program.body, null, true);
		    }
	
		    if (inverseStrip.close) {
		      omitRight(firstInverse.body, null, true);
		    }
		    if (block.closeStrip.open) {
		      omitLeft(lastInverse.body, null, true);
		    }
	
		    // Find standalone else statments
		    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
		      omitLeft(program.body);
		      omitRight(firstInverse.body);
		    }
		  } else if (block.closeStrip.open) {
		    omitLeft(program.body, null, true);
		  }
	
		  return strip;
		};
	
		WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
		  return mustache.strip;
		};
	
		WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
		  /* istanbul ignore next */
		  var strip = node.strip || {};
		  return {
		    inlineStandalone: true,
		    open: strip.open,
		    close: strip.close
		  };
		};
	
		function isPrevWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = body.length;
		  }
	
		  // Nodes that end with newlines are considered whitespace (but are special
		  // cased for strip operations)
		  var prev = body[i - 1],
		      sibling = body[i - 2];
		  if (!prev) {
		    return isRoot;
		  }
	
		  if (prev.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
		  }
		}
		function isNextWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = -1;
		  }
	
		  var next = body[i + 1],
		      sibling = body[i + 2];
		  if (!next) {
		    return isRoot;
		  }
	
		  if (next.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
		  }
		}
	
		// Marks the node to the right of the position as omitted.
		// I.e. {{foo}}' ' will mark the ' ' node as omitted.
		//
		// If i is undefined, then the first child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitRight(body, i, multiple) {
		  var current = body[i == null ? 0 : i + 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
		    return;
		  }
	
		  var original = current.value;
		  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
		  current.rightStripped = current.value !== original;
		}
	
		// Marks the node to the left of the position as omitted.
		// I.e. ' '{{foo}} will mark the ' ' node as omitted.
		//
		// If i is undefined then the last child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitLeft(body, i, multiple) {
		  var current = body[i == null ? body.length - 1 : i - 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
		    return;
		  }
	
		  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
		  var original = current.value;
		  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
		  current.leftStripped = current.value !== original;
		  return current.leftStripped;
		}
	
		exports['default'] = WhitespaceControl;
		module.exports = exports['default'];
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		function Visitor() {
		  this.parents = [];
		}
	
		Visitor.prototype = {
		  constructor: Visitor,
		  mutating: false,
	
		  // Visits a given value. If mutating, will replace the value if necessary.
		  acceptKey: function acceptKey(node, name) {
		    var value = this.accept(node[name]);
		    if (this.mutating) {
		      // Hacky sanity check: This may have a few false positives for type for the helper
		      // methods but will generally do the right thing without a lot of overhead.
		      if (value && !Visitor.prototype[value.type]) {
		        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
		      }
		      node[name] = value;
		    }
		  },
	
		  // Performs an accept operation with added sanity check to ensure
		  // required keys are not removed.
		  acceptRequired: function acceptRequired(node, name) {
		    this.acceptKey(node, name);
	
		    if (!node[name]) {
		      throw new _exception2['default'](node.type + ' requires ' + name);
		    }
		  },
	
		  // Traverses a given array. If mutating, empty respnses will be removed
		  // for child elements.
		  acceptArray: function acceptArray(array) {
		    for (var i = 0, l = array.length; i < l; i++) {
		      this.acceptKey(array, i);
	
		      if (!array[i]) {
		        array.splice(i, 1);
		        i--;
		        l--;
		      }
		    }
		  },
	
		  accept: function accept(object) {
		    if (!object) {
		      return;
		    }
	
		    /* istanbul ignore next: Sanity code */
		    if (!this[object.type]) {
		      throw new _exception2['default']('Unknown type: ' + object.type, object);
		    }
	
		    if (this.current) {
		      this.parents.unshift(this.current);
		    }
		    this.current = object;
	
		    var ret = this[object.type](object);
	
		    this.current = this.parents.shift();
	
		    if (!this.mutating || ret) {
		      return ret;
		    } else if (ret !== false) {
		      return object;
		    }
		  },
	
		  Program: function Program(program) {
		    this.acceptArray(program.body);
		  },
	
		  MustacheStatement: visitSubExpression,
		  Decorator: visitSubExpression,
	
		  BlockStatement: visitBlock,
		  DecoratorBlock: visitBlock,
	
		  PartialStatement: visitPartial,
		  PartialBlockStatement: function PartialBlockStatement(partial) {
		    visitPartial.call(this, partial);
	
		    this.acceptKey(partial, 'program');
		  },
	
		  ContentStatement: function ContentStatement() /* content */{},
		  CommentStatement: function CommentStatement() /* comment */{},
	
		  SubExpression: visitSubExpression,
	
		  PathExpression: function PathExpression() /* path */{},
	
		  StringLiteral: function StringLiteral() /* string */{},
		  NumberLiteral: function NumberLiteral() /* number */{},
		  BooleanLiteral: function BooleanLiteral() /* bool */{},
		  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
		  NullLiteral: function NullLiteral() /* literal */{},
	
		  Hash: function Hash(hash) {
		    this.acceptArray(hash.pairs);
		  },
		  HashPair: function HashPair(pair) {
		    this.acceptRequired(pair, 'value');
		  }
		};
	
		function visitSubExpression(mustache) {
		  this.acceptRequired(mustache, 'path');
		  this.acceptArray(mustache.params);
		  this.acceptKey(mustache, 'hash');
		}
		function visitBlock(block) {
		  visitSubExpression.call(this, block);
	
		  this.acceptKey(block, 'program');
		  this.acceptKey(block, 'inverse');
		}
		function visitPartial(partial) {
		  this.acceptRequired(partial, 'name');
		  this.acceptArray(partial.params);
		  this.acceptKey(partial, 'hash');
		}
	
		exports['default'] = Visitor;
		module.exports = exports['default'];
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.SourceLocation = SourceLocation;
		exports.id = id;
		exports.stripFlags = stripFlags;
		exports.stripComment = stripComment;
		exports.preparePath = preparePath;
		exports.prepareMustache = prepareMustache;
		exports.prepareRawBlock = prepareRawBlock;
		exports.prepareBlock = prepareBlock;
		exports.prepareProgram = prepareProgram;
		exports.preparePartialBlock = preparePartialBlock;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		function validateClose(open, close) {
		  close = close.path ? close.path.original : close;
	
		  if (open.path.original !== close) {
		    var errorNode = { loc: open.path.loc };
	
		    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
		  }
		}
	
		function SourceLocation(source, locInfo) {
		  this.source = source;
		  this.start = {
		    line: locInfo.first_line,
		    column: locInfo.first_column
		  };
		  this.end = {
		    line: locInfo.last_line,
		    column: locInfo.last_column
		  };
		}
	
		function id(token) {
		  if (/^\[.*\]$/.test(token)) {
		    return token.substr(1, token.length - 2);
		  } else {
		    return token;
		  }
		}
	
		function stripFlags(open, close) {
		  return {
		    open: open.charAt(2) === '~',
		    close: close.charAt(close.length - 3) === '~'
		  };
		}
	
		function stripComment(comment) {
		  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
		}
	
		function preparePath(data, parts, loc) {
		  loc = this.locInfo(loc);
	
		  var original = data ? '@' : '',
		      dig = [],
		      depth = 0,
		      depthString = '';
	
		  for (var i = 0, l = parts.length; i < l; i++) {
		    var part = parts[i].part,
	
		    // If we have [] syntax then we do not treat path references as operators,
		    // i.e. foo.[this] resolves to approximately context.foo['this']
		    isLiteral = parts[i].original !== part;
		    original += (parts[i].separator || '') + part;
	
		    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
		      if (dig.length > 0) {
		        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
		      } else if (part === '..') {
		        depth++;
		        depthString += '../';
		      }
		    } else {
		      dig.push(part);
		    }
		  }
	
		  return {
		    type: 'PathExpression',
		    data: data,
		    depth: depth,
		    parts: dig,
		    original: original,
		    loc: loc
		  };
		}
	
		function prepareMustache(path, params, hash, open, strip, locInfo) {
		  // Must use charAt to support IE pre-10
		  var escapeFlag = open.charAt(3) || open.charAt(2),
		      escaped = escapeFlag !== '{' && escapeFlag !== '&';
	
		  var decorator = /\*/.test(open);
		  return {
		    type: decorator ? 'Decorator' : 'MustacheStatement',
		    path: path,
		    params: params,
		    hash: hash,
		    escaped: escaped,
		    strip: strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
		function prepareRawBlock(openRawBlock, contents, close, locInfo) {
		  validateClose(openRawBlock, close);
	
		  locInfo = this.locInfo(locInfo);
		  var program = {
		    type: 'Program',
		    body: contents,
		    strip: {},
		    loc: locInfo
		  };
	
		  return {
		    type: 'BlockStatement',
		    path: openRawBlock.path,
		    params: openRawBlock.params,
		    hash: openRawBlock.hash,
		    program: program,
		    openStrip: {},
		    inverseStrip: {},
		    closeStrip: {},
		    loc: locInfo
		  };
		}
	
		function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
		  if (close && close.path) {
		    validateClose(openBlock, close);
		  }
	
		  var decorator = /\*/.test(openBlock.open);
	
		  program.blockParams = openBlock.blockParams;
	
		  var inverse = undefined,
		      inverseStrip = undefined;
	
		  if (inverseAndProgram) {
		    if (decorator) {
		      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
		    }
	
		    if (inverseAndProgram.chain) {
		      inverseAndProgram.program.body[0].closeStrip = close.strip;
		    }
	
		    inverseStrip = inverseAndProgram.strip;
		    inverse = inverseAndProgram.program;
		  }
	
		  if (inverted) {
		    inverted = inverse;
		    inverse = program;
		    program = inverted;
		  }
	
		  return {
		    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
		    path: openBlock.path,
		    params: openBlock.params,
		    hash: openBlock.hash,
		    program: program,
		    inverse: inverse,
		    openStrip: openBlock.strip,
		    inverseStrip: inverseStrip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
		function prepareProgram(statements, loc) {
		  if (!loc && statements.length) {
		    var firstLoc = statements[0].loc,
		        lastLoc = statements[statements.length - 1].loc;
	
		    /* istanbul ignore else */
		    if (firstLoc && lastLoc) {
		      loc = {
		        source: firstLoc.source,
		        start: {
		          line: firstLoc.start.line,
		          column: firstLoc.start.column
		        },
		        end: {
		          line: lastLoc.end.line,
		          column: lastLoc.end.column
		        }
		      };
		    }
		  }
	
		  return {
		    type: 'Program',
		    body: statements,
		    strip: {},
		    loc: loc
		  };
		}
	
		function preparePartialBlock(open, program, close, locInfo) {
		  validateClose(open, close);
	
		  return {
		    type: 'PartialBlockStatement',
		    name: open.path,
		    params: open.params,
		    hash: open.hash,
		    program: program,
		    openStrip: open.strip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		/* eslint-disable new-cap */
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.Compiler = Compiler;
		exports.precompile = precompile;
		exports.compile = compile;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _utils = __webpack_require__(5);
	
		var _ast = __webpack_require__(21);
	
		var _ast2 = _interopRequireDefault(_ast);
	
		var slice = [].slice;
	
		function Compiler() {}
	
		// the foundHelper register will disambiguate helper lookup from finding a
		// function in a context. This is necessary for mustache compatibility, which
		// requires that context functions in blocks are evaluated by blockHelperMissing,
		// and then proceed as if the resulting value was provided to blockHelperMissing.
	
		Compiler.prototype = {
		  compiler: Compiler,
	
		  equals: function equals(other) {
		    var len = this.opcodes.length;
		    if (other.opcodes.length !== len) {
		      return false;
		    }
	
		    for (var i = 0; i < len; i++) {
		      var opcode = this.opcodes[i],
		          otherOpcode = other.opcodes[i];
		      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
		        return false;
		      }
		    }
	
		    // We know that length is the same between the two arrays because they are directly tied
		    // to the opcode behavior above.
		    len = this.children.length;
		    for (var i = 0; i < len; i++) {
		      if (!this.children[i].equals(other.children[i])) {
		        return false;
		      }
		    }
	
		    return true;
		  },
	
		  guid: 0,
	
		  compile: function compile(program, options) {
		    this.sourceNode = [];
		    this.opcodes = [];
		    this.children = [];
		    this.options = options;
		    this.stringParams = options.stringParams;
		    this.trackIds = options.trackIds;
	
		    options.blockParams = options.blockParams || [];
	
		    // These changes will propagate to the other compiler components
		    var knownHelpers = options.knownHelpers;
		    options.knownHelpers = {
		      'helperMissing': true,
		      'blockHelperMissing': true,
		      'each': true,
		      'if': true,
		      'unless': true,
		      'with': true,
		      'log': true,
		      'lookup': true
		    };
		    if (knownHelpers) {
		      for (var _name in knownHelpers) {
		        /* istanbul ignore else */
		        if (_name in knownHelpers) {
		          options.knownHelpers[_name] = knownHelpers[_name];
		        }
		      }
		    }
	
		    return this.accept(program);
		  },
	
		  compileProgram: function compileProgram(program) {
		    var childCompiler = new this.compiler(),
		        // eslint-disable-line new-cap
		    result = childCompiler.compile(program, this.options),
		        guid = this.guid++;
	
		    this.usePartial = this.usePartial || result.usePartial;
	
		    this.children[guid] = result;
		    this.useDepths = this.useDepths || result.useDepths;
	
		    return guid;
		  },
	
		  accept: function accept(node) {
		    /* istanbul ignore next: Sanity code */
		    if (!this[node.type]) {
		      throw new _exception2['default']('Unknown type: ' + node.type, node);
		    }
	
		    this.sourceNode.unshift(node);
		    var ret = this[node.type](node);
		    this.sourceNode.shift();
		    return ret;
		  },
	
		  Program: function Program(program) {
		    this.options.blockParams.unshift(program.blockParams);
	
		    var body = program.body,
		        bodyLength = body.length;
		    for (var i = 0; i < bodyLength; i++) {
		      this.accept(body[i]);
		    }
	
		    this.options.blockParams.shift();
	
		    this.isSimple = bodyLength === 1;
		    this.blockParams = program.blockParams ? program.blockParams.length : 0;
	
		    return this;
		  },
	
		  BlockStatement: function BlockStatement(block) {
		    transformLiteralToPath(block);
	
		    var program = block.program,
		        inverse = block.inverse;
	
		    program = program && this.compileProgram(program);
		    inverse = inverse && this.compileProgram(inverse);
	
		    var type = this.classifySexpr(block);
	
		    if (type === 'helper') {
		      this.helperSexpr(block, program, inverse);
		    } else if (type === 'simple') {
		      this.simpleSexpr(block);
	
		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('blockValue', block.path.original);
		    } else {
		      this.ambiguousSexpr(block, program, inverse);
	
		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('ambiguousBlockValue');
		    }
	
		    this.opcode('append');
		  },
	
		  DecoratorBlock: function DecoratorBlock(decorator) {
		    var program = decorator.program && this.compileProgram(decorator.program);
		    var params = this.setupFullMustacheParams(decorator, program, undefined),
		        path = decorator.path;
	
		    this.useDecorators = true;
		    this.opcode('registerDecorator', params.length, path.original);
		  },
	
		  PartialStatement: function PartialStatement(partial) {
		    this.usePartial = true;
	
		    var program = partial.program;
		    if (program) {
		      program = this.compileProgram(partial.program);
		    }
	
		    var params = partial.params;
		    if (params.length > 1) {
		      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
		    } else if (!params.length) {
		      if (this.options.explicitPartialContext) {
		        this.opcode('pushLiteral', 'undefined');
		      } else {
		        params.push({ type: 'PathExpression', parts: [], depth: 0 });
		      }
		    }
	
		    var partialName = partial.name.original,
		        isDynamic = partial.name.type === 'SubExpression';
		    if (isDynamic) {
		      this.accept(partial.name);
		    }
	
		    this.setupFullMustacheParams(partial, program, undefined, true);
	
		    var indent = partial.indent || '';
		    if (this.options.preventIndent && indent) {
		      this.opcode('appendContent', indent);
		      indent = '';
		    }
	
		    this.opcode('invokePartial', isDynamic, partialName, indent);
		    this.opcode('append');
		  },
		  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
		    this.PartialStatement(partialBlock);
		  },
	
		  MustacheStatement: function MustacheStatement(mustache) {
		    this.SubExpression(mustache);
	
		    if (mustache.escaped && !this.options.noEscape) {
		      this.opcode('appendEscaped');
		    } else {
		      this.opcode('append');
		    }
		  },
		  Decorator: function Decorator(decorator) {
		    this.DecoratorBlock(decorator);
		  },
	
		  ContentStatement: function ContentStatement(content) {
		    if (content.value) {
		      this.opcode('appendContent', content.value);
		    }
		  },
	
		  CommentStatement: function CommentStatement() {},
	
		  SubExpression: function SubExpression(sexpr) {
		    transformLiteralToPath(sexpr);
		    var type = this.classifySexpr(sexpr);
	
		    if (type === 'simple') {
		      this.simpleSexpr(sexpr);
		    } else if (type === 'helper') {
		      this.helperSexpr(sexpr);
		    } else {
		      this.ambiguousSexpr(sexpr);
		    }
		  },
		  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
		    var path = sexpr.path,
		        name = path.parts[0],
		        isBlock = program != null || inverse != null;
	
		    this.opcode('getContext', path.depth);
	
		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);
	
		    path.strict = true;
		    this.accept(path);
	
		    this.opcode('invokeAmbiguous', name, isBlock);
		  },
	
		  simpleSexpr: function simpleSexpr(sexpr) {
		    var path = sexpr.path;
		    path.strict = true;
		    this.accept(path);
		    this.opcode('resolvePossibleLambda');
		  },
	
		  helperSexpr: function helperSexpr(sexpr, program, inverse) {
		    var params = this.setupFullMustacheParams(sexpr, program, inverse),
		        path = sexpr.path,
		        name = path.parts[0];
	
		    if (this.options.knownHelpers[name]) {
		      this.opcode('invokeKnownHelper', params.length, name);
		    } else if (this.options.knownHelpersOnly) {
		      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
		    } else {
		      path.strict = true;
		      path.falsy = true;
	
		      this.accept(path);
		      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
		    }
		  },
	
		  PathExpression: function PathExpression(path) {
		    this.addDepth(path.depth);
		    this.opcode('getContext', path.depth);
	
		    var name = path.parts[0],
		        scoped = _ast2['default'].helpers.scopedId(path),
		        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
	
		    if (blockParamId) {
		      this.opcode('lookupBlockParam', blockParamId, path.parts);
		    } else if (!name) {
		      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
		      this.opcode('pushContext');
		    } else if (path.data) {
		      this.options.data = true;
		      this.opcode('lookupData', path.depth, path.parts, path.strict);
		    } else {
		      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
		    }
		  },
	
		  StringLiteral: function StringLiteral(string) {
		    this.opcode('pushString', string.value);
		  },
	
		  NumberLiteral: function NumberLiteral(number) {
		    this.opcode('pushLiteral', number.value);
		  },
	
		  BooleanLiteral: function BooleanLiteral(bool) {
		    this.opcode('pushLiteral', bool.value);
		  },
	
		  UndefinedLiteral: function UndefinedLiteral() {
		    this.opcode('pushLiteral', 'undefined');
		  },
	
		  NullLiteral: function NullLiteral() {
		    this.opcode('pushLiteral', 'null');
		  },
	
		  Hash: function Hash(hash) {
		    var pairs = hash.pairs,
		        i = 0,
		        l = pairs.length;
	
		    this.opcode('pushHash');
	
		    for (; i < l; i++) {
		      this.pushParam(pairs[i].value);
		    }
		    while (i--) {
		      this.opcode('assignToHash', pairs[i].key);
		    }
		    this.opcode('popHash');
		  },
	
		  // HELPERS
		  opcode: function opcode(name) {
		    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
		  },
	
		  addDepth: function addDepth(depth) {
		    if (!depth) {
		      return;
		    }
	
		    this.useDepths = true;
		  },
	
		  classifySexpr: function classifySexpr(sexpr) {
		    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);
	
		    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
	
		    // a mustache is an eligible helper if:
		    // * its id is simple (a single part, not `this` or `..`)
		    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);
	
		    // if a mustache is an eligible helper but not a definite
		    // helper, it is ambiguous, and will be resolved in a later
		    // pass or at runtime.
		    var isEligible = !isBlockParam && (isHelper || isSimple);
	
		    // if ambiguous, we can possibly resolve the ambiguity now
		    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
		    if (isEligible && !isHelper) {
		      var _name2 = sexpr.path.parts[0],
		          options = this.options;
	
		      if (options.knownHelpers[_name2]) {
		        isHelper = true;
		      } else if (options.knownHelpersOnly) {
		        isEligible = false;
		      }
		    }
	
		    if (isHelper) {
		      return 'helper';
		    } else if (isEligible) {
		      return 'ambiguous';
		    } else {
		      return 'simple';
		    }
		  },
	
		  pushParams: function pushParams(params) {
		    for (var i = 0, l = params.length; i < l; i++) {
		      this.pushParam(params[i]);
		    }
		  },
	
		  pushParam: function pushParam(val) {
		    var value = val.value != null ? val.value : val.original || '';
	
		    if (this.stringParams) {
		      if (value.replace) {
		        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
		      }
	
		      if (val.depth) {
		        this.addDepth(val.depth);
		      }
		      this.opcode('getContext', val.depth || 0);
		      this.opcode('pushStringParam', value, val.type);
	
		      if (val.type === 'SubExpression') {
		        // SubExpressions get evaluated and passed in
		        // in string params mode.
		        this.accept(val);
		      }
		    } else {
		      if (this.trackIds) {
		        var blockParamIndex = undefined;
		        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
		          blockParamIndex = this.blockParamIndex(val.parts[0]);
		        }
		        if (blockParamIndex) {
		          var blockParamChild = val.parts.slice(1).join('.');
		          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
		        } else {
		          value = val.original || value;
		          if (value.replace) {
		            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
		          }
	
		          this.opcode('pushId', val.type, value);
		        }
		      }
		      this.accept(val);
		    }
		  },
	
		  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
		    var params = sexpr.params;
		    this.pushParams(params);
	
		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);
	
		    if (sexpr.hash) {
		      this.accept(sexpr.hash);
		    } else {
		      this.opcode('emptyHash', omitEmpty);
		    }
	
		    return params;
		  },
	
		  blockParamIndex: function blockParamIndex(name) {
		    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
		      var blockParams = this.options.blockParams[depth],
		          param = blockParams && _utils.indexOf(blockParams, name);
		      if (blockParams && param >= 0) {
		        return [depth, param];
		      }
		    }
		  }
		};
	
		function precompile(input, options, env) {
		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
		  }
	
		  options = options || {};
		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }
	
		  var ast = env.parse(input, options),
		      environment = new env.Compiler().compile(ast, options);
		  return new env.JavaScriptCompiler().compile(environment, options);
		}
	
		function compile(input, options, env) {
		  if (options === undefined) options = {};
	
		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
		  }
	
		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }
	
		  var compiled = undefined;
	
		  function compileInput() {
		    var ast = env.parse(input, options),
		        environment = new env.Compiler().compile(ast, options),
		        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
		    return env.template(templateSpec);
		  }
	
		  // Template is only compiled on first use and cached after that point.
		  function ret(context, execOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled.call(this, context, execOptions);
		  }
		  ret._setup = function (setupOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._setup(setupOptions);
		  };
		  ret._child = function (i, data, blockParams, depths) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._child(i, data, blockParams, depths);
		  };
		  return ret;
		}
	
		function argEquals(a, b) {
		  if (a === b) {
		    return true;
		  }
	
		  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
		    for (var i = 0; i < a.length; i++) {
		      if (!argEquals(a[i], b[i])) {
		        return false;
		      }
		    }
		    return true;
		  }
		}
	
		function transformLiteralToPath(sexpr) {
		  if (!sexpr.path.parts) {
		    var literal = sexpr.path;
		    // Casting to string here to make false and 0 literal values play nicely with the rest
		    // of the system.
		    sexpr.path = {
		      type: 'PathExpression',
		      data: false,
		      depth: 0,
		      parts: [literal.original + ''],
		      original: literal.original + '',
		      loc: literal.loc
		    };
		  }
		}
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _base = __webpack_require__(4);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _utils = __webpack_require__(5);
	
		var _codeGen = __webpack_require__(29);
	
		var _codeGen2 = _interopRequireDefault(_codeGen);
	
		function Literal(value) {
		  this.value = value;
		}
	
		function JavaScriptCompiler() {}
	
		JavaScriptCompiler.prototype = {
		  // PUBLIC API: You can override these methods in a subclass to provide
		  // alternative compiled forms for name lookup and buffering semantics
		  nameLookup: function nameLookup(parent, name /* , type*/) {
		    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
		      return [parent, '.', name];
		    } else {
		      return [parent, '[', JSON.stringify(name), ']'];
		    }
		  },
		  depthedLookup: function depthedLookup(name) {
		    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
		  },
	
		  compilerInfo: function compilerInfo() {
		    var revision = _base.COMPILER_REVISION,
		        versions = _base.REVISION_CHANGES[revision];
		    return [revision, versions];
		  },
	
		  appendToBuffer: function appendToBuffer(source, location, explicit) {
		    // Force a source as this simplifies the merge logic.
		    if (!_utils.isArray(source)) {
		      source = [source];
		    }
		    source = this.source.wrap(source, location);
	
		    if (this.environment.isSimple) {
		      return ['return ', source, ';'];
		    } else if (explicit) {
		      // This is a case where the buffer operation occurs as a child of another
		      // construct, generally braces. We have to explicitly output these buffer
		      // operations to ensure that the emitted code goes in the correct location.
		      return ['buffer += ', source, ';'];
		    } else {
		      source.appendToBuffer = true;
		      return source;
		    }
		  },
	
		  initializeBuffer: function initializeBuffer() {
		    return this.quotedString('');
		  },
		  // END PUBLIC API
	
		  compile: function compile(environment, options, context, asObject) {
		    this.environment = environment;
		    this.options = options;
		    this.stringParams = this.options.stringParams;
		    this.trackIds = this.options.trackIds;
		    this.precompile = !asObject;
	
		    this.name = this.environment.name;
		    this.isChild = !!context;
		    this.context = context || {
		      decorators: [],
		      programs: [],
		      environments: []
		    };
	
		    this.preamble();
	
		    this.stackSlot = 0;
		    this.stackVars = [];
		    this.aliases = {};
		    this.registers = { list: [] };
		    this.hashes = [];
		    this.compileStack = [];
		    this.inlineStack = [];
		    this.blockParams = [];
	
		    this.compileChildren(environment, options);
	
		    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
		    this.useBlockParams = this.useBlockParams || environment.useBlockParams;
	
		    var opcodes = environment.opcodes,
		        opcode = undefined,
		        firstLoc = undefined,
		        i = undefined,
		        l = undefined;
	
		    for (i = 0, l = opcodes.length; i < l; i++) {
		      opcode = opcodes[i];
	
		      this.source.currentLocation = opcode.loc;
		      firstLoc = firstLoc || opcode.loc;
		      this[opcode.opcode].apply(this, opcode.args);
		    }
	
		    // Flush any trailing content that might be pending.
		    this.source.currentLocation = firstLoc;
		    this.pushSource('');
	
		    /* istanbul ignore next */
		    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
		      throw new _exception2['default']('Compile completed with content left on stack');
		    }
	
		    if (!this.decorators.isEmpty()) {
		      this.useDecorators = true;
	
		      this.decorators.prepend('var decorators = container.decorators;\n');
		      this.decorators.push('return fn;');
	
		      if (asObject) {
		        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
		      } else {
		        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
		        this.decorators.push('}\n');
		        this.decorators = this.decorators.merge();
		      }
		    } else {
		      this.decorators = undefined;
		    }
	
		    var fn = this.createFunctionContext(asObject);
		    if (!this.isChild) {
		      var ret = {
		        compiler: this.compilerInfo(),
		        main: fn
		      };
	
		      if (this.decorators) {
		        ret.main_d = this.decorators; // eslint-disable-line camelcase
		        ret.useDecorators = true;
		      }
	
		      var _context = this.context;
		      var programs = _context.programs;
		      var decorators = _context.decorators;
	
		      for (i = 0, l = programs.length; i < l; i++) {
		        if (programs[i]) {
		          ret[i] = programs[i];
		          if (decorators[i]) {
		            ret[i + '_d'] = decorators[i];
		            ret.useDecorators = true;
		          }
		        }
		      }
	
		      if (this.environment.usePartial) {
		        ret.usePartial = true;
		      }
		      if (this.options.data) {
		        ret.useData = true;
		      }
		      if (this.useDepths) {
		        ret.useDepths = true;
		      }
		      if (this.useBlockParams) {
		        ret.useBlockParams = true;
		      }
		      if (this.options.compat) {
		        ret.compat = true;
		      }
	
		      if (!asObject) {
		        ret.compiler = JSON.stringify(ret.compiler);
	
		        this.source.currentLocation = { start: { line: 1, column: 0 } };
		        ret = this.objectLiteral(ret);
	
		        if (options.srcName) {
		          ret = ret.toStringWithSourceMap({ file: options.destName });
		          ret.map = ret.map && ret.map.toString();
		        } else {
		          ret = ret.toString();
		        }
		      } else {
		        ret.compilerOptions = this.options;
		      }
	
		      return ret;
		    } else {
		      return fn;
		    }
		  },
	
		  preamble: function preamble() {
		    // track the last context pushed into place to allow skipping the
		    // getContext opcode when it would be a noop
		    this.lastContext = 0;
		    this.source = new _codeGen2['default'](this.options.srcName);
		    this.decorators = new _codeGen2['default'](this.options.srcName);
		  },
	
		  createFunctionContext: function createFunctionContext(asObject) {
		    var varDeclarations = '';
	
		    var locals = this.stackVars.concat(this.registers.list);
		    if (locals.length > 0) {
		      varDeclarations += ', ' + locals.join(', ');
		    }
	
		    // Generate minimizer alias mappings
		    //
		    // When using true SourceNodes, this will update all references to the given alias
		    // as the source nodes are reused in situ. For the non-source node compilation mode,
		    // aliases will not be used, but this case is already being run on the client and
		    // we aren't concern about minimizing the template size.
		    var aliasCount = 0;
		    for (var alias in this.aliases) {
		      // eslint-disable-line guard-for-in
		      var node = this.aliases[alias];
	
		      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
		        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
		        node.children[0] = 'alias' + aliasCount;
		      }
		    }
	
		    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];
	
		    if (this.useBlockParams || this.useDepths) {
		      params.push('blockParams');
		    }
		    if (this.useDepths) {
		      params.push('depths');
		    }
	
		    // Perform a second pass over the output to merge content when possible
		    var source = this.mergeSource(varDeclarations);
	
		    if (asObject) {
		      params.push(source);
	
		      return Function.apply(this, params);
		    } else {
		      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
		    }
		  },
		  mergeSource: function mergeSource(varDeclarations) {
		    var isSimple = this.environment.isSimple,
		        appendOnly = !this.forceBuffer,
		        appendFirst = undefined,
		        sourceSeen = undefined,
		        bufferStart = undefined,
		        bufferEnd = undefined;
		    this.source.each(function (line) {
		      if (line.appendToBuffer) {
		        if (bufferStart) {
		          line.prepend('  + ');
		        } else {
		          bufferStart = line;
		        }
		        bufferEnd = line;
		      } else {
		        if (bufferStart) {
		          if (!sourceSeen) {
		            appendFirst = true;
		          } else {
		            bufferStart.prepend('buffer += ');
		          }
		          bufferEnd.add(';');
		          bufferStart = bufferEnd = undefined;
		        }
	
		        sourceSeen = true;
		        if (!isSimple) {
		          appendOnly = false;
		        }
		      }
		    });
	
		    if (appendOnly) {
		      if (bufferStart) {
		        bufferStart.prepend('return ');
		        bufferEnd.add(';');
		      } else if (!sourceSeen) {
		        this.source.push('return "";');
		      }
		    } else {
		      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());
	
		      if (bufferStart) {
		        bufferStart.prepend('return buffer + ');
		        bufferEnd.add(';');
		      } else {
		        this.source.push('return buffer;');
		      }
		    }
	
		    if (varDeclarations) {
		      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
		    }
	
		    return this.source.merge();
		  },
	
		  // [blockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // On stack, after: return value of blockHelperMissing
		  //
		  // The purpose of this opcode is to take a block of the form
		  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
		  // replace it on the stack with the result of properly
		  // invoking blockHelperMissing.
		  blockValue: function blockValue(name) {
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs(name, 0, params);
	
		    var blockName = this.popStack();
		    params.splice(1, 0, blockName);
	
		    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
		  },
	
		  // [ambiguousBlockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // Compiler value, before: lastHelper=value of last found helper, if any
		  // On stack, after, if no lastHelper: same as [blockValue]
		  // On stack, after, if lastHelper: value
		  ambiguousBlockValue: function ambiguousBlockValue() {
		    // We're being a bit cheeky and reusing the options value from the prior exec
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs('', 0, params, true);
	
		    this.flushInline();
	
		    var current = this.topStack();
		    params.splice(1, 0, current);
	
		    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
		  },
	
		  // [appendContent]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  //
		  // Appends the string value of `content` to the current buffer
		  appendContent: function appendContent(content) {
		    if (this.pendingContent) {
		      content = this.pendingContent + content;
		    } else {
		      this.pendingLocation = this.source.currentLocation;
		    }
	
		    this.pendingContent = content;
		  },
	
		  // [append]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Coerces `value` to a String and appends it to the current buffer.
		  //
		  // If `value` is truthy, or 0, it is coerced into a string and appended
		  // Otherwise, the empty string is appended
		  append: function append() {
		    if (this.isInline()) {
		      this.replaceStack(function (current) {
		        return [' != null ? ', current, ' : ""'];
		      });
	
		      this.pushSource(this.appendToBuffer(this.popStack()));
		    } else {
		      var local = this.popStack();
		      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
		      if (this.environment.isSimple) {
		        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
		      }
		    }
		  },
	
		  // [appendEscaped]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Escape `value` and append it to the buffer
		  appendEscaped: function appendEscaped() {
		    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
		  },
	
		  // [getContext]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  // Compiler value, after: lastContext=depth
		  //
		  // Set the value of the `lastContext` compiler value to the depth
		  getContext: function getContext(depth) {
		    this.lastContext = depth;
		  },
	
		  // [pushContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext, ...
		  //
		  // Pushes the value of the current context onto the stack.
		  pushContext: function pushContext() {
		    this.pushStackLiteral(this.contextName(this.lastContext));
		  },
	
		  // [lookupOnContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext[name], ...
		  //
		  // Looks up the value of `name` on the current context and pushes
		  // it onto the stack.
		  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
		    var i = 0;
	
		    if (!scoped && this.options.compat && !this.lastContext) {
		      // The depthed query is expected to handle the undefined logic for the root level that
		      // is implemented below, so we evaluate that directly in compat mode
		      this.push(this.depthedLookup(parts[i++]));
		    } else {
		      this.pushContext();
		    }
	
		    this.resolvePath('context', parts, i, falsy, strict);
		  },
	
		  // [lookupBlockParam]
		  //
		  // On stack, before: ...
		  // On stack, after: blockParam[name], ...
		  //
		  // Looks up the value of `parts` on the given block param and pushes
		  // it onto the stack.
		  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
		    this.useBlockParams = true;
	
		    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
		    this.resolvePath('context', parts, 1);
		  },
	
		  // [lookupData]
		  //
		  // On stack, before: ...
		  // On stack, after: data, ...
		  //
		  // Push the data lookup operator
		  lookupData: function lookupData(depth, parts, strict) {
		    if (!depth) {
		      this.pushStackLiteral('data');
		    } else {
		      this.pushStackLiteral('container.data(data, ' + depth + ')');
		    }
	
		    this.resolvePath('data', parts, 0, true, strict);
		  },
	
		  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
		    // istanbul ignore next
	
		    var _this = this;
	
		    if (this.options.strict || this.options.assumeObjects) {
		      this.push(strictLookup(this.options.strict && strict, this, parts, type));
		      return;
		    }
	
		    var len = parts.length;
		    for (; i < len; i++) {
		      /* eslint-disable no-loop-func */
		      this.replaceStack(function (current) {
		        var lookup = _this.nameLookup(current, parts[i], type);
		        // We want to ensure that zero and false are handled properly if the context (falsy flag)
		        // needs to have the special handling for these values.
		        if (!falsy) {
		          return [' != null ? ', lookup, ' : ', current];
		        } else {
		          // Otherwise we can use generic falsy handling
		          return [' && ', lookup];
		        }
		      });
		      /* eslint-enable no-loop-func */
		    }
		  },
	
		  // [resolvePossibleLambda]
		  //
		  // On stack, before: value, ...
		  // On stack, after: resolved value, ...
		  //
		  // If the `value` is a lambda, replace it on the stack by
		  // the return value of the lambda
		  resolvePossibleLambda: function resolvePossibleLambda() {
		    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
		  },
	
		  // [pushStringParam]
		  //
		  // On stack, before: ...
		  // On stack, after: string, currentContext, ...
		  //
		  // This opcode is designed for use in string mode, which
		  // provides the string value of a parameter along with its
		  // depth rather than resolving it immediately.
		  pushStringParam: function pushStringParam(string, type) {
		    this.pushContext();
		    this.pushString(type);
	
		    // If it's a subexpression, the string result
		    // will be pushed after this opcode.
		    if (type !== 'SubExpression') {
		      if (typeof string === 'string') {
		        this.pushString(string);
		      } else {
		        this.pushStackLiteral(string);
		      }
		    }
		  },
	
		  emptyHash: function emptyHash(omitEmpty) {
		    if (this.trackIds) {
		      this.push('{}'); // hashIds
		    }
		    if (this.stringParams) {
		      this.push('{}'); // hashContexts
		      this.push('{}'); // hashTypes
		    }
		    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
		  },
		  pushHash: function pushHash() {
		    if (this.hash) {
		      this.hashes.push(this.hash);
		    }
		    this.hash = { values: [], types: [], contexts: [], ids: [] };
		  },
		  popHash: function popHash() {
		    var hash = this.hash;
		    this.hash = this.hashes.pop();
	
		    if (this.trackIds) {
		      this.push(this.objectLiteral(hash.ids));
		    }
		    if (this.stringParams) {
		      this.push(this.objectLiteral(hash.contexts));
		      this.push(this.objectLiteral(hash.types));
		    }
	
		    this.push(this.objectLiteral(hash.values));
		  },
	
		  // [pushString]
		  //
		  // On stack, before: ...
		  // On stack, after: quotedString(string), ...
		  //
		  // Push a quoted version of `string` onto the stack
		  pushString: function pushString(string) {
		    this.pushStackLiteral(this.quotedString(string));
		  },
	
		  // [pushLiteral]
		  //
		  // On stack, before: ...
		  // On stack, after: value, ...
		  //
		  // Pushes a value onto the stack. This operation prevents
		  // the compiler from creating a temporary variable to hold
		  // it.
		  pushLiteral: function pushLiteral(value) {
		    this.pushStackLiteral(value);
		  },
	
		  // [pushProgram]
		  //
		  // On stack, before: ...
		  // On stack, after: program(guid), ...
		  //
		  // Push a program expression onto the stack. This takes
		  // a compile-time guid and converts it into a runtime-accessible
		  // expression.
		  pushProgram: function pushProgram(guid) {
		    if (guid != null) {
		      this.pushStackLiteral(this.programExpression(guid));
		    } else {
		      this.pushStackLiteral(null);
		    }
		  },
	
		  // [registerDecorator]
		  //
		  // On stack, before: hash, program, params..., ...
		  // On stack, after: ...
		  //
		  // Pops off the decorator's parameters, invokes the decorator,
		  // and inserts the decorator into the decorators list.
		  registerDecorator: function registerDecorator(paramSize, name) {
		    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
		        options = this.setupHelperArgs(name, paramSize);
	
		    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
		  },
	
		  // [invokeHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // Pops off the helper's parameters, invokes the helper,
		  // and pushes the helper's return value onto the stack.
		  //
		  // If the helper is not found, `helperMissing` is called.
		  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
		    var nonHelper = this.popStack(),
		        helper = this.setupHelper(paramSize, name),
		        simple = isSimple ? [helper.name, ' || '] : '';
	
		    var lookup = ['('].concat(simple, nonHelper);
		    if (!this.options.strict) {
		      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
		    }
		    lookup.push(')');
	
		    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
		  },
	
		  // [invokeKnownHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // This operation is used when the helper is known to exist,
		  // so a `helperMissing` fallback is not required.
		  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
		    var helper = this.setupHelper(paramSize, name);
		    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
		  },
	
		  // [invokeAmbiguous]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of disambiguation
		  //
		  // This operation is used when an expression like `{{foo}}`
		  // is provided, but we don't know at compile-time whether it
		  // is a helper or a path.
		  //
		  // This operation emits more code than the other options,
		  // and can be avoided by passing the `knownHelpers` and
		  // `knownHelpersOnly` flags at compile-time.
		  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
		    this.useRegister('helper');
	
		    var nonHelper = this.popStack();
	
		    this.emptyHash();
		    var helper = this.setupHelper(0, name, helperCall);
	
		    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
	
		    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
		    if (!this.options.strict) {
		      lookup[0] = '(helper = ';
		      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
		    }
	
		    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
		  },
	
		  // [invokePartial]
		  //
		  // On stack, before: context, ...
		  // On stack after: result of partial invocation
		  //
		  // This operation pops off a context, invokes a partial with that context,
		  // and pushes the result of the invocation back.
		  invokePartial: function invokePartial(isDynamic, name, indent) {
		    var params = [],
		        options = this.setupParams(name, 1, params);
	
		    if (isDynamic) {
		      name = this.popStack();
		      delete options.name;
		    }
	
		    if (indent) {
		      options.indent = JSON.stringify(indent);
		    }
		    options.helpers = 'helpers';
		    options.partials = 'partials';
		    options.decorators = 'container.decorators';
	
		    if (!isDynamic) {
		      params.unshift(this.nameLookup('partials', name, 'partial'));
		    } else {
		      params.unshift(name);
		    }
	
		    if (this.options.compat) {
		      options.depths = 'depths';
		    }
		    options = this.objectLiteral(options);
		    params.push(options);
	
		    this.push(this.source.functionCall('container.invokePartial', '', params));
		  },
	
		  // [assignToHash]
		  //
		  // On stack, before: value, ..., hash, ...
		  // On stack, after: ..., hash, ...
		  //
		  // Pops a value off the stack and assigns it to the current hash
		  assignToHash: function assignToHash(key) {
		    var value = this.popStack(),
		        context = undefined,
		        type = undefined,
		        id = undefined;
	
		    if (this.trackIds) {
		      id = this.popStack();
		    }
		    if (this.stringParams) {
		      type = this.popStack();
		      context = this.popStack();
		    }
	
		    var hash = this.hash;
		    if (context) {
		      hash.contexts[key] = context;
		    }
		    if (type) {
		      hash.types[key] = type;
		    }
		    if (id) {
		      hash.ids[key] = id;
		    }
		    hash.values[key] = value;
		  },
	
		  pushId: function pushId(type, name, child) {
		    if (type === 'BlockParam') {
		      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
		    } else if (type === 'PathExpression') {
		      this.pushString(name);
		    } else if (type === 'SubExpression') {
		      this.pushStackLiteral('true');
		    } else {
		      this.pushStackLiteral('null');
		    }
		  },
	
		  // HELPERS
	
		  compiler: JavaScriptCompiler,
	
		  compileChildren: function compileChildren(environment, options) {
		    var children = environment.children,
		        child = undefined,
		        compiler = undefined;
	
		    for (var i = 0, l = children.length; i < l; i++) {
		      child = children[i];
		      compiler = new this.compiler(); // eslint-disable-line new-cap
	
		      var index = this.matchExistingProgram(child);
	
		      if (index == null) {
		        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
		        index = this.context.programs.length;
		        child.index = index;
		        child.name = 'program' + index;
		        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
		        this.context.decorators[index] = compiler.decorators;
		        this.context.environments[index] = child;
	
		        this.useDepths = this.useDepths || compiler.useDepths;
		        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
		      } else {
		        child.index = index;
		        child.name = 'program' + index;
	
		        this.useDepths = this.useDepths || child.useDepths;
		        this.useBlockParams = this.useBlockParams || child.useBlockParams;
		      }
		    }
		  },
		  matchExistingProgram: function matchExistingProgram(child) {
		    for (var i = 0, len = this.context.environments.length; i < len; i++) {
		      var environment = this.context.environments[i];
		      if (environment && environment.equals(child)) {
		        return i;
		      }
		    }
		  },
	
		  programExpression: function programExpression(guid) {
		    var child = this.environment.children[guid],
		        programParams = [child.index, 'data', child.blockParams];
	
		    if (this.useBlockParams || this.useDepths) {
		      programParams.push('blockParams');
		    }
		    if (this.useDepths) {
		      programParams.push('depths');
		    }
	
		    return 'container.program(' + programParams.join(', ') + ')';
		  },
	
		  useRegister: function useRegister(name) {
		    if (!this.registers[name]) {
		      this.registers[name] = true;
		      this.registers.list.push(name);
		    }
		  },
	
		  push: function push(expr) {
		    if (!(expr instanceof Literal)) {
		      expr = this.source.wrap(expr);
		    }
	
		    this.inlineStack.push(expr);
		    return expr;
		  },
	
		  pushStackLiteral: function pushStackLiteral(item) {
		    this.push(new Literal(item));
		  },
	
		  pushSource: function pushSource(source) {
		    if (this.pendingContent) {
		      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
		      this.pendingContent = undefined;
		    }
	
		    if (source) {
		      this.source.push(source);
		    }
		  },
	
		  replaceStack: function replaceStack(callback) {
		    var prefix = ['('],
		        stack = undefined,
		        createdStack = undefined,
		        usedLiteral = undefined;
	
		    /* istanbul ignore next */
		    if (!this.isInline()) {
		      throw new _exception2['default']('replaceStack on non-inline');
		    }
	
		    // We want to merge the inline statement into the replacement statement via ','
		    var top = this.popStack(true);
	
		    if (top instanceof Literal) {
		      // Literals do not need to be inlined
		      stack = [top.value];
		      prefix = ['(', stack];
		      usedLiteral = true;
		    } else {
		      // Get or create the current stack name for use by the inline
		      createdStack = true;
		      var _name = this.incrStack();
	
		      prefix = ['((', this.push(_name), ' = ', top, ')'];
		      stack = this.topStack();
		    }
	
		    var item = callback.call(this, stack);
	
		    if (!usedLiteral) {
		      this.popStack();
		    }
		    if (createdStack) {
		      this.stackSlot--;
		    }
		    this.push(prefix.concat(item, ')'));
		  },
	
		  incrStack: function incrStack() {
		    this.stackSlot++;
		    if (this.stackSlot > this.stackVars.length) {
		      this.stackVars.push('stack' + this.stackSlot);
		    }
		    return this.topStackName();
		  },
		  topStackName: function topStackName() {
		    return 'stack' + this.stackSlot;
		  },
		  flushInline: function flushInline() {
		    var inlineStack = this.inlineStack;
		    this.inlineStack = [];
		    for (var i = 0, len = inlineStack.length; i < len; i++) {
		      var entry = inlineStack[i];
		      /* istanbul ignore if */
		      if (entry instanceof Literal) {
		        this.compileStack.push(entry);
		      } else {
		        var stack = this.incrStack();
		        this.pushSource([stack, ' = ', entry, ';']);
		        this.compileStack.push(stack);
		      }
		    }
		  },
		  isInline: function isInline() {
		    return this.inlineStack.length;
		  },
	
		  popStack: function popStack(wrapped) {
		    var inline = this.isInline(),
		        item = (inline ? this.inlineStack : this.compileStack).pop();
	
		    if (!wrapped && item instanceof Literal) {
		      return item.value;
		    } else {
		      if (!inline) {
		        /* istanbul ignore next */
		        if (!this.stackSlot) {
		          throw new _exception2['default']('Invalid stack pop');
		        }
		        this.stackSlot--;
		      }
		      return item;
		    }
		  },
	
		  topStack: function topStack() {
		    var stack = this.isInline() ? this.inlineStack : this.compileStack,
		        item = stack[stack.length - 1];
	
		    /* istanbul ignore if */
		    if (item instanceof Literal) {
		      return item.value;
		    } else {
		      return item;
		    }
		  },
	
		  contextName: function contextName(context) {
		    if (this.useDepths && context) {
		      return 'depths[' + context + ']';
		    } else {
		      return 'depth' + context;
		    }
		  },
	
		  quotedString: function quotedString(str) {
		    return this.source.quotedString(str);
		  },
	
		  objectLiteral: function objectLiteral(obj) {
		    return this.source.objectLiteral(obj);
		  },
	
		  aliasable: function aliasable(name) {
		    var ret = this.aliases[name];
		    if (ret) {
		      ret.referenceCount++;
		      return ret;
		    }
	
		    ret = this.aliases[name] = this.source.wrap(name);
		    ret.aliasable = true;
		    ret.referenceCount = 1;
	
		    return ret;
		  },
	
		  setupHelper: function setupHelper(paramSize, name, blockHelper) {
		    var params = [],
		        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
		    var foundHelper = this.nameLookup('helpers', name, 'helper'),
		        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');
	
		    return {
		      params: params,
		      paramsInit: paramsInit,
		      name: foundHelper,
		      callParams: [callContext].concat(params)
		    };
		  },
	
		  setupParams: function setupParams(helper, paramSize, params) {
		    var options = {},
		        contexts = [],
		        types = [],
		        ids = [],
		        objectArgs = !params,
		        param = undefined;
	
		    if (objectArgs) {
		      params = [];
		    }
	
		    options.name = this.quotedString(helper);
		    options.hash = this.popStack();
	
		    if (this.trackIds) {
		      options.hashIds = this.popStack();
		    }
		    if (this.stringParams) {
		      options.hashTypes = this.popStack();
		      options.hashContexts = this.popStack();
		    }
	
		    var inverse = this.popStack(),
		        program = this.popStack();
	
		    // Avoid setting fn and inverse if neither are set. This allows
		    // helpers to do a check for `if (options.fn)`
		    if (program || inverse) {
		      options.fn = program || 'container.noop';
		      options.inverse = inverse || 'container.noop';
		    }
	
		    // The parameters go on to the stack in order (making sure that they are evaluated in order)
		    // so we need to pop them off the stack in reverse order
		    var i = paramSize;
		    while (i--) {
		      param = this.popStack();
		      params[i] = param;
	
		      if (this.trackIds) {
		        ids[i] = this.popStack();
		      }
		      if (this.stringParams) {
		        types[i] = this.popStack();
		        contexts[i] = this.popStack();
		      }
		    }
	
		    if (objectArgs) {
		      options.args = this.source.generateArray(params);
		    }
	
		    if (this.trackIds) {
		      options.ids = this.source.generateArray(ids);
		    }
		    if (this.stringParams) {
		      options.types = this.source.generateArray(types);
		      options.contexts = this.source.generateArray(contexts);
		    }
	
		    if (this.options.data) {
		      options.data = 'data';
		    }
		    if (this.useBlockParams) {
		      options.blockParams = 'blockParams';
		    }
		    return options;
		  },
	
		  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
		    var options = this.setupParams(helper, paramSize, params);
		    options = this.objectLiteral(options);
		    if (useRegister) {
		      this.useRegister('options');
		      params.push('options');
		      return ['options=', options];
		    } else if (params) {
		      params.push(options);
		      return '';
		    } else {
		      return options;
		    }
		  }
		};
	
		(function () {
		  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');
	
		  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
	
		  for (var i = 0, l = reservedWords.length; i < l; i++) {
		    compilerWords[reservedWords[i]] = true;
		  }
		})();
	
		JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
		  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
		};
	
		function strictLookup(requireTerminal, compiler, parts, type) {
		  var stack = compiler.popStack(),
		      i = 0,
		      len = parts.length;
		  if (requireTerminal) {
		    len--;
		  }
	
		  for (; i < len; i++) {
		    stack = compiler.nameLookup(stack, parts[i], type);
		  }
	
		  if (requireTerminal) {
		    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
		  } else {
		    return stack;
		  }
		}
	
		exports['default'] = JavaScriptCompiler;
		module.exports = exports['default'];
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		/* global define */
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var SourceNode = undefined;
	
		try {
		  /* istanbul ignore next */
		  if (false) {
		    // We don't support this in AMD environments. For these environments, we asusme that
		    // they are running on the browser and thus have no need for the source-map library.
		    var SourceMap = require('source-map');
		    SourceNode = SourceMap.SourceNode;
		  }
		} catch (err) {}
		/* NOP */
	
		/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
		if (!SourceNode) {
		  SourceNode = function (line, column, srcFile, chunks) {
		    this.src = '';
		    if (chunks) {
		      this.add(chunks);
		    }
		  };
		  /* istanbul ignore next */
		  SourceNode.prototype = {
		    add: function add(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src += chunks;
		    },
		    prepend: function prepend(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src = chunks + this.src;
		    },
		    toStringWithSourceMap: function toStringWithSourceMap() {
		      return { code: this.toString() };
		    },
		    toString: function toString() {
		      return this.src;
		    }
		  };
		}
	
		function castChunk(chunk, codeGen, loc) {
		  if (_utils.isArray(chunk)) {
		    var ret = [];
	
		    for (var i = 0, len = chunk.length; i < len; i++) {
		      ret.push(codeGen.wrap(chunk[i], loc));
		    }
		    return ret;
		  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
		    // Handle primitives that the SourceNode will throw up on
		    return chunk + '';
		  }
		  return chunk;
		}
	
		function CodeGen(srcFile) {
		  this.srcFile = srcFile;
		  this.source = [];
		}
	
		CodeGen.prototype = {
		  isEmpty: function isEmpty() {
		    return !this.source.length;
		  },
		  prepend: function prepend(source, loc) {
		    this.source.unshift(this.wrap(source, loc));
		  },
		  push: function push(source, loc) {
		    this.source.push(this.wrap(source, loc));
		  },
	
		  merge: function merge() {
		    var source = this.empty();
		    this.each(function (line) {
		      source.add(['  ', line, '\n']);
		    });
		    return source;
		  },
	
		  each: function each(iter) {
		    for (var i = 0, len = this.source.length; i < len; i++) {
		      iter(this.source[i]);
		    }
		  },
	
		  empty: function empty() {
		    var loc = this.currentLocation || { start: {} };
		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
		  },
		  wrap: function wrap(chunk) {
		    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];
	
		    if (chunk instanceof SourceNode) {
		      return chunk;
		    }
	
		    chunk = castChunk(chunk, this, loc);
	
		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
		  },
	
		  functionCall: function functionCall(fn, type, params) {
		    params = this.generateList(params);
		    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
		  },
	
		  quotedString: function quotedString(str) {
		    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
		    .replace(/\u2029/g, '\\u2029') + '"';
		  },
	
		  objectLiteral: function objectLiteral(obj) {
		    var pairs = [];
	
		    for (var key in obj) {
		      if (obj.hasOwnProperty(key)) {
		        var value = castChunk(obj[key], this);
		        if (value !== 'undefined') {
		          pairs.push([this.quotedString(key), ':', value]);
		        }
		      }
		    }
	
		    var ret = this.generateList(pairs);
		    ret.prepend('{');
		    ret.add('}');
		    return ret;
		  },
	
		  generateList: function generateList(entries) {
		    var ret = this.empty();
	
		    for (var i = 0, len = entries.length; i < len; i++) {
		      if (i) {
		        ret.add(',');
		      }
	
		      ret.add(castChunk(entries[i], this));
		    }
	
		    return ret;
		  },
	
		  generateArray: function generateArray(entries) {
		    var ret = this.generateList(entries);
		    ret.prepend('[');
		    ret.add(']');
	
		    return ret;
		  }
		};
	
		exports['default'] = CodeGen;
		module.exports = exports['default'];
	
	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {//     Backbone.js 1.2.1
	
	//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Backbone may be freely distributed under the MIT license.
	//     For all details and documentation:
	//     http://backbonejs.org
	
	(function(factory) {
	
	  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
	  // We use `self` instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self == self && self) ||
	            (typeof global == 'object' && global.global == global && global);
	
	  // Set up Backbone appropriately for the environment. Start with AMD.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(338), __webpack_require__(312), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {
	      // Export global even in AMD case in case this script is loaded with
	      // others that may still expect a global Backbone.
	      root.Backbone = factory(root, exports, _, $);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
	  } else if (typeof exports !== 'undefined') {
	    var _ = require('underscore'), $;
	    try { $ = require('jquery'); } catch(e) {}
	    factory(root, exports, _, $);
	
	  // Finally, as a browser global.
	  } else {
	    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
	  }
	
	}(function(root, Backbone, _, $) {
	
	  // Initial Setup
	  // -------------
	
	  // Save the previous value of the `Backbone` variable, so that it can be
	  // restored later on, if `noConflict` is used.
	  var previousBackbone = root.Backbone;
	
	  // Create a local reference to a common array method we'll want to use later.
	  var slice = [].slice;
	
	  // Current version of the library. Keep in sync with `package.json`.
	  Backbone.VERSION = '1.2.1';
	
	  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
	  // the `$` variable.
	  Backbone.$ = $;
	
	  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
	  // to its previous owner. Returns a reference to this Backbone object.
	  Backbone.noConflict = function() {
	    root.Backbone = previousBackbone;
	    return this;
	  };
	
	  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
	  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
	  // set a `X-Http-Method-Override` header.
	  Backbone.emulateHTTP = false;
	
	  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
	  // `application/json` requests ... this will encode the body as
	  // `application/x-www-form-urlencoded` instead and will send the model in a
	  // form param named `model`.
	  Backbone.emulateJSON = false;
	
	  // Proxy Underscore methods to a Backbone class' prototype using a
	  // particular attribute as the data argument
	  var addMethod = function(length, method, attribute) {
	    switch (length) {
	      case 1: return function() {
	        return _[method](this[attribute]);
	      };
	      case 2: return function(value) {
	        return _[method](this[attribute], value);
	      };
	      case 3: return function(iteratee, context) {
	        return _[method](this[attribute], iteratee, context);
	      };
	      case 4: return function(iteratee, defaultVal, context) {
	        return _[method](this[attribute], iteratee, defaultVal, context);
	      };
	      default: return function() {
	        var args = slice.call(arguments);
	        args.unshift(this[attribute]);
	        return _[method].apply(_, args);
	      };
	    }
	  };
	  var addUnderscoreMethods = function(Class, methods, attribute) {
	    _.each(methods, function(length, method) {
	      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
	    });
	  };
	
	  // Backbone.Events
	  // ---------------
	
	  // A module that can be mixed in to *any object* in order to provide it with
	  // custom events. You may bind with `on` or remove with `off` callback
	  // functions to an event; `trigger`-ing an event fires all callbacks in
	  // succession.
	  //
	  //     var object = {};
	  //     _.extend(object, Backbone.Events);
	  //     object.on('expand', function(){ alert('expanded'); });
	  //     object.trigger('expand');
	  //
	  var Events = Backbone.Events = {};
	
	  // Regular expression used to split event strings.
	  var eventSplitter = /\s+/;
	
	  // Iterates over the standard `event, callback` (as well as the fancy multiple
	  // space-separated events `"change blur", callback` and jQuery-style event
	  // maps `{event: callback}`), reducing them by manipulating `memo`.
	  // Passes a normalized single event name and callback, as well as any
	  // optional `opts`.
	  var eventsApi = function(iteratee, memo, name, callback, opts) {
	    var i = 0, names;
	    if (name && typeof name === 'object') {
	      // Handle event maps.
	      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
	      for (names = _.keys(name); i < names.length ; i++) {
	        memo = iteratee(memo, names[i], name[names[i]], opts);
	      }
	    } else if (name && eventSplitter.test(name)) {
	      // Handle space separated event names.
	      for (names = name.split(eventSplitter); i < names.length; i++) {
	        memo = iteratee(memo, names[i], callback, opts);
	      }
	    } else {
	      memo = iteratee(memo, name, callback, opts);
	    }
	    return memo;
	  };
	
	  // Bind an event to a `callback` function. Passing `"all"` will bind
	  // the callback to all events fired.
	  Events.on = function(name, callback, context) {
	    return internalOn(this, name, callback, context);
	  };
	
	  // An internal use `on` function, used to guard the `listening` argument from
	  // the public API.
	  var internalOn = function(obj, name, callback, context, listening) {
	    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
	        context: context,
	        ctx: obj,
	        listening: listening
	    });
	
	    if (listening) {
	      var listeners = obj._listeners || (obj._listeners = {});
	      listeners[listening.id] = listening;
	    }
	
	    return obj;
	  };
	
	  // Inversion-of-control versions of `on`. Tell *this* object to listen to
	  // an event in another object... keeping track of what it's listening to.
	  Events.listenTo =  function(obj, name, callback) {
	    if (!obj) return this;
	    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
	    var listeningTo = this._listeningTo || (this._listeningTo = {});
	    var listening = listeningTo[id];
	
	    // This object is not listening to any other events on `obj` yet.
	    // Setup the necessary references to track the listening callbacks.
	    if (!listening) {
	      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
	      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
	    }
	
	    // Bind callbacks on obj, and keep track of them on listening.
	    internalOn(obj, name, callback, this, listening);
	    return this;
	  };
	
	  // The reducing API that adds a callback to the `events` object.
	  var onApi = function(events, name, callback, options) {
	    if (callback) {
	      var handlers = events[name] || (events[name] = []);
	      var context = options.context, ctx = options.ctx, listening = options.listening;
	      if (listening) listening.count++;
	
	      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
	    }
	    return events;
	  };
	
	  // Remove one or many callbacks. If `context` is null, removes all
	  // callbacks with that function. If `callback` is null, removes all
	  // callbacks for the event. If `name` is null, removes all bound
	  // callbacks for all events.
	  Events.off =  function(name, callback, context) {
	    if (!this._events) return this;
	    this._events = eventsApi(offApi, this._events, name, callback, {
	        context: context,
	        listeners: this._listeners
	    });
	    return this;
	  };
	
	  // Tell this object to stop listening to either specific events ... or
	  // to every object it's currently listening to.
	  Events.stopListening =  function(obj, name, callback) {
	    var listeningTo = this._listeningTo;
	    if (!listeningTo) return this;
	
	    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
	
	    for (var i = 0; i < ids.length; i++) {
	      var listening = listeningTo[ids[i]];
	
	      // If listening doesn't exist, this object is not currently
	      // listening to obj. Break out early.
	      if (!listening) break;
	
	      listening.obj.off(name, callback, this);
	    }
	    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;
	
	    return this;
	  };
	
	  // The reducing API that removes a callback from the `events` object.
	  var offApi = function(events, name, callback, options) {
	    // No events to consider.
	    if (!events) return;
	
	    var i = 0, listening;
	    var context = options.context, listeners = options.listeners;
	
	    // Delete all events listeners and "drop" events.
	    if (!name && !callback && !context) {
	      var ids = _.keys(listeners);
	      for (; i < ids.length; i++) {
	        listening = listeners[ids[i]];
	        delete listeners[listening.id];
	        delete listening.listeningTo[listening.objId];
	      }
	      return;
	    }
	
	    var names = name ? [name] : _.keys(events);
	    for (; i < names.length; i++) {
	      name = names[i];
	      var handlers = events[name];
	
	      // Bail out if there are no events stored.
	      if (!handlers) break;
	
	      // Replace events if there are any remaining.  Otherwise, clean up.
	      var remaining = [];
	      for (var j = 0; j < handlers.length; j++) {
	        var handler = handlers[j];
	        if (
	          callback && callback !== handler.callback &&
	            callback !== handler.callback._callback ||
	              context && context !== handler.context
	        ) {
	          remaining.push(handler);
	        } else {
	          listening = handler.listening;
	          if (listening && --listening.count === 0) {
	            delete listeners[listening.id];
	            delete listening.listeningTo[listening.objId];
	          }
	        }
	      }
	
	      // Update tail event if the list has any events.  Otherwise, clean up.
	      if (remaining.length) {
	        events[name] = remaining;
	      } else {
	        delete events[name];
	      }
	    }
	    if (_.size(events)) return events;
	  };
	
	  // Bind an event to only be triggered a single time. After the first time
	  // the callback is invoked, it will be removed. When multiple events are
	  // passed in using the space-separated syntax, the event will fire once for every
	  // event you passed in, not once for a combination of all events
	  Events.once =  function(name, callback, context) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
	    return this.on(events, void 0, context);
	  };
	
	  // Inversion-of-control versions of `once`.
	  Events.listenToOnce =  function(obj, name, callback) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
	    return this.listenTo(obj, events);
	  };
	
	  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
	  // `offer` unbinds the `onceWrapper` after it has been called.
	  var onceMap = function(map, name, callback, offer) {
	    if (callback) {
	      var once = map[name] = _.once(function() {
	        offer(name, once);
	        callback.apply(this, arguments);
	      });
	      once._callback = callback;
	    }
	    return map;
	  };
	
	  // Trigger one or many events, firing all bound callbacks. Callbacks are
	  // passed the same arguments as `trigger` is, apart from the event name
	  // (unless you're listening on `"all"`, which will cause your callback to
	  // receive the true name of the event as the first argument).
	  Events.trigger =  function(name) {
	    if (!this._events) return this;
	
	    var length = Math.max(0, arguments.length - 1);
	    var args = Array(length);
	    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
	
	    eventsApi(triggerApi, this._events, name, void 0, args);
	    return this;
	  };
	
	  // Handles triggering the appropriate event callbacks.
	  var triggerApi = function(objEvents, name, cb, args) {
	    if (objEvents) {
	      var events = objEvents[name];
	      var allEvents = objEvents.all;
	      if (events && allEvents) allEvents = allEvents.slice();
	      if (events) triggerEvents(events, args);
	      if (allEvents) triggerEvents(allEvents, [name].concat(args));
	    }
	    return objEvents;
	  };
	
	  // A difficult-to-believe, but optimized internal dispatch function for
	  // triggering events. Tries to keep the usual cases speedy (most internal
	  // Backbone events have 3 arguments).
	  var triggerEvents = function(events, args) {
	    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
	    switch (args.length) {
	      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
	      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
	      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
	      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
	      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
	    }
	  };
	
	  // Aliases for backwards compatibility.
	  Events.bind   = Events.on;
	  Events.unbind = Events.off;
	
	  // Allow the `Backbone` object to serve as a global event bus, for folks who
	  // want global "pubsub" in a convenient place.
	  _.extend(Backbone, Events);
	
	  // Backbone.Model
	  // --------------
	
	  // Backbone **Models** are the basic data object in the framework --
	  // frequently representing a row in a table in a database on your server.
	  // A discrete chunk of data and a bunch of useful, related methods for
	  // performing computations and transformations on that data.
	
	  // Create a new model with the specified attributes. A client id (`cid`)
	  // is automatically generated and assigned for you.
	  var Model = Backbone.Model = function(attributes, options) {
	    var attrs = attributes || {};
	    options || (options = {});
	    this.cid = _.uniqueId(this.cidPrefix);
	    this.attributes = {};
	    if (options.collection) this.collection = options.collection;
	    if (options.parse) attrs = this.parse(attrs, options) || {};
	    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
	    this.set(attrs, options);
	    this.changed = {};
	    this.initialize.apply(this, arguments);
	  };
	
	  // Attach all inheritable methods to the Model prototype.
	  _.extend(Model.prototype, Events, {
	
	    // A hash of attributes whose current and previous value differ.
	    changed: null,
	
	    // The value returned during the last failed validation.
	    validationError: null,
	
	    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
	    // CouchDB users may want to set this to `"_id"`.
	    idAttribute: 'id',
	
	    // The prefix is used to create the client id which is used to identify models locally.
	    // You may want to override this if you're experiencing name clashes with model ids.
	    cidPrefix: 'c',
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Return a copy of the model's `attributes` object.
	    toJSON: function(options) {
	      return _.clone(this.attributes);
	    },
	
	    // Proxy `Backbone.sync` by default -- but override this if you need
	    // custom syncing semantics for *this* particular model.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Get the value of an attribute.
	    get: function(attr) {
	      return this.attributes[attr];
	    },
	
	    // Get the HTML-escaped value of an attribute.
	    escape: function(attr) {
	      return _.escape(this.get(attr));
	    },
	
	    // Returns `true` if the attribute contains a value that is not null
	    // or undefined.
	    has: function(attr) {
	      return this.get(attr) != null;
	    },
	
	    // Special-cased proxy to underscore's `_.matches` method.
	    matches: function(attrs) {
	      return !!_.iteratee(attrs, this)(this.attributes);
	    },
	
	    // Set a hash of model attributes on the object, firing `"change"`. This is
	    // the core primitive operation of a model, updating the data and notifying
	    // anyone who needs to know about the change in state. The heart of the beast.
	    set: function(key, val, options) {
	      if (key == null) return this;
	
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options || (options = {});
	
	      // Run validation.
	      if (!this._validate(attrs, options)) return false;
	
	      // Extract attributes and options.
	      var unset      = options.unset;
	      var silent     = options.silent;
	      var changes    = [];
	      var changing   = this._changing;
	      this._changing = true;
	
	      if (!changing) {
	        this._previousAttributes = _.clone(this.attributes);
	        this.changed = {};
	      }
	
	      var current = this.attributes;
	      var changed = this.changed;
	      var prev    = this._previousAttributes;
	
	      // Check for changes of `id`.
	      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
	
	      // For each `set` attribute, update or delete the current value.
	      for (var attr in attrs) {
	        val = attrs[attr];
	        if (!_.isEqual(current[attr], val)) changes.push(attr);
	        if (!_.isEqual(prev[attr], val)) {
	          changed[attr] = val;
	        } else {
	          delete changed[attr];
	        }
	        unset ? delete current[attr] : current[attr] = val;
	      }
	
	      // Trigger all relevant attribute changes.
	      if (!silent) {
	        if (changes.length) this._pending = options;
	        for (var i = 0; i < changes.length; i++) {
	          this.trigger('change:' + changes[i], this, current[changes[i]], options);
	        }
	      }
	
	      // You might be wondering why there's a `while` loop here. Changes can
	      // be recursively nested within `"change"` events.
	      if (changing) return this;
	      if (!silent) {
	        while (this._pending) {
	          options = this._pending;
	          this._pending = false;
	          this.trigger('change', this, options);
	        }
	      }
	      this._pending = false;
	      this._changing = false;
	      return this;
	    },
	
	    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
	    // if the attribute doesn't exist.
	    unset: function(attr, options) {
	      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
	    },
	
	    // Clear all attributes on the model, firing `"change"`.
	    clear: function(options) {
	      var attrs = {};
	      for (var key in this.attributes) attrs[key] = void 0;
	      return this.set(attrs, _.extend({}, options, {unset: true}));
	    },
	
	    // Determine if the model has changed since the last `"change"` event.
	    // If you specify an attribute name, determine if that attribute has changed.
	    hasChanged: function(attr) {
	      if (attr == null) return !_.isEmpty(this.changed);
	      return _.has(this.changed, attr);
	    },
	
	    // Return an object containing all the attributes that have changed, or
	    // false if there are no changed attributes. Useful for determining what
	    // parts of a view need to be updated and/or what attributes need to be
	    // persisted to the server. Unset attributes will be set to undefined.
	    // You can also pass an attributes object to diff against the model,
	    // determining if there *would be* a change.
	    changedAttributes: function(diff) {
	      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
	      var old = this._changing ? this._previousAttributes : this.attributes;
	      var changed = {};
	      for (var attr in diff) {
	        var val = diff[attr];
	        if (_.isEqual(old[attr], val)) continue;
	        changed[attr] = val;
	      }
	      return _.size(changed) ? changed : false;
	    },
	
	    // Get the previous value of an attribute, recorded at the time the last
	    // `"change"` event was fired.
	    previous: function(attr) {
	      if (attr == null || !this._previousAttributes) return null;
	      return this._previousAttributes[attr];
	    },
	
	    // Get all of the attributes of the model at the time of the previous
	    // `"change"` event.
	    previousAttributes: function() {
	      return _.clone(this._previousAttributes);
	    },
	
	    // Fetch the model from the server, merging the response with the model's
	    // local attributes. Any changed attributes will trigger a "change" event.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var model = this;
	      var success = options.success;
	      options.success = function(resp) {
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (!model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Set a hash of model attributes, and sync the model to the server.
	    // If the server returns an attributes hash that differs, the model's
	    // state will be `set` again.
	    save: function(key, val, options) {
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (key == null || typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options = _.extend({validate: true, parse: true}, options);
	      var wait = options.wait;
	
	      // If we're not waiting and attributes exist, save acts as
	      // `set(attr).save(null, opts)` with validation. Otherwise, check if
	      // the model will be valid when the attributes, if any, are set.
	      if (attrs && !wait) {
	        if (!this.set(attrs, options)) return false;
	      } else {
	        if (!this._validate(attrs, options)) return false;
	      }
	
	      // After a successful server-side save, the client is (optionally)
	      // updated with the server-side state.
	      var model = this;
	      var success = options.success;
	      var attributes = this.attributes;
	      options.success = function(resp) {
	        // Ensure attributes are restored during synchronous saves.
	        model.attributes = attributes;
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
	        if (serverAttrs && !model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	
	      // Set temporary attributes if `{wait: true}` to properly find new ids.
	      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
	
	      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
	      if (method === 'patch' && !options.attrs) options.attrs = attrs;
	      var xhr = this.sync(method, this, options);
	
	      // Restore attributes.
	      this.attributes = attributes;
	
	      return xhr;
	    },
	
	    // Destroy this model on the server if it was already persisted.
	    // Optimistically removes the model from its collection, if it has one.
	    // If `wait: true` is passed, waits for the server to respond before removal.
	    destroy: function(options) {
	      options = options ? _.clone(options) : {};
	      var model = this;
	      var success = options.success;
	      var wait = options.wait;
	
	      var destroy = function() {
	        model.stopListening();
	        model.trigger('destroy', model, model.collection, options);
	      };
	
	      options.success = function(resp) {
	        if (wait) destroy();
	        if (success) success.call(options.context, model, resp, options);
	        if (!model.isNew()) model.trigger('sync', model, resp, options);
	      };
	
	      var xhr = false;
	      if (this.isNew()) {
	        _.defer(options.success);
	      } else {
	        wrapError(this, options);
	        xhr = this.sync('delete', this, options);
	      }
	      if (!wait) destroy();
	      return xhr;
	    },
	
	    // Default URL for the model's representation on the server -- if you're
	    // using Backbone's restful methods, override this to change the endpoint
	    // that will be called.
	    url: function() {
	      var base =
	        _.result(this, 'urlRoot') ||
	        _.result(this.collection, 'url') ||
	        urlError();
	      if (this.isNew()) return base;
	      var id = this.get(this.idAttribute);
	      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
	    },
	
	    // **parse** converts a response into the hash of attributes to be `set` on
	    // the model. The default implementation is just to pass the response along.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new model with identical attributes to this one.
	    clone: function() {
	      return new this.constructor(this.attributes);
	    },
	
	    // A model is new if it has never been saved to the server, and lacks an id.
	    isNew: function() {
	      return !this.has(this.idAttribute);
	    },
	
	    // Check if the model is currently in a valid state.
	    isValid: function(options) {
	      return this._validate({}, _.defaults({validate: true}, options));
	    },
	
	    // Run validation against the next complete set of model attributes,
	    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
	    _validate: function(attrs, options) {
	      if (!options.validate || !this.validate) return true;
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validationError = this.validate(attrs, options) || null;
	      if (!error) return true;
	      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
	      return false;
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Model.
	  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
	      omit: 0, chain: 1, isEmpty: 1 };
	
	  // Mix in each Underscore method as a proxy to `Model#attributes`.
	  addUnderscoreMethods(Model, modelMethods, 'attributes');
	
	  // Backbone.Collection
	  // -------------------
	
	  // If models tend to represent a single row of data, a Backbone Collection is
	  // more analogous to a table full of data ... or a small slice or page of that
	  // table, or a collection of rows that belong together for a particular reason
	  // -- all of the messages in this particular folder, all of the documents
	  // belonging to this particular author, and so on. Collections maintain
	  // indexes of their models, both in order, and for lookup by `id`.
	
	  // Create a new **Collection**, perhaps to contain a specific type of `model`.
	  // If a `comparator` is specified, the Collection will maintain
	  // its models in sort order, as they're added and removed.
	  var Collection = Backbone.Collection = function(models, options) {
	    options || (options = {});
	    if (options.model) this.model = options.model;
	    if (options.comparator !== void 0) this.comparator = options.comparator;
	    this._reset();
	    this.initialize.apply(this, arguments);
	    if (models) this.reset(models, _.extend({silent: true}, options));
	  };
	
	  // Default options for `Collection#set`.
	  var setOptions = {add: true, remove: true, merge: true};
	  var addOptions = {add: true, remove: false};
	
	  // Define the Collection's inheritable methods.
	  _.extend(Collection.prototype, Events, {
	
	    // The default model for a collection is just a **Backbone.Model**.
	    // This should be overridden in most cases.
	    model: Model,
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // The JSON representation of a Collection is an array of the
	    // models' attributes.
	    toJSON: function(options) {
	      return this.map(function(model) { return model.toJSON(options); });
	    },
	
	    // Proxy `Backbone.sync` by default.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Add a model, or list of models to the set.
	    add: function(models, options) {
	      return this.set(models, _.extend({merge: false}, options, addOptions));
	    },
	
	    // Remove a model, or a list of models from the set.
	    remove: function(models, options) {
	      options = _.extend({}, options);
	      var singular = !_.isArray(models);
	      models = singular ? [models] : _.clone(models);
	      var removed = this._removeModels(models, options);
	      if (!options.silent && removed) this.trigger('update', this, options);
	      return singular ? removed[0] : removed;
	    },
	
	    // Update a collection by `set`-ing a new list of models, adding new ones,
	    // removing models that are no longer present, and merging models that
	    // already exist in the collection, as necessary. Similar to **Model#set**,
	    // the core operation for updating the data contained by the collection.
	    set: function(models, options) {
	      options = _.defaults({}, options, setOptions);
	      if (options.parse && !this._isModel(models)) models = this.parse(models, options);
	      var singular = !_.isArray(models);
	      models = singular ? (models ? [models] : []) : models.slice();
	      var id, model, attrs, existing, sort;
	      var at = options.at;
	      if (at != null) at = +at;
	      if (at < 0) at += this.length + 1;
	      var sortable = this.comparator && (at == null) && options.sort !== false;
	      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
	      var toAdd = [], toRemove = [], modelMap = {};
	      var add = options.add, merge = options.merge, remove = options.remove;
	      var order = !sortable && add && remove ? [] : false;
	      var orderChanged = false;
	
	      // Turn bare objects into model references, and prevent invalid models
	      // from being added.
	      for (var i = 0; i < models.length; i++) {
	        attrs = models[i];
	
	        // If a duplicate is found, prevent it from being added and
	        // optionally merge it into the existing model.
	        if (existing = this.get(attrs)) {
	          if (remove) modelMap[existing.cid] = true;
	          if (merge && attrs !== existing) {
	            attrs = this._isModel(attrs) ? attrs.attributes : attrs;
	            if (options.parse) attrs = existing.parse(attrs, options);
	            existing.set(attrs, options);
	            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
	          }
	          models[i] = existing;
	
	        // If this is a new, valid model, push it to the `toAdd` list.
	        } else if (add) {
	          model = models[i] = this._prepareModel(attrs, options);
	          if (!model) continue;
	          toAdd.push(model);
	          this._addReference(model, options);
	        }
	
	        // Do not add multiple models with the same `id`.
	        model = existing || model;
	        if (!model) continue;
	        id = this.modelId(model.attributes);
	        if (order && (model.isNew() || !modelMap[id])) {
	          order.push(model);
	
	          // Check to see if this is actually a new model at this index.
	          orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid;
	        }
	
	        modelMap[id] = true;
	      }
	
	      // Remove nonexistent models if appropriate.
	      if (remove) {
	        for (var i = 0; i < this.length; i++) {
	          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
	        }
	        if (toRemove.length) this._removeModels(toRemove, options);
	      }
	
	      // See if sorting is needed, update `length` and splice in new models.
	      if (toAdd.length || orderChanged) {
	        if (sortable) sort = true;
	        this.length += toAdd.length;
	        if (at != null) {
	          for (var i = 0; i < toAdd.length; i++) {
	            this.models.splice(at + i, 0, toAdd[i]);
	          }
	        } else {
	          if (order) this.models.length = 0;
	          var orderedModels = order || toAdd;
	          for (var i = 0; i < orderedModels.length; i++) {
	            this.models.push(orderedModels[i]);
	          }
	        }
	      }
	
	      // Silently sort the collection if appropriate.
	      if (sort) this.sort({silent: true});
	
	      // Unless silenced, it's time to fire all appropriate add/sort events.
	      if (!options.silent) {
	        var addOpts = at != null ? _.clone(options) : options;
	        for (var i = 0; i < toAdd.length; i++) {
	          if (at != null) addOpts.index = at + i;
	          (model = toAdd[i]).trigger('add', model, this, addOpts);
	        }
	        if (sort || orderChanged) this.trigger('sort', this, options);
	        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
	      }
	
	      // Return the added (or merged) model (or models).
	      return singular ? models[0] : models;
	    },
	
	    // When you have more items than you want to add or remove individually,
	    // you can reset the entire set with a new list of models, without firing
	    // any granular `add` or `remove` events. Fires `reset` when finished.
	    // Useful for bulk operations and optimizations.
	    reset: function(models, options) {
	      options = options ? _.clone(options) : {};
	      for (var i = 0; i < this.models.length; i++) {
	        this._removeReference(this.models[i], options);
	      }
	      options.previousModels = this.models;
	      this._reset();
	      models = this.add(models, _.extend({silent: true}, options));
	      if (!options.silent) this.trigger('reset', this, options);
	      return models;
	    },
	
	    // Add a model to the end of the collection.
	    push: function(model, options) {
	      return this.add(model, _.extend({at: this.length}, options));
	    },
	
	    // Remove a model from the end of the collection.
	    pop: function(options) {
	      var model = this.at(this.length - 1);
	      return this.remove(model, options);
	    },
	
	    // Add a model to the beginning of the collection.
	    unshift: function(model, options) {
	      return this.add(model, _.extend({at: 0}, options));
	    },
	
	    // Remove a model from the beginning of the collection.
	    shift: function(options) {
	      var model = this.at(0);
	      return this.remove(model, options);
	    },
	
	    // Slice out a sub-array of models from the collection.
	    slice: function() {
	      return slice.apply(this.models, arguments);
	    },
	
	    // Get a model from the set by id.
	    get: function(obj) {
	      if (obj == null) return void 0;
	      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
	      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
	    },
	
	    // Get the model at the given index.
	    at: function(index) {
	      if (index < 0) index += this.length;
	      return this.models[index];
	    },
	
	    // Return models with matching attributes. Useful for simple cases of
	    // `filter`.
	    where: function(attrs, first) {
	      var matches = _.matches(attrs);
	      return this[first ? 'find' : 'filter'](function(model) {
	        return matches(model.attributes);
	      });
	    },
	
	    // Return the first model with matching attributes. Useful for simple cases
	    // of `find`.
	    findWhere: function(attrs) {
	      return this.where(attrs, true);
	    },
	
	    // Force the collection to re-sort itself. You don't need to call this under
	    // normal circumstances, as the set will maintain sort order as each item
	    // is added.
	    sort: function(options) {
	      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
	      options || (options = {});
	
	      // Run sort based on type of `comparator`.
	      if (_.isString(this.comparator) || this.comparator.length === 1) {
	        this.models = this.sortBy(this.comparator, this);
	      } else {
	        this.models.sort(_.bind(this.comparator, this));
	      }
	
	      if (!options.silent) this.trigger('sort', this, options);
	      return this;
	    },
	
	    // Pluck an attribute from each model in the collection.
	    pluck: function(attr) {
	      return _.invoke(this.models, 'get', attr);
	    },
	
	    // Fetch the default set of models for this collection, resetting the
	    // collection when they arrive. If `reset: true` is passed, the response
	    // data will be passed through the `reset` method instead of `set`.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var success = options.success;
	      var collection = this;
	      options.success = function(resp) {
	        var method = options.reset ? 'reset' : 'set';
	        collection[method](resp, options);
	        if (success) success.call(options.context, collection, resp, options);
	        collection.trigger('sync', collection, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Create a new instance of a model in this collection. Add the model to the
	    // collection immediately, unless `wait: true` is passed, in which case we
	    // wait for the server to agree.
	    create: function(model, options) {
	      options = options ? _.clone(options) : {};
	      var wait = options.wait;
	      model = this._prepareModel(model, options);
	      if (!model) return false;
	      if (!wait) this.add(model, options);
	      var collection = this;
	      var success = options.success;
	      options.success = function(model, resp, callbackOpts) {
	        if (wait) collection.add(model, callbackOpts);
	        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
	      };
	      model.save(null, options);
	      return model;
	    },
	
	    // **parse** converts a response into a list of models to be added to the
	    // collection. The default implementation is just to pass it through.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new collection with an identical list of models as this one.
	    clone: function() {
	      return new this.constructor(this.models, {
	        model: this.model,
	        comparator: this.comparator
	      });
	    },
	
	    // Define how to uniquely identify models in the collection.
	    modelId: function (attrs) {
	      return attrs[this.model.prototype.idAttribute || 'id'];
	    },
	
	    // Private method to reset all internal state. Called when the collection
	    // is first initialized or reset.
	    _reset: function() {
	      this.length = 0;
	      this.models = [];
	      this._byId  = {};
	    },
	
	    // Prepare a hash of attributes (or other model) to be added to this
	    // collection.
	    _prepareModel: function(attrs, options) {
	      if (this._isModel(attrs)) {
	        if (!attrs.collection) attrs.collection = this;
	        return attrs;
	      }
	      options = options ? _.clone(options) : {};
	      options.collection = this;
	      var model = new this.model(attrs, options);
	      if (!model.validationError) return model;
	      this.trigger('invalid', this, model.validationError, options);
	      return false;
	    },
	
	    // Internal method called by both remove and set.
	    // Returns removed models, or false if nothing is removed.
	    _removeModels: function(models, options) {
	      var removed = [];
	      for (var i = 0; i < models.length; i++) {
	        var model = this.get(models[i]);
	        if (!model) continue;
	
	        var index = this.indexOf(model);
	        this.models.splice(index, 1);
	        this.length--;
	
	        if (!options.silent) {
	          options.index = index;
	          model.trigger('remove', model, this, options);
	        }
	
	        removed.push(model);
	        this._removeReference(model, options);
	      }
	      return removed.length ? removed : false;
	    },
	
	    // Method for checking whether an object should be considered a model for
	    // the purposes of adding to the collection.
	    _isModel: function (model) {
	      return model instanceof Model;
	    },
	
	    // Internal method to create a model's ties to a collection.
	    _addReference: function(model, options) {
	      this._byId[model.cid] = model;
	      var id = this.modelId(model.attributes);
	      if (id != null) this._byId[id] = model;
	      model.on('all', this._onModelEvent, this);
	    },
	
	    // Internal method to sever a model's ties to a collection.
	    _removeReference: function(model, options) {
	      delete this._byId[model.cid];
	      var id = this.modelId(model.attributes);
	      if (id != null) delete this._byId[id];
	      if (this === model.collection) delete model.collection;
	      model.off('all', this._onModelEvent, this);
	    },
	
	    // Internal method called every time a model in the set fires an event.
	    // Sets need to update their indexes when models change ids. All other
	    // events simply proxy through. "add" and "remove" events that originate
	    // in other collections are ignored.
	    _onModelEvent: function(event, model, collection, options) {
	      if ((event === 'add' || event === 'remove') && collection !== this) return;
	      if (event === 'destroy') this.remove(model, options);
	      if (event === 'change') {
	        var prevId = this.modelId(model.previousAttributes());
	        var id = this.modelId(model.attributes);
	        if (prevId !== id) {
	          if (prevId != null) delete this._byId[prevId];
	          if (id != null) this._byId[id] = model;
	        }
	      }
	      this.trigger.apply(this, arguments);
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Collection.
	  // 90% of the core usefulness of Backbone Collections is actually implemented
	  // right here:
	  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
	      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
	      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,
	      contains: 2, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
	      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
	      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
	      isEmpty: 1, chain: 1, sample: 3, partition: 3 };
	
	  // Mix in each Underscore method as a proxy to `Collection#models`.
	  addUnderscoreMethods(Collection, collectionMethods, 'models');
	
	  // Underscore methods that take a property name as an argument.
	  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];
	
	  // Use attributes instead of properties.
	  _.each(attributeMethods, function(method) {
	    if (!_[method]) return;
	    Collection.prototype[method] = function(value, context) {
	      var iterator = _.isFunction(value) ? value : function(model) {
	        return model.get(value);
	      };
	      return _[method](this.models, iterator, context);
	    };
	  });
	
	  // Backbone.View
	  // -------------
	
	  // Backbone Views are almost more convention than they are actual code. A View
	  // is simply a JavaScript object that represents a logical chunk of UI in the
	  // DOM. This might be a single item, an entire list, a sidebar or panel, or
	  // even the surrounding frame which wraps your whole app. Defining a chunk of
	  // UI as a **View** allows you to define your DOM events declaratively, without
	  // having to worry about render order ... and makes it easy for the view to
	  // react to specific changes in the state of your models.
	
	  // Creating a Backbone.View creates its initial element outside of the DOM,
	  // if an existing element is not provided...
	  var View = Backbone.View = function(options) {
	    this.cid = _.uniqueId('view');
	    _.extend(this, _.pick(options, viewOptions));
	    this._ensureElement();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regex to split keys for `delegate`.
	  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	
	  // List of view options to be merged as properties.
	  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];
	
	  // Set up all inheritable **Backbone.View** properties and methods.
	  _.extend(View.prototype, Events, {
	
	    // The default `tagName` of a View's element is `"div"`.
	    tagName: 'div',
	
	    // jQuery delegate for element lookup, scoped to DOM elements within the
	    // current view. This should be preferred to global lookups where possible.
	    $: function(selector) {
	      return this.$el.find(selector);
	    },
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // **render** is the core function that your view should override, in order
	    // to populate its element (`this.el`), with the appropriate HTML. The
	    // convention is for **render** to always return `this`.
	    render: function() {
	      return this;
	    },
	
	    // Remove this view by taking the element out of the DOM, and removing any
	    // applicable Backbone.Events listeners.
	    remove: function() {
	      this._removeElement();
	      this.stopListening();
	      return this;
	    },
	
	    // Remove this view's element from the document and all event listeners
	    // attached to it. Exposed for subclasses using an alternative DOM
	    // manipulation API.
	    _removeElement: function() {
	      this.$el.remove();
	    },
	
	    // Change the view's element (`this.el` property) and re-delegate the
	    // view's events on the new element.
	    setElement: function(element) {
	      this.undelegateEvents();
	      this._setElement(element);
	      this.delegateEvents();
	      return this;
	    },
	
	    // Creates the `this.el` and `this.$el` references for this view using the
	    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
	    // context or an element. Subclasses can override this to utilize an
	    // alternative DOM manipulation API and are only required to set the
	    // `this.el` property.
	    _setElement: function(el) {
	      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
	      this.el = this.$el[0];
	    },
	
	    // Set callbacks, where `this.events` is a hash of
	    //
	    // *{"event selector": "callback"}*
	    //
	    //     {
	    //       'mousedown .title':  'edit',
	    //       'click .button':     'save',
	    //       'click .open':       function(e) { ... }
	    //     }
	    //
	    // pairs. Callbacks will be bound to the view, with `this` set properly.
	    // Uses event delegation for efficiency.
	    // Omitting the selector binds the event to `this.el`.
	    delegateEvents: function(events) {
	      events || (events = _.result(this, 'events'));
	      if (!events) return this;
	      this.undelegateEvents();
	      for (var key in events) {
	        var method = events[key];
	        if (!_.isFunction(method)) method = this[method];
	        if (!method) continue;
	        var match = key.match(delegateEventSplitter);
	        this.delegate(match[1], match[2], _.bind(method, this));
	      }
	      return this;
	    },
	
	    // Add a single event listener to the view's element (or a child element
	    // using `selector`). This only works for delegate-able events: not `focus`,
	    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
	    delegate: function(eventName, selector, listener) {
	      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Clears all callbacks previously bound to the view by `delegateEvents`.
	    // You usually don't need to use this, but may wish to if you have multiple
	    // Backbone views attached to the same DOM element.
	    undelegateEvents: function() {
	      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
	      return this;
	    },
	
	    // A finer-grained `undelegateEvents` for removing a single delegated event.
	    // `selector` and `listener` are both optional.
	    undelegate: function(eventName, selector, listener) {
	      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Produces a DOM element to be assigned to your view. Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _createElement: function(tagName) {
	      return document.createElement(tagName);
	    },
	
	    // Ensure that the View has a DOM element to render into.
	    // If `this.el` is a string, pass it through `$()`, take the first
	    // matching element, and re-assign it to `el`. Otherwise, create
	    // an element from the `id`, `className` and `tagName` properties.
	    _ensureElement: function() {
	      if (!this.el) {
	        var attrs = _.extend({}, _.result(this, 'attributes'));
	        if (this.id) attrs.id = _.result(this, 'id');
	        if (this.className) attrs['class'] = _.result(this, 'className');
	        this.setElement(this._createElement(_.result(this, 'tagName')));
	        this._setAttributes(attrs);
	      } else {
	        this.setElement(_.result(this, 'el'));
	      }
	    },
	
	    // Set attributes from a hash on this view's element.  Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _setAttributes: function(attributes) {
	      this.$el.attr(attributes);
	    }
	
	  });
	
	  // Backbone.sync
	  // -------------
	
	  // Override this function to change the manner in which Backbone persists
	  // models to the server. You will be passed the type of request, and the
	  // model in question. By default, makes a RESTful Ajax request
	  // to the model's `url()`. Some possible customizations could be:
	  //
	  // * Use `setTimeout` to batch rapid-fire updates into a single request.
	  // * Send up the models as XML instead of JSON.
	  // * Persist models via WebSockets instead of Ajax.
	  //
	  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
	  // as `POST`, with a `_method` parameter containing the true HTTP method,
	  // as well as all requests with the body as `application/x-www-form-urlencoded`
	  // instead of `application/json` with the model in a param named `model`.
	  // Useful when interfacing with server-side languages like **PHP** that make
	  // it difficult to read the body of `PUT` requests.
	  Backbone.sync = function(method, model, options) {
	    var type = methodMap[method];
	
	    // Default options, unless specified.
	    _.defaults(options || (options = {}), {
	      emulateHTTP: Backbone.emulateHTTP,
	      emulateJSON: Backbone.emulateJSON
	    });
	
	    // Default JSON-request options.
	    var params = {type: type, dataType: 'json'};
	
	    // Ensure that we have a URL.
	    if (!options.url) {
	      params.url = _.result(model, 'url') || urlError();
	    }
	
	    // Ensure that we have the appropriate request data.
	    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
	      params.contentType = 'application/json';
	      params.data = JSON.stringify(options.attrs || model.toJSON(options));
	    }
	
	    // For older servers, emulate JSON by encoding the request into an HTML-form.
	    if (options.emulateJSON) {
	      params.contentType = 'application/x-www-form-urlencoded';
	      params.data = params.data ? {model: params.data} : {};
	    }
	
	    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
	    // And an `X-HTTP-Method-Override` header.
	    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
	      params.type = 'POST';
	      if (options.emulateJSON) params.data._method = type;
	      var beforeSend = options.beforeSend;
	      options.beforeSend = function(xhr) {
	        xhr.setRequestHeader('X-HTTP-Method-Override', type);
	        if (beforeSend) return beforeSend.apply(this, arguments);
	      };
	    }
	
	    // Don't process data on a non-GET request.
	    if (params.type !== 'GET' && !options.emulateJSON) {
	      params.processData = false;
	    }
	
	    // Pass along `textStatus` and `errorThrown` from jQuery.
	    var error = options.error;
	    options.error = function(xhr, textStatus, errorThrown) {
	      options.textStatus = textStatus;
	      options.errorThrown = errorThrown;
	      if (error) error.call(options.context, xhr, textStatus, errorThrown);
	    };
	
	    // Make the request, allowing the user to override any Ajax options.
	    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
	    model.trigger('request', model, xhr, options);
	    return xhr;
	  };
	
	  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
	  var methodMap = {
	    'create': 'POST',
	    'update': 'PUT',
	    'patch':  'PATCH',
	    'delete': 'DELETE',
	    'read':   'GET'
	  };
	
	  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
	  // Override this if you'd like to use a different library.
	  Backbone.ajax = function() {
	    return Backbone.$.ajax.apply(Backbone.$, arguments);
	  };
	
	  // Backbone.Router
	  // ---------------
	
	  // Routers map faux-URLs to actions, and fire events when routes are
	  // matched. Creating a new one sets its `routes` hash, if not set statically.
	  var Router = Backbone.Router = function(options) {
	    options || (options = {});
	    if (options.routes) this.routes = options.routes;
	    this._bindRoutes();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regular expressions for matching named param parts and splatted
	  // parts of route strings.
	  var optionalParam = /\((.*?)\)/g;
	  var namedParam    = /(\(\?)?:\w+/g;
	  var splatParam    = /\*\w+/g;
	  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;
	
	  // Set up all inheritable **Backbone.Router** properties and methods.
	  _.extend(Router.prototype, Events, {
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Manually bind a single named route to a callback. For example:
	    //
	    //     this.route('search/:query/p:num', 'search', function(query, num) {
	    //       ...
	    //     });
	    //
	    route: function(route, name, callback) {
	      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
	      if (_.isFunction(name)) {
	        callback = name;
	        name = '';
	      }
	      if (!callback) callback = this[name];
	      var router = this;
	      Backbone.history.route(route, function(fragment) {
	        var args = router._extractParameters(route, fragment);
	        if (router.execute(callback, args, name) !== false) {
	          router.trigger.apply(router, ['route:' + name].concat(args));
	          router.trigger('route', name, args);
	          Backbone.history.trigger('route', router, name, args);
	        }
	      });
	      return this;
	    },
	
	    // Execute a route handler with the provided parameters.  This is an
	    // excellent place to do pre-route setup or post-route cleanup.
	    execute: function(callback, args, name) {
	      if (callback) callback.apply(this, args);
	    },
	
	    // Simple proxy to `Backbone.history` to save a fragment into the history.
	    navigate: function(fragment, options) {
	      Backbone.history.navigate(fragment, options);
	      return this;
	    },
	
	    // Bind all defined routes to `Backbone.history`. We have to reverse the
	    // order of the routes here to support behavior where the most general
	    // routes can be defined at the bottom of the route map.
	    _bindRoutes: function() {
	      if (!this.routes) return;
	      this.routes = _.result(this, 'routes');
	      var route, routes = _.keys(this.routes);
	      while ((route = routes.pop()) != null) {
	        this.route(route, this.routes[route]);
	      }
	    },
	
	    // Convert a route string into a regular expression, suitable for matching
	    // against the current location hash.
	    _routeToRegExp: function(route) {
	      route = route.replace(escapeRegExp, '\\$&')
	                   .replace(optionalParam, '(?:$1)?')
	                   .replace(namedParam, function(match, optional) {
	                     return optional ? match : '([^/?]+)';
	                   })
	                   .replace(splatParam, '([^?]*?)');
	      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
	    },
	
	    // Given a route, and a URL fragment that it matches, return the array of
	    // extracted decoded parameters. Empty or unmatched parameters will be
	    // treated as `null` to normalize cross-browser behavior.
	    _extractParameters: function(route, fragment) {
	      var params = route.exec(fragment).slice(1);
	      return _.map(params, function(param, i) {
	        // Don't decode the search params.
	        if (i === params.length - 1) return param || null;
	        return param ? decodeURIComponent(param) : null;
	      });
	    }
	
	  });
	
	  // Backbone.History
	  // ----------------
	
	  // Handles cross-browser history management, based on either
	  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
	  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
	  // and URL fragments. If the browser supports neither (old IE, natch),
	  // falls back to polling.
	  var History = Backbone.History = function() {
	    this.handlers = [];
	    _.bindAll(this, 'checkUrl');
	
	    // Ensure that `History` can be used outside of the browser.
	    if (typeof window !== 'undefined') {
	      this.location = window.location;
	      this.history = window.history;
	    }
	  };
	
	  // Cached regex for stripping a leading hash/slash and trailing space.
	  var routeStripper = /^[#\/]|\s+$/g;
	
	  // Cached regex for stripping leading and trailing slashes.
	  var rootStripper = /^\/+|\/+$/g;
	
	  // Cached regex for stripping urls of hash.
	  var pathStripper = /#.*$/;
	
	  // Has the history handling already been started?
	  History.started = false;
	
	  // Set up all inheritable **Backbone.History** properties and methods.
	  _.extend(History.prototype, Events, {
	
	    // The default interval to poll for hash changes, if necessary, is
	    // twenty times a second.
	    interval: 50,
	
	    // Are we at the app root?
	    atRoot: function() {
	      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
	      return path === this.root && !this.getSearch();
	    },
	
	    // Does the pathname match the root?
	    matchRoot: function() {
	      var path = this.decodeFragment(this.location.pathname);
	      var root = path.slice(0, this.root.length - 1) + '/';
	      return root === this.root;
	    },
	
	    // Unicode characters in `location.pathname` are percent encoded so they're
	    // decoded for comparison. `%25` should not be decoded since it may be part
	    // of an encoded parameter.
	    decodeFragment: function(fragment) {
	      return decodeURI(fragment.replace(/%25/g, '%2525'));
	    },
	
	    // In IE6, the hash fragment and search params are incorrect if the
	    // fragment contains `?`.
	    getSearch: function() {
	      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
	      return match ? match[0] : '';
	    },
	
	    // Gets the true hash value. Cannot use location.hash directly due to bug
	    // in Firefox where location.hash will always be decoded.
	    getHash: function(window) {
	      var match = (window || this).location.href.match(/#(.*)$/);
	      return match ? match[1] : '';
	    },
	
	    // Get the pathname and search params, without the root.
	    getPath: function() {
	      var path = this.decodeFragment(
	        this.location.pathname + this.getSearch()
	      ).slice(this.root.length - 1);
	      return path.charAt(0) === '/' ? path.slice(1) : path;
	    },
	
	    // Get the cross-browser normalized URL fragment from the path or hash.
	    getFragment: function(fragment) {
	      if (fragment == null) {
	        if (this._usePushState || !this._wantsHashChange) {
	          fragment = this.getPath();
	        } else {
	          fragment = this.getHash();
	        }
	      }
	      return fragment.replace(routeStripper, '');
	    },
	
	    // Start the hash change handling, returning `true` if the current URL matches
	    // an existing route, and `false` otherwise.
	    start: function(options) {
	      if (History.started) throw new Error('Backbone.history has already been started');
	      History.started = true;
	
	      // Figure out the initial configuration. Do we need an iframe?
	      // Is pushState desired ... is it available?
	      this.options          = _.extend({root: '/'}, this.options, options);
	      this.root             = this.options.root;
	      this._wantsHashChange = this.options.hashChange !== false;
	      this._hasHashChange   = 'onhashchange' in window;
	      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
	      this._wantsPushState  = !!this.options.pushState;
	      this._hasPushState    = !!(this.history && this.history.pushState);
	      this._usePushState    = this._wantsPushState && this._hasPushState;
	      this.fragment         = this.getFragment();
	
	      // Normalize root to always include a leading and trailing slash.
	      this.root = ('/' + this.root + '/').replace(rootStripper, '/');
	
	      // Transition from hashChange to pushState or vice versa if both are
	      // requested.
	      if (this._wantsHashChange && this._wantsPushState) {
	
	        // If we've started off with a route from a `pushState`-enabled
	        // browser, but we're currently in a browser that doesn't support it...
	        if (!this._hasPushState && !this.atRoot()) {
	          var root = this.root.slice(0, -1) || '/';
	          this.location.replace(root + '#' + this.getPath());
	          // Return immediately as browser will do redirect to new url
	          return true;
	
	        // Or if we've started out with a hash-based route, but we're currently
	        // in a browser where it could be `pushState`-based instead...
	        } else if (this._hasPushState && this.atRoot()) {
	          this.navigate(this.getHash(), {replace: true});
	        }
	
	      }
	
	      // Proxy an iframe to handle location events if the browser doesn't
	      // support the `hashchange` event, HTML5 history, or the user wants
	      // `hashChange` but not `pushState`.
	      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
	        this.iframe = document.createElement('iframe');
	        this.iframe.src = 'javascript:0';
	        this.iframe.style.display = 'none';
	        this.iframe.tabIndex = -1;
	        var body = document.body;
	        // Using `appendChild` will throw on IE < 9 if the document is not ready.
	        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
	        iWindow.document.open();
	        iWindow.document.close();
	        iWindow.location.hash = '#' + this.fragment;
	      }
	
	      // Add a cross-platform `addEventListener` shim for older browsers.
	      var addEventListener = window.addEventListener || function (eventName, listener) {
	        return attachEvent('on' + eventName, listener);
	      };
	
	      // Depending on whether we're using pushState or hashes, and whether
	      // 'onhashchange' is supported, determine how we check the URL state.
	      if (this._usePushState) {
	        addEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        addEventListener('hashchange', this.checkUrl, false);
	      } else if (this._wantsHashChange) {
	        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
	      }
	
	      if (!this.options.silent) return this.loadUrl();
	    },
	
	    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
	    // but possibly useful for unit testing Routers.
	    stop: function() {
	      // Add a cross-platform `removeEventListener` shim for older browsers.
	      var removeEventListener = window.removeEventListener || function (eventName, listener) {
	        return detachEvent('on' + eventName, listener);
	      };
	
	      // Remove window listeners.
	      if (this._usePushState) {
	        removeEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        removeEventListener('hashchange', this.checkUrl, false);
	      }
	
	      // Clean up the iframe if necessary.
	      if (this.iframe) {
	        document.body.removeChild(this.iframe);
	        this.iframe = null;
	      }
	
	      // Some environments will throw when clearing an undefined interval.
	      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
	      History.started = false;
	    },
	
	    // Add a route to be tested when the fragment changes. Routes added later
	    // may override previous routes.
	    route: function(route, callback) {
	      this.handlers.unshift({route: route, callback: callback});
	    },
	
	    // Checks the current URL to see if it has changed, and if it has,
	    // calls `loadUrl`, normalizing across the hidden iframe.
	    checkUrl: function(e) {
	      var current = this.getFragment();
	
	      // If the user pressed the back button, the iframe's hash will have
	      // changed and we should use that for comparison.
	      if (current === this.fragment && this.iframe) {
	        current = this.getHash(this.iframe.contentWindow);
	      }
	
	      if (current === this.fragment) return false;
	      if (this.iframe) this.navigate(current);
	      this.loadUrl();
	    },
	
	    // Attempt to load the current URL fragment. If a route succeeds with a
	    // match, returns `true`. If no defined routes matches the fragment,
	    // returns `false`.
	    loadUrl: function(fragment) {
	      // If the root doesn't match, no routes can match either.
	      if (!this.matchRoot()) return false;
	      fragment = this.fragment = this.getFragment(fragment);
	      return _.any(this.handlers, function(handler) {
	        if (handler.route.test(fragment)) {
	          handler.callback(fragment);
	          return true;
	        }
	      });
	    },
	
	    // Save a fragment into the hash history, or replace the URL state if the
	    // 'replace' option is passed. You are responsible for properly URL-encoding
	    // the fragment in advance.
	    //
	    // The options object can contain `trigger: true` if you wish to have the
	    // route callback be fired (not usually desirable), or `replace: true`, if
	    // you wish to modify the current URL without adding an entry to the history.
	    navigate: function(fragment, options) {
	      if (!History.started) return false;
	      if (!options || options === true) options = {trigger: !!options};
	
	      // Normalize the fragment.
	      fragment = this.getFragment(fragment || '');
	
	      // Don't include a trailing slash on the root.
	      var root = this.root;
	      if (fragment === '' || fragment.charAt(0) === '?') {
	        root = root.slice(0, -1) || '/';
	      }
	      var url = root + fragment;
	
	      // Strip the hash and decode for matching.
	      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));
	
	      if (this.fragment === fragment) return;
	      this.fragment = fragment;
	
	      // If pushState is available, we use it to set the fragment as a real URL.
	      if (this._usePushState) {
	        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);
	
	      // If hash changes haven't been explicitly disabled, update the hash
	      // fragment to store history.
	      } else if (this._wantsHashChange) {
	        this._updateHash(this.location, fragment, options.replace);
	        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
	          var iWindow = this.iframe.contentWindow;
	
	          // Opening and closing the iframe tricks IE7 and earlier to push a
	          // history entry on hash-tag change.  When replace is true, we don't
	          // want this.
	          if (!options.replace) {
	            iWindow.document.open();
	            iWindow.document.close();
	          }
	
	          this._updateHash(iWindow.location, fragment, options.replace);
	        }
	
	      // If you've told us that you explicitly don't want fallback hashchange-
	      // based history, then `navigate` becomes a page refresh.
	      } else {
	        return this.location.assign(url);
	      }
	      if (options.trigger) return this.loadUrl(fragment);
	    },
	
	    // Update the hash location, either replacing the current entry, or adding
	    // a new one to the browser history.
	    _updateHash: function(location, fragment, replace) {
	      if (replace) {
	        var href = location.href.replace(/(javascript:|#).*$/, '');
	        location.replace(href + '#' + fragment);
	      } else {
	        // Some browsers require that `hash` contains a leading #.
	        location.hash = '#' + fragment;
	      }
	    }
	
	  });
	
	  // Create the default Backbone.history.
	  Backbone.history = new History;
	
	  // Helpers
	  // -------
	
	  // Helper function to correctly set up the prototype chain for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var extend = function(protoProps, staticProps) {
	    var parent = this;
	    var child;
	
	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent constructor.
	    if (protoProps && _.has(protoProps, 'constructor')) {
	      child = protoProps.constructor;
	    } else {
	      child = function(){ return parent.apply(this, arguments); };
	    }
	
	    // Add static properties to the constructor function, if supplied.
	    _.extend(child, parent, staticProps);
	
	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent` constructor function.
	    var Surrogate = function(){ this.constructor = child; };
	    Surrogate.prototype = parent.prototype;
	    child.prototype = new Surrogate;
	
	    // Add prototype properties (instance properties) to the subclass,
	    // if supplied.
	    if (protoProps) _.extend(child.prototype, protoProps);
	
	    // Set a convenience property in case the parent's prototype is needed
	    // later.
	    child.__super__ = parent.prototype;
	
	    return child;
	  };
	
	  // Set up inheritance for the model, collection, router, view and history.
	  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
	
	  // Throw an error when a URL is needed, and none is supplied.
	  var urlError = function() {
	    throw new Error('A "url" property or function must be specified');
	  };
	
	  // Wrap an optional error callback with a fallback error event.
	  var wrapError = function(model, options) {
	    var error = options.error;
	    options.error = function(resp) {
	      if (error) error.call(options.context, model, resp, options);
	      model.trigger('error', model, resp, options);
	    };
	  };
	
	  return Backbone;
	
	}));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * qTip2 - Pretty powerful tooltips - v3.0.3
	 * http://qtip2.com
	 *
	 * Copyright (c) 2016 
	 * Released under the MIT licenses
	 * http://jquery.org/license
	 *
	 * Date: Wed May 11 2016 10:31 GMT+0100+0100
	 * Plugins: tips modal viewport svg imagemap ie6
	 * Styles: core basic css3
	 */
	/*global window: false, jQuery: false, console: false, define: false */
	
	/* Cache window, document, undefined */
	(function( window, document, undefined ) {
	
	// Uses AMD or browser globals to create a jQuery plugin.
	(function( factory ) {
		"use strict";
		if(true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(312)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		else if(jQuery && !jQuery.fn.qtip) {
			factory(jQuery);
		}
	}
	(function($) {
		"use strict"; // Enable ECMAScript "strict" operation for this function. See more: http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/
	;// Munge the primitives - Paul Irish tip
	var TRUE = true,
	FALSE = false,
	NULL = null,
	
	// Common variables
	X = 'x', Y = 'y',
	WIDTH = 'width',
	HEIGHT = 'height',
	
	// Positioning sides
	TOP = 'top',
	LEFT = 'left',
	BOTTOM = 'bottom',
	RIGHT = 'right',
	CENTER = 'center',
	
	// Position adjustment types
	FLIP = 'flip',
	FLIPINVERT = 'flipinvert',
	SHIFT = 'shift',
	
	// Shortcut vars
	QTIP, PROTOTYPE, CORNER, CHECKS,
	PLUGINS = {},
	NAMESPACE = 'qtip',
	ATTR_HAS = 'data-hasqtip',
	ATTR_ID = 'data-qtip-id',
	WIDGET = ['ui-widget', 'ui-tooltip'],
	SELECTOR = '.'+NAMESPACE,
	INACTIVE_EVENTS = 'click dblclick mousedown mouseup mousemove mouseleave mouseenter'.split(' '),
	
	CLASS_FIXED = NAMESPACE+'-fixed',
	CLASS_DEFAULT = NAMESPACE + '-default',
	CLASS_FOCUS = NAMESPACE + '-focus',
	CLASS_HOVER = NAMESPACE + '-hover',
	CLASS_DISABLED = NAMESPACE+'-disabled',
	
	replaceSuffix = '_replacedByqTip',
	oldtitle = 'oldtitle',
	trackingBound,
	
	// Browser detection
	BROWSER = {
		/*
		 * IE version detection
		 *
		 * Adapted from: http://ajaxian.com/archives/attack-of-the-ie-conditional-comment
		 * Credit to James Padolsey for the original implemntation!
		 */
		ie: (function() {
			/* eslint-disable no-empty */
			var v, i;
			for (
				v = 4, i = document.createElement('div');
				(i.innerHTML = '<!--[if gt IE ' + v + ']><i></i><![endif]-->') && i.getElementsByTagName('i')[0];
				v+=1
			) {}
			return v > 4 ? v : NaN;
			/* eslint-enable no-empty */
		})(),
	
		/*
		 * iOS version detection
		 */
		iOS: parseFloat(
			('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0,''])[1])
			.replace('undefined', '3_2').replace('_', '.').replace('_', '')
		) || FALSE
	};
	;function QTip(target, options, id, attr) {
		// Elements and ID
		this.id = id;
		this.target = target;
		this.tooltip = NULL;
		this.elements = { target: target };
	
		// Internal constructs
		this._id = NAMESPACE + '-' + id;
		this.timers = { img: {} };
		this.options = options;
		this.plugins = {};
	
		// Cache object
		this.cache = {
			event: {},
			target: $(),
			disabled: FALSE,
			attr: attr,
			onTooltip: FALSE,
			lastClass: ''
		};
	
		// Set the initial flags
		this.rendered = this.destroyed = this.disabled = this.waiting =
			this.hiddenDuringWait = this.positioning = this.triggering = FALSE;
	}
	PROTOTYPE = QTip.prototype;
	
	PROTOTYPE._when = function(deferreds) {
		return $.when.apply($, deferreds);
	};
	
	PROTOTYPE.render = function(show) {
		if(this.rendered || this.destroyed) { return this; } // If tooltip has already been rendered, exit
	
		var self = this,
			options = this.options,
			cache = this.cache,
			elements = this.elements,
			text = options.content.text,
			title = options.content.title,
			button = options.content.button,
			posOptions = options.position,
			deferreds = [];
	
		// Add ARIA attributes to target
		$.attr(this.target[0], 'aria-describedby', this._id);
	
		// Create public position object that tracks current position corners
		cache.posClass = this._createPosClass(
			(this.position = { my: posOptions.my, at: posOptions.at }).my
		);
	
		// Create tooltip element
		this.tooltip = elements.tooltip = $('<div/>', {
			'id': this._id,
			'class': [ NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass ].join(' '),
			'width': options.style.width || '',
			'height': options.style.height || '',
			'tracking': posOptions.target === 'mouse' && posOptions.adjust.mouse,
	
			/* ARIA specific attributes */
			'role': 'alert',
			'aria-live': 'polite',
			'aria-atomic': FALSE,
			'aria-describedby': this._id + '-content',
			'aria-hidden': TRUE
		})
		.toggleClass(CLASS_DISABLED, this.disabled)
		.attr(ATTR_ID, this.id)
		.data(NAMESPACE, this)
		.appendTo(posOptions.container)
		.append(
			// Create content element
			elements.content = $('<div />', {
				'class': NAMESPACE + '-content',
				'id': this._id + '-content',
				'aria-atomic': TRUE
			})
		);
	
		// Set rendered flag and prevent redundant reposition calls for now
		this.rendered = -1;
		this.positioning = TRUE;
	
		// Create title...
		if(title) {
			this._createTitle();
	
			// Update title only if its not a callback (called in toggle if so)
			if(!$.isFunction(title)) {
				deferreds.push( this._updateTitle(title, FALSE) );
			}
		}
	
		// Create button
		if(button) { this._createButton(); }
	
		// Set proper rendered flag and update content if not a callback function (called in toggle)
		if(!$.isFunction(text)) {
			deferreds.push( this._updateContent(text, FALSE) );
		}
		this.rendered = TRUE;
	
		// Setup widget classes
		this._setWidget();
	
		// Initialize 'render' plugins
		$.each(PLUGINS, function(name) {
			var instance;
			if(this.initialize === 'render' && (instance = this(self))) {
				self.plugins[name] = instance;
			}
		});
	
		// Unassign initial events and assign proper events
		this._unassignEvents();
		this._assignEvents();
	
		// When deferreds have completed
		this._when(deferreds).then(function() {
			// tooltiprender event
			self._trigger('render');
	
			// Reset flags
			self.positioning = FALSE;
	
			// Show tooltip if not hidden during wait period
			if(!self.hiddenDuringWait && (options.show.ready || show)) {
				self.toggle(TRUE, cache.event, FALSE);
			}
			self.hiddenDuringWait = FALSE;
		});
	
		// Expose API
		QTIP.api[this.id] = this;
	
		return this;
	};
	
	PROTOTYPE.destroy = function(immediate) {
		// Set flag the signify destroy is taking place to plugins
		// and ensure it only gets destroyed once!
		if(this.destroyed) { return this.target; }
	
		function process() {
			if(this.destroyed) { return; }
			this.destroyed = TRUE;
	
			var target = this.target,
				title = target.attr(oldtitle),
				timer;
	
			// Destroy tooltip if rendered
			if(this.rendered) {
				this.tooltip.stop(1,0).find('*').remove().end().remove();
			}
	
			// Destroy all plugins
			$.each(this.plugins, function() {
				this.destroy && this.destroy();
			});
	
			// Clear timers
			for (timer in this.timers) {
				if (this.timers.hasOwnProperty(timer)) {
					clearTimeout(this.timers[timer]);
				}
			}
	
			// Remove api object and ARIA attributes
			target.removeData(NAMESPACE)
				.removeAttr(ATTR_ID)
				.removeAttr(ATTR_HAS)
				.removeAttr('aria-describedby');
	
			// Reset old title attribute if removed
			if(this.options.suppress && title) {
				target.attr('title', title).removeAttr(oldtitle);
			}
	
			// Remove qTip events associated with this API
			this._unassignEvents();
	
			// Remove ID from used id objects, and delete object references
			// for better garbage collection and leak protection
			this.options = this.elements = this.cache = this.timers =
				this.plugins = this.mouse = NULL;
	
			// Delete epoxsed API object
			delete QTIP.api[this.id];
		}
	
		// If an immediate destroy is needed
		if((immediate !== TRUE || this.triggering === 'hide') && this.rendered) {
			this.tooltip.one('tooltiphidden', $.proxy(process, this));
			!this.triggering && this.hide();
		}
	
		// If we're not in the process of hiding... process
		else { process.call(this); }
	
		return this.target;
	};
	;function invalidOpt(a) {
		return a === NULL || $.type(a) !== 'object';
	}
	
	function invalidContent(c) {
		return !($.isFunction(c) || 
	            c && c.attr || 
	            c.length || 
	            $.type(c) === 'object' && (c.jquery || c.then));
	}
	
	// Option object sanitizer
	function sanitizeOptions(opts) {
		var content, text, ajax, once;
	
		if(invalidOpt(opts)) { return FALSE; }
	
		if(invalidOpt(opts.metadata)) {
			opts.metadata = { type: opts.metadata };
		}
	
		if('content' in opts) {
			content = opts.content;
	
			if(invalidOpt(content) || content.jquery || content.done) {
				text = invalidContent(content) ? FALSE : content;
				content = opts.content = {
					text: text
				};
			}
			else { text = content.text; }
	
			// DEPRECATED - Old content.ajax plugin functionality
			// Converts it into the proper Deferred syntax
			if('ajax' in content) {
				ajax = content.ajax;
				once = ajax && ajax.once !== FALSE;
				delete content.ajax;
	
				content.text = function(event, api) {
					var loading = text || $(this).attr(api.options.content.attr) || 'Loading...',
	
					deferred = $.ajax(
						$.extend({}, ajax, { context: api })
					)
					.then(ajax.success, NULL, ajax.error)
					.then(function(newContent) {
						if(newContent && once) { api.set('content.text', newContent); }
						return newContent;
					},
					function(xhr, status, error) {
						if(api.destroyed || xhr.status === 0) { return; }
						api.set('content.text', status + ': ' + error);
					});
	
					return !once ? (api.set('content.text', loading), deferred) : loading;
				};
			}
	
			if('title' in content) {
				if($.isPlainObject(content.title)) {
					content.button = content.title.button;
					content.title = content.title.text;
				}
	
				if(invalidContent(content.title || FALSE)) {
					content.title = FALSE;
				}
			}
		}
	
		if('position' in opts && invalidOpt(opts.position)) {
			opts.position = { my: opts.position, at: opts.position };
		}
	
		if('show' in opts && invalidOpt(opts.show)) {
			opts.show = opts.show.jquery ? { target: opts.show } :
				opts.show === TRUE ? { ready: TRUE } : { event: opts.show };
		}
	
		if('hide' in opts && invalidOpt(opts.hide)) {
			opts.hide = opts.hide.jquery ? { target: opts.hide } : { event: opts.hide };
		}
	
		if('style' in opts && invalidOpt(opts.style)) {
			opts.style = { classes: opts.style };
		}
	
		// Sanitize plugin options
		$.each(PLUGINS, function() {
			this.sanitize && this.sanitize(opts);
		});
	
		return opts;
	}
	
	// Setup builtin .set() option checks
	CHECKS = PROTOTYPE.checks = {
		builtin: {
			// Core checks
			'^id$': function(obj, o, v, prev) {
				var id = v === TRUE ? QTIP.nextid : v,
					newId = NAMESPACE + '-' + id;
	
				if(id !== FALSE && id.length > 0 && !$('#'+newId).length) {
					this._id = newId;
	
					if(this.rendered) {
						this.tooltip[0].id = this._id;
						this.elements.content[0].id = this._id + '-content';
						this.elements.title[0].id = this._id + '-title';
					}
				}
				else { obj[o] = prev; }
			},
			'^prerender': function(obj, o, v) {
				v && !this.rendered && this.render(this.options.show.ready);
			},
	
			// Content checks
			'^content.text$': function(obj, o, v) {
				this._updateContent(v);
			},
			'^content.attr$': function(obj, o, v, prev) {
				if(this.options.content.text === this.target.attr(prev)) {
					this._updateContent( this.target.attr(v) );
				}
			},
			'^content.title$': function(obj, o, v) {
				// Remove title if content is null
				if(!v) { return this._removeTitle(); }
	
				// If title isn't already created, create it now and update
				v && !this.elements.title && this._createTitle();
				this._updateTitle(v);
			},
			'^content.button$': function(obj, o, v) {
				this._updateButton(v);
			},
			'^content.title.(text|button)$': function(obj, o, v) {
				this.set('content.'+o, v); // Backwards title.text/button compat
			},
	
			// Position checks
			'^position.(my|at)$': function(obj, o, v){
				if('string' === typeof v) {
					this.position[o] = obj[o] = new CORNER(v, o === 'at');
				}
			},
			'^position.container$': function(obj, o, v){
				this.rendered && this.tooltip.appendTo(v);
			},
	
			// Show checks
			'^show.ready$': function(obj, o, v) {
				v && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));
			},
	
			// Style checks
			'^style.classes$': function(obj, o, v, p) {
				this.rendered && this.tooltip.removeClass(p).addClass(v);
			},
			'^style.(width|height)': function(obj, o, v) {
				this.rendered && this.tooltip.css(o, v);
			},
			'^style.widget|content.title': function() {
				this.rendered && this._setWidget();
			},
			'^style.def': function(obj, o, v) {
				this.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);
			},
	
			// Events check
			'^events.(render|show|move|hide|focus|blur)$': function(obj, o, v) {
				this.rendered && this.tooltip[($.isFunction(v) ? '' : 'un') + 'bind']('tooltip'+o, v);
			},
	
			// Properties which require event reassignment
			'^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)': function() {
				if(!this.rendered) { return; }
	
				// Set tracking flag
				var posOptions = this.options.position;
				this.tooltip.attr('tracking', posOptions.target === 'mouse' && posOptions.adjust.mouse);
	
				// Reassign events
				this._unassignEvents();
				this._assignEvents();
			}
		}
	};
	
	// Dot notation converter
	function convertNotation(options, notation) {
		var i = 0, obj, option = options,
	
		// Split notation into array
		levels = notation.split('.');
	
		// Loop through
		while(option = option[ levels[i++] ]) {
			if(i < levels.length) { obj = option; }
		}
	
		return [obj || options, levels.pop()];
	}
	
	PROTOTYPE.get = function(notation) {
		if(this.destroyed) { return this; }
	
		var o = convertNotation(this.options, notation.toLowerCase()),
			result = o[0][ o[1] ];
	
		return result.precedance ? result.string() : result;
	};
	
	function setCallback(notation, args) {
		var category, rule, match;
	
		for(category in this.checks) {
			if (!this.checks.hasOwnProperty(category)) { continue; }
	
			for(rule in this.checks[category]) {
				if (!this.checks[category].hasOwnProperty(rule)) { continue; }
	
				if(match = (new RegExp(rule, 'i')).exec(notation)) {
					args.push(match);
	
					if(category === 'builtin' || this.plugins[category]) {
						this.checks[category][rule].apply(
							this.plugins[category] || this, args
						);
					}
				}
			}
		}
	}
	
	var rmove = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,
		rrender = /^prerender|show\.ready/i;
	
	PROTOTYPE.set = function(option, value) {
		if(this.destroyed) { return this; }
	
		var rendered = this.rendered,
			reposition = FALSE,
			options = this.options,
			name;
	
		// Convert singular option/value pair into object form
		if('string' === typeof option) {
			name = option; option = {}; option[name] = value;
		}
		else { option = $.extend({}, option); }
	
		// Set all of the defined options to their new values
		$.each(option, function(notation, val) {
			if(rendered && rrender.test(notation)) {
				delete option[notation]; return;
			}
	
			// Set new obj value
			var obj = convertNotation(options, notation.toLowerCase()), previous;
			previous = obj[0][ obj[1] ];
			obj[0][ obj[1] ] = val && val.nodeType ? $(val) : val;
	
			// Also check if we need to reposition
			reposition = rmove.test(notation) || reposition;
	
			// Set the new params for the callback
			option[notation] = [obj[0], obj[1], val, previous];
		});
	
		// Re-sanitize options
		sanitizeOptions(options);
	
		/*
		 * Execute any valid callbacks for the set options
		 * Also set positioning flag so we don't get loads of redundant repositioning calls.
		 */
		this.positioning = TRUE;
		$.each(option, $.proxy(setCallback, this));
		this.positioning = FALSE;
	
		// Update position if needed
		if(this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {
			this.reposition( options.position.target === 'mouse' ? NULL : this.cache.event );
		}
	
		return this;
	};
	;PROTOTYPE._update = function(content, element) {
		var self = this,
			cache = this.cache;
	
		// Make sure tooltip is rendered and content is defined. If not return
		if(!this.rendered || !content) { return FALSE; }
	
		// Use function to parse content
		if($.isFunction(content)) {
			content = content.call(this.elements.target, cache.event, this) || '';
		}
	
		// Handle deferred content
		if($.isFunction(content.then)) {
			cache.waiting = TRUE;
			return content.then(function(c) {
				cache.waiting = FALSE;
				return self._update(c, element);
			}, NULL, function(e) {
				return self._update(e, element);
			});
		}
	
		// If content is null... return false
		if(content === FALSE || !content && content !== '') { return FALSE; }
	
		// Append new content if its a DOM array and show it if hidden
		if(content.jquery && content.length > 0) {
			element.empty().append(
				content.css({ display: 'block', visibility: 'visible' })
			);
		}
	
		// Content is a regular string, insert the new content
		else { element.html(content); }
	
		// Wait for content to be loaded, and reposition
		return this._waitForContent(element).then(function(images) {
			if(self.rendered && self.tooltip[0].offsetWidth > 0) {
				self.reposition(cache.event, !images.length);
			}
		});
	};
	
	PROTOTYPE._waitForContent = function(element) {
		var cache = this.cache;
	
		// Set flag
		cache.waiting = TRUE;
	
		// If imagesLoaded is included, ensure images have loaded and return promise
		return ( $.fn.imagesLoaded ? element.imagesLoaded() : new $.Deferred().resolve([]) )
			.done(function() { cache.waiting = FALSE; })
			.promise();
	};
	
	PROTOTYPE._updateContent = function(content, reposition) {
		this._update(content, this.elements.content, reposition);
	};
	
	PROTOTYPE._updateTitle = function(content, reposition) {
		if(this._update(content, this.elements.title, reposition) === FALSE) {
			this._removeTitle(FALSE);
		}
	};
	
	PROTOTYPE._createTitle = function()
	{
		var elements = this.elements,
			id = this._id+'-title';
	
		// Destroy previous title element, if present
		if(elements.titlebar) { this._removeTitle(); }
	
		// Create title bar and title elements
		elements.titlebar = $('<div />', {
			'class': NAMESPACE + '-titlebar ' + (this.options.style.widget ? createWidgetClass('header') : '')
		})
		.append(
			elements.title = $('<div />', {
				'id': id,
				'class': NAMESPACE + '-title',
				'aria-atomic': TRUE
			})
		)
		.insertBefore(elements.content)
	
		// Button-specific events
		.delegate('.qtip-close', 'mousedown keydown mouseup keyup mouseout', function(event) {
			$(this).toggleClass('ui-state-active ui-state-focus', event.type.substr(-4) === 'down');
		})
		.delegate('.qtip-close', 'mouseover mouseout', function(event){
			$(this).toggleClass('ui-state-hover', event.type === 'mouseover');
		});
	
		// Create button if enabled
		if(this.options.content.button) { this._createButton(); }
	};
	
	PROTOTYPE._removeTitle = function(reposition)
	{
		var elements = this.elements;
	
		if(elements.title) {
			elements.titlebar.remove();
			elements.titlebar = elements.title = elements.button = NULL;
	
			// Reposition if enabled
			if(reposition !== FALSE) { this.reposition(); }
		}
	};
	;PROTOTYPE._createPosClass = function(my) {
		return NAMESPACE + '-pos-' + (my || this.options.position.my).abbrev();
	};
	
	PROTOTYPE.reposition = function(event, effect) {
		if(!this.rendered || this.positioning || this.destroyed) { return this; }
	
		// Set positioning flag
		this.positioning = TRUE;
	
		var cache = this.cache,
			tooltip = this.tooltip,
			posOptions = this.options.position,
			target = posOptions.target,
			my = posOptions.my,
			at = posOptions.at,
			viewport = posOptions.viewport,
			container = posOptions.container,
			adjust = posOptions.adjust,
			method = adjust.method.split(' '),
			tooltipWidth = tooltip.outerWidth(FALSE),
			tooltipHeight = tooltip.outerHeight(FALSE),
			targetWidth = 0,
			targetHeight = 0,
			type = tooltip.css('position'),
			position = { left: 0, top: 0 },
			visible = tooltip[0].offsetWidth > 0,
			isScroll = event && event.type === 'scroll',
			win = $(window),
			doc = container[0].ownerDocument,
			mouse = this.mouse,
			pluginCalculations, offset, adjusted, newClass;
	
		// Check if absolute position was passed
		if($.isArray(target) && target.length === 2) {
			// Force left top and set position
			at = { x: LEFT, y: TOP };
			position = { left: target[0], top: target[1] };
		}
	
		// Check if mouse was the target
		else if(target === 'mouse') {
			// Force left top to allow flipping
			at = { x: LEFT, y: TOP };
	
			// Use the mouse origin that caused the show event, if distance hiding is enabled
			if((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {
				event =  cache.origin;
			}
	
			// Use cached event for resize/scroll events
			else if(!event || event && (event.type === 'resize' || event.type === 'scroll')) {
				event = cache.event;
			}
	
			// Otherwise, use the cached mouse coordinates if available
			else if(mouse && mouse.pageX) {
				event = mouse;
			}
	
			// Calculate body and container offset and take them into account below
			if(type !== 'static') { position = container.offset(); }
			if(doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {
				offset = $(document.body).offset();
			}
	
			// Use event coordinates for position
			position = {
				left: event.pageX - position.left + (offset && offset.left || 0),
				top: event.pageY - position.top + (offset && offset.top || 0)
			};
	
			// Scroll events are a pain, some browsers
			if(adjust.mouse && isScroll && mouse) {
				position.left -= (mouse.scrollX || 0) - win.scrollLeft();
				position.top -= (mouse.scrollY || 0) - win.scrollTop();
			}
		}
	
		// Target wasn't mouse or absolute...
		else {
			// Check if event targetting is being used
			if(target === 'event') {
				if(event && event.target && event.type !== 'scroll' && event.type !== 'resize') {
					cache.target = $(event.target);
				}
				else if(!event.target) {
					cache.target = this.elements.target;
				}
			}
			else if(target !== 'event'){
				cache.target = $(target.jquery ? target : this.elements.target);
			}
			target = cache.target;
	
			// Parse the target into a jQuery object and make sure there's an element present
			target = $(target).eq(0);
			if(target.length === 0) { return this; }
	
			// Check if window or document is the target
			else if(target[0] === document || target[0] === window) {
				targetWidth = BROWSER.iOS ? window.innerWidth : target.width();
				targetHeight = BROWSER.iOS ? window.innerHeight : target.height();
	
				if(target[0] === window) {
					position = {
						top: (viewport || target).scrollTop(),
						left: (viewport || target).scrollLeft()
					};
				}
			}
	
			// Check if the target is an <AREA> element
			else if(PLUGINS.imagemap && target.is('area')) {
				pluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);
			}
	
			// Check if the target is an SVG element
			else if(PLUGINS.svg && target && target[0].ownerSVGElement) {
				pluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);
			}
	
			// Otherwise use regular jQuery methods
			else {
				targetWidth = target.outerWidth(FALSE);
				targetHeight = target.outerHeight(FALSE);
				position = target.offset();
			}
	
			// Parse returned plugin values into proper variables
			if(pluginCalculations) {
				targetWidth = pluginCalculations.width;
				targetHeight = pluginCalculations.height;
				offset = pluginCalculations.offset;
				position = pluginCalculations.position;
			}
	
			// Adjust position to take into account offset parents
			position = this.reposition.offset(target, position, container);
	
			// Adjust for position.fixed tooltips (and also iOS scroll bug in v3.2-4.0 & v4.3-4.3.2)
			if(BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 ||
				BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 ||
				!BROWSER.iOS && type === 'fixed'
			){
				position.left -= win.scrollLeft();
				position.top -= win.scrollTop();
			}
	
			// Adjust position relative to target
			if(!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {
				position.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;
				position.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;
			}
		}
	
		// Adjust position relative to tooltip
		position.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);
		position.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0);
	
		// Use viewport adjustment plugin if enabled
		if(PLUGINS.viewport) {
			adjusted = position.adjusted = PLUGINS.viewport(
				this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight
			);
	
			// Apply offsets supplied by positioning plugin (if used)
			if(offset && adjusted.left) { position.left += offset.left; }
			if(offset && adjusted.top) {  position.top += offset.top; }
	
			// Apply any new 'my' position
			if(adjusted.my) { this.position.my = adjusted.my; }
		}
	
		// Viewport adjustment is disabled, set values to zero
		else { position.adjusted = { left: 0, top: 0 }; }
	
		// Set tooltip position class if it's changed
		if(cache.posClass !== (newClass = this._createPosClass(this.position.my))) {
			cache.posClass = newClass;
			tooltip.removeClass(cache.posClass).addClass(newClass);
		}
	
		// tooltipmove event
		if(!this._trigger('move', [position, viewport.elem || viewport], event)) { return this; }
		delete position.adjusted;
	
		// If effect is disabled, target it mouse, no animation is defined or positioning gives NaN out, set CSS directly
		if(effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === 'mouse' || !$.isFunction(posOptions.effect)) {
			tooltip.css(position);
		}
	
		// Use custom function if provided
		else if($.isFunction(posOptions.effect)) {
			posOptions.effect.call(tooltip, this, $.extend({}, position));
			tooltip.queue(function(next) {
				// Reset attributes to avoid cross-browser rendering bugs
				$(this).css({ opacity: '', height: '' });
				if(BROWSER.ie) { this.style.removeAttribute('filter'); }
	
				next();
			});
		}
	
		// Set positioning flag
		this.positioning = FALSE;
	
		return this;
	};
	
	// Custom (more correct for qTip!) offset calculator
	PROTOTYPE.reposition.offset = function(elem, pos, container) {
		if(!container[0]) { return pos; }
	
		var ownerDocument = $(elem[0].ownerDocument),
			quirks = !!BROWSER.ie && document.compatMode !== 'CSS1Compat',
			parent = container[0],
			scrolled, position, parentOffset, overflow;
	
		function scroll(e, i) {
			pos.left += i * e.scrollLeft();
			pos.top += i * e.scrollTop();
		}
	
		// Compensate for non-static containers offset
		do {
			if((position = $.css(parent, 'position')) !== 'static') {
				if(position === 'fixed') {
					parentOffset = parent.getBoundingClientRect();
					scroll(ownerDocument, -1);
				}
				else {
					parentOffset = $(parent).position();
					parentOffset.left += parseFloat($.css(parent, 'borderLeftWidth')) || 0;
					parentOffset.top += parseFloat($.css(parent, 'borderTopWidth')) || 0;
				}
	
				pos.left -= parentOffset.left + (parseFloat($.css(parent, 'marginLeft')) || 0);
				pos.top -= parentOffset.top + (parseFloat($.css(parent, 'marginTop')) || 0);
	
				// If this is the first parent element with an overflow of "scroll" or "auto", store it
				if(!scrolled && (overflow = $.css(parent, 'overflow')) !== 'hidden' && overflow !== 'visible') { scrolled = $(parent); }
			}
		}
		while(parent = parent.offsetParent);
	
		// Compensate for containers scroll if it also has an offsetParent (or in IE quirks mode)
		if(scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {
			scroll(scrolled, 1);
		}
	
		return pos;
	};
	
	// Corner class
	var C = (CORNER = PROTOTYPE.reposition.Corner = function(corner, forceY) {
		corner = ('' + corner).replace(/([A-Z])/, ' $1').replace(/middle/gi, CENTER).toLowerCase();
		this.x = (corner.match(/left|right/i) || corner.match(/center/) || ['inherit'])[0].toLowerCase();
		this.y = (corner.match(/top|bottom|center/i) || ['inherit'])[0].toLowerCase();
		this.forceY = !!forceY;
	
		var f = corner.charAt(0);
		this.precedance = f === 't' || f === 'b' ? Y : X;
	}).prototype;
	
	C.invert = function(z, center) {
		this[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];
	};
	
	C.string = function(join) {
		var x = this.x, y = this.y;
	
		var result = x !== y ?
			x === 'center' || y !== 'center' && (this.precedance === Y || this.forceY) ? 
				[y,x] : 
				[x,y] :
			[x];
	
		return join !== false ? result.join(' ') : result;
	};
	
	C.abbrev = function() {
		var result = this.string(false);
		return result[0].charAt(0) + (result[1] && result[1].charAt(0) || '');
	};
	
	C.clone = function() {
		return new CORNER( this.string(), this.forceY );
	};
	
	;
	PROTOTYPE.toggle = function(state, event) {
		var cache = this.cache,
			options = this.options,
			tooltip = this.tooltip;
	
		// Try to prevent flickering when tooltip overlaps show element
		if(event) {
			if((/over|enter/).test(event.type) && cache.event && (/out|leave/).test(cache.event.type) &&
				options.show.target.add(event.target).length === options.show.target.length &&
				tooltip.has(event.relatedTarget).length) {
				return this;
			}
	
			// Cache event
			cache.event = $.event.fix(event);
		}
	
		// If we're currently waiting and we've just hidden... stop it
		this.waiting && !state && (this.hiddenDuringWait = TRUE);
	
		// Render the tooltip if showing and it isn't already
		if(!this.rendered) { return state ? this.render(1) : this; }
		else if(this.destroyed || this.disabled) { return this; }
	
		var type = state ? 'show' : 'hide',
			opts = this.options[type],
			posOptions = this.options.position,
			contentOptions = this.options.content,
			width = this.tooltip.css('width'),
			visible = this.tooltip.is(':visible'),
			animate = state || opts.target.length === 1,
			sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target,
			identicalState, allow, after;
	
		// Detect state if valid one isn't provided
		if((typeof state).search('boolean|number')) { state = !visible; }
	
		// Check if the tooltip is in an identical state to the new would-be state
		identicalState = !tooltip.is(':animated') && visible === state && sameTarget;
	
		// Fire tooltip(show/hide) event and check if destroyed
		allow = !identicalState ? !!this._trigger(type, [90]) : NULL;
	
		// Check to make sure the tooltip wasn't destroyed in the callback
		if(this.destroyed) { return this; }
	
		// If the user didn't stop the method prematurely and we're showing the tooltip, focus it
		if(allow !== FALSE && state) { this.focus(event); }
	
		// If the state hasn't changed or the user stopped it, return early
		if(!allow || identicalState) { return this; }
	
		// Set ARIA hidden attribute
		$.attr(tooltip[0], 'aria-hidden', !!!state);
	
		// Execute state specific properties
		if(state) {
			// Store show origin coordinates
			this.mouse && (cache.origin = $.event.fix(this.mouse));
	
			// Update tooltip content & title if it's a dynamic function
			if($.isFunction(contentOptions.text)) { this._updateContent(contentOptions.text, FALSE); }
			if($.isFunction(contentOptions.title)) { this._updateTitle(contentOptions.title, FALSE); }
	
			// Cache mousemove events for positioning purposes (if not already tracking)
			if(!trackingBound && posOptions.target === 'mouse' && posOptions.adjust.mouse) {
				$(document).bind('mousemove.'+NAMESPACE, this._storeMouse);
				trackingBound = TRUE;
			}
	
			// Update the tooltip position (set width first to prevent viewport/max-width issues)
			if(!width) { tooltip.css('width', tooltip.outerWidth(FALSE)); }
			this.reposition(event, arguments[2]);
			if(!width) { tooltip.css('width', ''); }
	
			// Hide other tooltips if tooltip is solo
			if(!!opts.solo) {
				(typeof opts.solo === 'string' ? $(opts.solo) : $(SELECTOR, opts.solo))
					.not(tooltip).not(opts.target).qtip('hide', new $.Event('tooltipsolo'));
			}
		}
		else {
			// Clear show timer if we're hiding
			clearTimeout(this.timers.show);
	
			// Remove cached origin on hide
			delete cache.origin;
	
			// Remove mouse tracking event if not needed (all tracking qTips are hidden)
			if(trackingBound && !$(SELECTOR+'[tracking="true"]:visible', opts.solo).not(tooltip).length) {
				$(document).unbind('mousemove.'+NAMESPACE);
				trackingBound = FALSE;
			}
	
			// Blur the tooltip
			this.blur(event);
		}
	
		// Define post-animation, state specific properties
		after = $.proxy(function() {
			if(state) {
				// Prevent antialias from disappearing in IE by removing filter
				if(BROWSER.ie) { tooltip[0].style.removeAttribute('filter'); }
	
				// Remove overflow setting to prevent tip bugs
				tooltip.css('overflow', '');
	
				// Autofocus elements if enabled
				if('string' === typeof opts.autofocus) {
					$(this.options.show.autofocus, tooltip).focus();
				}
	
				// If set, hide tooltip when inactive for delay period
				this.options.show.target.trigger('qtip-'+this.id+'-inactive');
			}
			else {
				// Reset CSS states
				tooltip.css({
					display: '',
					visibility: '',
					opacity: '',
					left: '',
					top: ''
				});
			}
	
			// tooltipvisible/tooltiphidden events
			this._trigger(state ? 'visible' : 'hidden');
		}, this);
	
		// If no effect type is supplied, use a simple toggle
		if(opts.effect === FALSE || animate === FALSE) {
			tooltip[ type ]();
			after();
		}
	
		// Use custom function if provided
		else if($.isFunction(opts.effect)) {
			tooltip.stop(1, 1);
			opts.effect.call(tooltip, this);
			tooltip.queue('fx', function(n) {
				after(); n();
			});
		}
	
		// Use basic fade function by default
		else { tooltip.fadeTo(90, state ? 1 : 0, after); }
	
		// If inactive hide method is set, active it
		if(state) { opts.target.trigger('qtip-'+this.id+'-inactive'); }
	
		return this;
	};
	
	PROTOTYPE.show = function(event) { return this.toggle(TRUE, event); };
	
	PROTOTYPE.hide = function(event) { return this.toggle(FALSE, event); };
	;PROTOTYPE.focus = function(event) {
		if(!this.rendered || this.destroyed) { return this; }
	
		var qtips = $(SELECTOR),
			tooltip = this.tooltip,
			curIndex = parseInt(tooltip[0].style.zIndex, 10),
			newIndex = QTIP.zindex + qtips.length;
	
		// Only update the z-index if it has changed and tooltip is not already focused
		if(!tooltip.hasClass(CLASS_FOCUS)) {
			// tooltipfocus event
			if(this._trigger('focus', [newIndex], event)) {
				// Only update z-index's if they've changed
				if(curIndex !== newIndex) {
					// Reduce our z-index's and keep them properly ordered
					qtips.each(function() {
						if(this.style.zIndex > curIndex) {
							this.style.zIndex = this.style.zIndex - 1;
						}
					});
	
					// Fire blur event for focused tooltip
					qtips.filter('.' + CLASS_FOCUS).qtip('blur', event);
				}
	
				// Set the new z-index
				tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
			}
		}
	
		return this;
	};
	
	PROTOTYPE.blur = function(event) {
		if(!this.rendered || this.destroyed) { return this; }
	
		// Set focused status to FALSE
		this.tooltip.removeClass(CLASS_FOCUS);
	
		// tooltipblur event
		this._trigger('blur', [ this.tooltip.css('zIndex') ], event);
	
		return this;
	};
	;PROTOTYPE.disable = function(state) {
		if(this.destroyed) { return this; }
	
		// If 'toggle' is passed, toggle the current state
		if(state === 'toggle') {
			state = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);
		}
	
		// Disable if no state passed
		else if('boolean' !== typeof state) {
			state = TRUE;
		}
	
		if(this.rendered) {
			this.tooltip.toggleClass(CLASS_DISABLED, state)
				.attr('aria-disabled', state);
		}
	
		this.disabled = !!state;
	
		return this;
	};
	
	PROTOTYPE.enable = function() { return this.disable(FALSE); };
	;PROTOTYPE._createButton = function()
	{
		var self = this,
			elements = this.elements,
			tooltip = elements.tooltip,
			button = this.options.content.button,
			isString = typeof button === 'string',
			close = isString ? button : 'Close tooltip';
	
		if(elements.button) { elements.button.remove(); }
	
		// Use custom button if one was supplied by user, else use default
		if(button.jquery) {
			elements.button = button;
		}
		else {
			elements.button = $('<a />', {
				'class': 'qtip-close ' + (this.options.style.widget ? '' : NAMESPACE+'-icon'),
				'title': close,
				'aria-label': close
			})
			.prepend(
				$('<span />', {
					'class': 'ui-icon ui-icon-close',
					'html': '&times;'
				})
			);
		}
	
		// Create button and setup attributes
		elements.button.appendTo(elements.titlebar || tooltip)
			.attr('role', 'button')
			.click(function(event) {
				if(!tooltip.hasClass(CLASS_DISABLED)) { self.hide(event); }
				return FALSE;
			});
	};
	
	PROTOTYPE._updateButton = function(button)
	{
		// Make sure tooltip is rendered and if not, return
		if(!this.rendered) { return FALSE; }
	
		var elem = this.elements.button;
		if(button) { this._createButton(); }
		else { elem.remove(); }
	};
	;// Widget class creator
	function createWidgetClass(cls) {
		return WIDGET.concat('').join(cls ? '-'+cls+' ' : ' ');
	}
	
	// Widget class setter method
	PROTOTYPE._setWidget = function()
	{
		var on = this.options.style.widget,
			elements = this.elements,
			tooltip = elements.tooltip,
			disabled = tooltip.hasClass(CLASS_DISABLED);
	
		tooltip.removeClass(CLASS_DISABLED);
		CLASS_DISABLED = on ? 'ui-state-disabled' : 'qtip-disabled';
		tooltip.toggleClass(CLASS_DISABLED, disabled);
	
		tooltip.toggleClass('ui-helper-reset '+createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);
	
		if(elements.content) {
			elements.content.toggleClass( createWidgetClass('content'), on);
		}
		if(elements.titlebar) {
			elements.titlebar.toggleClass( createWidgetClass('header'), on);
		}
		if(elements.button) {
			elements.button.toggleClass(NAMESPACE+'-icon', !on);
		}
	};
	;function delay(callback, duration) {
		// If tooltip has displayed, start hide timer
		if(duration > 0) {
			return setTimeout(
				$.proxy(callback, this), duration
			);
		}
		else{ callback.call(this); }
	}
	
	function showMethod(event) {
		if(this.tooltip.hasClass(CLASS_DISABLED)) { return; }
	
		// Clear hide timers
		clearTimeout(this.timers.show);
		clearTimeout(this.timers.hide);
	
		// Start show timer
		this.timers.show = delay.call(this,
			function() { this.toggle(TRUE, event); },
			this.options.show.delay
		);
	}
	
	function hideMethod(event) {
		if(this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) { return; }
	
		// Check if new target was actually the tooltip element
		var relatedTarget = $(event.relatedTarget),
			ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0],
			ontoTarget = relatedTarget[0] === this.options.show.target[0];
	
		// Clear timers and stop animation queue
		clearTimeout(this.timers.show);
		clearTimeout(this.timers.hide);
	
		// Prevent hiding if tooltip is fixed and event target is the tooltip.
		// Or if mouse positioning is enabled and cursor momentarily overlaps
		if(this !== relatedTarget[0] &&
			(this.options.position.target === 'mouse' && ontoTooltip) ||
			this.options.hide.fixed && (
				(/mouse(out|leave|move)/).test(event.type) && (ontoTooltip || ontoTarget))
			)
		{
			/* eslint-disable no-empty */
			try {
				event.preventDefault();
				event.stopImmediatePropagation();
			} catch(e) {}
			/* eslint-enable no-empty */
	
			return;
		}
	
		// If tooltip has displayed, start hide timer
		this.timers.hide = delay.call(this,
			function() { this.toggle(FALSE, event); },
			this.options.hide.delay,
			this
		);
	}
	
	function inactiveMethod(event) {
		if(this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) { return; }
	
		// Clear timer
		clearTimeout(this.timers.inactive);
	
		this.timers.inactive = delay.call(this,
			function(){ this.hide(event); },
			this.options.hide.inactive
		);
	}
	
	function repositionMethod(event) {
		if(this.rendered && this.tooltip[0].offsetWidth > 0) { this.reposition(event); }
	}
	
	// Store mouse coordinates
	PROTOTYPE._storeMouse = function(event) {
		(this.mouse = $.event.fix(event)).type = 'mousemove';
		return this;
	};
	
	// Bind events
	PROTOTYPE._bind = function(targets, events, method, suffix, context) {
		if(!targets || !method || !events.length) { return; }
		var ns = '.' + this._id + (suffix ? '-'+suffix : '');
		$(targets).bind(
			(events.split ? events : events.join(ns + ' ')) + ns,
			$.proxy(method, context || this)
		);
		return this;
	};
	PROTOTYPE._unbind = function(targets, suffix) {
		targets && $(targets).unbind('.' + this._id + (suffix ? '-'+suffix : ''));
		return this;
	};
	
	// Global delegation helper
	function delegate(selector, events, method) {
		$(document.body).delegate(selector,
			(events.split ? events : events.join('.'+NAMESPACE + ' ')) + '.'+NAMESPACE,
			function() {
				var api = QTIP.api[ $.attr(this, ATTR_ID) ];
				api && !api.disabled && method.apply(api, arguments);
			}
		);
	}
	// Event trigger
	PROTOTYPE._trigger = function(type, args, event) {
		var callback = new $.Event('tooltip'+type);
		callback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;
	
		this.triggering = type;
		this.tooltip.trigger(callback, [this].concat(args || []));
		this.triggering = FALSE;
	
		return !callback.isDefaultPrevented();
	};
	
	PROTOTYPE._bindEvents = function(showEvents, hideEvents, showTargets, hideTargets, showCallback, hideCallback) {
		// Get tasrgets that lye within both
		var similarTargets = showTargets.filter( hideTargets ).add( hideTargets.filter(showTargets) ),
			toggleEvents = [];
	
		// If hide and show targets are the same...
		if(similarTargets.length) {
	
			// Filter identical show/hide events
			$.each(hideEvents, function(i, type) {
				var showIndex = $.inArray(type, showEvents);
	
				// Both events are identical, remove from both hide and show events
				// and append to toggleEvents
				showIndex > -1 && toggleEvents.push( showEvents.splice( showIndex, 1 )[0] );
			});
	
			// Toggle events are special case of identical show/hide events, which happen in sequence
			if(toggleEvents.length) {
				// Bind toggle events to the similar targets
				this._bind(similarTargets, toggleEvents, function(event) {
					var state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;
					(state ? hideCallback : showCallback).call(this, event);
				});
	
				// Remove the similar targets from the regular show/hide bindings
				showTargets = showTargets.not(similarTargets);
				hideTargets = hideTargets.not(similarTargets);
			}
		}
	
		// Apply show/hide/toggle events
		this._bind(showTargets, showEvents, showCallback);
		this._bind(hideTargets, hideEvents, hideCallback);
	};
	
	PROTOTYPE._assignInitialEvents = function(event) {
		var options = this.options,
			showTarget = options.show.target,
			hideTarget = options.hide.target,
			showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],
			hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
	
		// Catch remove/removeqtip events on target element to destroy redundant tooltips
		this._bind(this.elements.target, ['remove', 'removeqtip'], function() {
			this.destroy(true);
		}, 'destroy');
	
		/*
		 * Make sure hoverIntent functions properly by using mouseleave as a hide event if
		 * mouseenter/mouseout is used for show.event, even if it isn't in the users options.
		 */
		if(/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {
			hideEvents.push('mouseleave');
		}
	
		/*
		 * Also make sure initial mouse targetting works correctly by caching mousemove coords
		 * on show targets before the tooltip has rendered. Also set onTarget when triggered to
		 * keep mouse tracking working.
		 */
		this._bind(showTarget, 'mousemove', function(moveEvent) {
			this._storeMouse(moveEvent);
			this.cache.onTarget = TRUE;
		});
	
		// Define hoverIntent function
		function hoverIntent(hoverEvent) {
			// Only continue if tooltip isn't disabled
			if(this.disabled || this.destroyed) { return FALSE; }
	
			// Cache the event data
			this.cache.event = hoverEvent && $.event.fix(hoverEvent);
			this.cache.target = hoverEvent && $(hoverEvent.target);
	
			// Start the event sequence
			clearTimeout(this.timers.show);
			this.timers.show = delay.call(this,
				function() { this.render(typeof hoverEvent === 'object' || options.show.ready); },
				options.prerender ? 0 : options.show.delay
			);
		}
	
		// Filter and bind events
		this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function() {
			if(!this.timers) { return FALSE; }
			clearTimeout(this.timers.show);
		});
	
		// Prerendering is enabled, create tooltip now
		if(options.show.ready || options.prerender) { hoverIntent.call(this, event); }
	};
	
	// Event assignment method
	PROTOTYPE._assignEvents = function() {
		var self = this,
			options = this.options,
			posOptions = options.position,
	
			tooltip = this.tooltip,
			showTarget = options.show.target,
			hideTarget = options.hide.target,
			containerTarget = posOptions.container,
			viewportTarget = posOptions.viewport,
			documentTarget = $(document),
			windowTarget = $(window),
	
			showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],
			hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
	
	
		// Assign passed event callbacks
		$.each(options.events, function(name, callback) {
			self._bind(tooltip, name === 'toggle' ? ['tooltipshow','tooltiphide'] : ['tooltip'+name], callback, null, tooltip);
		});
	
		// Hide tooltips when leaving current window/frame (but not select/option elements)
		if(/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === 'window') {
			this._bind(documentTarget, ['mouseout', 'blur'], function(event) {
				if(!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {
					this.hide(event);
				}
			});
		}
	
		// Enable hide.fixed by adding appropriate class
		if(options.hide.fixed) {
			hideTarget = hideTarget.add( tooltip.addClass(CLASS_FIXED) );
		}
	
		/*
		 * Make sure hoverIntent functions properly by using mouseleave to clear show timer if
		 * mouseenter/mouseout is used for show.event, even if it isn't in the users options.
		 */
		else if(/mouse(over|enter)/i.test(options.show.event)) {
			this._bind(hideTarget, 'mouseleave', function() {
				clearTimeout(this.timers.show);
			});
		}
	
		// Hide tooltip on document mousedown if unfocus events are enabled
		if(('' + options.hide.event).indexOf('unfocus') > -1) {
			this._bind(containerTarget.closest('html'), ['mousedown', 'touchstart'], function(event) {
				var elem = $(event.target),
					enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0,
					isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;
	
				if(elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor &&
					!this.target.has(elem[0]).length && enabled
				) {
					this.hide(event);
				}
			});
		}
	
		// Check if the tooltip hides when inactive
		if('number' === typeof options.hide.inactive) {
			// Bind inactive method to show target(s) as a custom event
			this._bind(showTarget, 'qtip-'+this.id+'-inactive', inactiveMethod, 'inactive');
	
			// Define events which reset the 'inactive' event handler
			this._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);
		}
	
		// Filter and bind events
		this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod);
	
		// Mouse movement bindings
		this._bind(showTarget.add(tooltip), 'mousemove', function(event) {
			// Check if the tooltip hides when mouse is moved a certain distance
			if('number' === typeof options.hide.distance) {
				var origin = this.cache.origin || {},
					limit = this.options.hide.distance,
					abs = Math.abs;
	
				// Check if the movement has gone beyond the limit, and hide it if so
				if(abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {
					this.hide(event);
				}
			}
	
			// Cache mousemove coords on show targets
			this._storeMouse(event);
		});
	
		// Mouse positioning events
		if(posOptions.target === 'mouse') {
			// If mouse adjustment is on...
			if(posOptions.adjust.mouse) {
				// Apply a mouseleave event so we don't get problems with overlapping
				if(options.hide.event) {
					// Track if we're on the target or not
					this._bind(showTarget, ['mouseenter', 'mouseleave'], function(event) {
						if(!this.cache) {return FALSE; }
						this.cache.onTarget = event.type === 'mouseenter';
					});
				}
	
				// Update tooltip position on mousemove
				this._bind(documentTarget, 'mousemove', function(event) {
					// Update the tooltip position only if the tooltip is visible and adjustment is enabled
					if(this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {
						this.reposition(event);
					}
				});
			}
		}
	
		// Adjust positions of the tooltip on window resize if enabled
		if(posOptions.adjust.resize || viewportTarget.length) {
			this._bind( $.event.special.resize ? viewportTarget : windowTarget, 'resize', repositionMethod );
		}
	
		// Adjust tooltip position on scroll of the window or viewport element if present
		if(posOptions.adjust.scroll) {
			this._bind( windowTarget.add(posOptions.container), 'scroll', repositionMethod );
		}
	};
	
	// Un-assignment method
	PROTOTYPE._unassignEvents = function() {
		var options = this.options,
			showTargets = options.show.target,
			hideTargets = options.hide.target,
			targets = $.grep([
				this.elements.target[0],
				this.rendered && this.tooltip[0],
				options.position.container[0],
				options.position.viewport[0],
				options.position.container.closest('html')[0], // unfocus
				window,
				document
			], function(i) {
				return typeof i === 'object';
			});
	
		// Add show and hide targets if they're valid
		if(showTargets && showTargets.toArray) {
			targets = targets.concat(showTargets.toArray());
		}
		if(hideTargets && hideTargets.toArray) {
			targets = targets.concat(hideTargets.toArray());
		}
	
		// Unbind the events
		this._unbind(targets)
			._unbind(targets, 'destroy')
			._unbind(targets, 'inactive');
	};
	
	// Apply common event handlers using delegate (avoids excessive .bind calls!)
	$(function() {
		delegate(SELECTOR, ['mouseenter', 'mouseleave'], function(event) {
			var state = event.type === 'mouseenter',
				tooltip = $(event.currentTarget),
				target = $(event.relatedTarget || event.target),
				options = this.options;
	
			// On mouseenter...
			if(state) {
				// Focus the tooltip on mouseenter (z-index stacking)
				this.focus(event);
	
				// Clear hide timer on tooltip hover to prevent it from closing
				tooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);
			}
	
			// On mouseleave...
			else {
				// When mouse tracking is enabled, hide when we leave the tooltip and not onto the show target (if a hide event is set)
				if(options.position.target === 'mouse' && options.position.adjust.mouse &&
					options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {
					this.hide(event);
				}
			}
	
			// Add hover class
			tooltip.toggleClass(CLASS_HOVER, state);
		});
	
		// Define events which reset the 'inactive' event handler
		delegate('['+ATTR_ID+']', INACTIVE_EVENTS, inactiveMethod);
	});
	;// Initialization method
	function init(elem, id, opts) {
		var obj, posOptions, attr, config, title,
	
		// Setup element references
		docBody = $(document.body),
	
		// Use document body instead of document element if needed
		newTarget = elem[0] === document ? docBody : elem,
	
		// Grab metadata from element if plugin is present
		metadata = elem.metadata ? elem.metadata(opts.metadata) : NULL,
	
		// If metadata type if HTML5, grab 'name' from the object instead, or use the regular data object otherwise
		metadata5 = opts.metadata.type === 'html5' && metadata ? metadata[opts.metadata.name] : NULL,
	
		// Grab data from metadata.name (or data-qtipopts as fallback) using .data() method,
		html5 = elem.data(opts.metadata.name || 'qtipopts');
	
		// If we don't get an object returned attempt to parse it manualyl without parseJSON
		/* eslint-disable no-empty */
		try { html5 = typeof html5 === 'string' ? $.parseJSON(html5) : html5; }
		catch(e) {}
		/* eslint-enable no-empty */
	
		// Merge in and sanitize metadata
		config = $.extend(TRUE, {}, QTIP.defaults, opts,
			typeof html5 === 'object' ? sanitizeOptions(html5) : NULL,
			sanitizeOptions(metadata5 || metadata));
	
		// Re-grab our positioning options now we've merged our metadata and set id to passed value
		posOptions = config.position;
		config.id = id;
	
		// Setup missing content if none is detected
		if('boolean' === typeof config.content.text) {
			attr = elem.attr(config.content.attr);
	
			// Grab from supplied attribute if available
			if(config.content.attr !== FALSE && attr) { config.content.text = attr; }
	
			// No valid content was found, abort render
			else { return FALSE; }
		}
	
		// Setup target options
		if(!posOptions.container.length) { posOptions.container = docBody; }
		if(posOptions.target === FALSE) { posOptions.target = newTarget; }
		if(config.show.target === FALSE) { config.show.target = newTarget; }
		if(config.show.solo === TRUE) { config.show.solo = posOptions.container.closest('body'); }
		if(config.hide.target === FALSE) { config.hide.target = newTarget; }
		if(config.position.viewport === TRUE) { config.position.viewport = posOptions.container; }
	
		// Ensure we only use a single container
		posOptions.container = posOptions.container.eq(0);
	
		// Convert position corner values into x and y strings
		posOptions.at = new CORNER(posOptions.at, TRUE);
		posOptions.my = new CORNER(posOptions.my);
	
		// Destroy previous tooltip if overwrite is enabled, or skip element if not
		if(elem.data(NAMESPACE)) {
			if(config.overwrite) {
				elem.qtip('destroy', true);
			}
			else if(config.overwrite === FALSE) {
				return FALSE;
			}
		}
	
		// Add has-qtip attribute
		elem.attr(ATTR_HAS, id);
	
		// Remove title attribute and store it if present
		if(config.suppress && (title = elem.attr('title'))) {
			// Final attr call fixes event delegatiom and IE default tooltip showing problem
			elem.removeAttr('title').attr(oldtitle, title).attr('title', '');
		}
	
		// Initialize the tooltip and add API reference
		obj = new QTip(elem, config, id, !!attr);
		elem.data(NAMESPACE, obj);
	
		return obj;
	}
	
	// jQuery $.fn extension method
	QTIP = $.fn.qtip = function(options, notation, newValue)
	{
		var command = ('' + options).toLowerCase(), // Parse command
			returned = NULL,
			args = $.makeArray(arguments).slice(1),
			event = args[args.length - 1],
			opts = this[0] ? $.data(this[0], NAMESPACE) : NULL;
	
		// Check for API request
		if(!arguments.length && opts || command === 'api') {
			return opts;
		}
	
		// Execute API command if present
		else if('string' === typeof options) {
			this.each(function() {
				var api = $.data(this, NAMESPACE);
				if(!api) { return TRUE; }
	
				// Cache the event if possible
				if(event && event.timeStamp) { api.cache.event = event; }
	
				// Check for specific API commands
				if(notation && (command === 'option' || command === 'options')) {
					if(newValue !== undefined || $.isPlainObject(notation)) {
						api.set(notation, newValue);
					}
					else {
						returned = api.get(notation);
						return FALSE;
					}
				}
	
				// Execute API command
				else if(api[command]) {
					api[command].apply(api, args);
				}
			});
	
			return returned !== NULL ? returned : this;
		}
	
		// No API commands. validate provided options and setup qTips
		else if('object' === typeof options || !arguments.length) {
			// Sanitize options first
			opts = sanitizeOptions($.extend(TRUE, {}, options));
	
			return this.each(function(i) {
				var api, id;
	
				// Find next available ID, or use custom ID if provided
				id = $.isArray(opts.id) ? opts.id[i] : opts.id;
				id = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id;
	
				// Initialize the qTip and re-grab newly sanitized options
				api = init($(this), id, opts);
				if(api === FALSE) { return TRUE; }
				else { QTIP.api[id] = api; }
	
				// Initialize plugins
				$.each(PLUGINS, function() {
					if(this.initialize === 'initialize') { this(api); }
				});
	
				// Assign initial pre-render events
				api._assignInitialEvents(event);
			});
		}
	};
	
	// Expose class
	$.qtip = QTip;
	
	// Populated in render method
	QTIP.api = {};
	;$.each({
		/* Allow other plugins to successfully retrieve the title of an element with a qTip applied */
		attr: function(attr, val) {
			if(this.length) {
				var self = this[0],
					title = 'title',
					api = $.data(self, 'qtip');
	
				if(attr === title && api && api.options && 'object' === typeof api && 'object' === typeof api.options && api.options.suppress) {
					if(arguments.length < 2) {
						return $.attr(self, oldtitle);
					}
	
					// If qTip is rendered and title was originally used as content, update it
					if(api && api.options.content.attr === title && api.cache.attr) {
						api.set('content.text', val);
					}
	
					// Use the regular attr method to set, then cache the result
					return this.attr(oldtitle, val);
				}
			}
	
			return $.fn['attr'+replaceSuffix].apply(this, arguments);
		},
	
		/* Allow clone to correctly retrieve cached title attributes */
		clone: function(keepData) {
			// Clone our element using the real clone method
			var elems = $.fn['clone'+replaceSuffix].apply(this, arguments);
	
			// Grab all elements with an oldtitle set, and change it to regular title attribute, if keepData is false
			if(!keepData) {
				elems.filter('['+oldtitle+']').attr('title', function() {
					return $.attr(this, oldtitle);
				})
				.removeAttr(oldtitle);
			}
	
			return elems;
		}
	}, function(name, func) {
		if(!func || $.fn[name+replaceSuffix]) { return TRUE; }
	
		var old = $.fn[name+replaceSuffix] = $.fn[name];
		$.fn[name] = function() {
			return func.apply(this, arguments) || old.apply(this, arguments);
		};
	});
	
	/* Fire off 'removeqtip' handler in $.cleanData if jQuery UI not present (it already does similar).
	 * This snippet is taken directly from jQuery UI source code found here:
	 *     http://code.jquery.com/ui/jquery-ui-git.js
	 */
	if(!$.ui) {
		$['cleanData'+replaceSuffix] = $.cleanData;
		$.cleanData = function( elems ) {
			for(var i = 0, elem; (elem = $( elems[i] )).length; i++) {
				if(elem.attr(ATTR_HAS)) {
					/* eslint-disable no-empty */
					try { elem.triggerHandler('removeqtip'); }
					catch( e ) {}
					/* eslint-enable no-empty */
				}
			}
			$['cleanData'+replaceSuffix].apply(this, arguments);
		};
	}
	;// qTip version
	QTIP.version = '3.0.3';
	
	// Base ID for all qTips
	QTIP.nextid = 0;
	
	// Inactive events array
	QTIP.inactiveEvents = INACTIVE_EVENTS;
	
	// Base z-index for all qTips
	QTIP.zindex = 15000;
	
	// Define configuration defaults
	QTIP.defaults = {
		prerender: FALSE,
		id: FALSE,
		overwrite: TRUE,
		suppress: TRUE,
		content: {
			text: TRUE,
			attr: 'title',
			title: FALSE,
			button: FALSE
		},
		position: {
			my: 'top left',
			at: 'bottom right',
			target: FALSE,
			container: FALSE,
			viewport: FALSE,
			adjust: {
				x: 0, y: 0,
				mouse: TRUE,
				scroll: TRUE,
				resize: TRUE,
				method: 'flipinvert flipinvert'
			},
			effect: function(api, pos) {
				$(this).animate(pos, {
					duration: 200,
					queue: FALSE
				});
			}
		},
		show: {
			target: FALSE,
			event: 'mouseenter',
			effect: TRUE,
			delay: 90,
			solo: FALSE,
			ready: FALSE,
			autofocus: FALSE
		},
		hide: {
			target: FALSE,
			event: 'mouseleave',
			effect: TRUE,
			delay: 0,
			fixed: FALSE,
			inactive: FALSE,
			leave: 'window',
			distance: FALSE
		},
		style: {
			classes: '',
			widget: FALSE,
			width: FALSE,
			height: FALSE,
			def: TRUE
		},
		events: {
			render: NULL,
			move: NULL,
			show: NULL,
			hide: NULL,
			toggle: NULL,
			visible: NULL,
			hidden: NULL,
			focus: NULL,
			blur: NULL
		}
	};
	;var TIP,
	createVML,
	SCALE,
	PIXEL_RATIO,
	BACKING_STORE_RATIO,
	
	// Common CSS strings
	MARGIN = 'margin',
	BORDER = 'border',
	COLOR = 'color',
	BG_COLOR = 'background-color',
	TRANSPARENT = 'transparent',
	IMPORTANT = ' !important',
	
	// Check if the browser supports <canvas/> elements
	HASCANVAS = !!document.createElement('canvas').getContext,
	
	// Invalid colour values used in parseColours()
	INVALID = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i;
	
	// Camel-case method, taken from jQuery source
	// http://code.jquery.com/jquery-1.8.0.js
	function camel(s) { return s.charAt(0).toUpperCase() + s.slice(1); }
	
	/*
	 * Modified from Modernizr's testPropsAll()
	 * http://modernizr.com/downloads/modernizr-latest.js
	 */
	var cssProps = {}, cssPrefixes = ['Webkit', 'O', 'Moz', 'ms'];
	function vendorCss(elem, prop) {
		var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
			props = (prop + ' ' + cssPrefixes.join(ucProp + ' ') + ucProp).split(' '),
			cur, val, i = 0;
	
		// If the property has already been mapped...
		if(cssProps[prop]) { return elem.css(cssProps[prop]); }
	
		while(cur = props[i++]) {
			if((val = elem.css(cur)) !== undefined) {
				cssProps[prop] = cur;
				return val;
			}
		}
	}
	
	// Parse a given elements CSS property into an int
	function intCss(elem, prop) {
		return Math.ceil(parseFloat(vendorCss(elem, prop)));
	}
	
	
	// VML creation (for IE only)
	if(!HASCANVAS) {
		createVML = function(tag, props, style) {
			return '<qtipvml:'+tag+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(props||'')+
				' style="behavior: url(#default#VML); '+(style||'')+ '" />';
		};
	}
	
	// Canvas only definitions
	else {
		PIXEL_RATIO = window.devicePixelRatio || 1;
		BACKING_STORE_RATIO = (function() {
			var context = document.createElement('canvas').getContext('2d');
			return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio ||
					context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;
		})();
		SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;
	}
	
	
	function Tip(qtip, options) {
		this._ns = 'tip';
		this.options = options;
		this.offset = options.offset;
		this.size = [ options.width, options.height ];
	
		// Initialize
		this.qtip = qtip;
		this.init(qtip);
	}
	
	$.extend(Tip.prototype, {
		init: function(qtip) {
			var context, tip;
	
			// Create tip element and prepend to the tooltip
			tip = this.element = qtip.elements.tip = $('<div />', { 'class': NAMESPACE+'-tip' }).prependTo(qtip.tooltip);
	
			// Create tip drawing element(s)
			if(HASCANVAS) {
				// save() as soon as we create the canvas element so FF2 doesn't bork on our first restore()!
				context = $('<canvas />').appendTo(this.element)[0].getContext('2d');
	
				// Setup constant parameters
				context.lineJoin = 'miter';
				context.miterLimit = 100000;
				context.save();
			}
			else {
				context = createVML('shape', 'coordorigin="0,0"', 'position:absolute;');
				this.element.html(context + context);
	
				// Prevent mousing down on the tip since it causes problems with .live() handling in IE due to VML
				qtip._bind( $('*', tip).add(tip), ['click', 'mousedown'], function(event) { event.stopPropagation(); }, this._ns);
			}
	
			// Bind update events
			qtip._bind(qtip.tooltip, 'tooltipmove', this.reposition, this._ns, this);
	
			// Create it
			this.create();
		},
	
		_swapDimensions: function() {
			this.size[0] = this.options.height;
			this.size[1] = this.options.width;
		},
		_resetDimensions: function() {
			this.size[0] = this.options.width;
			this.size[1] = this.options.height;
		},
	
		_useTitle: function(corner) {
			var titlebar = this.qtip.elements.titlebar;
			return titlebar && (
				corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE)
			);
		},
	
		_parseCorner: function(corner) {
			var my = this.qtip.options.position.my;
	
			// Detect corner and mimic properties
			if(corner === FALSE || my === FALSE) {
				corner = FALSE;
			}
			else if(corner === TRUE) {
				corner = new CORNER( my.string() );
			}
			else if(!corner.string) {
				corner = new CORNER(corner);
				corner.fixed = TRUE;
			}
	
			return corner;
		},
	
		_parseWidth: function(corner, side, use) {
			var elements = this.qtip.elements,
				prop = BORDER + camel(side) + 'Width';
	
			return (use ? intCss(use, prop) : 
				intCss(elements.content, prop) ||
				intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) ||
				intCss(elements.tooltip, prop)
			) || 0;
		},
	
		_parseRadius: function(corner) {
			var elements = this.qtip.elements,
				prop = BORDER + camel(corner.y) + camel(corner.x) + 'Radius';
	
			return BROWSER.ie < 9 ? 0 :
				intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) ||
				intCss(elements.tooltip, prop) || 0;
		},
	
		_invalidColour: function(elem, prop, compare) {
			var val = elem.css(prop);
			return !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;
		},
	
		_parseColours: function(corner) {
			var elements = this.qtip.elements,
				tip = this.element.css('cssText', ''),
				borderSide = BORDER + camel(corner[ corner.precedance ]) + camel(COLOR),
				colorElem = this._useTitle(corner) && elements.titlebar || elements.content,
				css = this._invalidColour, color = [];
	
			// Attempt to detect the background colour from various elements, left-to-right precedance
			color[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) ||
				css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR);
	
			// Attempt to detect the correct border side colour from various elements, left-to-right precedance
			color[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) ||
				css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide);
	
			// Reset background and border colours
			$('*', tip).add(tip).css('cssText', BG_COLOR+':'+TRANSPARENT+IMPORTANT+';'+BORDER+':0'+IMPORTANT+';');
	
			return color;
		},
	
		_calculateSize: function(corner) {
			var y = corner.precedance === Y,
				width = this.options.width,
				height = this.options.height,
				isCenter = corner.abbrev() === 'c',
				base = (y ? width: height) * (isCenter ? 0.5 : 1),
				pow = Math.pow,
				round = Math.round,
				bigHyp, ratio, result,
	
			smallHyp = Math.sqrt( pow(base, 2) + pow(height, 2) ),
			hyp = [
				this.border / base * smallHyp,
				this.border / height * smallHyp
			];
	
			hyp[2] = Math.sqrt( pow(hyp[0], 2) - pow(this.border, 2) );
			hyp[3] = Math.sqrt( pow(hyp[1], 2) - pow(this.border, 2) );
	
			bigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);
			ratio = bigHyp / smallHyp;
	
			result = [ round(ratio * width), round(ratio * height) ];
			return y ? result : result.reverse();
		},
	
		// Tip coordinates calculator
		_calculateTip: function(corner, size, scale) {
			scale = scale || 1;
			size = size || this.size;
	
			var width = size[0] * scale,
				height = size[1] * scale,
				width2 = Math.ceil(width / 2), height2 = Math.ceil(height / 2),
	
			// Define tip coordinates in terms of height and width values
			tips = {
				br:	[0,0,		width,height,	width,0],
				bl:	[0,0,		width,0,		0,height],
				tr:	[0,height,	width,0,		width,height],
				tl:	[0,0,		0,height,		width,height],
				tc:	[0,height,	width2,0,		width,height],
				bc:	[0,0,		width,0,		width2,height],
				rc:	[0,0,		width,height2,	0,height],
				lc:	[width,0,	width,height,	0,height2]
			};
	
			// Set common side shapes
			tips.lt = tips.br; tips.rt = tips.bl;
			tips.lb = tips.tr; tips.rb = tips.tl;
	
			return tips[ corner.abbrev() ];
		},
	
		// Tip coordinates drawer (canvas)
		_drawCoords: function(context, coords) {
			context.beginPath();
			context.moveTo(coords[0], coords[1]);
			context.lineTo(coords[2], coords[3]);
			context.lineTo(coords[4], coords[5]);
			context.closePath();
		},
	
		create: function() {
			// Determine tip corner
			var c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner);
	
			// If we have a tip corner...
			this.enabled = !!this.corner && this.corner.abbrev() !== 'c';
			if(this.enabled) {
				// Cache it
				this.qtip.cache.corner = c.clone();
	
				// Create it
				this.update();
			}
	
			// Toggle tip element
			this.element.toggle(this.enabled);
	
			return this.corner;
		},
	
		update: function(corner, position) {
			if(!this.enabled) { return this; }
	
			var elements = this.qtip.elements,
				tip = this.element,
				inner = tip.children(),
				options = this.options,
				curSize = this.size,
				mimic = options.mimic,
				round = Math.round,
				color, precedance, context,
				coords, bigCoords, translate, newSize, border;
	
			// Re-determine tip if not already set
			if(!corner) { corner = this.qtip.cache.corner || this.corner; }
	
			// Use corner property if we detect an invalid mimic value
			if(mimic === FALSE) { mimic = corner; }
	
			// Otherwise inherit mimic properties from the corner object as necessary
			else {
				mimic = new CORNER(mimic);
				mimic.precedance = corner.precedance;
	
				if(mimic.x === 'inherit') { mimic.x = corner.x; }
				else if(mimic.y === 'inherit') { mimic.y = corner.y; }
				else if(mimic.x === mimic.y) {
					mimic[ corner.precedance ] = corner[ corner.precedance ];
				}
			}
			precedance = mimic.precedance;
	
			// Ensure the tip width.height are relative to the tip position
			if(corner.precedance === X) { this._swapDimensions(); }
			else { this._resetDimensions(); }
	
			// Update our colours
			color = this.color = this._parseColours(corner);
	
			// Detect border width, taking into account colours
			if(color[1] !== TRANSPARENT) {
				// Grab border width
				border = this.border = this._parseWidth(corner, corner[corner.precedance]);
	
				// If border width isn't zero, use border color as fill if it's not invalid (1.0 style tips)
				if(options.border && border < 1 && !INVALID.test(color[1])) { color[0] = color[1]; }
	
				// Set border width (use detected border width if options.border is true)
				this.border = border = options.border !== TRUE ? options.border : border;
			}
	
			// Border colour was invalid, set border to zero
			else { this.border = border = 0; }
	
			// Determine tip size
			newSize = this.size = this._calculateSize(corner);
			tip.css({
				width: newSize[0],
				height: newSize[1],
				lineHeight: newSize[1]+'px'
			});
	
			// Calculate tip translation
			if(corner.precedance === Y) {
				translate = [
					round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2),
					round(mimic.y === TOP ? newSize[1] - curSize[1] : 0)
				];
			}
			else {
				translate = [
					round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0),
					round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2)
				];
			}
	
			// Canvas drawing implementation
			if(HASCANVAS) {
				// Grab canvas context and clear/save it
				context = inner[0].getContext('2d');
				context.restore(); context.save();
				context.clearRect(0,0,6000,6000);
	
				// Calculate coordinates
				coords = this._calculateTip(mimic, curSize, SCALE);
				bigCoords = this._calculateTip(mimic, this.size, SCALE);
	
				// Set the canvas size using calculated size
				inner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);
				inner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]);
	
				// Draw the outer-stroke tip
				this._drawCoords(context, bigCoords);
				context.fillStyle = color[1];
				context.fill();
	
				// Draw the actual tip
				context.translate(translate[0] * SCALE, translate[1] * SCALE);
				this._drawCoords(context, coords);
				context.fillStyle = color[0];
				context.fill();
			}
	
			// VML (IE Proprietary implementation)
			else {
				// Calculate coordinates
				coords = this._calculateTip(mimic);
	
				// Setup coordinates string
				coords = 'm' + coords[0] + ',' + coords[1] + ' l' + coords[2] +
					',' + coords[3] + ' ' + coords[4] + ',' + coords[5] + ' xe';
	
				// Setup VML-specific offset for pixel-perfection
				translate[2] = border && /^(r|b)/i.test(corner.string()) ?
					BROWSER.ie === 8 ? 2 : 1 : 0;
	
				// Set initial CSS
				inner.css({
					coordsize: newSize[0]+border + ' ' + newSize[1]+border,
					antialias: ''+(mimic.string().indexOf(CENTER) > -1),
					left: translate[0] - translate[2] * Number(precedance === X),
					top: translate[1] - translate[2] * Number(precedance === Y),
					width: newSize[0] + border,
					height: newSize[1] + border
				})
				.each(function(i) {
					var $this = $(this);
	
					// Set shape specific attributes
					$this[ $this.prop ? 'prop' : 'attr' ]({
						coordsize: newSize[0]+border + ' ' + newSize[1]+border,
						path: coords,
						fillcolor: color[0],
						filled: !!i,
						stroked: !i
					})
					.toggle(!!(border || i));
	
					// Check if border is enabled and add stroke element
					!i && $this.html( createVML(
						'stroke', 'weight="'+border*2+'px" color="'+color[1]+'" miterlimit="1000" joinstyle="miter"'
					) );
				});
			}
	
			// Opera bug #357 - Incorrect tip position
			// https://github.com/Craga89/qTip2/issues/367
			window.opera && setTimeout(function() {
				elements.tip.css({
					display: 'inline-block',
					visibility: 'visible'
				});
			}, 1);
	
			// Position if needed
			if(position !== FALSE) { this.calculate(corner, newSize); }
		},
	
		calculate: function(corner, size) {
			if(!this.enabled) { return FALSE; }
	
			var self = this,
				elements = this.qtip.elements,
				tip = this.element,
				userOffset = this.options.offset,
				position = {},
				precedance, corners;
	
			// Inherit corner if not provided
			corner = corner || this.corner;
			precedance = corner.precedance;
	
			// Determine which tip dimension to use for adjustment
			size = size || this._calculateSize(corner);
	
			// Setup corners and offset array
			corners = [ corner.x, corner.y ];
			if(precedance === X) { corners.reverse(); }
	
			// Calculate tip position
			$.each(corners, function(i, side) {
				var b, bc, br;
	
				if(side === CENTER) {
					b = precedance === Y ? LEFT : TOP;
					position[ b ] = '50%';
					position[MARGIN+'-' + b] = -Math.round(size[ precedance === Y ? 0 : 1 ] / 2) + userOffset;
				}
				else {
					b = self._parseWidth(corner, side, elements.tooltip);
					bc = self._parseWidth(corner, side, elements.content);
					br = self._parseRadius(corner);
	
					position[ side ] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));
				}
			});
	
			// Adjust for tip size
			position[ corner[precedance] ] -= size[ precedance === X ? 0 : 1 ];
	
			// Set and return new position
			tip.css({ margin: '', top: '', bottom: '', left: '', right: '' }).css(position);
			return position;
		},
	
		reposition: function(event, api, pos) {
			if(!this.enabled) { return; }
	
			var cache = api.cache,
				newCorner = this.corner.clone(),
				adjust = pos.adjusted,
				method = api.options.position.adjust.method.split(' '),
				horizontal = method[0],
				vertical = method[1] || method[0],
				shift = { left: FALSE, top: FALSE, x: 0, y: 0 },
				offset, css = {}, props;
	
			function shiftflip(direction, precedance, popposite, side, opposite) {
				// Horizontal - Shift or flip method
				if(direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {
					newCorner.precedance = newCorner.precedance === X ? Y : X;
				}
				else if(direction !== SHIFT && adjust[side]){
					newCorner[precedance] = newCorner[precedance] === CENTER ?
						adjust[side] > 0 ? side : opposite :
						newCorner[precedance] === side ? opposite : side;
				}
			}
	
			function shiftonly(xy, side, opposite) {
				if(newCorner[xy] === CENTER) {
					css[MARGIN+'-'+side] = shift[xy] = offset[MARGIN+'-'+side] - adjust[side];
				}
				else {
					props = offset[opposite] !== undefined ?
						[ adjust[side], -offset[side] ] : [ -adjust[side], offset[side] ];
	
					if( (shift[xy] = Math.max(props[0], props[1])) > props[0] ) {
						pos[side] -= adjust[side];
						shift[side] = FALSE;
					}
	
					css[ offset[opposite] !== undefined ? opposite : side ] = shift[xy];
				}
			}
	
			// If our tip position isn't fixed e.g. doesn't adjust with viewport...
			if(this.corner.fixed !== TRUE) {
				// Perform shift/flip adjustments
				shiftflip(horizontal, X, Y, LEFT, RIGHT);
				shiftflip(vertical, Y, X, TOP, BOTTOM);
	
				// Update and redraw the tip if needed (check cached details of last drawn tip)
				if(newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {
					this.update(newCorner, FALSE);
				}
			}
	
			// Setup tip offset properties
			offset = this.calculate(newCorner);
	
			// Readjust offset object to make it left/top
			if(offset.right !== undefined) { offset.left = -offset.right; }
			if(offset.bottom !== undefined) { offset.top = -offset.bottom; }
			offset.user = this.offset;
	
			// Perform shift adjustments
			shift.left = horizontal === SHIFT && !!adjust.left;
			if(shift.left) {
				shiftonly(X, LEFT, RIGHT);
			}
			shift.top = vertical === SHIFT && !!adjust.top;
			if(shift.top) {
				shiftonly(Y, TOP, BOTTOM);
			}
	
			/*
			* If the tip is adjusted in both dimensions, or in a
			* direction that would cause it to be anywhere but the
			* outer border, hide it!
			*/
			this.element.css(css).toggle(
				!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x)
			);
	
			// Adjust position to accomodate tip dimensions
			pos.left -= offset.left.charAt ? offset.user :
				horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;
			pos.top -= offset.top.charAt ? offset.user :
				vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0;
	
			// Cache details
			cache.cornerLeft = adjust.left; cache.cornerTop = adjust.top;
			cache.corner = newCorner.clone();
		},
	
		destroy: function() {
			// Unbind events
			this.qtip._unbind(this.qtip.tooltip, this._ns);
	
			// Remove the tip element(s)
			if(this.qtip.elements.tip) {
				this.qtip.elements.tip.find('*')
					.remove().end().remove();
			}
		}
	});
	
	TIP = PLUGINS.tip = function(api) {
		return new Tip(api, api.options.style.tip);
	};
	
	// Initialize tip on render
	TIP.initialize = 'render';
	
	// Setup plugin sanitization options
	TIP.sanitize = function(options) {
		if(options.style && 'tip' in options.style) {
			var opts = options.style.tip;
			if(typeof opts !== 'object') { opts = options.style.tip = { corner: opts }; }
			if(!(/string|boolean/i).test(typeof opts.corner)) { opts.corner = TRUE; }
		}
	};
	
	// Add new option checks for the plugin
	CHECKS.tip = {
		'^position.my|style.tip.(corner|mimic|border)$': function() {
			// Make sure a tip can be drawn
			this.create();
	
			// Reposition the tooltip
			this.qtip.reposition();
		},
		'^style.tip.(height|width)$': function(obj) {
			// Re-set dimensions and redraw the tip
			this.size = [ obj.width, obj.height ];
			this.update();
	
			// Reposition the tooltip
			this.qtip.reposition();
		},
		'^content.title|style.(classes|widget)$': function() {
			this.update();
		}
	};
	
	// Extend original qTip defaults
	$.extend(TRUE, QTIP.defaults, {
		style: {
			tip: {
				corner: TRUE,
				mimic: FALSE,
				width: 6,
				height: 6,
				border: TRUE,
				offset: 0
			}
		}
	});
	;var MODAL, OVERLAY,
		MODALCLASS = 'qtip-modal',
		MODALSELECTOR = '.'+MODALCLASS;
	
	OVERLAY = function()
	{
		var self = this,
			focusableElems = {},
			current,
			prevState,
			elem;
	
		// Modified code from jQuery UI 1.10.0 source
		// http://code.jquery.com/ui/1.10.0/jquery-ui.js
		function focusable(element) {
			// Use the defined focusable checker when possible
			if($.expr[':'].focusable) { return $.expr[':'].focusable; }
	
			var isTabIndexNotNaN = !isNaN($.attr(element, 'tabindex')),
				nodeName = element.nodeName && element.nodeName.toLowerCase(),
				map, mapName, img;
	
			if('area' === nodeName) {
				map = element.parentNode;
				mapName = map.name;
				if(!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {
					return false;
				}
				img = $('img[usemap=#' + mapName + ']')[0];
				return !!img && img.is(':visible');
			}
	
			return /input|select|textarea|button|object/.test( nodeName ) ?
				!element.disabled :
				'a' === nodeName ?
					element.href || isTabIndexNotNaN :
					isTabIndexNotNaN
			;
		}
	
		// Focus inputs using cached focusable elements (see update())
		function focusInputs(blurElems) {
			// Blurring body element in IE causes window.open windows to unfocus!
			if(focusableElems.length < 1 && blurElems.length) { blurElems.not('body').blur(); }
	
			// Focus the inputs
			else { focusableElems.first().focus(); }
		}
	
		// Steal focus from elements outside tooltip
		function stealFocus(event) {
			if(!elem.is(':visible')) { return; }
	
			var target = $(event.target),
				tooltip = current.tooltip,
				container = target.closest(SELECTOR),
				targetOnTop;
	
			// Determine if input container target is above this
			targetOnTop = container.length < 1 ? FALSE :
				parseInt(container[0].style.zIndex, 10) > parseInt(tooltip[0].style.zIndex, 10);
	
			// If we're showing a modal, but focus has landed on an input below
			// this modal, divert focus to the first visible input in this modal
			// or if we can't find one... the tooltip itself
			if(!targetOnTop && target.closest(SELECTOR)[0] !== tooltip[0]) {
				focusInputs(target);
			}
		}
	
		$.extend(self, {
			init: function() {
				// Create document overlay
				elem = self.elem = $('<div />', {
					id: 'qtip-overlay',
					html: '<div></div>',
					mousedown: function() { return FALSE; }
				})
				.hide();
	
				// Make sure we can't focus anything outside the tooltip
				$(document.body).bind('focusin'+MODALSELECTOR, stealFocus);
	
				// Apply keyboard "Escape key" close handler
				$(document).bind('keydown'+MODALSELECTOR, function(event) {
					if(current && current.options.show.modal.escape && event.keyCode === 27) {
						current.hide(event);
					}
				});
	
				// Apply click handler for blur option
				elem.bind('click'+MODALSELECTOR, function(event) {
					if(current && current.options.show.modal.blur) {
						current.hide(event);
					}
				});
	
				return self;
			},
	
			update: function(api) {
				// Update current API reference
				current = api;
	
				// Update focusable elements if enabled
				if(api.options.show.modal.stealfocus !== FALSE) {
					focusableElems = api.tooltip.find('*').filter(function() {
						return focusable(this);
					});
				}
				else { focusableElems = []; }
			},
	
			toggle: function(api, state, duration) {
				var tooltip = api.tooltip,
					options = api.options.show.modal,
					effect = options.effect,
					type = state ? 'show': 'hide',
					visible = elem.is(':visible'),
					visibleModals = $(MODALSELECTOR).filter(':visible:not(:animated)').not(tooltip);
	
				// Set active tooltip API reference
				self.update(api);
	
				// If the modal can steal the focus...
				// Blur the current item and focus anything in the modal we an
				if(state && options.stealfocus !== FALSE) {
					focusInputs( $(':focus') );
				}
	
				// Toggle backdrop cursor style on show
				elem.toggleClass('blurs', options.blur);
	
				// Append to body on show
				if(state) {
					elem.appendTo(document.body);
				}
	
				// Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible
				if(elem.is(':animated') && visible === state && prevState !== FALSE || !state && visibleModals.length) {
					return self;
				}
	
				// Stop all animations
				elem.stop(TRUE, FALSE);
	
				// Use custom function if provided
				if($.isFunction(effect)) {
					effect.call(elem, state);
				}
	
				// If no effect type is supplied, use a simple toggle
				else if(effect === FALSE) {
					elem[ type ]();
				}
	
				// Use basic fade function
				else {
					elem.fadeTo( parseInt(duration, 10) || 90, state ? 1 : 0, function() {
						if(!state) { elem.hide(); }
					});
				}
	
				// Reset position and detach from body on hide
				if(!state) {
					elem.queue(function(next) {
						elem.css({ left: '', top: '' });
						if(!$(MODALSELECTOR).length) { elem.detach(); }
						next();
					});
				}
	
				// Cache the state
				prevState = state;
	
				// If the tooltip is destroyed, set reference to null
				if(current.destroyed) { current = NULL; }
	
				return self;
			}
		});
	
		self.init();
	};
	OVERLAY = new OVERLAY();
	
	function Modal(api, options) {
		this.options = options;
		this._ns = '-modal';
	
		this.qtip = api;
		this.init(api);
	}
	
	$.extend(Modal.prototype, {
		init: function(qtip) {
			var tooltip = qtip.tooltip;
	
			// If modal is disabled... return
			if(!this.options.on) { return this; }
	
			// Set overlay reference
			qtip.elements.overlay = OVERLAY.elem;
	
			// Add unique attribute so we can grab modal tooltips easily via a SELECTOR, and set z-index
			tooltip.addClass(MODALCLASS).css('z-index', QTIP.modal_zindex + $(MODALSELECTOR).length);
	
			// Apply our show/hide/focus modal events
			qtip._bind(tooltip, ['tooltipshow', 'tooltiphide'], function(event, api, duration) {
				var oEvent = event.originalEvent;
	
				// Make sure mouseout doesn't trigger a hide when showing the modal and mousing onto backdrop
				if(event.target === tooltip[0]) {
					if(oEvent && event.type === 'tooltiphide' && /mouse(leave|enter)/.test(oEvent.type) && $(oEvent.relatedTarget).closest(OVERLAY.elem[0]).length) {
						/* eslint-disable no-empty */
						try { event.preventDefault(); }
						catch(e) {}
						/* eslint-enable no-empty */
					}
					else if(!oEvent || oEvent && oEvent.type !== 'tooltipsolo') {
						this.toggle(event, event.type === 'tooltipshow', duration);
					}
				}
			}, this._ns, this);
	
			// Adjust modal z-index on tooltip focus
			qtip._bind(tooltip, 'tooltipfocus', function(event, api) {
				// If focus was cancelled before it reached us, don't do anything
				if(event.isDefaultPrevented() || event.target !== tooltip[0]) { return; }
	
				var qtips = $(MODALSELECTOR),
	
				// Keep the modal's lower than other, regular qtips
				newIndex = QTIP.modal_zindex + qtips.length,
				curIndex = parseInt(tooltip[0].style.zIndex, 10);
	
				// Set overlay z-index
				OVERLAY.elem[0].style.zIndex = newIndex - 1;
	
				// Reduce modal z-index's and keep them properly ordered
				qtips.each(function() {
					if(this.style.zIndex > curIndex) {
						this.style.zIndex -= 1;
					}
				});
	
				// Fire blur event for focused tooltip
				qtips.filter('.' + CLASS_FOCUS).qtip('blur', event.originalEvent);
	
				// Set the new z-index
				tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
	
				// Set current
				OVERLAY.update(api);
	
				// Prevent default handling
				/* eslint-disable no-empty */
				try { event.preventDefault(); }
				catch(e) {}
				/* eslint-enable no-empty */
			}, this._ns, this);
	
			// Focus any other visible modals when this one hides
			qtip._bind(tooltip, 'tooltiphide', function(event) {
				if(event.target === tooltip[0]) {
					$(MODALSELECTOR).filter(':visible').not(tooltip).last().qtip('focus', event);
				}
			}, this._ns, this);
		},
	
		toggle: function(event, state, duration) {
			// Make sure default event hasn't been prevented
			if(event && event.isDefaultPrevented()) { return this; }
	
			// Toggle it
			OVERLAY.toggle(this.qtip, !!state, duration);
		},
	
		destroy: function() {
			// Remove modal class
			this.qtip.tooltip.removeClass(MODALCLASS);
	
			// Remove bound events
			this.qtip._unbind(this.qtip.tooltip, this._ns);
	
			// Delete element reference
			OVERLAY.toggle(this.qtip, FALSE);
			delete this.qtip.elements.overlay;
		}
	});
	
	
	MODAL = PLUGINS.modal = function(api) {
		return new Modal(api, api.options.show.modal);
	};
	
	// Setup sanitiztion rules
	MODAL.sanitize = function(opts) {
		if(opts.show) {
			if(typeof opts.show.modal !== 'object') { opts.show.modal = { on: !!opts.show.modal }; }
			else if(typeof opts.show.modal.on === 'undefined') { opts.show.modal.on = TRUE; }
		}
	};
	
	// Base z-index for all modal tooltips (use qTip core z-index as a base)
	/* eslint-disable camelcase */
	QTIP.modal_zindex = QTIP.zindex - 200;
	/* eslint-enable camelcase */
	
	// Plugin needs to be initialized on render
	MODAL.initialize = 'render';
	
	// Setup option set checks
	CHECKS.modal = {
		'^show.modal.(on|blur)$': function() {
			// Initialise
			this.destroy();
			this.init();
	
			// Show the modal if not visible already and tooltip is visible
			this.qtip.elems.overlay.toggle(
				this.qtip.tooltip[0].offsetWidth > 0
			);
		}
	};
	
	// Extend original api defaults
	$.extend(TRUE, QTIP.defaults, {
		show: {
			modal: {
				on: FALSE,
				effect: TRUE,
				blur: TRUE,
				stealfocus: TRUE,
				escape: TRUE
			}
		}
	});
	;PLUGINS.viewport = function(api, position, posOptions, targetWidth, targetHeight, elemWidth, elemHeight)
	{
		var target = posOptions.target,
			tooltip = api.elements.tooltip,
			my = posOptions.my,
			at = posOptions.at,
			adjust = posOptions.adjust,
			method = adjust.method.split(' '),
			methodX = method[0],
			methodY = method[1] || method[0],
			viewport = posOptions.viewport,
			container = posOptions.container,
			adjusted = { left: 0, top: 0 },
			fixed, newMy, containerOffset, containerStatic,
			viewportWidth, viewportHeight, viewportScroll, viewportOffset;
	
		// If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return
		if(!viewport.jquery || target[0] === window || target[0] === document.body || adjust.method === 'none') {
			return adjusted;
		}
	
		// Cach container details
		containerOffset = container.offset() || adjusted;
		containerStatic = container.css('position') === 'static';
	
		// Cache our viewport details
		fixed = tooltip.css('position') === 'fixed';
		viewportWidth = viewport[0] === window ? viewport.width() : viewport.outerWidth(FALSE);
		viewportHeight = viewport[0] === window ? viewport.height() : viewport.outerHeight(FALSE);
		viewportScroll = { left: fixed ? 0 : viewport.scrollLeft(), top: fixed ? 0 : viewport.scrollTop() };
		viewportOffset = viewport.offset() || adjusted;
	
		// Generic calculation method
		function calculate(side, otherSide, type, adjustment, side1, side2, lengthName, targetLength, elemLength) {
			var initialPos = position[side1],
				mySide = my[side],
				atSide = at[side],
				isShift = type === SHIFT,
				myLength = mySide === side1 ? elemLength : mySide === side2 ? -elemLength : -elemLength / 2,
				atLength = atSide === side1 ? targetLength : atSide === side2 ? -targetLength : -targetLength / 2,
				sideOffset = viewportScroll[side1] + viewportOffset[side1] - (containerStatic ? 0 : containerOffset[side1]),
				overflow1 = sideOffset - initialPos,
				overflow2 = initialPos + elemLength - (lengthName === WIDTH ? viewportWidth : viewportHeight) - sideOffset,
				offset = myLength - (my.precedance === side || mySide === my[otherSide] ? atLength : 0) - (atSide === CENTER ? targetLength / 2 : 0);
	
			// shift
			if(isShift) {
				offset = (mySide === side1 ? 1 : -1) * myLength;
	
				// Adjust position but keep it within viewport dimensions
				position[side1] += overflow1 > 0 ? overflow1 : overflow2 > 0 ? -overflow2 : 0;
				position[side1] = Math.max(
					-containerOffset[side1] + viewportOffset[side1],
					initialPos - offset,
					Math.min(
						Math.max(
							-containerOffset[side1] + viewportOffset[side1] + (lengthName === WIDTH ? viewportWidth : viewportHeight),
							initialPos + offset
						),
						position[side1],
	
						// Make sure we don't adjust complete off the element when using 'center'
						mySide === 'center' ? initialPos - myLength : 1E9
					)
				);
	
			}
	
			// flip/flipinvert
			else {
				// Update adjustment amount depending on if using flipinvert or flip
				adjustment *= type === FLIPINVERT ? 2 : 0;
	
				// Check for overflow on the left/top
				if(overflow1 > 0 && (mySide !== side1 || overflow2 > 0)) {
					position[side1] -= offset + adjustment;
					newMy.invert(side, side1);
				}
	
				// Check for overflow on the bottom/right
				else if(overflow2 > 0 && (mySide !== side2 || overflow1 > 0)  ) {
					position[side1] -= (mySide === CENTER ? -offset : offset) + adjustment;
					newMy.invert(side, side2);
				}
	
				// Make sure we haven't made things worse with the adjustment and reset if so
				if(position[side1] < viewportScroll[side1] && -position[side1] > overflow2) {
					position[side1] = initialPos; newMy = my.clone();
				}
			}
	
			return position[side1] - initialPos;
		}
	
		// Set newMy if using flip or flipinvert methods
		if(methodX !== 'shift' || methodY !== 'shift') { newMy = my.clone(); }
	
		// Adjust position based onviewport and adjustment options
		adjusted = {
			left: methodX !== 'none' ? calculate( X, Y, methodX, adjust.x, LEFT, RIGHT, WIDTH, targetWidth, elemWidth ) : 0,
			top: methodY !== 'none' ? calculate( Y, X, methodY, adjust.y, TOP, BOTTOM, HEIGHT, targetHeight, elemHeight ) : 0,
			my: newMy
		};
	
		return adjusted;
	};
	;PLUGINS.polys = {
		// POLY area coordinate calculator
		//	Special thanks to Ed Cradock for helping out with this.
		//	Uses a binary search algorithm to find suitable coordinates.
		polygon: function(baseCoords, corner) {
			var result = {
				width: 0, height: 0,
				position: {
					top: 1e10, right: 0,
					bottom: 0, left: 1e10
				},
				adjustable: FALSE
			},
			i = 0, next,
			coords = [],
			compareX = 1, compareY = 1,
			realX = 0, realY = 0,
			newWidth, newHeight;
	
			// First pass, sanitize coords and determine outer edges
			i = baseCoords.length; 
			while(i--) {
				next = [ parseInt(baseCoords[--i], 10), parseInt(baseCoords[i+1], 10) ];
	
				if(next[0] > result.position.right){ result.position.right = next[0]; }
				if(next[0] < result.position.left){ result.position.left = next[0]; }
				if(next[1] > result.position.bottom){ result.position.bottom = next[1]; }
				if(next[1] < result.position.top){ result.position.top = next[1]; }
	
				coords.push(next);
			}
	
			// Calculate height and width from outer edges
			newWidth = result.width = Math.abs(result.position.right - result.position.left);
			newHeight = result.height = Math.abs(result.position.bottom - result.position.top);
	
			// If it's the center corner...
			if(corner.abbrev() === 'c') {
				result.position = {
					left: result.position.left + result.width / 2,
					top: result.position.top + result.height / 2
				};
			}
			else {
				// Second pass, use a binary search algorithm to locate most suitable coordinate
				while(newWidth > 0 && newHeight > 0 && compareX > 0 && compareY > 0)
				{
					newWidth = Math.floor(newWidth / 2);
					newHeight = Math.floor(newHeight / 2);
	
					if(corner.x === LEFT){ compareX = newWidth; }
					else if(corner.x === RIGHT){ compareX = result.width - newWidth; }
					else{ compareX += Math.floor(newWidth / 2); }
	
					if(corner.y === TOP){ compareY = newHeight; }
					else if(corner.y === BOTTOM){ compareY = result.height - newHeight; }
					else{ compareY += Math.floor(newHeight / 2); }
	
					i = coords.length;
					while(i--)
					{
						if(coords.length < 2){ break; }
	
						realX = coords[i][0] - result.position.left;
						realY = coords[i][1] - result.position.top;
	
						if(
							corner.x === LEFT && realX >= compareX ||
							corner.x === RIGHT && realX <= compareX ||
							corner.x === CENTER && (realX < compareX || realX > result.width - compareX) ||
							corner.y === TOP && realY >= compareY ||
							corner.y === BOTTOM && realY <= compareY ||
							corner.y === CENTER && (realY < compareY || realY > result.height - compareY)) {
							coords.splice(i, 1);
						}
					}
				}
				result.position = { left: coords[0][0], top: coords[0][1] };
			}
	
			return result;
		},
	
		rect: function(ax, ay, bx, by) {
			return {
				width: Math.abs(bx - ax),
				height: Math.abs(by - ay),
				position: {
					left: Math.min(ax, bx),
					top: Math.min(ay, by)
				}
			};
		},
	
		_angles: {
			tc: 3 / 2, tr: 7 / 4, tl: 5 / 4,
			bc: 1 / 2, br: 1 / 4, bl: 3 / 4,
			rc: 2, lc: 1, c: 0
		},
		ellipse: function(cx, cy, rx, ry, corner) {
			var c = PLUGINS.polys._angles[ corner.abbrev() ],
				rxc = c === 0 ? 0 : rx * Math.cos( c * Math.PI ),
				rys = ry * Math.sin( c * Math.PI );
	
			return {
				width: rx * 2 - Math.abs(rxc),
				height: ry * 2 - Math.abs(rys),
				position: {
					left: cx + rxc,
					top: cy + rys
				},
				adjustable: FALSE
			};
		},
		circle: function(cx, cy, r, corner) {
			return PLUGINS.polys.ellipse(cx, cy, r, r, corner);
		}
	};
	;PLUGINS.svg = function(api, svg, corner)
	{
		var elem = svg[0],
			root = $(elem.ownerSVGElement),
			ownerDocument = elem.ownerDocument,
			strokeWidth2 = (parseInt(svg.css('stroke-width'), 10) || 0) / 2,
			frameOffset, mtx, transformed,
			len, next, i, points,
			result, position;
	
		// Ascend the parentNode chain until we find an element with getBBox()
		while(!elem.getBBox) { elem = elem.parentNode; }
		if(!elem.getBBox || !elem.parentNode) { return FALSE; }
	
		// Determine which shape calculation to use
		switch(elem.nodeName) {
			case 'ellipse':
			case 'circle':
				result = PLUGINS.polys.ellipse(
					elem.cx.baseVal.value,
					elem.cy.baseVal.value,
					(elem.rx || elem.r).baseVal.value + strokeWidth2,
					(elem.ry || elem.r).baseVal.value + strokeWidth2,
					corner
				);
			break;
	
			case 'line':
			case 'polygon':
			case 'polyline':
				// Determine points object (line has none, so mimic using array)
				points = elem.points || [
					{ x: elem.x1.baseVal.value, y: elem.y1.baseVal.value },
					{ x: elem.x2.baseVal.value, y: elem.y2.baseVal.value }
				];
	
				for(result = [], i = -1, len = points.numberOfItems || points.length; ++i < len;) {
					next = points.getItem ? points.getItem(i) : points[i];
					result.push.apply(result, [next.x, next.y]);
				}
	
				result = PLUGINS.polys.polygon(result, corner);
			break;
	
			// Unknown shape or rectangle? Use bounding box
			default:
				result = elem.getBBox();
				result = {
					width: result.width,
					height: result.height,
					position: {
						left: result.x,
						top: result.y
					}
				};
			break;
		}
	
		// Shortcut assignments
		position = result.position;
		root = root[0];
	
		// Convert position into a pixel value
		if(root.createSVGPoint) {
			mtx = elem.getScreenCTM();
			points = root.createSVGPoint();
	
			points.x = position.left;
			points.y = position.top;
			transformed = points.matrixTransform( mtx );
			position.left = transformed.x;
			position.top = transformed.y;
		}
	
		// Check the element is not in a child document, and if so, adjust for frame elements offset
		if(ownerDocument !== document && api.position.target !== 'mouse') {
			frameOffset = $((ownerDocument.defaultView || ownerDocument.parentWindow).frameElement).offset();
			if(frameOffset) {
				position.left += frameOffset.left;
				position.top += frameOffset.top;
			}
		}
	
		// Adjust by scroll offset of owner document
		ownerDocument = $(ownerDocument);
		position.left += ownerDocument.scrollLeft();
		position.top += ownerDocument.scrollTop();
	
		return result;
	};
	;PLUGINS.imagemap = function(api, area, corner)
	{
		if(!area.jquery) { area = $(area); }
	
		var shape = (area.attr('shape') || 'rect').toLowerCase().replace('poly', 'polygon'),
			image = $('img[usemap="#'+area.parent('map').attr('name')+'"]'),
			coordsString = $.trim(area.attr('coords')),
			coordsArray = coordsString.replace(/,$/, '').split(','),
			imageOffset, coords, i, result, len;
	
		// If we can't find the image using the map...
		if(!image.length) { return FALSE; }
	
		// Pass coordinates string if polygon
		if(shape === 'polygon') {
			result = PLUGINS.polys.polygon(coordsArray, corner);
		}
	
		// Otherwise parse the coordinates and pass them as arguments
		else if(PLUGINS.polys[shape]) {
			for(i = -1, len = coordsArray.length, coords = []; ++i < len;) {
				coords.push( parseInt(coordsArray[i], 10) );
			}
	
			result = PLUGINS.polys[shape].apply(
				this, coords.concat(corner)
			);
		}
	
		// If no shapre calculation method was found, return false
		else { return FALSE; }
	
		// Make sure we account for padding and borders on the image
		imageOffset = image.offset();
		imageOffset.left += Math.ceil((image.outerWidth(FALSE) - image.width()) / 2);
		imageOffset.top += Math.ceil((image.outerHeight(FALSE) - image.height()) / 2);
	
		// Add image position to offset coordinates
		result.position.left += imageOffset.left;
		result.position.top += imageOffset.top;
	
		return result;
	};
	;var IE6,
	
	/*
	 * BGIFrame adaption (http://plugins.jquery.com/project/bgiframe)
	 * Special thanks to Brandon Aaron
	 */
	BGIFRAME = '<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';" ' +
		' style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); ' +
			'-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';
	
	function Ie6(api) {
		this._ns = 'ie6';
	
		this.qtip = api;
		this.init(api);
	}
	
	$.extend(Ie6.prototype, {
		_scroll : function() {
			var overlay = this.qtip.elements.overlay;
			overlay && (overlay[0].style.top = $(window).scrollTop() + 'px');
		},
	
		init: function(qtip) {
			var tooltip = qtip.tooltip;
	
			// Create the BGIFrame element if needed
			if($('select, object').length < 1) {
				this.bgiframe = qtip.elements.bgiframe = $(BGIFRAME).appendTo(tooltip);
	
				// Update BGIFrame on tooltip move
				qtip._bind(tooltip, 'tooltipmove', this.adjustBGIFrame, this._ns, this);
			}
	
			// redraw() container for width/height calculations
			this.redrawContainer = $('<div/>', { id: NAMESPACE+'-rcontainer' })
				.appendTo(document.body);
	
			// Fixup modal plugin if present too
			if( qtip.elements.overlay && qtip.elements.overlay.addClass('qtipmodal-ie6fix') ) {
				qtip._bind(window, ['scroll', 'resize'], this._scroll, this._ns, this);
				qtip._bind(tooltip, ['tooltipshow'], this._scroll, this._ns, this);
			}
	
			// Set dimensions
			this.redraw();
		},
	
		adjustBGIFrame: function() {
			var tooltip = this.qtip.tooltip,
				dimensions = {
					height: tooltip.outerHeight(FALSE),
					width: tooltip.outerWidth(FALSE)
				},
				plugin = this.qtip.plugins.tip,
				tip = this.qtip.elements.tip,
				tipAdjust, offset;
	
			// Adjust border offset
			offset = parseInt(tooltip.css('borderLeftWidth'), 10) || 0;
			offset = { left: -offset, top: -offset };
	
			// Adjust for tips plugin
			if(plugin && tip) {
				tipAdjust = plugin.corner.precedance === 'x' ? [WIDTH, LEFT] : [HEIGHT, TOP];
				offset[ tipAdjust[1] ] -= tip[ tipAdjust[0] ]();
			}
	
			// Update bgiframe
			this.bgiframe.css(offset).css(dimensions);
		},
	
		// Max/min width simulator function
		redraw: function() {
			if(this.qtip.rendered < 1 || this.drawing) { return this; }
	
			var tooltip = this.qtip.tooltip,
				style = this.qtip.options.style,
				container = this.qtip.options.position.container,
				perc, width, max, min;
	
			// Set drawing flag
			this.qtip.drawing = 1;
	
			// If tooltip has a set height/width, just set it... like a boss!
			if(style.height) { tooltip.css(HEIGHT, style.height); }
			if(style.width) { tooltip.css(WIDTH, style.width); }
	
			// Simulate max/min width if not set width present...
			else {
				// Reset width and add fluid class
				tooltip.css(WIDTH, '').appendTo(this.redrawContainer);
	
				// Grab our tooltip width (add 1 if odd so we don't get wrapping problems.. huzzah!)
				width = tooltip.width();
				if(width % 2 < 1) { width += 1; }
	
				// Grab our max/min properties
				max = tooltip.css('maxWidth') || '';
				min = tooltip.css('minWidth') || '';
	
				// Parse into proper pixel values
				perc = (max + min).indexOf('%') > -1 ? container.width() / 100 : 0;
				max = (max.indexOf('%') > -1 ? perc : 1 * parseInt(max, 10)) || width;
				min = (min.indexOf('%') > -1 ? perc : 1 * parseInt(min, 10)) || 0;
	
				// Determine new dimension size based on max/min/current values
				width = max + min ? Math.min(Math.max(width, min), max) : width;
	
				// Set the newly calculated width and remvoe fluid class
				tooltip.css(WIDTH, Math.round(width)).appendTo(container);
			}
	
			// Set drawing flag
			this.drawing = 0;
	
			return this;
		},
	
		destroy: function() {
			// Remove iframe
			this.bgiframe && this.bgiframe.remove();
	
			// Remove bound events
			this.qtip._unbind([window, this.qtip.tooltip], this._ns);
		}
	});
	
	IE6 = PLUGINS.ie6 = function(api) {
		// Proceed only if the browser is IE6
		return BROWSER.ie === 6 ? new Ie6(api) : FALSE;
	};
	
	IE6.initialize = 'render';
	
	CHECKS.ie6 = {
		'^content|style$': function() {
			this.redraw();
		}
	};
	;}));
	}( window, document ));


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Cookie Plugin v1.4.1
	 * https://github.com/carhartl/jquery-cookie
	 *
	 * Copyright 2013 Klaus Hartl
	 * Released under the MIT license
	 */
	(function (factory) {
		if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(312)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			// CommonJS
			factory(require('jquery'));
		} else {
			// Browser globals
			factory(jQuery);
		}
	}(function ($) {
	
		var pluses = /\+/g;
	
		function encode(s) {
			return config.raw ? s : encodeURIComponent(s);
		}
	
		function decode(s) {
			return config.raw ? s : decodeURIComponent(s);
		}
	
		function stringifyCookieValue(value) {
			return encode(config.json ? JSON.stringify(value) : String(value));
		}
	
		function parseCookieValue(s) {
			if (s.indexOf('"') === 0) {
				// This is a quoted cookie as according to RFC2068, unescape...
				s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
			}
	
			try {
				// Replace server-side written pluses with spaces.
				// If we can't decode the cookie, ignore it, it's unusable.
				// If we can't parse the cookie, ignore it, it's unusable.
				s = decodeURIComponent(s.replace(pluses, ' '));
				return config.json ? JSON.parse(s) : s;
			} catch(e) {}
		}
	
		function read(s, converter) {
			var value = config.raw ? s : parseCookieValue(s);
			return $.isFunction(converter) ? converter(value) : value;
		}
	
		var config = $.cookie = function (key, value, options) {
	
			// Write
	
			if (value !== undefined && !$.isFunction(value)) {
				options = $.extend({}, config.defaults, options);
	
				if (typeof options.expires === 'number') {
					var days = options.expires, t = options.expires = new Date();
					t.setTime(+t + days * 864e+5);
				}
	
				return (document.cookie = [
					encode(key), '=', stringifyCookieValue(value),
					options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
					options.path    ? '; path=' + options.path : '',
					options.domain  ? '; domain=' + options.domain : '',
					options.secure  ? '; secure' : ''
				].join(''));
			}
	
			// Read
	
			var result = key ? undefined : {};
	
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling $.cookie().
			var cookies = document.cookie ? document.cookie.split('; ') : [];
	
			for (var i = 0, l = cookies.length; i < l; i++) {
				var parts = cookies[i].split('=');
				var name = decode(parts.shift());
				var cookie = parts.join('=');
	
				if (key && key === name) {
					// If second argument (value) is a function it's a converter...
					result = read(cookie, value);
					break;
				}
	
				// Prevent storing a cookie that we couldn't decode.
				if (!key && (cookie = read(cookie)) !== undefined) {
					result[name] = cookie;
				}
			}
	
			return result;
		};
	
		config.defaults = {};
	
		$.removeCookie = function (key, options) {
			if ($.cookie(key) === undefined) {
				return false;
			}
	
			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return !$.cookie(key);
		};
	
	}));


/***/ },
/* 343 */
/***/ function(module, exports) {

	
	//Copyright 2014-2015 Google Inc. All rights reserved.
	
	//Use of this source code is governed by a BSD-style
	//license that can be found in the LICENSE file or at
	//https://developers.google.com/open-source/licenses/bsd
	
	/**
	 * @fileoverview The U2F api.
	 */
	'use strict';
	
	(function (){
	  if ('u2f' in window || !('chrome' in window)) {
	    return;
	  }
	
	  /** Namespace for the U2F api.
	   * @type {Object}
	   */
	  var u2f = window.u2f = {};
	
	  /**
	   * FIDO U2F Javascript API Version
	   * @number
	   */
	  var js_api_version;
	
	  /**
	   * The U2F extension id
	   * @const {string}
	   */
	  // The Chrome packaged app extension ID.
	  // Uncomment this if you want to deploy a server instance that uses
	  // the package Chrome app and does not require installing the U2F Chrome extension.
	   u2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';
	  // The U2F Chrome extension ID.
	  // Uncomment this if you want to deploy a server instance that uses
	  // the U2F Chrome extension to authenticate.
	  // u2f.EXTENSION_ID = 'pfboblefjcgdjicmnffhdgionmgcdmne';
	
	
	  /**
	   * Message types for messsages to/from the extension
	   * @const
	   * @enum {string}
	   */
	  u2f.MessageTypes = {
	      'U2F_REGISTER_REQUEST': 'u2f_register_request',
	      'U2F_REGISTER_RESPONSE': 'u2f_register_response',
	      'U2F_SIGN_REQUEST': 'u2f_sign_request',
	      'U2F_SIGN_RESPONSE': 'u2f_sign_response',
	      'U2F_GET_API_VERSION_REQUEST': 'u2f_get_api_version_request',
	      'U2F_GET_API_VERSION_RESPONSE': 'u2f_get_api_version_response'
	  };
	
	
	  /**
	   * Response status codes
	   * @const
	   * @enum {number}
	   */
	  u2f.ErrorCodes = {
	      'OK': 0,
	      'OTHER_ERROR': 1,
	      'BAD_REQUEST': 2,
	      'CONFIGURATION_UNSUPPORTED': 3,
	      'DEVICE_INELIGIBLE': 4,
	      'TIMEOUT': 5
	  };
	
	
	  /**
	   * A message for registration requests
	   * @typedef {{
	   *   type: u2f.MessageTypes,
	   *   appId: ?string,
	   *   timeoutSeconds: ?number,
	   *   requestId: ?number
	   * }}
	   */
	  u2f.U2fRequest;
	
	
	  /**
	   * A message for registration responses
	   * @typedef {{
	   *   type: u2f.MessageTypes,
	   *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),
	   *   requestId: ?number
	   * }}
	   */
	  u2f.U2fResponse;
	
	
	  /**
	   * An error object for responses
	   * @typedef {{
	   *   errorCode: u2f.ErrorCodes,
	   *   errorMessage: ?string
	   * }}
	   */
	  u2f.Error;
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {enum {BLUETOOTH_RADIO, BLUETOOTH_LOW_ENERGY, USB, NFC}}
	   */
	  u2f.Transport;
	
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {Array<u2f.Transport>}
	   */
	  u2f.Transports;
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {{
	   *   version: string,
	   *   challenge: string,
	   *   keyHandle: string,
	   *   appId: string
	   * }}
	   */
	  u2f.SignRequest;
	
	
	  /**
	   * Data object for a sign response.
	   * @typedef {{
	   *   keyHandle: string,
	   *   signatureData: string,
	   *   clientData: string
	   * }}
	   */
	  u2f.SignResponse;
	
	
	  /**
	   * Data object for a registration request.
	   * @typedef {{
	   *   version: string,
	   *   challenge: string
	   * }}
	   */
	  u2f.RegisterRequest;
	
	
	  /**
	   * Data object for a registration response.
	   * @typedef {{
	   *   version: string,
	   *   keyHandle: string,
	   *   transports: Transports,
	   *   appId: string
	   * }}
	   */
	  u2f.RegisterResponse;
	
	
	  /**
	   * Data object for a registered key.
	   * @typedef {{
	   *   version: string,
	   *   keyHandle: string,
	   *   transports: ?Transports,
	   *   appId: ?string
	   * }}
	   */
	  u2f.RegisteredKey;
	
	
	  /**
	   * Data object for a get API register response.
	   * @typedef {{
	   *   js_api_version: number
	   * }}
	   */
	  u2f.GetJsApiVersionResponse;
	
	
	  //Low level MessagePort API support
	
	  /**
	   * Sets up a MessagePort to the U2F extension using the
	   * available mechanisms.
	   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	   */
	  u2f.getMessagePort = function(callback) {
	    if (typeof chrome != 'undefined' && chrome.runtime) {
	      // The actual message here does not matter, but we need to get a reply
	      // for the callback to run. Thus, send an empty signature request
	      // in order to get a failure response.
	      var msg = {
	          type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	          signRequests: []
	      };
	      chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {
	        if (!chrome.runtime.lastError) {
	          // We are on a whitelisted origin and can talk directly
	          // with the extension.
	          u2f.getChromeRuntimePort_(callback);
	        } else {
	          // chrome.runtime was available, but we couldn't message
	          // the extension directly, use iframe
	          u2f.getIframePort_(callback);
	        }
	      });
	    } else if (u2f.isAndroidChrome_()) {
	      u2f.getAuthenticatorPort_(callback);
	    } else if (u2f.isIosChrome_()) {
	      u2f.getIosPort_(callback);
	    } else {
	      // chrome.runtime was not available at all, which is normal
	      // when this origin doesn't have access to any extensions.
	      u2f.getIframePort_(callback);
	    }
	  };
	
	  /**
	   * Detect chrome running on android based on the browser's useragent.
	   * @private
	   */
	  u2f.isAndroidChrome_ = function() {
	    var userAgent = navigator.userAgent;
	    return userAgent.indexOf('Chrome') != -1 &&
	    userAgent.indexOf('Android') != -1;
	  };
	
	  /**
	   * Detect chrome running on iOS based on the browser's platform.
	   * @private
	   */
	  u2f.isIosChrome_ = function() {
	    return $.inArray(navigator.platform, ["iPhone", "iPad", "iPod"]) > -1;
	  };
	
	  /**
	   * Connects directly to the extension via chrome.runtime.connect.
	   * @param {function(u2f.WrappedChromeRuntimePort_)} callback
	   * @private
	   */
	  u2f.getChromeRuntimePort_ = function(callback) {
	    var port = chrome.runtime.connect(u2f.EXTENSION_ID,
	        {'includeTlsChannelId': true});
	    setTimeout(function() {
	      callback(new u2f.WrappedChromeRuntimePort_(port));
	    }, 0);
	  };
	
	  /**
	   * Return a 'port' abstraction to the Authenticator app.
	   * @param {function(u2f.WrappedAuthenticatorPort_)} callback
	   * @private
	   */
	  u2f.getAuthenticatorPort_ = function(callback) {
	    setTimeout(function() {
	      callback(new u2f.WrappedAuthenticatorPort_());
	    }, 0);
	  };
	
	  /**
	   * Return a 'port' abstraction to the iOS client app.
	   * @param {function(u2f.WrappedIosPort_)} callback
	   * @private
	   */
	  u2f.getIosPort_ = function(callback) {
	    setTimeout(function() {
	      callback(new u2f.WrappedIosPort_());
	    }, 0);
	  };
	
	  /**
	   * A wrapper for chrome.runtime.Port that is compatible with MessagePort.
	   * @param {Port} port
	   * @constructor
	   * @private
	   */
	  u2f.WrappedChromeRuntimePort_ = function(port) {
	    this.port_ = port;
	  };
	
	  /**
	   * Format and return a sign request compliant with the JS API version supported by the extension.
	   * @param {Array<u2f.SignRequest>} signRequests
	   * @param {number} timeoutSeconds
	   * @param {number} reqId
	   * @return {Object}
	   */
	  u2f.formatSignRequest_ =
	    function(appId, challenge, registeredKeys, timeoutSeconds, reqId) {
	    if (js_api_version === undefined || js_api_version < 1.1) {
	      // Adapt request to the 1.0 JS API
	      var signRequests = [];
	      for (var i = 0; i < registeredKeys.length; i++) {
	        signRequests[i] = {
	            version: registeredKeys[i].version,
	            challenge: challenge,
	            keyHandle: registeredKeys[i].keyHandle,
	            appId: appId
	        };
	      }
	      return {
	        type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	        signRequests: signRequests,
	        timeoutSeconds: timeoutSeconds,
	        requestId: reqId
	      };
	    }
	    // JS 1.1 API
	    return {
	      type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	      appId: appId,
	      challenge: challenge,
	      registeredKeys: registeredKeys,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  };
	
	  /**
	   * Format and return a register request compliant with the JS API version supported by the extension..
	   * @param {Array<u2f.SignRequest>} signRequests
	   * @param {Array<u2f.RegisterRequest>} signRequests
	   * @param {number} timeoutSeconds
	   * @param {number} reqId
	   * @return {Object}
	   */
	  u2f.formatRegisterRequest_ =
	    function(appId, registeredKeys, registerRequests, timeoutSeconds, reqId) {
	    if (js_api_version === undefined || js_api_version < 1.1) {
	      // Adapt request to the 1.0 JS API
	      for (var i = 0; i < registerRequests.length; i++) {
	        registerRequests[i].appId = appId;
	      }
	      var signRequests = [];
	      for (var i = 0; i < registeredKeys.length; i++) {
	        signRequests[i] = {
	            version: registeredKeys[i].version,
	            challenge: registerRequests[0],
	            keyHandle: registeredKeys[i].keyHandle,
	            appId: appId
	        };
	      }
	      return {
	        type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	        signRequests: signRequests,
	        registerRequests: registerRequests,
	        timeoutSeconds: timeoutSeconds,
	        requestId: reqId
	      };
	    }
	    // JS 1.1 API
	    return {
	      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	      appId: appId,
	      registerRequests: registerRequests,
	      registeredKeys: registeredKeys,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  };
	
	
	  /**
	   * Posts a message on the underlying channel.
	   * @param {Object} message
	   */
	  u2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {
	    this.port_.postMessage(message);
	  };
	
	
	  /**
	   * Emulates the HTML 5 addEventListener interface. Works only for the
	   * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedChromeRuntimePort_.prototype.addEventListener =
	      function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name == 'message' || name == 'onmessage') {
	      this.port_.onMessage.addListener(function(message) {
	        // Emulate a minimal MessageEvent object
	        handler({'data': message});
	      });
	    } else {
	      console.error('WrappedChromeRuntimePort only supports onMessage');
	    }
	  };
	
	  /**
	   * Wrap the Authenticator app with a MessagePort interface.
	   * @constructor
	   * @private
	   */
	  u2f.WrappedAuthenticatorPort_ = function() {
	    this.requestId_ = -1;
	    this.requestObject_ = null;
	  }
	
	  /**
	   * Launch the Authenticator intent.
	   * @param {Object} message
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.postMessage = function(message) {
	    var intentUrl =
	      u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ +
	      ';S.request=' + encodeURIComponent(JSON.stringify(message)) +
	      ';end';
	    document.location = intentUrl;
	  };
	
	  /**
	   * Tells what type of port this is.
	   * @return {String} port type
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.getPortType = function() {
	    return "WrappedAuthenticatorPort_";
	  };
	
	
	  /**
	   * Emulates the HTML 5 addEventListener interface.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.addEventListener = function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name == 'message') {
	      var self = this;
	      /* Register a callback to that executes when
	       * chrome injects the response. */
	      window.addEventListener(
	          'message', self.onRequestUpdate_.bind(self, handler), false);
	    } else {
	      console.error('WrappedAuthenticatorPort only supports message');
	    }
	  };
	
	  /**
	   * Callback invoked  when a response is received from the Authenticator.
	   * @param function({data: Object}) callback
	   * @param {Object} message message Object
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.onRequestUpdate_ =
	      function(callback, message) {
	    var messageObject = JSON.parse(message.data);
	    var intentUrl = messageObject['intentURL'];
	
	    var errorCode = messageObject['errorCode'];
	    var responseObject = null;
	    if (messageObject.hasOwnProperty('data')) {
	      responseObject = /** @type {Object} */ (
	          JSON.parse(messageObject['data']));
	    }
	
	    callback({'data': responseObject});
	  };
	
	  /**
	   * Base URL for intents to Authenticator.
	   * @const
	   * @private
	   */
	  u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ =
	    'intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE';
	
	  /**
	   * Wrap the iOS client app with a MessagePort interface.
	   * @constructor
	   * @private
	   */
	  u2f.WrappedIosPort_ = function() {};
	
	  /**
	   * Launch the iOS client app request
	   * @param {Object} message
	   */
	  u2f.WrappedIosPort_.prototype.postMessage = function(message) {
	    var str = JSON.stringify(message);
	    var url = "u2f://auth?" + encodeURI(str);
	    location.replace(url);
	  };
	
	  /**
	   * Tells what type of port this is.
	   * @return {String} port type
	   */
	  u2f.WrappedIosPort_.prototype.getPortType = function() {
	    return "WrappedIosPort_";
	  };
	
	  /**
	   * Emulates the HTML 5 addEventListener interface.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedIosPort_.prototype.addEventListener = function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name !== 'message') {
	      console.error('WrappedIosPort only supports message');
	    }
	  };
	
	  /**
	   * Sets up an embedded trampoline iframe, sourced from the extension.
	   * @param {function(MessagePort)} callback
	   * @private
	   */
	  u2f.getIframePort_ = function(callback) {
	    // Create the iframe
	    var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;
	    var iframe = document.createElement('iframe');
	    iframe.src = iframeOrigin + '/u2f-comms.html';
	    iframe.setAttribute('style', 'display:none');
	    document.body.appendChild(iframe);
	
	    var channel = new MessageChannel();
	    var ready = function(message) {
	      if (message.data == 'ready') {
	        channel.port1.removeEventListener('message', ready);
	        callback(channel.port1);
	      } else {
	        console.error('First event on iframe port was not "ready"');
	      }
	    };
	    channel.port1.addEventListener('message', ready);
	    channel.port1.start();
	
	    iframe.addEventListener('load', function() {
	      // Deliver the port to the iframe and initialize
	      iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);
	    });
	  };
	
	
	  //High-level JS API
	
	  /**
	   * Default extension response timeout in seconds.
	   * @const
	   */
	  u2f.EXTENSION_TIMEOUT_SEC = 30;
	
	  /**
	   * A singleton instance for a MessagePort to the extension.
	   * @type {MessagePort|u2f.WrappedChromeRuntimePort_}
	   * @private
	   */
	  u2f.port_ = null;
	
	  /**
	   * Callbacks waiting for a port
	   * @type {Array<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}
	   * @private
	   */
	  u2f.waitingForPort_ = [];
	
	  /**
	   * A counter for requestIds.
	   * @type {number}
	   * @private
	   */
	  u2f.reqCounter_ = 0;
	
	  /**
	   * A map from requestIds to client callbacks
	   * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))
	   *                       |function((u2f.Error|u2f.SignResponse)))>}
	   * @private
	   */
	  u2f.callbackMap_ = {};
	
	  /**
	   * Creates or retrieves the MessagePort singleton to use.
	   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	   * @private
	   */
	  u2f.getPortSingleton_ = function(callback) {
	    if (u2f.port_) {
	      callback(u2f.port_);
	    } else {
	      if (u2f.waitingForPort_.length == 0) {
	        u2f.getMessagePort(function(port) {
	          u2f.port_ = port;
	          u2f.port_.addEventListener('message',
	              /** @type {function(Event)} */ (u2f.responseHandler_));
	
	          // Careful, here be async callbacks. Maybe.
	          while (u2f.waitingForPort_.length)
	            u2f.waitingForPort_.shift()(u2f.port_);
	        });
	      }
	      u2f.waitingForPort_.push(callback);
	    }
	  };
	
	  /**
	   * Handles response messages from the extension.
	   * @param {MessageEvent.<u2f.Response>} message
	   * @private
	   */
	  u2f.responseHandler_ = function(message) {
	    var response = message.data;
	    var reqId = response['requestId'];
	    if (!reqId || !u2f.callbackMap_[reqId]) {
	      console.error('Unknown or missing requestId in response.');
	      return;
	    }
	    var cb = u2f.callbackMap_[reqId];
	    delete u2f.callbackMap_[reqId];
	    cb(response['responseData']);
	  };
	
	  /**
	   * Dispatches an array of sign requests to available U2F tokens.
	   * If the JS API version supported by the extension is unknown, it first sends a
	   * message to the extension to find out the supported API version and then it sends
	   * the sign request.
	   * @param {string=} appId
	   * @param {string=} challenge
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.SignResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sign = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	    if (js_api_version === undefined) {
	      // Send a message to get the extension to JS API version, then send the actual sign request.
	      u2f.getApiVersion(
	          function (response) {
	            js_api_version = response['js_api_version'] === undefined ? 0 : response['js_api_version'];
	            console.log("Extension JS API Version: ", js_api_version);
	            u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	          });
	    } else {
	      // We know the JS API version. Send the actual sign request in the supported API version.
	      u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	    }
	  };
	
	  /**
	   * Dispatches an array of sign requests to available U2F tokens.
	   * @param {string=} appId
	   * @param {string=} challenge
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.SignResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sendSignRequest = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	    u2f.getPortSingleton_(function(port) {
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
	          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
	      var req = u2f.formatSignRequest_(appId, challenge, registeredKeys, timeoutSeconds, reqId);
	      port.postMessage(req);
	    });
	  };
	
	  /**
	   * Dispatches register requests to available U2F tokens. An array of sign
	   * requests identifies already registered tokens.
	   * If the JS API version supported by the extension is unknown, it first sends a
	   * message to the extension to find out the supported API version and then it sends
	   * the register request.
	   * @param {string=} appId
	   * @param {Array<u2f.RegisterRequest>} registerRequests
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.register = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	    if (js_api_version === undefined) {
	      // Send a message to get the extension to JS API version, then send the actual register request.
	      u2f.getApiVersion(
	          function (response) {
	            js_api_version = response['js_api_version'] === undefined ? 0: response['js_api_version'];
	            console.log("Extension JS API Version: ", js_api_version);
	            u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
	                callback, opt_timeoutSeconds);
	          });
	    } else {
	      // We know the JS API version. Send the actual register request in the supported API version.
	      u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
	          callback, opt_timeoutSeconds);
	    }
	  };
	
	  /**
	   * Dispatches register requests to available U2F tokens. An array of sign
	   * requests identifies already registered tokens.
	   * @param {string=} appId
	   * @param {Array<u2f.RegisterRequest>} registerRequests
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sendRegisterRequest = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	    u2f.getPortSingleton_(function(port) {
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
	          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
	      var req = u2f.formatRegisterRequest_(
	          appId, registeredKeys, registerRequests, timeoutSeconds, reqId);
	      port.postMessage(req);
	    });
	  };
	
	
	  /**
	   * Dispatches a message to the extension to find out the supported
	   * JS API version.
	   * If the user is on a mobile phone and is thus using Google Authenticator instead
	   * of the Chrome extension, don't send the request and simply return 0.
	   * @param {function((u2f.Error|u2f.GetJsApiVersionResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.getApiVersion = function(callback, opt_timeoutSeconds) {
	   u2f.getPortSingleton_(function(port) {
	     // If we are using Android Google Authenticator or iOS client app,
	     // do not fire an intent to ask which JS API version to use.
	     if (port.getPortType) {
	       var apiVersion;
	       switch (port.getPortType()) {
	         case 'WrappedIosPort_':
	         case 'WrappedAuthenticatorPort_':
	           apiVersion = 1.1;
	           break;
	
	         default:
	           apiVersion = 0;
	           break;
	       }
	       callback({ 'js_api_version': apiVersion });
	       return;
	     }
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var req = {
	        type: u2f.MessageTypes.U2F_GET_API_VERSION_REQUEST,
	        timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?
	            opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),
	        requestId: reqId
	      };
	      port.postMessage(req);
	    });
	  };
	})();


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(299);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(301);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _profile = __webpack_require__(345);
	
	var _profile2 = _interopRequireDefault(_profile);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var profile = _angular2.default.module('authorizationCode.profile', [_angularUiRouter2.default]).component('profile', _profile2.default).config(function ($stateProvider, $urlRouterProvider) {
	  $stateProvider.state('authorization-code/profile', {
	    url: '/authorization-code/profile',
	    component: 'profile'
	  });
	  $urlRouterProvider.otherwise('/');
	}).name; /*!
	          * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	          * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	          *
	          * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	          * Unless required by applicable law or agreed to in writing, software
	          * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	          * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	          *
	          * See the License for the specific language governing permissions and limitations under the License.
	          */
	
	exports.default = profile;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _profile = __webpack_require__(346);
	
	var _profile2 = _interopRequireDefault(_profile);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ProfileComponent = {
	  controller: _profile2.default,
	  template: '\n    <div class="profile">\n      <h2 class="ui icon header">\n        <i class="hand peace icon"></i>\n        <div class="content">\n          Signed In\n        </div>\n      </h2>\n      <table class="ui collapsing celled table inverted black">\n        <thead>\n          <tr>\n            <th colspan="2">Some claims from the id_token</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr><td>email</td><td data-se="email">{{$ctrl.email}}</td></tr>\n          <tr><td>exp</td><td>{{$ctrl.expFormatted}}</td></tr>\n        </tbody>\n      </table>\n      <p>\n        <button\n          id="logout"\n          data-se="logout-link"\n          ng-click="$ctrl.logout()"\n          class="ui grey icon button">\n          <i class="sign out icon"></i>\n          Sign out\n        </button>\n      </p>\n    </div>\n  '
	}; /*!
	    * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	    *
	    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	    * Unless required by applicable law or agreed to in writing, software
	    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	    *
	    * See the License for the specific language governing permissions and limitations under the License.
	    */
	
	exports.default = ProfileComponent;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!
	opyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	he Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	
	ou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	nless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	either express or implied.
	
	ee the License for the specific language governing permissions and limitations under the License.
	
	
	var _jquery = __webpack_require__(310);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ProfileController = function () {
	  function ProfileController(config) {
	    _classCallCheck(this, ProfileController);
	
	    this.user = config.user;
	    this.oktaUrl = config.oktaUrl;
	  }
	
	  _createClass(ProfileController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      this.email = this.user.email;
	      this.iat = this.user.iat;
	      this.iatFormatted = new Date(this.user.iat * 1000);
	      this.exp = this.user.exp;
	      this.expFormatted = new Date(this.user.exp * 1000);
	      this.authClient = new _jquery2.default({ url: this.oktaUrl });
	    }
	  }, {
	    key: 'logout',
	    value: function logout() {
	      this.authClient.session.close().then(function () {
	        window.location = '/authorization-code/logout';
	      });
	    }
	  }]);
	
	  return ProfileController;
	}();
	
	exports.default = ProfileController;

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map